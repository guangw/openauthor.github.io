{
  "Namespaces": [
    {
      "AllowedMemberTypes": [
        2,
        3,
        4,
        5,
        6
      ],
      "Id": "N:Microsoft.Cci",
      "Parent": "Microsoft.CodeAnalysis",
      "XmlDocumentation": ""
    },
    {
      "Classes": [
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Text.SourceText": ""
                },
                "Content": "public abstract SourceText GetText(CancellationToken cancellationToken = default (CancellationToken));",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AdditionalText.GetText(System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Retrieves a <see cref=\"T:Microsoft.CodeAnalysis.Text.SourceText\"/> with the contents of this file.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 21
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Text.SourceText": ""
                },
                "Content": "public abstract SourceText GetText(CancellationToken cancellationToken = default (CancellationToken));",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AdditionalText.GetText(System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Retrieves a <see cref=\"T:Microsoft.CodeAnalysis.Text.SourceText\"/> with the contents of this file.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 21
              },
              "Id": "M:Microsoft.CodeAnalysis.AdditionalText.GetText(System.Threading.CancellationToken)",
              "Parent": "T:Microsoft.CodeAnalysis.AdditionalText",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AdditionalText.GetText(System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Retrieves a <see cref=\"T:Microsoft.CodeAnalysis.Text.SourceText\"/> with the contents of this file.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:System.String",
                "Content": "public abstract string Path",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.AdditionalText.Path\">\r\n    <summary>\r\n    Path to the text.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 16
              },
              "Syntax": {
                "PropertyType": "T:System.String",
                "Content": "public abstract string Path",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.AdditionalText.Path\">\r\n    <summary>\r\n    Path to the text.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 16
              },
              "Id": "P:Microsoft.CodeAnalysis.AdditionalText.Path",
              "Parent": "T:Microsoft.CodeAnalysis.AdditionalText",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.AdditionalText.Path\">\r\n    <summary>\r\n    Path to the text.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\DiagnosticAnalyzer\\AdditionalText.cs",
          "InheritanceHierarchy": [
            "T:System.Object"
          ],
          "Syntax": {
            "Content": "public abstract class AdditionalText",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.AdditionalText\">\r\n    <summary>\r\n    Represents a non source code file.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.AdditionalText",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.AdditionalText\">\r\n    <summary>\r\n    Represents a non source code file.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "!:TNode : node": "",
                  "T:System.Array : annotations": ""
                },
                "Returns": {
                  "!:TNode": ""
                },
                "Content": "public static TNode WithAdditionalAnnotations<TNode>(this TNode node, params SyntaxAnnotation[] annotations)where TNode : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AnnotationExtensions.WithAdditionalAnnotations``1(``0,Microsoft.CodeAnalysis.SyntaxAnnotation[])\">\r\n    <summary>\r\n    Creates a new node identical to this node with the specified annotations attached.\r\n    </summary>\r\n    <param name=\"node\">Original node.</param>\r\n    <param name=\"annotations\">Annotations to be added to the new node.</param>\r\n</member>\r\n",
                "StartLine": 17
              },
              "Syntax": {
                "Parameters": {
                  "!:TNode : node": "",
                  "T:System.Array : annotations": ""
                },
                "Returns": {
                  "!:TNode": ""
                },
                "Content": "public static TNode WithAdditionalAnnotations<TNode>(this TNode node, params SyntaxAnnotation[] annotations)where TNode : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AnnotationExtensions.WithAdditionalAnnotations``1(``0,Microsoft.CodeAnalysis.SyntaxAnnotation[])\">\r\n    <summary>\r\n    Creates a new node identical to this node with the specified annotations attached.\r\n    </summary>\r\n    <param name=\"node\">Original node.</param>\r\n    <param name=\"annotations\">Annotations to be added to the new node.</param>\r\n</member>\r\n",
                "StartLine": 17
              },
              "Id": "M:Microsoft.CodeAnalysis.AnnotationExtensions.WithAdditionalAnnotations``1(``0,Microsoft.CodeAnalysis.SyntaxAnnotation[])",
              "Parent": "T:Microsoft.CodeAnalysis.AnnotationExtensions",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AnnotationExtensions.WithAdditionalAnnotations``1(``0,Microsoft.CodeAnalysis.SyntaxAnnotation[])\">\r\n    <summary>\r\n    Creates a new node identical to this node with the specified annotations attached.\r\n    </summary>\r\n    <param name=\"node\">Original node.</param>\r\n    <param name=\"annotations\">Annotations to be added to the new node.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "!:TNode : node": "",
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation} : annotations": ""
                },
                "Returns": {
                  "!:TNode": ""
                },
                "Content": "public static TNode WithAdditionalAnnotations<TNode>(this TNode node, IEnumerable<SyntaxAnnotation> annotations)where TNode : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AnnotationExtensions.WithAdditionalAnnotations``1(``0,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation})\">\r\n    <summary>\r\n    Creates a new node identical to this node with the specified annotations attached.\r\n    </summary>\r\n    <param name=\"node\">Original node.</param>\r\n    <param name=\"annotations\">Annotations to be added to the new node.</param>\r\n</member>\r\n",
                "StartLine": 28
              },
              "Syntax": {
                "Parameters": {
                  "!:TNode : node": "",
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation} : annotations": ""
                },
                "Returns": {
                  "!:TNode": ""
                },
                "Content": "public static TNode WithAdditionalAnnotations<TNode>(this TNode node, IEnumerable<SyntaxAnnotation> annotations)where TNode : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AnnotationExtensions.WithAdditionalAnnotations``1(``0,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation})\">\r\n    <summary>\r\n    Creates a new node identical to this node with the specified annotations attached.\r\n    </summary>\r\n    <param name=\"node\">Original node.</param>\r\n    <param name=\"annotations\">Annotations to be added to the new node.</param>\r\n</member>\r\n",
                "StartLine": 28
              },
              "Id": "M:Microsoft.CodeAnalysis.AnnotationExtensions.WithAdditionalAnnotations``1(``0,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation})",
              "Parent": "T:Microsoft.CodeAnalysis.AnnotationExtensions",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AnnotationExtensions.WithAdditionalAnnotations``1(``0,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation})\">\r\n    <summary>\r\n    Creates a new node identical to this node with the specified annotations attached.\r\n    </summary>\r\n    <param name=\"node\">Original node.</param>\r\n    <param name=\"annotations\">Annotations to be added to the new node.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "!:TNode : node": "",
                  "T:System.Array : annotations": ""
                },
                "Returns": {
                  "!:TNode": ""
                },
                "Content": "public static TNode WithoutAnnotations<TNode>(this TNode node, params SyntaxAnnotation[] annotations)where TNode : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AnnotationExtensions.WithoutAnnotations``1(``0,Microsoft.CodeAnalysis.SyntaxAnnotation[])\">\r\n    <summary>\r\n    Creates a new node identical to this node with the specified annotations removed.\r\n    </summary>\r\n    <param name=\"node\">Original node.</param>\r\n    <param name=\"annotations\">Annotations to be removed from the new node.</param>\r\n</member>\r\n",
                "StartLine": 39
              },
              "Syntax": {
                "Parameters": {
                  "!:TNode : node": "",
                  "T:System.Array : annotations": ""
                },
                "Returns": {
                  "!:TNode": ""
                },
                "Content": "public static TNode WithoutAnnotations<TNode>(this TNode node, params SyntaxAnnotation[] annotations)where TNode : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AnnotationExtensions.WithoutAnnotations``1(``0,Microsoft.CodeAnalysis.SyntaxAnnotation[])\">\r\n    <summary>\r\n    Creates a new node identical to this node with the specified annotations removed.\r\n    </summary>\r\n    <param name=\"node\">Original node.</param>\r\n    <param name=\"annotations\">Annotations to be removed from the new node.</param>\r\n</member>\r\n",
                "StartLine": 39
              },
              "Id": "M:Microsoft.CodeAnalysis.AnnotationExtensions.WithoutAnnotations``1(``0,Microsoft.CodeAnalysis.SyntaxAnnotation[])",
              "Parent": "T:Microsoft.CodeAnalysis.AnnotationExtensions",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AnnotationExtensions.WithoutAnnotations``1(``0,Microsoft.CodeAnalysis.SyntaxAnnotation[])\">\r\n    <summary>\r\n    Creates a new node identical to this node with the specified annotations removed.\r\n    </summary>\r\n    <param name=\"node\">Original node.</param>\r\n    <param name=\"annotations\">Annotations to be removed from the new node.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "!:TNode : node": "",
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation} : annotations": ""
                },
                "Returns": {
                  "!:TNode": ""
                },
                "Content": "public static TNode WithoutAnnotations<TNode>(this TNode node, IEnumerable<SyntaxAnnotation> annotations)where TNode : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AnnotationExtensions.WithoutAnnotations``1(``0,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation})\">\r\n    <summary>\r\n    Creates a new node identical to this node with the specified annotations removed.\r\n    </summary>\r\n    <param name=\"node\">Original node.</param>\r\n    <param name=\"annotations\">Annotations to be removed from the new node.</param>\r\n</member>\r\n",
                "StartLine": 50
              },
              "Syntax": {
                "Parameters": {
                  "!:TNode : node": "",
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation} : annotations": ""
                },
                "Returns": {
                  "!:TNode": ""
                },
                "Content": "public static TNode WithoutAnnotations<TNode>(this TNode node, IEnumerable<SyntaxAnnotation> annotations)where TNode : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AnnotationExtensions.WithoutAnnotations``1(``0,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation})\">\r\n    <summary>\r\n    Creates a new node identical to this node with the specified annotations removed.\r\n    </summary>\r\n    <param name=\"node\">Original node.</param>\r\n    <param name=\"annotations\">Annotations to be removed from the new node.</param>\r\n</member>\r\n",
                "StartLine": 50
              },
              "Id": "M:Microsoft.CodeAnalysis.AnnotationExtensions.WithoutAnnotations``1(``0,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation})",
              "Parent": "T:Microsoft.CodeAnalysis.AnnotationExtensions",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AnnotationExtensions.WithoutAnnotations``1(``0,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation})\">\r\n    <summary>\r\n    Creates a new node identical to this node with the specified annotations removed.\r\n    </summary>\r\n    <param name=\"node\">Original node.</param>\r\n    <param name=\"annotations\">Annotations to be removed from the new node.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "!:TNode : node": "",
                  "T:System.String : annotationKind": ""
                },
                "Returns": {
                  "!:TNode": ""
                },
                "Content": "public static TNode WithoutAnnotations<TNode>(this TNode node, string annotationKind)where TNode : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AnnotationExtensions.WithoutAnnotations``1(``0,System.String)\">\r\n    <summary>\r\n    Creates a new node identical to this node with the annotions of the specified kind removed.\r\n    </summary>\r\n    <param name=\"node\">Original node.</param>\r\n    <param name=\"annotationKind\">The kind of annotation to remove.</param>\r\n</member>\r\n",
                "StartLine": 61
              },
              "Syntax": {
                "Parameters": {
                  "!:TNode : node": "",
                  "T:System.String : annotationKind": ""
                },
                "Returns": {
                  "!:TNode": ""
                },
                "Content": "public static TNode WithoutAnnotations<TNode>(this TNode node, string annotationKind)where TNode : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AnnotationExtensions.WithoutAnnotations``1(``0,System.String)\">\r\n    <summary>\r\n    Creates a new node identical to this node with the annotions of the specified kind removed.\r\n    </summary>\r\n    <param name=\"node\">Original node.</param>\r\n    <param name=\"annotationKind\">The kind of annotation to remove.</param>\r\n</member>\r\n",
                "StartLine": 61
              },
              "Id": "M:Microsoft.CodeAnalysis.AnnotationExtensions.WithoutAnnotations``1(``0,System.String)",
              "Parent": "T:Microsoft.CodeAnalysis.AnnotationExtensions",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AnnotationExtensions.WithoutAnnotations``1(``0,System.String)\">\r\n    <summary>\r\n    Creates a new node identical to this node with the annotions of the specified kind removed.\r\n    </summary>\r\n    <param name=\"node\">Original node.</param>\r\n    <param name=\"annotationKind\">The kind of annotation to remove.</param>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Syntax\\AnnotationExtensions.cs",
          "InheritanceHierarchy": [
            "T:System.Object"
          ],
          "Syntax": {
            "Content": "public static class AnnotationExtensions",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.CodeAnalysis.AnnotationExtensions",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.AssemblyIdentity : obj": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool Equals(AssemblyIdentity obj)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AssemblyIdentity.Equals(Microsoft.CodeAnalysis.AssemblyIdentity)\">\r\n    <summary>\r\n    Determines whether the specified instance is equal to the current instance.\r\n    </summary>\r\n    <param name=\"obj\">The object to be compared with the current instance.</param>\r\n</member>\r\n",
                "StartLine": 341
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.AssemblyIdentity : obj": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool Equals(AssemblyIdentity obj)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AssemblyIdentity.Equals(Microsoft.CodeAnalysis.AssemblyIdentity)\">\r\n    <summary>\r\n    Determines whether the specified instance is equal to the current instance.\r\n    </summary>\r\n    <param name=\"obj\">The object to be compared with the current instance.</param>\r\n</member>\r\n",
                "StartLine": 341
              },
              "Id": "M:Microsoft.CodeAnalysis.AssemblyIdentity.Equals(Microsoft.CodeAnalysis.AssemblyIdentity)",
              "Parent": "T:Microsoft.CodeAnalysis.AssemblyIdentity",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AssemblyIdentity.Equals(Microsoft.CodeAnalysis.AssemblyIdentity)\">\r\n    <summary>\r\n    Determines whether the specified instance is equal to the current instance.\r\n    </summary>\r\n    <param name=\"obj\">The object to be compared with the current instance.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Object : obj": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public override bool Equals(object obj)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AssemblyIdentity.Equals(System.Object)\">\r\n    <summary>\r\n    Determines whether the specified instance is equal to the current instance.\r\n    </summary>\r\n    <param name=\"obj\">The object to be compared with the current instance.</param>\r\n</member>\r\n",
                "StartLine": 352
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Object : obj": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public override bool Equals(object obj)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AssemblyIdentity.Equals(System.Object)\">\r\n    <summary>\r\n    Determines whether the specified instance is equal to the current instance.\r\n    </summary>\r\n    <param name=\"obj\">The object to be compared with the current instance.</param>\r\n</member>\r\n",
                "StartLine": 352
              },
              "Id": "M:Microsoft.CodeAnalysis.AssemblyIdentity.Equals(System.Object)",
              "Parent": "T:Microsoft.CodeAnalysis.AssemblyIdentity",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AssemblyIdentity.Equals(System.Object)\">\r\n    <summary>\r\n    Determines whether the specified instance is equal to the current instance.\r\n    </summary>\r\n    <param name=\"obj\">The object to be compared with the current instance.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Reflection.Assembly : assembly": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.AssemblyIdentity": ""
                },
                "Content": "public static AssemblyIdentity FromAssemblyDefinition(Assembly assembly)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AssemblyIdentity.FromAssemblyDefinition(System.Reflection.Assembly)\">\r\n    <summary>\r\n    Retrieves assembly definition identity from given runtime assembly.\r\n    </summary>\r\n    <param name=\"assembly\">The runtime assembly.</param>\r\n    <returns>Assembly definition identity.</returns>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"assembly\"/> is null.</exception>\r\n</member>\r\n",
                "StartLine": 463
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Reflection.Assembly : assembly": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.AssemblyIdentity": ""
                },
                "Content": "public static AssemblyIdentity FromAssemblyDefinition(Assembly assembly)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AssemblyIdentity.FromAssemblyDefinition(System.Reflection.Assembly)\">\r\n    <summary>\r\n    Retrieves assembly definition identity from given runtime assembly.\r\n    </summary>\r\n    <param name=\"assembly\">The runtime assembly.</param>\r\n    <returns>Assembly definition identity.</returns>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"assembly\"/> is null.</exception>\r\n</member>\r\n",
                "StartLine": 463
              },
              "Id": "M:Microsoft.CodeAnalysis.AssemblyIdentity.FromAssemblyDefinition(System.Reflection.Assembly)",
              "Parent": "T:Microsoft.CodeAnalysis.AssemblyIdentity",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AssemblyIdentity.FromAssemblyDefinition(System.Reflection.Assembly)\">\r\n    <summary>\r\n    Retrieves assembly definition identity from given runtime assembly.\r\n    </summary>\r\n    <param name=\"assembly\">The runtime assembly.</param>\r\n    <returns>Assembly definition identity.</returns>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"assembly\"/> is null.</exception>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Boolean : fullKey": ""
                },
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public string GetDisplayName(bool fullKey = false)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AssemblyIdentity.GetDisplayName(System.Boolean)\">\r\n    <summary>\r\n    Returns the display name of the assembly identity.\r\n    </summary>\r\n    <param name=\"fullKey\">True if the full public key should be included in the name. Otherwise public key token is used.</param>\r\n    <returns>The display name.</returns>\r\n    <remarks>\r\n    Characters ',', '=', '\"', '\\'', '\\' occuring in the simple name are escaped by backslash in the display name.\r\n    Any character '\\t' is replaced by two characters '\\' and 't',\r\n    Any character '\\n' is replaced by two characters '\\' and 'n',\r\n    Any character '\\r' is replaced by two characters '\\' and 'r',\r\n    The assembly name in the display name is enclosed in double quotes if it starts or ends with \r\n    a whitespace character (' ', '\\t', '\\r', '\\n').\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 34
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Boolean : fullKey": ""
                },
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public string GetDisplayName(bool fullKey = false)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AssemblyIdentity.GetDisplayName(System.Boolean)\">\r\n    <summary>\r\n    Returns the display name of the assembly identity.\r\n    </summary>\r\n    <param name=\"fullKey\">True if the full public key should be included in the name. Otherwise public key token is used.</param>\r\n    <returns>The display name.</returns>\r\n    <remarks>\r\n    Characters ',', '=', '\"', '\\'', '\\' occuring in the simple name are escaped by backslash in the display name.\r\n    Any character '\\t' is replaced by two characters '\\' and 't',\r\n    Any character '\\n' is replaced by two characters '\\' and 'n',\r\n    Any character '\\r' is replaced by two characters '\\' and 'r',\r\n    The assembly name in the display name is enclosed in double quotes if it starts or ends with \r\n    a whitespace character (' ', '\\t', '\\r', '\\n').\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 34
              },
              "Id": "M:Microsoft.CodeAnalysis.AssemblyIdentity.GetDisplayName(System.Boolean)",
              "Parent": "T:Microsoft.CodeAnalysis.AssemblyIdentity",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AssemblyIdentity.GetDisplayName(System.Boolean)\">\r\n    <summary>\r\n    Returns the display name of the assembly identity.\r\n    </summary>\r\n    <param name=\"fullKey\">True if the full public key should be included in the name. Otherwise public key token is used.</param>\r\n    <returns>The display name.</returns>\r\n    <remarks>\r\n    Characters ',', '=', '\"', '\\'', '\\' occuring in the simple name are escaped by backslash in the display name.\r\n    Any character '\\t' is replaced by two characters '\\' and 't',\r\n    Any character '\\n' is replaced by two characters '\\' and 'n',\r\n    Any character '\\r' is replaced by two characters '\\' and 'r',\r\n    The assembly name in the display name is enclosed in double quotes if it starts or ends with \r\n    a whitespace character (' ', '\\t', '\\r', '\\n').\r\n    </remarks>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public override int GetHashCode()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AssemblyIdentity.GetHashCode\">\r\n    <summary>\r\n    Returns the hash code for the current instance.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n",
                "StartLine": 361
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public override int GetHashCode()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AssemblyIdentity.GetHashCode\">\r\n    <summary>\r\n    Returns the hash code for the current instance.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n",
                "StartLine": 361
              },
              "Id": "M:Microsoft.CodeAnalysis.AssemblyIdentity.GetHashCode",
              "Parent": "T:Microsoft.CodeAnalysis.AssemblyIdentity",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AssemblyIdentity.GetHashCode\">\r\n    <summary>\r\n    Returns the hash code for the current instance.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public override string ToString()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AssemblyIdentity.ToString\">\r\n    <summary>\r\n    Returns the display name of the current instance.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 52
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public override string ToString()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AssemblyIdentity.ToString\">\r\n    <summary>\r\n    Returns the display name of the current instance.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 52
              },
              "Id": "M:Microsoft.CodeAnalysis.AssemblyIdentity.ToString",
              "Parent": "T:Microsoft.CodeAnalysis.AssemblyIdentity",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AssemblyIdentity.ToString\">\r\n    <summary>\r\n    Returns the display name of the current instance.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.AssemblyIdentity : identity": "",
                  "T:System.String : displayName": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public static bool TryParseDisplayName(string displayName, out AssemblyIdentity identity)",
                "XmlDocumentation": "",
                "StartLine": 129
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.AssemblyIdentity : identity": "",
                  "T:System.String : displayName": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public static bool TryParseDisplayName(string displayName, out AssemblyIdentity identity)",
                "XmlDocumentation": "",
                "StartLine": 129
              },
              "Id": "M:Microsoft.CodeAnalysis.AssemblyIdentity.TryParseDisplayName(System.String,Microsoft.CodeAnalysis.AssemblyIdentity@)",
              "Parent": "T:Microsoft.CodeAnalysis.AssemblyIdentity",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.AssemblyIdentity : identity": "",
                  "T:Microsoft.CodeAnalysis.AssemblyIdentityParts : parts": "",
                  "T:System.String : displayName": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public static bool TryParseDisplayName(string displayName, out AssemblyIdentity identity, out AssemblyIdentityParts parts)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AssemblyIdentity.TryParseDisplayName(System.String,Microsoft.CodeAnalysis.AssemblyIdentity@,Microsoft.CodeAnalysis.AssemblyIdentityParts@)\">\r\n    <summary>\r\n    Parses display name filling defaults for any basic properties that are missing.\r\n    </summary>\r\n    <param name=\"displayName\">Display name.</param>\r\n    <param name=\"identity\">A full assembly identity.</param>\r\n    <param name=\"parts\">\r\n    Parts of the assembly identity that were specified in the display name, \r\n    or 0 if the parsing failed.\r\n    </param>\r\n    <returns>True if display name parsed correctly.</returns>\r\n    <remarks>\r\n    The simple name has to be non-empty.\r\n    A partially specified version might be missing build and/or revision number. The default value for these is 65535.\r\n    The default culture is neutral (<see cref=\"P:Microsoft.CodeAnalysis.AssemblyIdentity.CultureName\"/> is <see cref=\"F:System.String.Empty\"/>.\r\n    If neither public key nor token is specified the identity is considered weak.\r\n    </remarks>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"displayName\"/> is null.</exception>\r\n</member>\r\n",
                "StartLine": 157
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.AssemblyIdentity : identity": "",
                  "T:Microsoft.CodeAnalysis.AssemblyIdentityParts : parts": "",
                  "T:System.String : displayName": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public static bool TryParseDisplayName(string displayName, out AssemblyIdentity identity, out AssemblyIdentityParts parts)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AssemblyIdentity.TryParseDisplayName(System.String,Microsoft.CodeAnalysis.AssemblyIdentity@,Microsoft.CodeAnalysis.AssemblyIdentityParts@)\">\r\n    <summary>\r\n    Parses display name filling defaults for any basic properties that are missing.\r\n    </summary>\r\n    <param name=\"displayName\">Display name.</param>\r\n    <param name=\"identity\">A full assembly identity.</param>\r\n    <param name=\"parts\">\r\n    Parts of the assembly identity that were specified in the display name, \r\n    or 0 if the parsing failed.\r\n    </param>\r\n    <returns>True if display name parsed correctly.</returns>\r\n    <remarks>\r\n    The simple name has to be non-empty.\r\n    A partially specified version might be missing build and/or revision number. The default value for these is 65535.\r\n    The default culture is neutral (<see cref=\"P:Microsoft.CodeAnalysis.AssemblyIdentity.CultureName\"/> is <see cref=\"F:System.String.Empty\"/>.\r\n    If neither public key nor token is specified the identity is considered weak.\r\n    </remarks>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"displayName\"/> is null.</exception>\r\n</member>\r\n",
                "StartLine": 157
              },
              "Id": "M:Microsoft.CodeAnalysis.AssemblyIdentity.TryParseDisplayName(System.String,Microsoft.CodeAnalysis.AssemblyIdentity@,Microsoft.CodeAnalysis.AssemblyIdentityParts@)",
              "Parent": "T:Microsoft.CodeAnalysis.AssemblyIdentity",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AssemblyIdentity.TryParseDisplayName(System.String,Microsoft.CodeAnalysis.AssemblyIdentity@,Microsoft.CodeAnalysis.AssemblyIdentityParts@)\">\r\n    <summary>\r\n    Parses display name filling defaults for any basic properties that are missing.\r\n    </summary>\r\n    <param name=\"displayName\">Display name.</param>\r\n    <param name=\"identity\">A full assembly identity.</param>\r\n    <param name=\"parts\">\r\n    Parts of the assembly identity that were specified in the display name, \r\n    or 0 if the parsing failed.\r\n    </param>\r\n    <returns>True if display name parsed correctly.</returns>\r\n    <remarks>\r\n    The simple name has to be non-empty.\r\n    A partially specified version might be missing build and/or revision number. The default value for these is 65535.\r\n    The default culture is neutral (<see cref=\"P:Microsoft.CodeAnalysis.AssemblyIdentity.CultureName\"/> is <see cref=\"F:System.String.Empty\"/>.\r\n    If neither public key nor token is specified the identity is considered weak.\r\n    </remarks>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"displayName\"/> is null.</exception>\r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Reflection.AssemblyContentType",
                "Content": "public AssemblyContentType ContentType",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.AssemblyIdentity.ContentType\">\r\n    <summary>\r\n    Specifies assembly binding model for the assembly definition or reference;\r\n    that is how assembly references are matched to assembly definitions.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 250
              },
              "Syntax": {
                "PropertyType": "T:System.Reflection.AssemblyContentType",
                "Content": "public AssemblyContentType ContentType",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.AssemblyIdentity.ContentType\">\r\n    <summary>\r\n    Specifies assembly binding model for the assembly definition or reference;\r\n    that is how assembly references are matched to assembly definitions.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 250
              },
              "Id": "P:Microsoft.CodeAnalysis.AssemblyIdentity.ContentType",
              "Parent": "T:Microsoft.CodeAnalysis.AssemblyIdentity",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.AssemblyIdentity.ContentType\">\r\n    <summary>\r\n    Specifies assembly binding model for the assembly definition or reference;\r\n    that is how assembly references are matched to assembly definitions.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.String",
                "Content": "public string CultureName",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.AssemblyIdentity.CultureName\">\r\n    <summary>\r\n    The culture name of the assembly, or empty if the culture is neutral.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 232
              },
              "Syntax": {
                "PropertyType": "T:System.String",
                "Content": "public string CultureName",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.AssemblyIdentity.CultureName\">\r\n    <summary>\r\n    The culture name of the assembly, or empty if the culture is neutral.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 232
              },
              "Id": "P:Microsoft.CodeAnalysis.AssemblyIdentity.CultureName",
              "Parent": "T:Microsoft.CodeAnalysis.AssemblyIdentity",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.AssemblyIdentity.CultureName\">\r\n    <summary>\r\n    The culture name of the assembly, or empty if the culture is neutral.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Reflection.AssemblyNameFlags",
                "Content": "public AssemblyNameFlags Flags",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.AssemblyIdentity.Flags\">\r\n    <summary>\r\n    The AssemblyNameFlags.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 237
              },
              "Syntax": {
                "PropertyType": "T:System.Reflection.AssemblyNameFlags",
                "Content": "public AssemblyNameFlags Flags",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.AssemblyIdentity.Flags\">\r\n    <summary>\r\n    The AssemblyNameFlags.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 237
              },
              "Id": "P:Microsoft.CodeAnalysis.AssemblyIdentity.Flags",
              "Parent": "T:Microsoft.CodeAnalysis.AssemblyIdentity",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.AssemblyIdentity.Flags\">\r\n    <summary>\r\n    The AssemblyNameFlags.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool HasPublicKey",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.AssemblyIdentity.HasPublicKey\">\r\n    <summary>\r\n    True if the assembly identity includes full public key.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 258
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool HasPublicKey",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.AssemblyIdentity.HasPublicKey\">\r\n    <summary>\r\n    True if the assembly identity includes full public key.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 258
              },
              "Id": "P:Microsoft.CodeAnalysis.AssemblyIdentity.HasPublicKey",
              "Parent": "T:Microsoft.CodeAnalysis.AssemblyIdentity",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.AssemblyIdentity.HasPublicKey\">\r\n    <summary>\r\n    True if the assembly identity includes full public key.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool IsRetargetable",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.AssemblyIdentity.IsRetargetable\">\r\n    <summary>\r\n    Gets the value which specifies if the assembly is retargetable. \r\n    </summary>\r\n</member>\r\n",
                "StartLine": 304
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool IsRetargetable",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.AssemblyIdentity.IsRetargetable\">\r\n    <summary>\r\n    Gets the value which specifies if the assembly is retargetable. \r\n    </summary>\r\n</member>\r\n",
                "StartLine": 304
              },
              "Id": "P:Microsoft.CodeAnalysis.AssemblyIdentity.IsRetargetable",
              "Parent": "T:Microsoft.CodeAnalysis.AssemblyIdentity",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.AssemblyIdentity.IsRetargetable\">\r\n    <summary>\r\n    Gets the value which specifies if the assembly is retargetable. \r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool IsStrongName",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.AssemblyIdentity.IsStrongName\">\r\n    <summary>\r\n    True if the assembly identity has a strong name, ie. either a full public key or a token.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 290
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool IsStrongName",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.AssemblyIdentity.IsStrongName\">\r\n    <summary>\r\n    True if the assembly identity has a strong name, ie. either a full public key or a token.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 290
              },
              "Id": "P:Microsoft.CodeAnalysis.AssemblyIdentity.IsStrongName",
              "Parent": "T:Microsoft.CodeAnalysis.AssemblyIdentity",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.AssemblyIdentity.IsStrongName\">\r\n    <summary>\r\n    True if the assembly identity has a strong name, ie. either a full public key or a token.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.String",
                "Content": "public string Name",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.AssemblyIdentity.Name\">\r\n    <summary>\r\n    The simple name of the assembly.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 222
              },
              "Syntax": {
                "PropertyType": "T:System.String",
                "Content": "public string Name",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.AssemblyIdentity.Name\">\r\n    <summary>\r\n    The simple name of the assembly.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 222
              },
              "Id": "P:Microsoft.CodeAnalysis.AssemblyIdentity.Name",
              "Parent": "T:Microsoft.CodeAnalysis.AssemblyIdentity",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.AssemblyIdentity.Name\">\r\n    <summary>\r\n    The simple name of the assembly.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{System.Byte}",
                "Content": "public ImmutableArray<byte> PublicKey",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.AssemblyIdentity.PublicKey\">\r\n    <summary>\r\n    Full public key or empty.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 266
              },
              "Syntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{System.Byte}",
                "Content": "public ImmutableArray<byte> PublicKey",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.AssemblyIdentity.PublicKey\">\r\n    <summary>\r\n    Full public key or empty.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 266
              },
              "Id": "P:Microsoft.CodeAnalysis.AssemblyIdentity.PublicKey",
              "Parent": "T:Microsoft.CodeAnalysis.AssemblyIdentity",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.AssemblyIdentity.PublicKey\">\r\n    <summary>\r\n    Full public key or empty.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{System.Byte}",
                "Content": "public ImmutableArray<byte> PublicKeyToken",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.AssemblyIdentity.PublicKeyToken\">\r\n    <summary>\r\n    Low 8 bytes of SHA1 hash of the public key, or empty.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 274
              },
              "Syntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{System.Byte}",
                "Content": "public ImmutableArray<byte> PublicKeyToken",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.AssemblyIdentity.PublicKeyToken\">\r\n    <summary>\r\n    Low 8 bytes of SHA1 hash of the public key, or empty.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 274
              },
              "Id": "P:Microsoft.CodeAnalysis.AssemblyIdentity.PublicKeyToken",
              "Parent": "T:Microsoft.CodeAnalysis.AssemblyIdentity",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.AssemblyIdentity.PublicKeyToken\">\r\n    <summary>\r\n    Low 8 bytes of SHA1 hash of the public key, or empty.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Version",
                "Content": "public Version Version",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.AssemblyIdentity.Version\">\r\n    <summary>\r\n    The version of the assembly.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 227
              },
              "Syntax": {
                "PropertyType": "T:System.Version",
                "Content": "public Version Version",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.AssemblyIdentity.Version\">\r\n    <summary>\r\n    The version of the assembly.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 227
              },
              "Id": "P:Microsoft.CodeAnalysis.AssemblyIdentity.Version",
              "Parent": "T:Microsoft.CodeAnalysis.AssemblyIdentity",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.AssemblyIdentity.Version\">\r\n    <summary>\r\n    The version of the assembly.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Constructors": [
            {
              "ConstructorSyntax": {
                "Parameters": {
                  "T:System.Boolean : hasPublicKey": "",
                  "T:System.Boolean : isRetargetable": "",
                  "T:System.Collections.Immutable.ImmutableArray{System.Byte} : publicKeyOrToken": "",
                  "T:System.Reflection.AssemblyContentType : contentType": "",
                  "T:System.String : cultureName": "",
                  "T:System.String : name": "",
                  "T:System.Version : version": ""
                },
                "Content": "public AssemblyIdentity(string name, Version version = null, string cultureName = null, ImmutableArray<byte> publicKeyOrToken = default (ImmutableArray<byte>), bool hasPublicKey = false, bool isRetargetable = false, AssemblyContentType contentType = AssemblyContentType.Default)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AssemblyIdentity.#ctor(System.String,System.Version,System.String,System.Collections.Immutable.ImmutableArray{System.Byte},System.Boolean,System.Boolean,System.Reflection.AssemblyContentType)\">\r\n    <summary>\r\n    Constructs an <see cref=\"T:Microsoft.CodeAnalysis.AssemblyIdentity\"/> from its constituent parts.\r\n    </summary>\r\n    <param name=\"name\">The simple name of the assembly.</param>\r\n    <param name=\"version\">The version of the assembly.</param>\r\n    <param name=\"cultureName\">The name of the culture to associate with the assembly.</param>\r\n    <param name=\"publicKeyOrToken\">The public key or public key token of the assembly.</param>\r\n    <param name=\"hasPublicKey\">Indicates whether <paramref name=\"publicKeyOrToken\"/> represents a public key.</param>\r\n    <param name=\"isRetargetable\">Indicates whether the assembly is retargetable.</param>\r\n    <param name=\"contentType\">Specifies the binding model for how this object will be treated in comparisons.</param>\r\n    <exception cref=\"T:System.ArgumentException\">If <paramref name=\"name\"/> is null, empty or contains an embedded null character.</exception>\r\n    <exception cref=\"T:System.ArgumentOutOfRangeException\"><paramref name=\"contentType\"/> is not a value of the <see cref=\"T:System.Reflection.AssemblyContentType\"/> enumeration.</exception>\r\n    <exception cref=\"T:System.ArgumentException\"><paramref name=\"version\"/> contains values that are not greater than or equal to zero and less than or equal to ushort.MaxValue.</exception>\r\n    <exception cref=\"T:System.ArgumentException\"><paramref name=\"hasPublicKey\"/> is true and <paramref name=\"publicKeyOrToken\"/> is not set.</exception>\r\n    <exception cref=\"T:System.ArgumentException\"><paramref name=\"hasPublicKey\"/> is false and <paramref name=\"publicKeyOrToken\"/> \r\n    contains a value that is not the size of a public key token, 8 bytes.</exception>\r\n</member>\r\n",
                "StartLine": 68
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Boolean : hasPublicKey": "",
                  "T:System.Boolean : isRetargetable": "",
                  "T:System.Collections.Immutable.ImmutableArray{System.Byte} : publicKeyOrToken": "",
                  "T:System.Reflection.AssemblyContentType : contentType": "",
                  "T:System.String : cultureName": "",
                  "T:System.String : name": "",
                  "T:System.Version : version": ""
                },
                "Content": "public AssemblyIdentity(string name, Version version = null, string cultureName = null, ImmutableArray<byte> publicKeyOrToken = default (ImmutableArray<byte>), bool hasPublicKey = false, bool isRetargetable = false, AssemblyContentType contentType = AssemblyContentType.Default)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AssemblyIdentity.#ctor(System.String,System.Version,System.String,System.Collections.Immutable.ImmutableArray{System.Byte},System.Boolean,System.Boolean,System.Reflection.AssemblyContentType)\">\r\n    <summary>\r\n    Constructs an <see cref=\"T:Microsoft.CodeAnalysis.AssemblyIdentity\"/> from its constituent parts.\r\n    </summary>\r\n    <param name=\"name\">The simple name of the assembly.</param>\r\n    <param name=\"version\">The version of the assembly.</param>\r\n    <param name=\"cultureName\">The name of the culture to associate with the assembly.</param>\r\n    <param name=\"publicKeyOrToken\">The public key or public key token of the assembly.</param>\r\n    <param name=\"hasPublicKey\">Indicates whether <paramref name=\"publicKeyOrToken\"/> represents a public key.</param>\r\n    <param name=\"isRetargetable\">Indicates whether the assembly is retargetable.</param>\r\n    <param name=\"contentType\">Specifies the binding model for how this object will be treated in comparisons.</param>\r\n    <exception cref=\"T:System.ArgumentException\">If <paramref name=\"name\"/> is null, empty or contains an embedded null character.</exception>\r\n    <exception cref=\"T:System.ArgumentOutOfRangeException\"><paramref name=\"contentType\"/> is not a value of the <see cref=\"T:System.Reflection.AssemblyContentType\"/> enumeration.</exception>\r\n    <exception cref=\"T:System.ArgumentException\"><paramref name=\"version\"/> contains values that are not greater than or equal to zero and less than or equal to ushort.MaxValue.</exception>\r\n    <exception cref=\"T:System.ArgumentException\"><paramref name=\"hasPublicKey\"/> is true and <paramref name=\"publicKeyOrToken\"/> is not set.</exception>\r\n    <exception cref=\"T:System.ArgumentException\"><paramref name=\"hasPublicKey\"/> is false and <paramref name=\"publicKeyOrToken\"/> \r\n    contains a value that is not the size of a public key token, 8 bytes.</exception>\r\n</member>\r\n",
                "StartLine": 68
              },
              "Id": "M:Microsoft.CodeAnalysis.AssemblyIdentity.#ctor(System.String,System.Version,System.String,System.Collections.Immutable.ImmutableArray{System.Byte},System.Boolean,System.Boolean,System.Reflection.AssemblyContentType)",
              "Parent": "T:Microsoft.CodeAnalysis.AssemblyIdentity",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AssemblyIdentity.#ctor(System.String,System.Version,System.String,System.Collections.Immutable.ImmutableArray{System.Byte},System.Boolean,System.Boolean,System.Reflection.AssemblyContentType)\">\r\n    <summary>\r\n    Constructs an <see cref=\"T:Microsoft.CodeAnalysis.AssemblyIdentity\"/> from its constituent parts.\r\n    </summary>\r\n    <param name=\"name\">The simple name of the assembly.</param>\r\n    <param name=\"version\">The version of the assembly.</param>\r\n    <param name=\"cultureName\">The name of the culture to associate with the assembly.</param>\r\n    <param name=\"publicKeyOrToken\">The public key or public key token of the assembly.</param>\r\n    <param name=\"hasPublicKey\">Indicates whether <paramref name=\"publicKeyOrToken\"/> represents a public key.</param>\r\n    <param name=\"isRetargetable\">Indicates whether the assembly is retargetable.</param>\r\n    <param name=\"contentType\">Specifies the binding model for how this object will be treated in comparisons.</param>\r\n    <exception cref=\"T:System.ArgumentException\">If <paramref name=\"name\"/> is null, empty or contains an embedded null character.</exception>\r\n    <exception cref=\"T:System.ArgumentOutOfRangeException\"><paramref name=\"contentType\"/> is not a value of the <see cref=\"T:System.Reflection.AssemblyContentType\"/> enumeration.</exception>\r\n    <exception cref=\"T:System.ArgumentException\"><paramref name=\"version\"/> contains values that are not greater than or equal to zero and less than or equal to ushort.MaxValue.</exception>\r\n    <exception cref=\"T:System.ArgumentException\"><paramref name=\"hasPublicKey\"/> is true and <paramref name=\"publicKeyOrToken\"/> is not set.</exception>\r\n    <exception cref=\"T:System.ArgumentException\"><paramref name=\"hasPublicKey\"/> is false and <paramref name=\"publicKeyOrToken\"/> \r\n    contains a value that is not the size of a public key token, 8 bytes.</exception>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\MetadataReference\\AssemblyIdentity.cs",
          "InheritanceHierarchy": [
            "T:System.Object"
          ],
          "Syntax": {
            "Content": "public sealed partial class AssemblyIdentity\r\n\r\n#endregion",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.AssemblyIdentity\">\r\n    <summary>\r\n    Represents an identity of an assembly as defined by CLI metadata specification.\r\n    </summary>\r\n    <remarks>\r\n    May represent assembly definition or assembly reference identity.\r\n    </remarks>\r\n    <summary>\r\n    Represents an identity of an assembly as defined by CLI metadata specification.\r\n    </summary>\r\n    <remarks>\r\n    May represent assembly definition or assembly reference identity.\r\n    </remarks>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.AssemblyIdentity",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.AssemblyIdentity\">\r\n    <summary>\r\n    Represents an identity of an assembly as defined by CLI metadata specification.\r\n    </summary>\r\n    <remarks>\r\n    May represent assembly definition or assembly reference identity.\r\n    </remarks>\r\n    <summary>\r\n    Represents an identity of an assembly as defined by CLI metadata specification.\r\n    </summary>\r\n    <remarks>\r\n    May represent assembly definition or assembly reference identity.\r\n    </remarks>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.AssemblyIdentity : definition": "",
                  "T:Microsoft.CodeAnalysis.AssemblyIdentity : reference": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.AssemblyIdentityComparer.ComparisonResult": ""
                },
                "Content": "public ComparisonResult Compare(AssemblyIdentity reference, AssemblyIdentity definition)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AssemblyIdentityComparer.Compare(Microsoft.CodeAnalysis.AssemblyIdentity,Microsoft.CodeAnalysis.AssemblyIdentity)\">\r\n    <summary>\r\n    Compares reference assembly identity with definition identity and returns their relationship.\r\n    </summary>\r\n    <param name=\"reference\">Reference identity.</param>\r\n    <param name=\"definition\">Definition identity.</param>\r\n</member>\r\n",
                "StartLine": 80
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.AssemblyIdentity : definition": "",
                  "T:Microsoft.CodeAnalysis.AssemblyIdentity : reference": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.AssemblyIdentityComparer.ComparisonResult": ""
                },
                "Content": "public ComparisonResult Compare(AssemblyIdentity reference, AssemblyIdentity definition)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AssemblyIdentityComparer.Compare(Microsoft.CodeAnalysis.AssemblyIdentity,Microsoft.CodeAnalysis.AssemblyIdentity)\">\r\n    <summary>\r\n    Compares reference assembly identity with definition identity and returns their relationship.\r\n    </summary>\r\n    <param name=\"reference\">Reference identity.</param>\r\n    <param name=\"definition\">Definition identity.</param>\r\n</member>\r\n",
                "StartLine": 80
              },
              "Id": "M:Microsoft.CodeAnalysis.AssemblyIdentityComparer.Compare(Microsoft.CodeAnalysis.AssemblyIdentity,Microsoft.CodeAnalysis.AssemblyIdentity)",
              "Parent": "T:Microsoft.CodeAnalysis.AssemblyIdentityComparer",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AssemblyIdentityComparer.Compare(Microsoft.CodeAnalysis.AssemblyIdentity,Microsoft.CodeAnalysis.AssemblyIdentity)\">\r\n    <summary>\r\n    Compares reference assembly identity with definition identity and returns their relationship.\r\n    </summary>\r\n    <param name=\"reference\">Reference identity.</param>\r\n    <param name=\"definition\">Definition identity.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.AssemblyIdentity : definition": "",
                  "T:Microsoft.CodeAnalysis.AssemblyIdentity : reference": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool ReferenceMatchesDefinition(AssemblyIdentity reference, AssemblyIdentity definition)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AssemblyIdentityComparer.ReferenceMatchesDefinition(Microsoft.CodeAnalysis.AssemblyIdentity,Microsoft.CodeAnalysis.AssemblyIdentity)\">\r\n    <summary>\r\n    Compares assembly reference identity with definition identity.\r\n    </summary>\r\n    <param name=\"reference\">Reference assembly identity.</param>\r\n    <param name=\"definition\">Full assembly display name.</param>\r\n    <returns>True if the reference identity matches the definition identity.</returns>\r\n</member>\r\n",
                "StartLine": 69
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.AssemblyIdentity : definition": "",
                  "T:Microsoft.CodeAnalysis.AssemblyIdentity : reference": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool ReferenceMatchesDefinition(AssemblyIdentity reference, AssemblyIdentity definition)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AssemblyIdentityComparer.ReferenceMatchesDefinition(Microsoft.CodeAnalysis.AssemblyIdentity,Microsoft.CodeAnalysis.AssemblyIdentity)\">\r\n    <summary>\r\n    Compares assembly reference identity with definition identity.\r\n    </summary>\r\n    <param name=\"reference\">Reference assembly identity.</param>\r\n    <param name=\"definition\">Full assembly display name.</param>\r\n    <returns>True if the reference identity matches the definition identity.</returns>\r\n</member>\r\n",
                "StartLine": 69
              },
              "Id": "M:Microsoft.CodeAnalysis.AssemblyIdentityComparer.ReferenceMatchesDefinition(Microsoft.CodeAnalysis.AssemblyIdentity,Microsoft.CodeAnalysis.AssemblyIdentity)",
              "Parent": "T:Microsoft.CodeAnalysis.AssemblyIdentityComparer",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AssemblyIdentityComparer.ReferenceMatchesDefinition(Microsoft.CodeAnalysis.AssemblyIdentity,Microsoft.CodeAnalysis.AssemblyIdentity)\">\r\n    <summary>\r\n    Compares assembly reference identity with definition identity.\r\n    </summary>\r\n    <param name=\"reference\">Reference assembly identity.</param>\r\n    <param name=\"definition\">Full assembly display name.</param>\r\n    <returns>True if the reference identity matches the definition identity.</returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.AssemblyIdentity : definition": "",
                  "T:System.String : referenceDisplayName": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool ReferenceMatchesDefinition(string referenceDisplayName, AssemblyIdentity definition)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AssemblyIdentityComparer.ReferenceMatchesDefinition(System.String,Microsoft.CodeAnalysis.AssemblyIdentity)\">\r\n    <summary>\r\n    Compares assembly reference name (possibly partial) with definition identity.\r\n    </summary>\r\n    <param name=\"referenceDisplayName\">Partial or full assembly display name.</param>\r\n    <param name=\"definition\">Full assembly display name.</param>\r\n    <returns>True if the reference name matches the definition identity.</returns>\r\n</member>\r\n",
                "StartLine": 57
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.AssemblyIdentity : definition": "",
                  "T:System.String : referenceDisplayName": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool ReferenceMatchesDefinition(string referenceDisplayName, AssemblyIdentity definition)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AssemblyIdentityComparer.ReferenceMatchesDefinition(System.String,Microsoft.CodeAnalysis.AssemblyIdentity)\">\r\n    <summary>\r\n    Compares assembly reference name (possibly partial) with definition identity.\r\n    </summary>\r\n    <param name=\"referenceDisplayName\">Partial or full assembly display name.</param>\r\n    <param name=\"definition\">Full assembly display name.</param>\r\n    <returns>True if the reference name matches the definition identity.</returns>\r\n</member>\r\n",
                "StartLine": 57
              },
              "Id": "M:Microsoft.CodeAnalysis.AssemblyIdentityComparer.ReferenceMatchesDefinition(System.String,Microsoft.CodeAnalysis.AssemblyIdentity)",
              "Parent": "T:Microsoft.CodeAnalysis.AssemblyIdentityComparer",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AssemblyIdentityComparer.ReferenceMatchesDefinition(System.String,Microsoft.CodeAnalysis.AssemblyIdentity)\">\r\n    <summary>\r\n    Compares assembly reference name (possibly partial) with definition identity.\r\n    </summary>\r\n    <param name=\"referenceDisplayName\">Partial or full assembly display name.</param>\r\n    <param name=\"definition\">Full assembly display name.</param>\r\n    <returns>True if the reference name matches the definition identity.</returns>\r\n</member>\r\n"
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "Default",
                "XmlDocumentation": "",
                "StartLine": 13
              },
              "Id": "F:Microsoft.CodeAnalysis.AssemblyIdentityComparer.Default",
              "Parent": "T:Microsoft.CodeAnalysis.AssemblyIdentityComparer",
              "XmlDocumentation": ""
            }
          ],
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:System.StringComparer",
                "Content": "public static StringComparer CultureComparer",
                "XmlDocumentation": "",
                "StartLine": 20
              },
              "Syntax": {
                "PropertyType": "T:System.StringComparer",
                "Content": "public static StringComparer CultureComparer",
                "XmlDocumentation": "",
                "StartLine": 20
              },
              "Id": "P:Microsoft.CodeAnalysis.AssemblyIdentityComparer.CultureComparer",
              "Parent": "T:Microsoft.CodeAnalysis.AssemblyIdentityComparer",
              "XmlDocumentation": ""
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.StringComparer",
                "Content": "public static StringComparer SimpleNameComparer",
                "XmlDocumentation": "",
                "StartLine": 15
              },
              "Syntax": {
                "PropertyType": "T:System.StringComparer",
                "Content": "public static StringComparer SimpleNameComparer",
                "XmlDocumentation": "",
                "StartLine": 15
              },
              "Id": "P:Microsoft.CodeAnalysis.AssemblyIdentityComparer.SimpleNameComparer",
              "Parent": "T:Microsoft.CodeAnalysis.AssemblyIdentityComparer",
              "XmlDocumentation": ""
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\MetadataReference\\AssemblyIdentityComparer.cs",
          "InheritanceHierarchy": [
            "T:System.Object"
          ],
          "Syntax": {
            "Content": "public class AssemblyIdentityComparer",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.AssemblyIdentityComparer\">\r\n    <summary>\r\n    Compares assembly identities. \r\n    Derived types may implement platform specific unification and portability policies.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.AssemblyIdentityComparer",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.AssemblyIdentityComparer\">\r\n    <summary>\r\n    Compares assembly identities. \r\n    Derived types may implement platform specific unification and portability policies.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Metadata": ""
                },
                "Content": "protected override Metadata CommonCopy()",
                "XmlDocumentation": "",
                "StartLine": 260
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Metadata": ""
                },
                "Content": "protected override Metadata CommonCopy()",
                "XmlDocumentation": "",
                "StartLine": 260
              },
              "Id": "M:Microsoft.CodeAnalysis.AssemblyMetadata.CommonCopy",
              "Parent": "T:Microsoft.CodeAnalysis.AssemblyMetadata",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.ModuleMetadata : module": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.AssemblyMetadata": ""
                },
                "Content": "public static AssemblyMetadata Create(ModuleMetadata module)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.Create(Microsoft.CodeAnalysis.ModuleMetadata)\">\r\n    <summary>\r\n    Creates a single-module assembly.\r\n    </summary>\r\n    <param name=\"module\">\r\n    Manifest module.\r\n    </param>\r\n    <remarks>This object disposes <paramref name=\"module\"/> it when it is itself disposed.</remarks>\r\n</member>\r\n",
                "StartLine": 171
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.ModuleMetadata : module": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.AssemblyMetadata": ""
                },
                "Content": "public static AssemblyMetadata Create(ModuleMetadata module)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.Create(Microsoft.CodeAnalysis.ModuleMetadata)\">\r\n    <summary>\r\n    Creates a single-module assembly.\r\n    </summary>\r\n    <param name=\"module\">\r\n    Manifest module.\r\n    </param>\r\n    <remarks>This object disposes <paramref name=\"module\"/> it when it is itself disposed.</remarks>\r\n</member>\r\n",
                "StartLine": 171
              },
              "Id": "M:Microsoft.CodeAnalysis.AssemblyMetadata.Create(Microsoft.CodeAnalysis.ModuleMetadata)",
              "Parent": "T:Microsoft.CodeAnalysis.AssemblyMetadata",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.Create(Microsoft.CodeAnalysis.ModuleMetadata)\">\r\n    <summary>\r\n    Creates a single-module assembly.\r\n    </summary>\r\n    <param name=\"module\">\r\n    Manifest module.\r\n    </param>\r\n    <remarks>This object disposes <paramref name=\"module\"/> it when it is itself disposed.</remarks>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Array : modules": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.AssemblyMetadata": ""
                },
                "Content": "public static AssemblyMetadata Create(params ModuleMetadata[] modules)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.Create(Microsoft.CodeAnalysis.ModuleMetadata[])\">\r\n    <summary>\r\n    Creates a multi-module assembly.\r\n    </summary>\r\n    <param name=\"modules\">Modules comprising the assembly. The first module is the manifest module of the assembly.</param>\r\n    <remarks>This object disposes the elements of <paramref name=\"modules\"/> it when it is itself <see cref=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.Dispose\"/>.</remarks>\r\n    <exception cref=\"T:System.ArgumentException\"><paramref name=\"modules\"/> is default value.</exception>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"modules\"/> contains null elements.</exception>\r\n    <exception cref=\"T:System.ArgumentException\"><paramref name=\"modules\"/> is empty or contains a module that doesn't own its image (was created via <see cref=\"M:Microsoft.CodeAnalysis.Metadata.Copy\"/>).</exception>\r\n</member>\r\n",
                "StartLine": 240
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Array : modules": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.AssemblyMetadata": ""
                },
                "Content": "public static AssemblyMetadata Create(params ModuleMetadata[] modules)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.Create(Microsoft.CodeAnalysis.ModuleMetadata[])\">\r\n    <summary>\r\n    Creates a multi-module assembly.\r\n    </summary>\r\n    <param name=\"modules\">Modules comprising the assembly. The first module is the manifest module of the assembly.</param>\r\n    <remarks>This object disposes the elements of <paramref name=\"modules\"/> it when it is itself <see cref=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.Dispose\"/>.</remarks>\r\n    <exception cref=\"T:System.ArgumentException\"><paramref name=\"modules\"/> is default value.</exception>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"modules\"/> contains null elements.</exception>\r\n    <exception cref=\"T:System.ArgumentException\"><paramref name=\"modules\"/> is empty or contains a module that doesn't own its image (was created via <see cref=\"M:Microsoft.CodeAnalysis.Metadata.Copy\"/>).</exception>\r\n</member>\r\n",
                "StartLine": 240
              },
              "Id": "M:Microsoft.CodeAnalysis.AssemblyMetadata.Create(Microsoft.CodeAnalysis.ModuleMetadata[])",
              "Parent": "T:Microsoft.CodeAnalysis.AssemblyMetadata",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.Create(Microsoft.CodeAnalysis.ModuleMetadata[])\">\r\n    <summary>\r\n    Creates a multi-module assembly.\r\n    </summary>\r\n    <param name=\"modules\">Modules comprising the assembly. The first module is the manifest module of the assembly.</param>\r\n    <remarks>This object disposes the elements of <paramref name=\"modules\"/> it when it is itself <see cref=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.Dispose\"/>.</remarks>\r\n    <exception cref=\"T:System.ArgumentException\"><paramref name=\"modules\"/> is default value.</exception>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"modules\"/> contains null elements.</exception>\r\n    <exception cref=\"T:System.ArgumentException\"><paramref name=\"modules\"/> is empty or contains a module that doesn't own its image (was created via <see cref=\"M:Microsoft.CodeAnalysis.Metadata.Copy\"/>).</exception>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.ModuleMetadata} : modules": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.AssemblyMetadata": ""
                },
                "Content": "public static AssemblyMetadata Create(IEnumerable<ModuleMetadata> modules)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.Create(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.ModuleMetadata})\">\r\n    <summary>\r\n    Creates a multi-module assembly.\r\n    </summary>\r\n    <param name=\"modules\">\r\n    Modules comprising the assembly. The first module is the manifest module of the assembly.</param>\r\n    <remarks>This object disposes the elements of <paramref name=\"modules\"/> it when it is itself <see cref=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.Dispose\"/>.</remarks>\r\n    <exception cref=\"T:System.ArgumentException\"><paramref name=\"modules\"/> is default value.</exception>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"modules\"/> contains null elements.</exception>\r\n    <exception cref=\"T:System.ArgumentException\"><paramref name=\"modules\"/> is empty or contains a module that doesn't own its image (was created via <see cref=\"M:Microsoft.CodeAnalysis.Metadata.Copy\"/>).</exception>\r\n</member>\r\n",
                "StartLine": 227
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.ModuleMetadata} : modules": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.AssemblyMetadata": ""
                },
                "Content": "public static AssemblyMetadata Create(IEnumerable<ModuleMetadata> modules)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.Create(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.ModuleMetadata})\">\r\n    <summary>\r\n    Creates a multi-module assembly.\r\n    </summary>\r\n    <param name=\"modules\">\r\n    Modules comprising the assembly. The first module is the manifest module of the assembly.</param>\r\n    <remarks>This object disposes the elements of <paramref name=\"modules\"/> it when it is itself <see cref=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.Dispose\"/>.</remarks>\r\n    <exception cref=\"T:System.ArgumentException\"><paramref name=\"modules\"/> is default value.</exception>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"modules\"/> contains null elements.</exception>\r\n    <exception cref=\"T:System.ArgumentException\"><paramref name=\"modules\"/> is empty or contains a module that doesn't own its image (was created via <see cref=\"M:Microsoft.CodeAnalysis.Metadata.Copy\"/>).</exception>\r\n</member>\r\n",
                "StartLine": 227
              },
              "Id": "M:Microsoft.CodeAnalysis.AssemblyMetadata.Create(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.ModuleMetadata})",
              "Parent": "T:Microsoft.CodeAnalysis.AssemblyMetadata",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.Create(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.ModuleMetadata})\">\r\n    <summary>\r\n    Creates a multi-module assembly.\r\n    </summary>\r\n    <param name=\"modules\">\r\n    Modules comprising the assembly. The first module is the manifest module of the assembly.</param>\r\n    <remarks>This object disposes the elements of <paramref name=\"modules\"/> it when it is itself <see cref=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.Dispose\"/>.</remarks>\r\n    <exception cref=\"T:System.ArgumentException\"><paramref name=\"modules\"/> is default value.</exception>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"modules\"/> contains null elements.</exception>\r\n    <exception cref=\"T:System.ArgumentException\"><paramref name=\"modules\"/> is empty or contains a module that doesn't own its image (was created via <see cref=\"M:Microsoft.CodeAnalysis.Metadata.Copy\"/>).</exception>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ModuleMetadata} : modules": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.AssemblyMetadata": ""
                },
                "Content": "public static AssemblyMetadata Create(ImmutableArray<ModuleMetadata> modules)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.Create(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ModuleMetadata})\">\r\n    <summary>\r\n    Creates a multi-module assembly.\r\n    </summary>\r\n    <param name=\"modules\">\r\n    Modules comprising the assembly. The first module is the manifest module of the assembly.</param>\r\n    <remarks>This object disposes the elements of <paramref name=\"modules\"/> it when it is itself <see cref=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.Dispose\"/>.</remarks>\r\n    <exception cref=\"T:System.ArgumentException\"><paramref name=\"modules\"/> is default value.</exception>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"modules\"/> contains null elements.</exception>\r\n    <exception cref=\"T:System.ArgumentException\"><paramref name=\"modules\"/> is empty or contains a module that doesn't own its image (was created via <see cref=\"M:Microsoft.CodeAnalysis.Metadata.Copy\"/>).</exception>\r\n</member>\r\n",
                "StartLine": 190
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ModuleMetadata} : modules": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.AssemblyMetadata": ""
                },
                "Content": "public static AssemblyMetadata Create(ImmutableArray<ModuleMetadata> modules)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.Create(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ModuleMetadata})\">\r\n    <summary>\r\n    Creates a multi-module assembly.\r\n    </summary>\r\n    <param name=\"modules\">\r\n    Modules comprising the assembly. The first module is the manifest module of the assembly.</param>\r\n    <remarks>This object disposes the elements of <paramref name=\"modules\"/> it when it is itself <see cref=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.Dispose\"/>.</remarks>\r\n    <exception cref=\"T:System.ArgumentException\"><paramref name=\"modules\"/> is default value.</exception>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"modules\"/> contains null elements.</exception>\r\n    <exception cref=\"T:System.ArgumentException\"><paramref name=\"modules\"/> is empty or contains a module that doesn't own its image (was created via <see cref=\"M:Microsoft.CodeAnalysis.Metadata.Copy\"/>).</exception>\r\n</member>\r\n",
                "StartLine": 190
              },
              "Id": "M:Microsoft.CodeAnalysis.AssemblyMetadata.Create(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ModuleMetadata})",
              "Parent": "T:Microsoft.CodeAnalysis.AssemblyMetadata",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.Create(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ModuleMetadata})\">\r\n    <summary>\r\n    Creates a multi-module assembly.\r\n    </summary>\r\n    <param name=\"modules\">\r\n    Modules comprising the assembly. The first module is the manifest module of the assembly.</param>\r\n    <remarks>This object disposes the elements of <paramref name=\"modules\"/> it when it is itself <see cref=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.Dispose\"/>.</remarks>\r\n    <exception cref=\"T:System.ArgumentException\"><paramref name=\"modules\"/> is default value.</exception>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"modules\"/> contains null elements.</exception>\r\n    <exception cref=\"T:System.ArgumentException\"><paramref name=\"modules\"/> is empty or contains a module that doesn't own its image (was created via <see cref=\"M:Microsoft.CodeAnalysis.Metadata.Copy\"/>).</exception>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.String : path": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.AssemblyMetadata": ""
                },
                "Content": "public static AssemblyMetadata CreateFromFile(string path)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.CreateFromFile(System.String)\">\r\n    <summary>\r\n    Finds all modules of an assembly on a specified path and builds an instance of <see cref=\"T:Microsoft.CodeAnalysis.AssemblyMetadata\"/> that represents them.\r\n    </summary>\r\n    <param name=\"path\">The full path to the assembly on disk.</param>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"path\"/> is null.</exception>\r\n    <exception cref=\"T:System.ArgumentException\"><paramref name=\"path\"/> is invalid.</exception>\r\n    <exception cref=\"T:System.IO.IOException\">Error reading file <paramref name=\"path\"/>. See <see cref=\"P:System.Exception.InnerException\"/> for details.</exception>\r\n    <exception cref=\"T:System.NotSupportedException\">Reading from a file path is not supported by the platform.</exception>\r\n</member>\r\n",
                "StartLine": 154
              },
              "Syntax": {
                "Parameters": {
                  "T:System.String : path": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.AssemblyMetadata": ""
                },
                "Content": "public static AssemblyMetadata CreateFromFile(string path)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.CreateFromFile(System.String)\">\r\n    <summary>\r\n    Finds all modules of an assembly on a specified path and builds an instance of <see cref=\"T:Microsoft.CodeAnalysis.AssemblyMetadata\"/> that represents them.\r\n    </summary>\r\n    <param name=\"path\">The full path to the assembly on disk.</param>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"path\"/> is null.</exception>\r\n    <exception cref=\"T:System.ArgumentException\"><paramref name=\"path\"/> is invalid.</exception>\r\n    <exception cref=\"T:System.IO.IOException\">Error reading file <paramref name=\"path\"/>. See <see cref=\"P:System.Exception.InnerException\"/> for details.</exception>\r\n    <exception cref=\"T:System.NotSupportedException\">Reading from a file path is not supported by the platform.</exception>\r\n</member>\r\n",
                "StartLine": 154
              },
              "Id": "M:Microsoft.CodeAnalysis.AssemblyMetadata.CreateFromFile(System.String)",
              "Parent": "T:Microsoft.CodeAnalysis.AssemblyMetadata",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.CreateFromFile(System.String)\">\r\n    <summary>\r\n    Finds all modules of an assembly on a specified path and builds an instance of <see cref=\"T:Microsoft.CodeAnalysis.AssemblyMetadata\"/> that represents them.\r\n    </summary>\r\n    <param name=\"path\">The full path to the assembly on disk.</param>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"path\"/> is null.</exception>\r\n    <exception cref=\"T:System.ArgumentException\"><paramref name=\"path\"/> is invalid.</exception>\r\n    <exception cref=\"T:System.IO.IOException\">Error reading file <paramref name=\"path\"/>. See <see cref=\"P:System.Exception.InnerException\"/> for details.</exception>\r\n    <exception cref=\"T:System.NotSupportedException\">Reading from a file path is not supported by the platform.</exception>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{System.Byte} : peImage": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.AssemblyMetadata": ""
                },
                "Content": "public static AssemblyMetadata CreateFromImage(IEnumerable<byte> peImage)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.CreateFromImage(System.Collections.Generic.IEnumerable{System.Byte})\">\r\n    <summary>\r\n    Creates a single-module assembly.\r\n    </summary>\r\n    <param name=\"peImage\">\r\n    Manifest module image.\r\n    </param>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"peImage\"/> is null.</exception>\r\n    <exception cref=\"T:System.BadImageFormatException\">The PE image format is invalid.</exception>\r\n</member>\r\n",
                "StartLine": 119
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{System.Byte} : peImage": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.AssemblyMetadata": ""
                },
                "Content": "public static AssemblyMetadata CreateFromImage(IEnumerable<byte> peImage)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.CreateFromImage(System.Collections.Generic.IEnumerable{System.Byte})\">\r\n    <summary>\r\n    Creates a single-module assembly.\r\n    </summary>\r\n    <param name=\"peImage\">\r\n    Manifest module image.\r\n    </param>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"peImage\"/> is null.</exception>\r\n    <exception cref=\"T:System.BadImageFormatException\">The PE image format is invalid.</exception>\r\n</member>\r\n",
                "StartLine": 119
              },
              "Id": "M:Microsoft.CodeAnalysis.AssemblyMetadata.CreateFromImage(System.Collections.Generic.IEnumerable{System.Byte})",
              "Parent": "T:Microsoft.CodeAnalysis.AssemblyMetadata",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.CreateFromImage(System.Collections.Generic.IEnumerable{System.Byte})\">\r\n    <summary>\r\n    Creates a single-module assembly.\r\n    </summary>\r\n    <param name=\"peImage\">\r\n    Manifest module image.\r\n    </param>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"peImage\"/> is null.</exception>\r\n    <exception cref=\"T:System.BadImageFormatException\">The PE image format is invalid.</exception>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Collections.Immutable.ImmutableArray{System.Byte} : peImage": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.AssemblyMetadata": ""
                },
                "Content": "public static AssemblyMetadata CreateFromImage(ImmutableArray<byte> peImage)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.CreateFromImage(System.Collections.Immutable.ImmutableArray{System.Byte})\">\r\n    <summary>\r\n    Creates a single-module assembly.\r\n    </summary>\r\n    <param name=\"peImage\">\r\n    Manifest module image.\r\n    </param>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"peImage\"/> is null.</exception>\r\n</member>\r\n",
                "StartLine": 106
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Collections.Immutable.ImmutableArray{System.Byte} : peImage": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.AssemblyMetadata": ""
                },
                "Content": "public static AssemblyMetadata CreateFromImage(ImmutableArray<byte> peImage)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.CreateFromImage(System.Collections.Immutable.ImmutableArray{System.Byte})\">\r\n    <summary>\r\n    Creates a single-module assembly.\r\n    </summary>\r\n    <param name=\"peImage\">\r\n    Manifest module image.\r\n    </param>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"peImage\"/> is null.</exception>\r\n</member>\r\n",
                "StartLine": 106
              },
              "Id": "M:Microsoft.CodeAnalysis.AssemblyMetadata.CreateFromImage(System.Collections.Immutable.ImmutableArray{System.Byte})",
              "Parent": "T:Microsoft.CodeAnalysis.AssemblyMetadata",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.CreateFromImage(System.Collections.Immutable.ImmutableArray{System.Byte})\">\r\n    <summary>\r\n    Creates a single-module assembly.\r\n    </summary>\r\n    <param name=\"peImage\">\r\n    Manifest module image.\r\n    </param>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"peImage\"/> is null.</exception>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Boolean : leaveOpen": "",
                  "T:System.IO.Stream : peStream": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.AssemblyMetadata": ""
                },
                "Content": "public static AssemblyMetadata CreateFromStream(Stream peStream, bool leaveOpen = false)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.CreateFromStream(System.IO.Stream,System.Boolean)\">\r\n    <summary>\r\n    Creates a single-module assembly.\r\n    </summary>\r\n    <param name=\"peStream\">Manifest module PE image stream.</param>\r\n    <param name=\"leaveOpen\">False to close the stream upon disposal of the metadata.</param>\r\n    <exception cref=\"T:System.BadImageFormatException\">The PE image format is invalid.</exception>\r\n</member>\r\n",
                "StartLine": 130
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Boolean : leaveOpen": "",
                  "T:System.IO.Stream : peStream": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.AssemblyMetadata": ""
                },
                "Content": "public static AssemblyMetadata CreateFromStream(Stream peStream, bool leaveOpen = false)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.CreateFromStream(System.IO.Stream,System.Boolean)\">\r\n    <summary>\r\n    Creates a single-module assembly.\r\n    </summary>\r\n    <param name=\"peStream\">Manifest module PE image stream.</param>\r\n    <param name=\"leaveOpen\">False to close the stream upon disposal of the metadata.</param>\r\n    <exception cref=\"T:System.BadImageFormatException\">The PE image format is invalid.</exception>\r\n</member>\r\n",
                "StartLine": 130
              },
              "Id": "M:Microsoft.CodeAnalysis.AssemblyMetadata.CreateFromStream(System.IO.Stream,System.Boolean)",
              "Parent": "T:Microsoft.CodeAnalysis.AssemblyMetadata",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.CreateFromStream(System.IO.Stream,System.Boolean)\">\r\n    <summary>\r\n    Creates a single-module assembly.\r\n    </summary>\r\n    <param name=\"peStream\">Manifest module PE image stream.</param>\r\n    <param name=\"leaveOpen\">False to close the stream upon disposal of the metadata.</param>\r\n    <exception cref=\"T:System.BadImageFormatException\">The PE image format is invalid.</exception>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.IO.Stream : peStream": "",
                  "T:System.Reflection.PortableExecutable.PEStreamOptions : options": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.AssemblyMetadata": ""
                },
                "Content": "public static AssemblyMetadata CreateFromStream(Stream peStream, PEStreamOptions options)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.CreateFromStream(System.IO.Stream,System.Reflection.PortableExecutable.PEStreamOptions)\">\r\n    <summary>\r\n    Creates a single-module assembly.\r\n    </summary>\r\n    <param name=\"peStream\">Manifest module PE image stream.</param>\r\n    <param name=\"options\">False to close the stream upon disposal of the metadata.</param>\r\n    <exception cref=\"T:System.BadImageFormatException\">The PE image format is invalid.</exception>\r\n</member>\r\n",
                "StartLine": 141
              },
              "Syntax": {
                "Parameters": {
                  "T:System.IO.Stream : peStream": "",
                  "T:System.Reflection.PortableExecutable.PEStreamOptions : options": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.AssemblyMetadata": ""
                },
                "Content": "public static AssemblyMetadata CreateFromStream(Stream peStream, PEStreamOptions options)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.CreateFromStream(System.IO.Stream,System.Reflection.PortableExecutable.PEStreamOptions)\">\r\n    <summary>\r\n    Creates a single-module assembly.\r\n    </summary>\r\n    <param name=\"peStream\">Manifest module PE image stream.</param>\r\n    <param name=\"options\">False to close the stream upon disposal of the metadata.</param>\r\n    <exception cref=\"T:System.BadImageFormatException\">The PE image format is invalid.</exception>\r\n</member>\r\n",
                "StartLine": 141
              },
              "Id": "M:Microsoft.CodeAnalysis.AssemblyMetadata.CreateFromStream(System.IO.Stream,System.Reflection.PortableExecutable.PEStreamOptions)",
              "Parent": "T:Microsoft.CodeAnalysis.AssemblyMetadata",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.CreateFromStream(System.IO.Stream,System.Reflection.PortableExecutable.PEStreamOptions)\">\r\n    <summary>\r\n    Creates a single-module assembly.\r\n    </summary>\r\n    <param name=\"peStream\">Manifest module PE image stream.</param>\r\n    <param name=\"options\">False to close the stream upon disposal of the metadata.</param>\r\n    <exception cref=\"T:System.BadImageFormatException\">The PE image format is invalid.</exception>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public override void Dispose()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.Dispose\">\r\n    <summary>\r\n    Disposes all modules contained in the assembly.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 363
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public override void Dispose()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.Dispose\">\r\n    <summary>\r\n    Disposes all modules contained in the assembly.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 363
              },
              "Id": "M:Microsoft.CodeAnalysis.AssemblyMetadata.Dispose",
              "Parent": "T:Microsoft.CodeAnalysis.AssemblyMetadata",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.Dispose\">\r\n    <summary>\r\n    Disposes all modules contained in the assembly.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ModuleMetadata}": ""
                },
                "Content": "public ImmutableArray<ModuleMetadata> GetModules()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.GetModules\">\r\n    <summary>\r\n    Modules comprising this assembly. The first module is the manifest module.\r\n    </summary>\r\n    <exception cref=\"T:System.BadImageFormatException\">The PE image format is invalid.</exception>\r\n    <exception cref=\"T:System.IO.IOException\">IO error reading the metadata. See <see cref=\"P:System.Exception.InnerException\"/> for details.</exception>\r\n    <exception cref=\"T:System.ObjectDisposedException\">The object has been disposed.</exception>\r\n</member>\r\n",
                "StartLine": 271
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ModuleMetadata}": ""
                },
                "Content": "public ImmutableArray<ModuleMetadata> GetModules()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.GetModules\">\r\n    <summary>\r\n    Modules comprising this assembly. The first module is the manifest module.\r\n    </summary>\r\n    <exception cref=\"T:System.BadImageFormatException\">The PE image format is invalid.</exception>\r\n    <exception cref=\"T:System.IO.IOException\">IO error reading the metadata. See <see cref=\"P:System.Exception.InnerException\"/> for details.</exception>\r\n    <exception cref=\"T:System.ObjectDisposedException\">The object has been disposed.</exception>\r\n</member>\r\n",
                "StartLine": 271
              },
              "Id": "M:Microsoft.CodeAnalysis.AssemblyMetadata.GetModules",
              "Parent": "T:Microsoft.CodeAnalysis.AssemblyMetadata",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.GetModules\">\r\n    <summary>\r\n    Modules comprising this assembly. The first module is the manifest module.\r\n    </summary>\r\n    <exception cref=\"T:System.BadImageFormatException\">The PE image format is invalid.</exception>\r\n    <exception cref=\"T:System.IO.IOException\">IO error reading the metadata. See <see cref=\"P:System.Exception.InnerException\"/> for details.</exception>\r\n    <exception cref=\"T:System.ObjectDisposedException\">The object has been disposed.</exception>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.DocumentationProvider : documentation": "",
                  "T:System.Boolean : embedInteropTypes": "",
                  "T:System.Collections.Immutable.ImmutableArray{System.String} : aliases": "",
                  "T:System.String : display": "",
                  "T:System.String : filePath": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.PortableExecutableReference": ""
                },
                "Content": "public PortableExecutableReference GetReference(DocumentationProvider documentation = null, ImmutableArray<string> aliases = default (ImmutableArray<string>), bool embedInteropTypes = false, string filePath = null, string display = null)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.GetReference(Microsoft.CodeAnalysis.DocumentationProvider,System.Collections.Immutable.ImmutableArray{System.String},System.Boolean,System.String,System.String)\">\r\n    <summary>\r\n    Creates a reference to the assembly metadata.\r\n    </summary>\r\n    <param name=\"documentation\">Provider of XML documentation comments for the metadata symbols contained in the module.</param>\r\n    <param name=\"aliases\">Aliases that can be used to refer to the assembly from source code (see \"extern alias\" directive in C#).</param>\r\n    <param name=\"embedInteropTypes\">True to embed interop types from the referenced assembly to the referencing compilation. Must be false for a module.</param>\r\n    <param name=\"filePath\">Path describing the location of the metadata, or null if the metadata have no location.</param>\r\n    <param name=\"display\">Display string used in error messages to identity the reference.</param>\r\n    <returns>A reference to the assembly metadata.</returns>\r\n</member>\r\n",
                "StartLine": 439
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.DocumentationProvider : documentation": "",
                  "T:System.Boolean : embedInteropTypes": "",
                  "T:System.Collections.Immutable.ImmutableArray{System.String} : aliases": "",
                  "T:System.String : display": "",
                  "T:System.String : filePath": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.PortableExecutableReference": ""
                },
                "Content": "public PortableExecutableReference GetReference(DocumentationProvider documentation = null, ImmutableArray<string> aliases = default (ImmutableArray<string>), bool embedInteropTypes = false, string filePath = null, string display = null)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.GetReference(Microsoft.CodeAnalysis.DocumentationProvider,System.Collections.Immutable.ImmutableArray{System.String},System.Boolean,System.String,System.String)\">\r\n    <summary>\r\n    Creates a reference to the assembly metadata.\r\n    </summary>\r\n    <param name=\"documentation\">Provider of XML documentation comments for the metadata symbols contained in the module.</param>\r\n    <param name=\"aliases\">Aliases that can be used to refer to the assembly from source code (see \"extern alias\" directive in C#).</param>\r\n    <param name=\"embedInteropTypes\">True to embed interop types from the referenced assembly to the referencing compilation. Must be false for a module.</param>\r\n    <param name=\"filePath\">Path describing the location of the metadata, or null if the metadata have no location.</param>\r\n    <param name=\"display\">Display string used in error messages to identity the reference.</param>\r\n    <returns>A reference to the assembly metadata.</returns>\r\n</member>\r\n",
                "StartLine": 439
              },
              "Id": "M:Microsoft.CodeAnalysis.AssemblyMetadata.GetReference(Microsoft.CodeAnalysis.DocumentationProvider,System.Collections.Immutable.ImmutableArray{System.String},System.Boolean,System.String,System.String)",
              "Parent": "T:Microsoft.CodeAnalysis.AssemblyMetadata",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.GetReference(Microsoft.CodeAnalysis.DocumentationProvider,System.Collections.Immutable.ImmutableArray{System.String},System.Boolean,System.String,System.String)\">\r\n    <summary>\r\n    Creates a reference to the assembly metadata.\r\n    </summary>\r\n    <param name=\"documentation\">Provider of XML documentation comments for the metadata symbols contained in the module.</param>\r\n    <param name=\"aliases\">Aliases that can be used to refer to the assembly from source code (see \"extern alias\" directive in C#).</param>\r\n    <param name=\"embedInteropTypes\">True to embed interop types from the referenced assembly to the referencing compilation. Must be false for a module.</param>\r\n    <param name=\"filePath\">Path describing the location of the metadata, or null if the metadata have no location.</param>\r\n    <param name=\"display\">Display string used in error messages to identity the reference.</param>\r\n    <returns>A reference to the assembly metadata.</returns>\r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.MetadataImageKind",
                "Content": "public override MetadataImageKind Kind",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.AssemblyMetadata.Kind\">\r\n    <summary>\r\n    Returns the metadata kind. <seealso cref=\"T:Microsoft.CodeAnalysis.MetadataImageKind\"/>\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 425
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.MetadataImageKind",
                "Content": "public override MetadataImageKind Kind",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.AssemblyMetadata.Kind\">\r\n    <summary>\r\n    Returns the metadata kind. <seealso cref=\"T:Microsoft.CodeAnalysis.MetadataImageKind\"/>\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 425
              },
              "Id": "P:Microsoft.CodeAnalysis.AssemblyMetadata.Kind",
              "Parent": "T:Microsoft.CodeAnalysis.AssemblyMetadata",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.AssemblyMetadata.Kind\">\r\n    <summary>\r\n    Returns the metadata kind. <seealso cref=\"T:Microsoft.CodeAnalysis.MetadataImageKind\"/>\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\MetadataReference\\AssemblyMetadata.cs",
          "InheritanceHierarchy": [
            "T:System.Object",
            "T:Microsoft.CodeAnalysis.Metadata"
          ],
          "Syntax": {
            "Content": "public sealed class AssemblyMetadata",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.AssemblyMetadata\">\r\n    <summary>\r\n    Represents an immutable snapshot of assembly CLI metadata.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.AssemblyMetadata",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.AssemblyMetadata\">\r\n    <summary>\r\n    Represents an immutable snapshot of assembly CLI metadata.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SyntaxReference",
                "Content": "public SyntaxReference ApplicationSyntaxReference",
                "XmlDocumentation": "",
                "StartLine": 32
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SyntaxReference",
                "Content": "public SyntaxReference ApplicationSyntaxReference",
                "XmlDocumentation": "",
                "StartLine": 32
              },
              "Id": "P:Microsoft.CodeAnalysis.AttributeData.ApplicationSyntaxReference",
              "Parent": "T:Microsoft.CodeAnalysis.AttributeData",
              "XmlDocumentation": ""
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.INamedTypeSymbol",
                "Content": "public INamedTypeSymbol AttributeClass",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.AttributeData.AttributeClass\">\r\n    <summary>\r\n    The attribute class.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 23
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.INamedTypeSymbol",
                "Content": "public INamedTypeSymbol AttributeClass",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.AttributeData.AttributeClass\">\r\n    <summary>\r\n    The attribute class.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 23
              },
              "Id": "P:Microsoft.CodeAnalysis.AttributeData.AttributeClass",
              "Parent": "T:Microsoft.CodeAnalysis.AttributeData",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.AttributeData.AttributeClass\">\r\n    <summary>\r\n    The attribute class.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.IMethodSymbol",
                "Content": "public IMethodSymbol AttributeConstructor",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.AttributeData.AttributeConstructor\">\r\n    <summary>\r\n    The constructor on the attribute class.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 29
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.IMethodSymbol",
                "Content": "public IMethodSymbol AttributeConstructor",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.AttributeData.AttributeConstructor\">\r\n    <summary>\r\n    The constructor on the attribute class.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 29
              },
              "Id": "P:Microsoft.CodeAnalysis.AttributeData.AttributeConstructor",
              "Parent": "T:Microsoft.CodeAnalysis.AttributeData",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.AttributeData.AttributeConstructor\">\r\n    <summary>\r\n    The constructor on the attribute class.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SyntaxReference",
                "Content": "protected abstract SyntaxReference CommonApplicationSyntaxReference",
                "XmlDocumentation": "",
                "StartLine": 33
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SyntaxReference",
                "Content": "protected abstract SyntaxReference CommonApplicationSyntaxReference",
                "XmlDocumentation": "",
                "StartLine": 33
              },
              "Id": "P:Microsoft.CodeAnalysis.AttributeData.CommonApplicationSyntaxReference",
              "Parent": "T:Microsoft.CodeAnalysis.AttributeData",
              "XmlDocumentation": ""
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.INamedTypeSymbol",
                "Content": "protected abstract INamedTypeSymbol CommonAttributeClass",
                "XmlDocumentation": "",
                "StartLine": 24
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.INamedTypeSymbol",
                "Content": "protected abstract INamedTypeSymbol CommonAttributeClass",
                "XmlDocumentation": "",
                "StartLine": 24
              },
              "Id": "P:Microsoft.CodeAnalysis.AttributeData.CommonAttributeClass",
              "Parent": "T:Microsoft.CodeAnalysis.AttributeData",
              "XmlDocumentation": ""
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.IMethodSymbol",
                "Content": "protected abstract IMethodSymbol CommonAttributeConstructor",
                "XmlDocumentation": "",
                "StartLine": 30
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.IMethodSymbol",
                "Content": "protected abstract IMethodSymbol CommonAttributeConstructor",
                "XmlDocumentation": "",
                "StartLine": 30
              },
              "Id": "P:Microsoft.CodeAnalysis.AttributeData.CommonAttributeConstructor",
              "Parent": "T:Microsoft.CodeAnalysis.AttributeData",
              "XmlDocumentation": ""
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.TypedConstant}",
                "Content": "public ImmutableArray<TypedConstant> ConstructorArguments",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.AttributeData.ConstructorArguments\">\r\n    <summary>\r\n    Constructor arguments on the attribute.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 39
              },
              "Syntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.TypedConstant}",
                "Content": "public ImmutableArray<TypedConstant> ConstructorArguments",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.AttributeData.ConstructorArguments\">\r\n    <summary>\r\n    Constructor arguments on the attribute.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 39
              },
              "Id": "P:Microsoft.CodeAnalysis.AttributeData.ConstructorArguments",
              "Parent": "T:Microsoft.CodeAnalysis.AttributeData",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.AttributeData.ConstructorArguments\">\r\n    <summary>\r\n    Constructor arguments on the attribute.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{System.Collections.Generic.KeyValuePair{System.String,Microsoft.CodeAnalysis.TypedConstant}}",
                "Content": "public ImmutableArray<KeyValuePair<string, TypedConstant>> NamedArguments",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.AttributeData.NamedArguments\">\r\n    <summary>\r\n    Named (property value) arguments on the attribute. \r\n    </summary>\r\n</member>\r\n",
                "StartLine": 45
              },
              "Syntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{System.Collections.Generic.KeyValuePair{System.String,Microsoft.CodeAnalysis.TypedConstant}}",
                "Content": "public ImmutableArray<KeyValuePair<string, TypedConstant>> NamedArguments",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.AttributeData.NamedArguments\">\r\n    <summary>\r\n    Named (property value) arguments on the attribute. \r\n    </summary>\r\n</member>\r\n",
                "StartLine": 45
              },
              "Id": "P:Microsoft.CodeAnalysis.AttributeData.NamedArguments",
              "Parent": "T:Microsoft.CodeAnalysis.AttributeData",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.AttributeData.NamedArguments\">\r\n    <summary>\r\n    Named (property value) arguments on the attribute. \r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Constructors": [
            {
              "ConstructorSyntax": {
                "Parameters": {},
                "Content": "protected AttributeData()",
                "XmlDocumentation": "",
                "StartLine": 16
              },
              "Syntax": {
                "Parameters": {},
                "Content": "protected AttributeData()",
                "XmlDocumentation": "",
                "StartLine": 16
              },
              "Id": "M:Microsoft.CodeAnalysis.AttributeData.#ctor",
              "Parent": "T:Microsoft.CodeAnalysis.AttributeData",
              "XmlDocumentation": ""
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Symbols\\Attributes\\CommonAttributeData.cs",
          "InheritanceHierarchy": [
            "T:System.Object"
          ],
          "Syntax": {
            "Content": "public abstract class AttributeData",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.CodeAnalysis.AttributeData",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.String : left": "",
                  "T:System.String : right": ""
                },
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public static int Compare(string left, string right)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.CaseInsensitiveComparison.Compare(System.String,System.String)\">\r\n    <summary>\r\n    Compares two VB identifiers according to the VB identifier comparison rules.\r\n    </summary>\r\n    <param name=\"left\">First identifier to compare</param>\r\n    <param name=\"right\">Second identifier to compare</param>\r\n    <returns>-1 if <paramref name=\"left\"/> &lt; <paramref name=\"right\"/>, 1 if <paramref name=\"left\"/> &gt; <paramref name=\"right\"/>, 0 if they are equal.</returns>\r\n</member>\r\n",
                "StartLine": 218
              },
              "Syntax": {
                "Parameters": {
                  "T:System.String : left": "",
                  "T:System.String : right": ""
                },
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public static int Compare(string left, string right)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.CaseInsensitiveComparison.Compare(System.String,System.String)\">\r\n    <summary>\r\n    Compares two VB identifiers according to the VB identifier comparison rules.\r\n    </summary>\r\n    <param name=\"left\">First identifier to compare</param>\r\n    <param name=\"right\">Second identifier to compare</param>\r\n    <returns>-1 if <paramref name=\"left\"/> &lt; <paramref name=\"right\"/>, 1 if <paramref name=\"left\"/> &gt; <paramref name=\"right\"/>, 0 if they are equal.</returns>\r\n</member>\r\n",
                "StartLine": 218
              },
              "Id": "M:Microsoft.CodeAnalysis.CaseInsensitiveComparison.Compare(System.String,System.String)",
              "Parent": "T:Microsoft.CodeAnalysis.CaseInsensitiveComparison",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.CaseInsensitiveComparison.Compare(System.String,System.String)\">\r\n    <summary>\r\n    Compares two VB identifiers according to the VB identifier comparison rules.\r\n    </summary>\r\n    <param name=\"left\">First identifier to compare</param>\r\n    <param name=\"right\">Second identifier to compare</param>\r\n    <returns>-1 if <paramref name=\"left\"/> &lt; <paramref name=\"right\"/>, 1 if <paramref name=\"left\"/> &gt; <paramref name=\"right\"/>, 0 if they are equal.</returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.String : possibleEnd": "",
                  "T:System.String : value": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public static bool EndsWith(string value, string possibleEnd)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.CaseInsensitiveComparison.EndsWith(System.String,System.String)\">\r\n    <summary>\r\n    Determines if the string 'value' end with string 'possibleEnd'.\r\n    </summary>\r\n    <param name=\"value\"></param>\r\n    <param name=\"possibleEnd\"></param>\r\n    <returns></returns>\r\n</member>\r\n",
                "StartLine": 207
              },
              "Syntax": {
                "Parameters": {
                  "T:System.String : possibleEnd": "",
                  "T:System.String : value": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public static bool EndsWith(string value, string possibleEnd)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.CaseInsensitiveComparison.EndsWith(System.String,System.String)\">\r\n    <summary>\r\n    Determines if the string 'value' end with string 'possibleEnd'.\r\n    </summary>\r\n    <param name=\"value\"></param>\r\n    <param name=\"possibleEnd\"></param>\r\n    <returns></returns>\r\n</member>\r\n",
                "StartLine": 207
              },
              "Id": "M:Microsoft.CodeAnalysis.CaseInsensitiveComparison.EndsWith(System.String,System.String)",
              "Parent": "T:Microsoft.CodeAnalysis.CaseInsensitiveComparison",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.CaseInsensitiveComparison.EndsWith(System.String,System.String)\">\r\n    <summary>\r\n    Determines if the string 'value' end with string 'possibleEnd'.\r\n    </summary>\r\n    <param name=\"value\"></param>\r\n    <param name=\"possibleEnd\"></param>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.String : left": "",
                  "T:System.String : right": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public static bool Equals(string left, string right)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.CaseInsensitiveComparison.Equals(System.String,System.String)\">\r\n    <summary>\r\n    Determines if two VB identifiers are equal according to the VB identifier comparison rules.\r\n    </summary>\r\n    <param name=\"left\">First identifier to compare</param>\r\n    <param name=\"right\">Second identifier to compare</param>\r\n    <returns>true if the identifiers should be considered the same.</returns>\r\n</member>\r\n",
                "StartLine": 196
              },
              "Syntax": {
                "Parameters": {
                  "T:System.String : left": "",
                  "T:System.String : right": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public static bool Equals(string left, string right)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.CaseInsensitiveComparison.Equals(System.String,System.String)\">\r\n    <summary>\r\n    Determines if two VB identifiers are equal according to the VB identifier comparison rules.\r\n    </summary>\r\n    <param name=\"left\">First identifier to compare</param>\r\n    <param name=\"right\">Second identifier to compare</param>\r\n    <returns>true if the identifiers should be considered the same.</returns>\r\n</member>\r\n",
                "StartLine": 196
              },
              "Id": "M:Microsoft.CodeAnalysis.CaseInsensitiveComparison.Equals(System.String,System.String)",
              "Parent": "T:Microsoft.CodeAnalysis.CaseInsensitiveComparison",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.CaseInsensitiveComparison.Equals(System.String,System.String)\">\r\n    <summary>\r\n    Determines if two VB identifiers are equal according to the VB identifier comparison rules.\r\n    </summary>\r\n    <param name=\"left\">First identifier to compare</param>\r\n    <param name=\"right\">Second identifier to compare</param>\r\n    <returns>true if the identifiers should be considered the same.</returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.String : value": ""
                },
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public static int GetHashCode(string value)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.CaseInsensitiveComparison.GetHashCode(System.String)\">\r\n    <summary>\r\n    Gets a case-insensitive hash code for VB identifiers.\r\n    </summary>\r\n    <param name=\"value\">identifier to get the hash code for</param>\r\n    <returns>The hash code for the given identifier</returns>\r\n</member>\r\n",
                "StartLine": 228
              },
              "Syntax": {
                "Parameters": {
                  "T:System.String : value": ""
                },
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public static int GetHashCode(string value)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.CaseInsensitiveComparison.GetHashCode(System.String)\">\r\n    <summary>\r\n    Gets a case-insensitive hash code for VB identifiers.\r\n    </summary>\r\n    <param name=\"value\">identifier to get the hash code for</param>\r\n    <returns>The hash code for the given identifier</returns>\r\n</member>\r\n",
                "StartLine": 228
              },
              "Id": "M:Microsoft.CodeAnalysis.CaseInsensitiveComparison.GetHashCode(System.String)",
              "Parent": "T:Microsoft.CodeAnalysis.CaseInsensitiveComparison",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.CaseInsensitiveComparison.GetHashCode(System.String)\">\r\n    <summary>\r\n    Gets a case-insensitive hash code for VB identifiers.\r\n    </summary>\r\n    <param name=\"value\">identifier to get the hash code for</param>\r\n    <returns>The hash code for the given identifier</returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.String : value": ""
                },
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public static string ToLower(string value)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.CaseInsensitiveComparison.ToLower(System.String)\">\r\n    <summary>\r\n    Convert a string to lower case in culture invariant way\r\n    </summary>\r\n    <param name=\"value\"></param>\r\n    <returns></returns>\r\n</member>\r\n",
                "StartLine": 240
              },
              "Syntax": {
                "Parameters": {
                  "T:System.String : value": ""
                },
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public static string ToLower(string value)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.CaseInsensitiveComparison.ToLower(System.String)\">\r\n    <summary>\r\n    Convert a string to lower case in culture invariant way\r\n    </summary>\r\n    <param name=\"value\"></param>\r\n    <returns></returns>\r\n</member>\r\n",
                "StartLine": 240
              },
              "Id": "M:Microsoft.CodeAnalysis.CaseInsensitiveComparison.ToLower(System.String)",
              "Parent": "T:Microsoft.CodeAnalysis.CaseInsensitiveComparison",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.CaseInsensitiveComparison.ToLower(System.String)\">\r\n    <summary>\r\n    Convert a string to lower case in culture invariant way\r\n    </summary>\r\n    <param name=\"value\"></param>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Text.StringBuilder : builder": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public static void ToLower(StringBuilder builder)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.CaseInsensitiveComparison.ToLower(System.Text.StringBuilder)\">\r\n    <summary>\r\n    In-place convert string in StringBuilder to lower case in culture invariant way\r\n    </summary>\r\n    <param name=\"builder\"></param>\r\n</member>\r\n",
                "StartLine": 261
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Text.StringBuilder : builder": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public static void ToLower(StringBuilder builder)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.CaseInsensitiveComparison.ToLower(System.Text.StringBuilder)\">\r\n    <summary>\r\n    In-place convert string in StringBuilder to lower case in culture invariant way\r\n    </summary>\r\n    <param name=\"builder\"></param>\r\n</member>\r\n",
                "StartLine": 261
              },
              "Id": "M:Microsoft.CodeAnalysis.CaseInsensitiveComparison.ToLower(System.Text.StringBuilder)",
              "Parent": "T:Microsoft.CodeAnalysis.CaseInsensitiveComparison",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.CaseInsensitiveComparison.ToLower(System.Text.StringBuilder)\">\r\n    <summary>\r\n    In-place convert string in StringBuilder to lower case in culture invariant way\r\n    </summary>\r\n    <param name=\"builder\"></param>\r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:System.StringComparer",
                "Content": "public static StringComparer Comparer",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.CaseInsensitiveComparison.Comparer\">\r\n    <summary>\r\n    Returns a StringComparer that compares strings according the VB identifier comparison rules.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 185
              },
              "Syntax": {
                "PropertyType": "T:System.StringComparer",
                "Content": "public static StringComparer Comparer",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.CaseInsensitiveComparison.Comparer\">\r\n    <summary>\r\n    Returns a StringComparer that compares strings according the VB identifier comparison rules.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 185
              },
              "Id": "P:Microsoft.CodeAnalysis.CaseInsensitiveComparison.Comparer",
              "Parent": "T:Microsoft.CodeAnalysis.CaseInsensitiveComparison",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.CaseInsensitiveComparison.Comparer\">\r\n    <summary>\r\n    Returns a StringComparer that compares strings according the VB identifier comparison rules.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\CaseInsensitiveComparison.cs",
          "InheritanceHierarchy": [
            "T:System.Object"
          ],
          "Syntax": {
            "Content": "public static class CaseInsensitiveComparison",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.CaseInsensitiveComparison\">\r\n    <summary>\r\n    Case-insensitive operations (mostly comparison) on unicode strings.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.CaseInsensitiveComparison",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.CaseInsensitiveComparison\">\r\n    <summary>\r\n    Case-insensitive operations (mostly comparison) on unicode strings.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Array : references": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Compilation": ""
                },
                "Content": "public Compilation AddReferences(params MetadataReference[] references)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.AddReferences(Microsoft.CodeAnalysis.MetadataReference[])\">\r\n    <summary>\r\n    Creates a new compilation with additional metadata references.\r\n    </summary>\r\n    <param name=\"references\">The new references.</param>\r\n    <returns>A new compilation.</returns>\r\n</member>\r\n",
                "StartLine": 586
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Array : references": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Compilation": ""
                },
                "Content": "public Compilation AddReferences(params MetadataReference[] references)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.AddReferences(Microsoft.CodeAnalysis.MetadataReference[])\">\r\n    <summary>\r\n    Creates a new compilation with additional metadata references.\r\n    </summary>\r\n    <param name=\"references\">The new references.</param>\r\n    <returns>A new compilation.</returns>\r\n</member>\r\n",
                "StartLine": 586
              },
              "Id": "M:Microsoft.CodeAnalysis.Compilation.AddReferences(Microsoft.CodeAnalysis.MetadataReference[])",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.AddReferences(Microsoft.CodeAnalysis.MetadataReference[])\">\r\n    <summary>\r\n    Creates a new compilation with additional metadata references.\r\n    </summary>\r\n    <param name=\"references\">The new references.</param>\r\n    <returns>A new compilation.</returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.MetadataReference} : references": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Compilation": ""
                },
                "Content": "public Compilation AddReferences(IEnumerable<MetadataReference> references)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.AddReferences(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.MetadataReference})\">\r\n    <summary>\r\n    Creates a new compilation with additional metadata references.\r\n    </summary>\r\n    <param name=\"references\">The new references.</param>\r\n    <returns>A new compilation.</returns>\r\n</member>\r\n",
                "StartLine": 596
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.MetadataReference} : references": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Compilation": ""
                },
                "Content": "public Compilation AddReferences(IEnumerable<MetadataReference> references)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.AddReferences(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.MetadataReference})\">\r\n    <summary>\r\n    Creates a new compilation with additional metadata references.\r\n    </summary>\r\n    <param name=\"references\">The new references.</param>\r\n    <returns>A new compilation.</returns>\r\n</member>\r\n",
                "StartLine": 596
              },
              "Id": "M:Microsoft.CodeAnalysis.Compilation.AddReferences(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.MetadataReference})",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.AddReferences(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.MetadataReference})\">\r\n    <summary>\r\n    Creates a new compilation with additional metadata references.\r\n    </summary>\r\n    <param name=\"references\">The new references.</param>\r\n    <returns>A new compilation.</returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Array : trees": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Compilation": ""
                },
                "Content": "public Compilation AddSyntaxTrees(params SyntaxTree[] trees)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.AddSyntaxTrees(Microsoft.CodeAnalysis.SyntaxTree[])\">\r\n    <summary>\r\n    Creates a new compilation with additional syntax trees.\r\n    </summary>\r\n    <param name=\"trees\">The new syntax trees.</param>\r\n    <returns>A new compilation.</returns>\r\n</member>\r\n",
                "StartLine": 386
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Array : trees": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Compilation": ""
                },
                "Content": "public Compilation AddSyntaxTrees(params SyntaxTree[] trees)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.AddSyntaxTrees(Microsoft.CodeAnalysis.SyntaxTree[])\">\r\n    <summary>\r\n    Creates a new compilation with additional syntax trees.\r\n    </summary>\r\n    <param name=\"trees\">The new syntax trees.</param>\r\n    <returns>A new compilation.</returns>\r\n</member>\r\n",
                "StartLine": 386
              },
              "Id": "M:Microsoft.CodeAnalysis.Compilation.AddSyntaxTrees(Microsoft.CodeAnalysis.SyntaxTree[])",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.AddSyntaxTrees(Microsoft.CodeAnalysis.SyntaxTree[])\">\r\n    <summary>\r\n    Creates a new compilation with additional syntax trees.\r\n    </summary>\r\n    <param name=\"trees\">The new syntax trees.</param>\r\n    <returns>A new compilation.</returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTree} : trees": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Compilation": ""
                },
                "Content": "public Compilation AddSyntaxTrees(IEnumerable<SyntaxTree> trees)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.AddSyntaxTrees(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTree})\">\r\n    <summary>\r\n    Creates a new compilation with additional syntax trees.\r\n    </summary>\r\n    <param name=\"trees\">The new syntax trees.</param>\r\n    <returns>A new compilation.</returns>\r\n</member>\r\n",
                "StartLine": 396
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTree} : trees": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Compilation": ""
                },
                "Content": "public Compilation AddSyntaxTrees(IEnumerable<SyntaxTree> trees)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.AddSyntaxTrees(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTree})\">\r\n    <summary>\r\n    Creates a new compilation with additional syntax trees.\r\n    </summary>\r\n    <param name=\"trees\">The new syntax trees.</param>\r\n    <returns>A new compilation.</returns>\r\n</member>\r\n",
                "StartLine": 396
              },
              "Id": "M:Microsoft.CodeAnalysis.Compilation.AddSyntaxTrees(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTree})",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.AddSyntaxTrees(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTree})\">\r\n    <summary>\r\n    Creates a new compilation with additional syntax trees.\r\n    </summary>\r\n    <param name=\"trees\">The new syntax trees.</param>\r\n    <returns>A new compilation.</returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.IO.Stream : resourceStream": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "protected abstract void AppendDefaultVersionResource(Stream resourceStream);",
                "XmlDocumentation": "",
                "StartLine": 957
              },
              "Syntax": {
                "Parameters": {
                  "T:System.IO.Stream : resourceStream": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "protected abstract void AppendDefaultVersionResource(Stream resourceStream);",
                "XmlDocumentation": "",
                "StartLine": 957
              },
              "Id": "M:Microsoft.CodeAnalysis.Compilation.AppendDefaultVersionResource(System.IO.Stream)",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Compilation": ""
                },
                "Content": "public Compilation Clone()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.Clone\">\r\n    <summary>\r\n    Creates a new compilation equivalent to this one with different symbol instances.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 146
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Compilation": ""
                },
                "Content": "public Compilation Clone()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.Clone\">\r\n    <summary>\r\n    Creates a new compilation equivalent to this one with different symbol instances.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 146
              },
              "Id": "M:Microsoft.CodeAnalysis.Compilation.Clone",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.Clone\">\r\n    <summary>\r\n    Creates a new compilation equivalent to this one with different symbol instances.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTree} : trees": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Compilation": ""
                },
                "Content": "protected abstract Compilation CommonAddSyntaxTrees(IEnumerable<SyntaxTree> trees);",
                "XmlDocumentation": "",
                "StartLine": 401
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTree} : trees": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Compilation": ""
                },
                "Content": "protected abstract Compilation CommonAddSyntaxTrees(IEnumerable<SyntaxTree> trees);",
                "XmlDocumentation": "",
                "StartLine": 401
              },
              "Id": "M:Microsoft.CodeAnalysis.Compilation.CommonAddSyntaxTrees(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTree})",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Compilation": ""
                },
                "Content": "protected abstract Compilation CommonClone();",
                "XmlDocumentation": "",
                "StartLine": 151
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Compilation": ""
                },
                "Content": "protected abstract Compilation CommonClone();",
                "XmlDocumentation": "",
                "StartLine": 151
              },
              "Id": "M:Microsoft.CodeAnalysis.Compilation.CommonClone",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxTree : syntaxTree": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "protected abstract bool CommonContainsSyntaxTree(SyntaxTree syntaxTree);",
                "XmlDocumentation": "",
                "StartLine": 461
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxTree : syntaxTree": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "protected abstract bool CommonContainsSyntaxTree(SyntaxTree syntaxTree);",
                "XmlDocumentation": "",
                "StartLine": 461
              },
              "Id": "M:Microsoft.CodeAnalysis.Compilation.CommonContainsSyntaxTree(Microsoft.CodeAnalysis.SyntaxTree)",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.ITypeSymbol : elementType": "",
                  "T:System.Int32 : rank": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.IArrayTypeSymbol": ""
                },
                "Content": "protected abstract IArrayTypeSymbol CommonCreateArrayTypeSymbol(ITypeSymbol elementType, int rank);",
                "XmlDocumentation": "",
                "StartLine": 818
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.ITypeSymbol : elementType": "",
                  "T:System.Int32 : rank": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.IArrayTypeSymbol": ""
                },
                "Content": "protected abstract IArrayTypeSymbol CommonCreateArrayTypeSymbol(ITypeSymbol elementType, int rank);",
                "XmlDocumentation": "",
                "StartLine": 818
              },
              "Id": "M:Microsoft.CodeAnalysis.Compilation.CommonCreateArrayTypeSymbol(Microsoft.CodeAnalysis.ITypeSymbol,System.Int32)",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.ITypeSymbol : elementType": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.IPointerTypeSymbol": ""
                },
                "Content": "protected abstract IPointerTypeSymbol CommonCreatePointerTypeSymbol(ITypeSymbol elementType);",
                "XmlDocumentation": "",
                "StartLine": 829
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.ITypeSymbol : elementType": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.IPointerTypeSymbol": ""
                },
                "Content": "protected abstract IPointerTypeSymbol CommonCreatePointerTypeSymbol(ITypeSymbol elementType);",
                "XmlDocumentation": "",
                "StartLine": 829
              },
              "Id": "M:Microsoft.CodeAnalysis.Compilation.CommonCreatePointerTypeSymbol(Microsoft.CodeAnalysis.ITypeSymbol)",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.MetadataReference : reference": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.ISymbol": ""
                },
                "Content": "protected abstract ISymbol CommonGetAssemblyOrModuleSymbol(MetadataReference reference);",
                "XmlDocumentation": "",
                "StartLine": 697
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.MetadataReference : reference": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.ISymbol": ""
                },
                "Content": "protected abstract ISymbol CommonGetAssemblyOrModuleSymbol(MetadataReference reference);",
                "XmlDocumentation": "",
                "StartLine": 697
              },
              "Id": "M:Microsoft.CodeAnalysis.Compilation.CommonGetAssemblyOrModuleSymbol(Microsoft.CodeAnalysis.MetadataReference)",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.INamespaceSymbol : namespaceSymbol": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.INamespaceSymbol": ""
                },
                "Content": "protected abstract INamespaceSymbol CommonGetCompilationNamespace(INamespaceSymbol namespaceSymbol);",
                "XmlDocumentation": "",
                "StartLine": 751
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.INamespaceSymbol : namespaceSymbol": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.INamespaceSymbol": ""
                },
                "Content": "protected abstract INamespaceSymbol CommonGetCompilationNamespace(INamespaceSymbol namespaceSymbol);",
                "XmlDocumentation": "",
                "StartLine": 751
              },
              "Id": "M:Microsoft.CodeAnalysis.Compilation.CommonGetCompilationNamespace(Microsoft.CodeAnalysis.INamespaceSymbol)",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.IMethodSymbol": ""
                },
                "Content": "protected abstract IMethodSymbol CommonGetEntryPoint(CancellationToken cancellationToken);",
                "XmlDocumentation": "",
                "StartLine": 764
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.IMethodSymbol": ""
                },
                "Content": "protected abstract IMethodSymbol CommonGetEntryPoint(CancellationToken cancellationToken);",
                "XmlDocumentation": "",
                "StartLine": 764
              },
              "Id": "M:Microsoft.CodeAnalysis.Compilation.CommonGetEntryPoint(System.Threading.CancellationToken)",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.IAssemblySymbol : assemblySymbol": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.MetadataReference": ""
                },
                "Content": "protected abstract MetadataReference CommonGetMetadataReference(IAssemblySymbol assemblySymbol);",
                "XmlDocumentation": "",
                "StartLine": 708
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.IAssemblySymbol : assemblySymbol": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.MetadataReference": ""
                },
                "Content": "protected abstract MetadataReference CommonGetMetadataReference(IAssemblySymbol assemblySymbol);",
                "XmlDocumentation": "",
                "StartLine": 708
              },
              "Id": "M:Microsoft.CodeAnalysis.Compilation.CommonGetMetadataReference(Microsoft.CodeAnalysis.IAssemblySymbol)",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxTree : syntaxTree": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SemanticModel": ""
                },
                "Content": "protected abstract SemanticModel CommonGetSemanticModel(SyntaxTree syntaxTree);",
                "XmlDocumentation": "",
                "StartLine": 166
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxTree : syntaxTree": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SemanticModel": ""
                },
                "Content": "protected abstract SemanticModel CommonGetSemanticModel(SyntaxTree syntaxTree);",
                "XmlDocumentation": "",
                "StartLine": 166
              },
              "Id": "M:Microsoft.CodeAnalysis.Compilation.CommonGetSemanticModel(Microsoft.CodeAnalysis.SyntaxTree)",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SpecialType : specialType": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.INamedTypeSymbol": ""
                },
                "Content": "protected abstract INamedTypeSymbol CommonGetSpecialType(SpecialType specialType);",
                "XmlDocumentation": "",
                "StartLine": 780
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SpecialType : specialType": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.INamedTypeSymbol": ""
                },
                "Content": "protected abstract INamedTypeSymbol CommonGetSpecialType(SpecialType specialType);",
                "XmlDocumentation": "",
                "StartLine": 780
              },
              "Id": "M:Microsoft.CodeAnalysis.Compilation.CommonGetSpecialType(Microsoft.CodeAnalysis.SpecialType)",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Boolean : hasValue": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.ITypeSymbol": ""
                },
                "Content": "protected abstract ITypeSymbol CommonGetSubmissionResultType(out bool hasValue);",
                "XmlDocumentation": "",
                "StartLine": 349
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Boolean : hasValue": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.ITypeSymbol": ""
                },
                "Content": "protected abstract ITypeSymbol CommonGetSubmissionResultType(out bool hasValue);",
                "XmlDocumentation": "",
                "StartLine": 349
              },
              "Id": "M:Microsoft.CodeAnalysis.Compilation.CommonGetSubmissionResultType(System.Boolean@)",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.String : metadataName": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.INamedTypeSymbol": ""
                },
                "Content": "protected abstract INamedTypeSymbol CommonGetTypeByMetadataName(string metadataName);",
                "XmlDocumentation": "",
                "StartLine": 844
              },
              "Syntax": {
                "Parameters": {
                  "T:System.String : metadataName": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.INamedTypeSymbol": ""
                },
                "Content": "protected abstract INamedTypeSymbol CommonGetTypeByMetadataName(string metadataName);",
                "XmlDocumentation": "",
                "StartLine": 844
              },
              "Id": "M:Microsoft.CodeAnalysis.Compilation.CommonGetTypeByMetadataName(System.String)",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Compilation": ""
                },
                "Content": "protected abstract Compilation CommonRemoveAllSyntaxTrees();",
                "XmlDocumentation": "",
                "StartLine": 436
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Compilation": ""
                },
                "Content": "protected abstract Compilation CommonRemoveAllSyntaxTrees();",
                "XmlDocumentation": "",
                "StartLine": 436
              },
              "Id": "M:Microsoft.CodeAnalysis.Compilation.CommonRemoveAllSyntaxTrees",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTree} : trees": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Compilation": ""
                },
                "Content": "protected abstract Compilation CommonRemoveSyntaxTrees(IEnumerable<SyntaxTree> trees);",
                "XmlDocumentation": "",
                "StartLine": 425
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTree} : trees": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Compilation": ""
                },
                "Content": "protected abstract Compilation CommonRemoveSyntaxTrees(IEnumerable<SyntaxTree> trees);",
                "XmlDocumentation": "",
                "StartLine": 425
              },
              "Id": "M:Microsoft.CodeAnalysis.Compilation.CommonRemoveSyntaxTrees(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTree})",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxTree : newTree": "",
                  "T:Microsoft.CodeAnalysis.SyntaxTree : oldTree": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Compilation": ""
                },
                "Content": "protected abstract Compilation CommonReplaceSyntaxTree(SyntaxTree oldTree, SyntaxTree newTree);",
                "XmlDocumentation": "",
                "StartLine": 450
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxTree : newTree": "",
                  "T:Microsoft.CodeAnalysis.SyntaxTree : oldTree": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Compilation": ""
                },
                "Content": "protected abstract Compilation CommonReplaceSyntaxTree(SyntaxTree oldTree, SyntaxTree newTree);",
                "XmlDocumentation": "",
                "StartLine": 450
              },
              "Id": "M:Microsoft.CodeAnalysis.Compilation.CommonReplaceSyntaxTree(Microsoft.CodeAnalysis.SyntaxTree,Microsoft.CodeAnalysis.SyntaxTree)",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.String : outputName": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Compilation": ""
                },
                "Content": "protected abstract Compilation CommonWithAssemblyName(string outputName);",
                "XmlDocumentation": "",
                "StartLine": 224
              },
              "Syntax": {
                "Parameters": {
                  "T:System.String : outputName": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Compilation": ""
                },
                "Content": "protected abstract Compilation CommonWithAssemblyName(string outputName);",
                "XmlDocumentation": "",
                "StartLine": 224
              },
              "Id": "M:Microsoft.CodeAnalysis.Compilation.CommonWithAssemblyName(System.String)",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.CompilationOptions : options": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Compilation": ""
                },
                "Content": "protected abstract Compilation CommonWithOptions(CompilationOptions options);",
                "XmlDocumentation": "",
                "StartLine": 247
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.CompilationOptions : options": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Compilation": ""
                },
                "Content": "protected abstract Compilation CommonWithOptions(CompilationOptions options);",
                "XmlDocumentation": "",
                "StartLine": 247
              },
              "Id": "M:Microsoft.CodeAnalysis.Compilation.CommonWithOptions(Microsoft.CodeAnalysis.CompilationOptions)",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Compilation : newPreviousSubmission": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Compilation": ""
                },
                "Content": "protected abstract Compilation CommonWithPreviousSubmission(Compilation newPreviousSubmission);",
                "XmlDocumentation": "",
                "StartLine": 369
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Compilation : newPreviousSubmission": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Compilation": ""
                },
                "Content": "protected abstract Compilation CommonWithPreviousSubmission(Compilation newPreviousSubmission);",
                "XmlDocumentation": "",
                "StartLine": 369
              },
              "Id": "M:Microsoft.CodeAnalysis.Compilation.CommonWithPreviousSubmission(Microsoft.CodeAnalysis.Compilation)",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.MetadataReference} : newReferences": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Compilation": ""
                },
                "Content": "protected abstract Compilation CommonWithReferences(IEnumerable<MetadataReference> newReferences);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.CommonWithReferences(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.MetadataReference})\">\r\n    <summary>\r\n    Creates a new compilation with the specified references.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 579
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.MetadataReference} : newReferences": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Compilation": ""
                },
                "Content": "protected abstract Compilation CommonWithReferences(IEnumerable<MetadataReference> newReferences);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.CommonWithReferences(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.MetadataReference})\">\r\n    <summary>\r\n    Creates a new compilation with the specified references.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 579
              },
              "Id": "M:Microsoft.CodeAnalysis.Compilation.CommonWithReferences(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.MetadataReference})",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.CommonWithReferences(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.MetadataReference})\">\r\n    <summary>\r\n    Creates a new compilation with the specified references.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SymbolFilter : filter": "",
                  "T:System.Func{System.String,System.Boolean} : predicate": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public abstract bool ContainsSymbolsWithName(Func<string, bool> predicate, SymbolFilter filter = SymbolFilter.TypeAndMember, CancellationToken cancellationToken = default (CancellationToken));",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.ContainsSymbolsWithName(System.Func{System.String,System.Boolean},Microsoft.CodeAnalysis.SymbolFilter,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Return true if there is a source declaration symbol name that meets given predicate.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 1839
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SymbolFilter : filter": "",
                  "T:System.Func{System.String,System.Boolean} : predicate": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public abstract bool ContainsSymbolsWithName(Func<string, bool> predicate, SymbolFilter filter = SymbolFilter.TypeAndMember, CancellationToken cancellationToken = default (CancellationToken));",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.ContainsSymbolsWithName(System.Func{System.String,System.Boolean},Microsoft.CodeAnalysis.SymbolFilter,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Return true if there is a source declaration symbol name that meets given predicate.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 1839
              },
              "Id": "M:Microsoft.CodeAnalysis.Compilation.ContainsSymbolsWithName(System.Func{System.String,System.Boolean},Microsoft.CodeAnalysis.SymbolFilter,System.Threading.CancellationToken)",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.ContainsSymbolsWithName(System.Func{System.String,System.Boolean},Microsoft.CodeAnalysis.SymbolFilter,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Return true if there is a source declaration symbol name that meets given predicate.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxTree : syntaxTree": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool ContainsSyntaxTree(SyntaxTree syntaxTree)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.ContainsSyntaxTree(Microsoft.CodeAnalysis.SyntaxTree)\">\r\n    <summary>\r\n    Returns true if this compilation contains the specified tree. False otherwise.\r\n    </summary>\r\n    <param name=\"syntaxTree\">A syntax tree.</param>\r\n</member>\r\n",
                "StartLine": 456
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxTree : syntaxTree": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool ContainsSyntaxTree(SyntaxTree syntaxTree)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.ContainsSyntaxTree(Microsoft.CodeAnalysis.SyntaxTree)\">\r\n    <summary>\r\n    Returns true if this compilation contains the specified tree. False otherwise.\r\n    </summary>\r\n    <param name=\"syntaxTree\">A syntax tree.</param>\r\n</member>\r\n",
                "StartLine": 456
              },
              "Id": "M:Microsoft.CodeAnalysis.Compilation.ContainsSyntaxTree(Microsoft.CodeAnalysis.SyntaxTree)",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.ContainsSyntaxTree(Microsoft.CodeAnalysis.SyntaxTree)\">\r\n    <summary>\r\n    Returns true if this compilation contains the specified tree. False otherwise.\r\n    </summary>\r\n    <param name=\"syntaxTree\">A syntax tree.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.ITypeSymbol : elementType": "",
                  "T:System.Int32 : rank": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.IArrayTypeSymbol": ""
                },
                "Content": "public IArrayTypeSymbol CreateArrayTypeSymbol(ITypeSymbol elementType, int rank = 1)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.CreateArrayTypeSymbol(Microsoft.CodeAnalysis.ITypeSymbol,System.Int32)\">\r\n    <summary>\r\n    Returns a new ArrayTypeSymbol representing an array type tied to the base types of the\r\n    COR Library in this Compilation.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 813
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.ITypeSymbol : elementType": "",
                  "T:System.Int32 : rank": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.IArrayTypeSymbol": ""
                },
                "Content": "public IArrayTypeSymbol CreateArrayTypeSymbol(ITypeSymbol elementType, int rank = 1)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.CreateArrayTypeSymbol(Microsoft.CodeAnalysis.ITypeSymbol,System.Int32)\">\r\n    <summary>\r\n    Returns a new ArrayTypeSymbol representing an array type tied to the base types of the\r\n    COR Library in this Compilation.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 813
              },
              "Id": "M:Microsoft.CodeAnalysis.Compilation.CreateArrayTypeSymbol(Microsoft.CodeAnalysis.ITypeSymbol,System.Int32)",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.CreateArrayTypeSymbol(Microsoft.CodeAnalysis.ITypeSymbol,System.Int32)\">\r\n    <summary>\r\n    Returns a new ArrayTypeSymbol representing an array type tied to the base types of the\r\n    COR Library in this Compilation.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Boolean : noManifest": "",
                  "T:System.Boolean : versionResource": "",
                  "T:System.IO.Stream : iconInIcoFormat": "",
                  "T:System.IO.Stream : manifestContents": ""
                },
                "Returns": {
                  "T:System.IO.Stream": ""
                },
                "Content": "public Stream CreateDefaultWin32Resources(bool versionResource, bool noManifest, Stream manifestContents, Stream iconInIcoFormat)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.CreateDefaultWin32Resources(System.Boolean,System.Boolean,System.IO.Stream,System.IO.Stream)\">\r\n    <summary>\r\n    Create a stream filled with default win32 resources.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 895
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Boolean : noManifest": "",
                  "T:System.Boolean : versionResource": "",
                  "T:System.IO.Stream : iconInIcoFormat": "",
                  "T:System.IO.Stream : manifestContents": ""
                },
                "Returns": {
                  "T:System.IO.Stream": ""
                },
                "Content": "public Stream CreateDefaultWin32Resources(bool versionResource, bool noManifest, Stream manifestContents, Stream iconInIcoFormat)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.CreateDefaultWin32Resources(System.Boolean,System.Boolean,System.IO.Stream,System.IO.Stream)\">\r\n    <summary>\r\n    Create a stream filled with default win32 resources.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 895
              },
              "Id": "M:Microsoft.CodeAnalysis.Compilation.CreateDefaultWin32Resources(System.Boolean,System.Boolean,System.IO.Stream,System.IO.Stream)",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.CreateDefaultWin32Resources(System.Boolean,System.Boolean,System.IO.Stream,System.IO.Stream)\">\r\n    <summary>\r\n    Create a stream filled with default win32 resources.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.INamespaceOrTypeSymbol : container": "",
                  "T:System.Int32 : arity": "",
                  "T:System.String : name": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.INamedTypeSymbol": ""
                },
                "Content": "public abstract INamedTypeSymbol CreateErrorTypeSymbol(INamespaceOrTypeSymbol container, string name, int arity);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.CreateErrorTypeSymbol(Microsoft.CodeAnalysis.INamespaceOrTypeSymbol,System.String,System.Int32)\">\r\n    <summary>\r\n    Returns a new INamedTypeSymbol representing an error type with the given name and arity\r\n    in the given optional container.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 172
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.INamespaceOrTypeSymbol : container": "",
                  "T:System.Int32 : arity": "",
                  "T:System.String : name": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.INamedTypeSymbol": ""
                },
                "Content": "public abstract INamedTypeSymbol CreateErrorTypeSymbol(INamespaceOrTypeSymbol container, string name, int arity);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.CreateErrorTypeSymbol(Microsoft.CodeAnalysis.INamespaceOrTypeSymbol,System.String,System.Int32)\">\r\n    <summary>\r\n    Returns a new INamedTypeSymbol representing an error type with the given name and arity\r\n    in the given optional container.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 172
              },
              "Id": "M:Microsoft.CodeAnalysis.Compilation.CreateErrorTypeSymbol(Microsoft.CodeAnalysis.INamespaceOrTypeSymbol,System.String,System.Int32)",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.CreateErrorTypeSymbol(Microsoft.CodeAnalysis.INamespaceOrTypeSymbol,System.String,System.Int32)\">\r\n    <summary>\r\n    Returns a new INamedTypeSymbol representing an error type with the given name and arity\r\n    in the given optional container.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.ITypeSymbol : pointedAtType": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.IPointerTypeSymbol": ""
                },
                "Content": "public IPointerTypeSymbol CreatePointerTypeSymbol(ITypeSymbol pointedAtType)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.CreatePointerTypeSymbol(Microsoft.CodeAnalysis.ITypeSymbol)\">\r\n    <summary>\r\n    Returns a new PointerTypeSymbol representing a pointer type tied to a type in this\r\n    Compilation.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 824
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.ITypeSymbol : pointedAtType": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.IPointerTypeSymbol": ""
                },
                "Content": "public IPointerTypeSymbol CreatePointerTypeSymbol(ITypeSymbol pointedAtType)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.CreatePointerTypeSymbol(Microsoft.CodeAnalysis.ITypeSymbol)\">\r\n    <summary>\r\n    Returns a new PointerTypeSymbol representing a pointer type tied to a type in this\r\n    Compilation.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 824
              },
              "Id": "M:Microsoft.CodeAnalysis.Compilation.CreatePointerTypeSymbol(Microsoft.CodeAnalysis.ITypeSymbol)",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.CreatePointerTypeSymbol(Microsoft.CodeAnalysis.ITypeSymbol)\">\r\n    <summary>\r\n    Returns a new PointerTypeSymbol representing a pointer type tied to a type in this\r\n    Compilation.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Emit.EmitOptions : options": "",
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.ResourceDescription} : manifestResources": "",
                  "T:System.IO.Stream : pdbStream": "",
                  "T:System.IO.Stream : peStream": "",
                  "T:System.IO.Stream : win32Resources": "",
                  "T:System.IO.Stream : xmlDocumentationStream": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Emit.EmitResult": ""
                },
                "Content": "public EmitResult Emit(Stream peStream, Stream pdbStream = null, Stream xmlDocumentationStream = null, Stream win32Resources = null, IEnumerable<ResourceDescription> manifestResources = null, EmitOptions options = null, CancellationToken cancellationToken = default (CancellationToken))",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.Emit(System.IO.Stream,System.IO.Stream,System.IO.Stream,System.IO.Stream,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.ResourceDescription},Microsoft.CodeAnalysis.Emit.EmitOptions,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Emit the IL for the compiled source code into the specified stream.\r\n    </summary>\r\n    <param name=\"peStream\">Stream to which the compilation will be written.</param>\r\n    <param name=\"pdbStream\">Stream to which the compilation's debug info will be written.  Null to forego PDB generation.</param>\r\n    <param name=\"xmlDocumentationStream\">Stream to which the compilation's XML documentation will be written.  Null to forego XML generation.</param>\r\n    <param name=\"win32Resources\">Stream from which the compilation's Win32 resources will be read (in RES format).  \r\n    Null to indicate that there are none. The RES format begins with a null resource entry.</param>\r\n    <param name=\"manifestResources\">List of the compilation's managed resources.  Null to indicate that there are none.</param>\r\n    <param name=\"options\">Emit options.</param>\r\n    <param name=\"cancellationToken\">To cancel the emit process.</param>\r\n</member>\r\n",
                "StartLine": 1320
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Emit.EmitOptions : options": "",
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.ResourceDescription} : manifestResources": "",
                  "T:System.IO.Stream : pdbStream": "",
                  "T:System.IO.Stream : peStream": "",
                  "T:System.IO.Stream : win32Resources": "",
                  "T:System.IO.Stream : xmlDocumentationStream": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Emit.EmitResult": ""
                },
                "Content": "public EmitResult Emit(Stream peStream, Stream pdbStream = null, Stream xmlDocumentationStream = null, Stream win32Resources = null, IEnumerable<ResourceDescription> manifestResources = null, EmitOptions options = null, CancellationToken cancellationToken = default (CancellationToken))",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.Emit(System.IO.Stream,System.IO.Stream,System.IO.Stream,System.IO.Stream,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.ResourceDescription},Microsoft.CodeAnalysis.Emit.EmitOptions,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Emit the IL for the compiled source code into the specified stream.\r\n    </summary>\r\n    <param name=\"peStream\">Stream to which the compilation will be written.</param>\r\n    <param name=\"pdbStream\">Stream to which the compilation's debug info will be written.  Null to forego PDB generation.</param>\r\n    <param name=\"xmlDocumentationStream\">Stream to which the compilation's XML documentation will be written.  Null to forego XML generation.</param>\r\n    <param name=\"win32Resources\">Stream from which the compilation's Win32 resources will be read (in RES format).  \r\n    Null to indicate that there are none. The RES format begins with a null resource entry.</param>\r\n    <param name=\"manifestResources\">List of the compilation's managed resources.  Null to indicate that there are none.</param>\r\n    <param name=\"options\">Emit options.</param>\r\n    <param name=\"cancellationToken\">To cancel the emit process.</param>\r\n</member>\r\n",
                "StartLine": 1320
              },
              "Id": "M:Microsoft.CodeAnalysis.Compilation.Emit(System.IO.Stream,System.IO.Stream,System.IO.Stream,System.IO.Stream,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.ResourceDescription},Microsoft.CodeAnalysis.Emit.EmitOptions,System.Threading.CancellationToken)",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.Emit(System.IO.Stream,System.IO.Stream,System.IO.Stream,System.IO.Stream,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.ResourceDescription},Microsoft.CodeAnalysis.Emit.EmitOptions,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Emit the IL for the compiled source code into the specified stream.\r\n    </summary>\r\n    <param name=\"peStream\">Stream to which the compilation will be written.</param>\r\n    <param name=\"pdbStream\">Stream to which the compilation's debug info will be written.  Null to forego PDB generation.</param>\r\n    <param name=\"xmlDocumentationStream\">Stream to which the compilation's XML documentation will be written.  Null to forego XML generation.</param>\r\n    <param name=\"win32Resources\">Stream from which the compilation's Win32 resources will be read (in RES format).  \r\n    Null to indicate that there are none. The RES format begins with a null resource entry.</param>\r\n    <param name=\"manifestResources\">List of the compilation's managed resources.  Null to indicate that there are none.</param>\r\n    <param name=\"options\">Emit options.</param>\r\n    <param name=\"cancellationToken\">To cancel the emit process.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Emit.EmitBaseline : baseline": "",
                  "T:System.Collections.Generic.ICollection{System.Reflection.Metadata.MethodDefinitionHandle} : updatedMethods": "",
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Emit.SemanticEdit} : edits": "",
                  "T:System.Func{Microsoft.CodeAnalysis.ISymbol,System.Boolean} : isAddedSymbol": "",
                  "T:System.IO.Stream : ilStream": "",
                  "T:System.IO.Stream : metadataStream": "",
                  "T:System.IO.Stream : pdbStream": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Emit.EmitDifferenceResult": ""
                },
                "Content": "public EmitDifferenceResult EmitDifference(EmitBaseline baseline, IEnumerable<SemanticEdit> edits, Func<ISymbol, bool> isAddedSymbol, Stream metadataStream, Stream ilStream, Stream pdbStream, ICollection<MethodDefinitionHandle> updatedMethods, CancellationToken cancellationToken = default (CancellationToken))",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.EmitDifference(Microsoft.CodeAnalysis.Emit.EmitBaseline,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Emit.SemanticEdit},System.Func{Microsoft.CodeAnalysis.ISymbol,System.Boolean},System.IO.Stream,System.IO.Stream,System.IO.Stream,System.Collections.Generic.ICollection{System.Reflection.Metadata.MethodDefinitionHandle},System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Emit the differences between the compilation and the previous generation\r\n    for Edit and Continue. The differences are expressed as added and changed\r\n    symbols, and are emitted as metadata, IL, and PDB deltas. A representation\r\n    of the current compilation is returned as an EmitBaseline for use in a\r\n    subsequent Edit and Continue.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 1381
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Emit.EmitBaseline : baseline": "",
                  "T:System.Collections.Generic.ICollection{System.Reflection.Metadata.MethodDefinitionHandle} : updatedMethods": "",
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Emit.SemanticEdit} : edits": "",
                  "T:System.Func{Microsoft.CodeAnalysis.ISymbol,System.Boolean} : isAddedSymbol": "",
                  "T:System.IO.Stream : ilStream": "",
                  "T:System.IO.Stream : metadataStream": "",
                  "T:System.IO.Stream : pdbStream": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Emit.EmitDifferenceResult": ""
                },
                "Content": "public EmitDifferenceResult EmitDifference(EmitBaseline baseline, IEnumerable<SemanticEdit> edits, Func<ISymbol, bool> isAddedSymbol, Stream metadataStream, Stream ilStream, Stream pdbStream, ICollection<MethodDefinitionHandle> updatedMethods, CancellationToken cancellationToken = default (CancellationToken))",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.EmitDifference(Microsoft.CodeAnalysis.Emit.EmitBaseline,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Emit.SemanticEdit},System.Func{Microsoft.CodeAnalysis.ISymbol,System.Boolean},System.IO.Stream,System.IO.Stream,System.IO.Stream,System.Collections.Generic.ICollection{System.Reflection.Metadata.MethodDefinitionHandle},System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Emit the differences between the compilation and the previous generation\r\n    for Edit and Continue. The differences are expressed as added and changed\r\n    symbols, and are emitted as metadata, IL, and PDB deltas. A representation\r\n    of the current compilation is returned as an EmitBaseline for use in a\r\n    subsequent Edit and Continue.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 1381
              },
              "Id": "M:Microsoft.CodeAnalysis.Compilation.EmitDifference(Microsoft.CodeAnalysis.Emit.EmitBaseline,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Emit.SemanticEdit},System.Func{Microsoft.CodeAnalysis.ISymbol,System.Boolean},System.IO.Stream,System.IO.Stream,System.IO.Stream,System.Collections.Generic.ICollection{System.Reflection.Metadata.MethodDefinitionHandle},System.Threading.CancellationToken)",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.EmitDifference(Microsoft.CodeAnalysis.Emit.EmitBaseline,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Emit.SemanticEdit},System.Func{Microsoft.CodeAnalysis.ISymbol,System.Boolean},System.IO.Stream,System.IO.Stream,System.IO.Stream,System.Collections.Generic.ICollection{System.Reflection.Metadata.MethodDefinitionHandle},System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Emit the differences between the compilation and the previous generation\r\n    for Edit and Continue. The differences are expressed as added and changed\r\n    symbols, and are emitted as metadata, IL, and PDB deltas. A representation\r\n    of the current compilation is returned as an EmitBaseline for use in a\r\n    subsequent Edit and Continue.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Emit.EmitBaseline : baseline": "",
                  "T:System.Collections.Generic.ICollection{System.Reflection.Metadata.MethodDefinitionHandle} : updatedMethods": "",
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Emit.SemanticEdit} : edits": "",
                  "T:System.IO.Stream : ilStream": "",
                  "T:System.IO.Stream : metadataStream": "",
                  "T:System.IO.Stream : pdbStream": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Emit.EmitDifferenceResult": ""
                },
                "Content": "public EmitDifferenceResult EmitDifference(EmitBaseline baseline, IEnumerable<SemanticEdit> edits, Stream metadataStream, Stream ilStream, Stream pdbStream, ICollection<MethodDefinitionHandle> updatedMethods, CancellationToken cancellationToken = default (CancellationToken))",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.EmitDifference(Microsoft.CodeAnalysis.Emit.EmitBaseline,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Emit.SemanticEdit},System.IO.Stream,System.IO.Stream,System.IO.Stream,System.Collections.Generic.ICollection{System.Reflection.Metadata.MethodDefinitionHandle},System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Emit the differences between the compilation and the previous generation\r\n    for Edit and Continue. The differences are expressed as added and changed\r\n    symbols, and are emitted as metadata, IL, and PDB deltas. A representation\r\n    of the current compilation is returned as an EmitBaseline for use in a\r\n    subsequent Edit and Continue.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 1362
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Emit.EmitBaseline : baseline": "",
                  "T:System.Collections.Generic.ICollection{System.Reflection.Metadata.MethodDefinitionHandle} : updatedMethods": "",
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Emit.SemanticEdit} : edits": "",
                  "T:System.IO.Stream : ilStream": "",
                  "T:System.IO.Stream : metadataStream": "",
                  "T:System.IO.Stream : pdbStream": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Emit.EmitDifferenceResult": ""
                },
                "Content": "public EmitDifferenceResult EmitDifference(EmitBaseline baseline, IEnumerable<SemanticEdit> edits, Stream metadataStream, Stream ilStream, Stream pdbStream, ICollection<MethodDefinitionHandle> updatedMethods, CancellationToken cancellationToken = default (CancellationToken))",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.EmitDifference(Microsoft.CodeAnalysis.Emit.EmitBaseline,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Emit.SemanticEdit},System.IO.Stream,System.IO.Stream,System.IO.Stream,System.Collections.Generic.ICollection{System.Reflection.Metadata.MethodDefinitionHandle},System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Emit the differences between the compilation and the previous generation\r\n    for Edit and Continue. The differences are expressed as added and changed\r\n    symbols, and are emitted as metadata, IL, and PDB deltas. A representation\r\n    of the current compilation is returned as an EmitBaseline for use in a\r\n    subsequent Edit and Continue.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 1362
              },
              "Id": "M:Microsoft.CodeAnalysis.Compilation.EmitDifference(Microsoft.CodeAnalysis.Emit.EmitBaseline,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Emit.SemanticEdit},System.IO.Stream,System.IO.Stream,System.IO.Stream,System.Collections.Generic.ICollection{System.Reflection.Metadata.MethodDefinitionHandle},System.Threading.CancellationToken)",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.EmitDifference(Microsoft.CodeAnalysis.Emit.EmitBaseline,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Emit.SemanticEdit},System.IO.Stream,System.IO.Stream,System.IO.Stream,System.Collections.Generic.ICollection{System.Reflection.Metadata.MethodDefinitionHandle},System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Emit the differences between the compilation and the previous generation\r\n    for Edit and Continue. The differences are expressed as added and changed\r\n    symbols, and are emitted as metadata, IL, and PDB deltas. A representation\r\n    of the current compilation is returned as an EmitBaseline for use in a\r\n    subsequent Edit and Continue.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.MetadataReference : reference": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.ISymbol": ""
                },
                "Content": "public ISymbol GetAssemblyOrModuleSymbol(MetadataReference reference)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.GetAssemblyOrModuleSymbol(Microsoft.CodeAnalysis.MetadataReference)\">\r\n    <summary>\r\n    Gets the <see cref=\"T:Microsoft.CodeAnalysis.IAssemblySymbol\"/> or <see cref=\"T:Microsoft.CodeAnalysis.IModuleSymbol\"/> for a metadata reference used to create this\r\n    compilation.\r\n    </summary>\r\n    <param name=\"reference\">The target reference.</param>\r\n    <returns>\r\n    Assembly or module symbol corresponding to the given reference or null if there is none.\r\n    </returns>\r\n</member>\r\n",
                "StartLine": 692
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.MetadataReference : reference": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.ISymbol": ""
                },
                "Content": "public ISymbol GetAssemblyOrModuleSymbol(MetadataReference reference)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.GetAssemblyOrModuleSymbol(Microsoft.CodeAnalysis.MetadataReference)\">\r\n    <summary>\r\n    Gets the <see cref=\"T:Microsoft.CodeAnalysis.IAssemblySymbol\"/> or <see cref=\"T:Microsoft.CodeAnalysis.IModuleSymbol\"/> for a metadata reference used to create this\r\n    compilation.\r\n    </summary>\r\n    <param name=\"reference\">The target reference.</param>\r\n    <returns>\r\n    Assembly or module symbol corresponding to the given reference or null if there is none.\r\n    </returns>\r\n</member>\r\n",
                "StartLine": 692
              },
              "Id": "M:Microsoft.CodeAnalysis.Compilation.GetAssemblyOrModuleSymbol(Microsoft.CodeAnalysis.MetadataReference)",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.GetAssemblyOrModuleSymbol(Microsoft.CodeAnalysis.MetadataReference)\">\r\n    <summary>\r\n    Gets the <see cref=\"T:Microsoft.CodeAnalysis.IAssemblySymbol\"/> or <see cref=\"T:Microsoft.CodeAnalysis.IModuleSymbol\"/> for a metadata reference used to create this\r\n    compilation.\r\n    </summary>\r\n    <param name=\"reference\">The target reference.</param>\r\n    <returns>\r\n    Assembly or module symbol corresponding to the given reference or null if there is none.\r\n    </returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.INamespaceSymbol : namespaceSymbol": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.INamespaceSymbol": ""
                },
                "Content": "public INamespaceSymbol GetCompilationNamespace(INamespaceSymbol namespaceSymbol)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.GetCompilationNamespace(Microsoft.CodeAnalysis.INamespaceSymbol)\">\r\n    <summary>\r\n    Gets the corresponding compilation namespace for the specified module or assembly namespace.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 746
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.INamespaceSymbol : namespaceSymbol": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.INamespaceSymbol": ""
                },
                "Content": "public INamespaceSymbol GetCompilationNamespace(INamespaceSymbol namespaceSymbol)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.GetCompilationNamespace(Microsoft.CodeAnalysis.INamespaceSymbol)\">\r\n    <summary>\r\n    Gets the corresponding compilation namespace for the specified module or assembly namespace.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 746
              },
              "Id": "M:Microsoft.CodeAnalysis.Compilation.GetCompilationNamespace(Microsoft.CodeAnalysis.INamespaceSymbol)",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.GetCompilationNamespace(Microsoft.CodeAnalysis.INamespaceSymbol)\">\r\n    <summary>\r\n    Gets the corresponding compilation namespace for the specified module or assembly namespace.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostic}": ""
                },
                "Content": "public abstract ImmutableArray<Diagnostic> GetDeclarationDiagnostics(CancellationToken cancellationToken = default (CancellationToken));",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.GetDeclarationDiagnostics(System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Gets the diagnostics produced during symbol declaration.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 860
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostic}": ""
                },
                "Content": "public abstract ImmutableArray<Diagnostic> GetDeclarationDiagnostics(CancellationToken cancellationToken = default (CancellationToken));",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.GetDeclarationDiagnostics(System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Gets the diagnostics produced during symbol declaration.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 860
              },
              "Id": "M:Microsoft.CodeAnalysis.Compilation.GetDeclarationDiagnostics(System.Threading.CancellationToken)",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.GetDeclarationDiagnostics(System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Gets the diagnostics produced during symbol declaration.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostic}": ""
                },
                "Content": "public abstract ImmutableArray<Diagnostic> GetDiagnostics(CancellationToken cancellationToken = default (CancellationToken));",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.GetDiagnostics(System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Gets all the diagnostics for the compilation, including syntax, declaration, and\r\n    binding. Does not include any diagnostics that might be produced during emit, see\r\n    <see cref=\"T:Microsoft.CodeAnalysis.Emit.EmitResult\"/>.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 872
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostic}": ""
                },
                "Content": "public abstract ImmutableArray<Diagnostic> GetDiagnostics(CancellationToken cancellationToken = default (CancellationToken));",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.GetDiagnostics(System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Gets all the diagnostics for the compilation, including syntax, declaration, and\r\n    binding. Does not include any diagnostics that might be produced during emit, see\r\n    <see cref=\"T:Microsoft.CodeAnalysis.Emit.EmitResult\"/>.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 872
              },
              "Id": "M:Microsoft.CodeAnalysis.Compilation.GetDiagnostics(System.Threading.CancellationToken)",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.GetDiagnostics(System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Gets all the diagnostics for the compilation, including syntax, declaration, and\r\n    binding. Does not include any diagnostics that might be produced during emit, see\r\n    <see cref=\"T:Microsoft.CodeAnalysis.Emit.EmitResult\"/>.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.IMethodSymbol": ""
                },
                "Content": "public IMethodSymbol GetEntryPoint(CancellationToken cancellationToken)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.GetEntryPoint(System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Returns the Main method that will serves as the entry point of the assembly, if it is\r\n    executable (and not a script).\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 759
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.IMethodSymbol": ""
                },
                "Content": "public IMethodSymbol GetEntryPoint(CancellationToken cancellationToken)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.GetEntryPoint(System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Returns the Main method that will serves as the entry point of the assembly, if it is\r\n    executable (and not a script).\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 759
              },
              "Id": "M:Microsoft.CodeAnalysis.Compilation.GetEntryPoint(System.Threading.CancellationToken)",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.GetEntryPoint(System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Returns the Main method that will serves as the entry point of the assembly, if it is\r\n    executable (and not a script).\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.IAssemblySymbol : assemblySymbol": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.MetadataReference": ""
                },
                "Content": "public MetadataReference GetMetadataReference(IAssemblySymbol assemblySymbol)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.GetMetadataReference(Microsoft.CodeAnalysis.IAssemblySymbol)\">\r\n    <summary>\r\n    Gets the <see cref=\"T:Microsoft.CodeAnalysis.MetadataReference\"/> that corresponds to the assembly symbol. \r\n    </summary>\r\n    <param name=\"assemblySymbol\">The target symbol.</param>\r\n</member>\r\n",
                "StartLine": 703
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.IAssemblySymbol : assemblySymbol": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.MetadataReference": ""
                },
                "Content": "public MetadataReference GetMetadataReference(IAssemblySymbol assemblySymbol)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.GetMetadataReference(Microsoft.CodeAnalysis.IAssemblySymbol)\">\r\n    <summary>\r\n    Gets the <see cref=\"T:Microsoft.CodeAnalysis.MetadataReference\"/> that corresponds to the assembly symbol. \r\n    </summary>\r\n    <param name=\"assemblySymbol\">The target symbol.</param>\r\n</member>\r\n",
                "StartLine": 703
              },
              "Id": "M:Microsoft.CodeAnalysis.Compilation.GetMetadataReference(Microsoft.CodeAnalysis.IAssemblySymbol)",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.GetMetadataReference(Microsoft.CodeAnalysis.IAssemblySymbol)\">\r\n    <summary>\r\n    Gets the <see cref=\"T:Microsoft.CodeAnalysis.MetadataReference\"/> that corresponds to the assembly symbol. \r\n    </summary>\r\n    <param name=\"assemblySymbol\">The target symbol.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostic}": ""
                },
                "Content": "public abstract ImmutableArray<Diagnostic> GetMethodBodyDiagnostics(CancellationToken cancellationToken = default (CancellationToken));",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.GetMethodBodyDiagnostics(System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Gets the diagnostics produced during the analysis of method bodies and field initializers.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 865
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostic}": ""
                },
                "Content": "public abstract ImmutableArray<Diagnostic> GetMethodBodyDiagnostics(CancellationToken cancellationToken = default (CancellationToken));",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.GetMethodBodyDiagnostics(System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Gets the diagnostics produced during the analysis of method bodies and field initializers.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 865
              },
              "Id": "M:Microsoft.CodeAnalysis.Compilation.GetMethodBodyDiagnostics(System.Threading.CancellationToken)",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.GetMethodBodyDiagnostics(System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Gets the diagnostics produced during the analysis of method bodies and field initializers.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostic}": ""
                },
                "Content": "public abstract ImmutableArray<Diagnostic> GetParseDiagnostics(CancellationToken cancellationToken = default (CancellationToken));",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.GetParseDiagnostics(System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Gets the diagnostics produced during the parsing stage.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 855
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostic}": ""
                },
                "Content": "public abstract ImmutableArray<Diagnostic> GetParseDiagnostics(CancellationToken cancellationToken = default (CancellationToken));",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.GetParseDiagnostics(System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Gets the diagnostics produced during the parsing stage.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 855
              },
              "Id": "M:Microsoft.CodeAnalysis.Compilation.GetParseDiagnostics(System.Threading.CancellationToken)",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.GetParseDiagnostics(System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Gets the diagnostics produced during the parsing stage.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxTree : syntaxTree": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SemanticModel": ""
                },
                "Content": "public SemanticModel GetSemanticModel(SyntaxTree syntaxTree)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.GetSemanticModel(Microsoft.CodeAnalysis.SyntaxTree)\">\r\n    <summary>\r\n    Gets a new <see cref=\"T:Microsoft.CodeAnalysis.SemanticModel\"/> for the specified syntax tree.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 161
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxTree : syntaxTree": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SemanticModel": ""
                },
                "Content": "public SemanticModel GetSemanticModel(SyntaxTree syntaxTree)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.GetSemanticModel(Microsoft.CodeAnalysis.SyntaxTree)\">\r\n    <summary>\r\n    Gets a new <see cref=\"T:Microsoft.CodeAnalysis.SemanticModel\"/> for the specified syntax tree.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 161
              },
              "Id": "M:Microsoft.CodeAnalysis.Compilation.GetSemanticModel(Microsoft.CodeAnalysis.SyntaxTree)",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.GetSemanticModel(Microsoft.CodeAnalysis.SyntaxTree)\">\r\n    <summary>\r\n    Gets a new <see cref=\"T:Microsoft.CodeAnalysis.SemanticModel\"/> for the specified syntax tree.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SpecialType : specialType": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.INamedTypeSymbol": ""
                },
                "Content": "public INamedTypeSymbol GetSpecialType(SpecialType specialType)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.GetSpecialType(Microsoft.CodeAnalysis.SpecialType)\">\r\n    <summary>\r\n    Get the symbol for the predefined type from the Cor Library referenced by this\r\n    compilation.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 770
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SpecialType : specialType": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.INamedTypeSymbol": ""
                },
                "Content": "public INamedTypeSymbol GetSpecialType(SpecialType specialType)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.GetSpecialType(Microsoft.CodeAnalysis.SpecialType)\">\r\n    <summary>\r\n    Get the symbol for the predefined type from the Cor Library referenced by this\r\n    compilation.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 770
              },
              "Id": "M:Microsoft.CodeAnalysis.Compilation.GetSpecialType(Microsoft.CodeAnalysis.SpecialType)",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.GetSpecialType(Microsoft.CodeAnalysis.SpecialType)\">\r\n    <summary>\r\n    Get the symbol for the predefined type from the Cor Library referenced by this\r\n    compilation.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Boolean : hasValue": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.ITypeSymbol": ""
                },
                "Content": "public ITypeSymbol GetSubmissionResultType(out bool hasValue)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.GetSubmissionResultType(System.Boolean@)\">\r\n    <summary>\r\n    Returns the type of the submission return value.\r\n    </summary>\r\n    <param name=\"hasValue\">\r\n    True if the submission has a return value, i.e. if the submission\r\n    ends with an expression statement.\r\n    </param>\r\n    <exception cref=\"T:System.InvalidOperationException\">\r\n    The compilation doesn't represent a submission\r\n    (<see cref=\"P:Microsoft.CodeAnalysis.Compilation.IsSubmission\"/> return false).\r\n    </exception>\r\n    <returns>\r\n    Null if the type of the last expression is unknown, \r\n    <see cref=\"T:System.Void\"/> if the type of the last expression statement is\r\n    void or if the submission is not an expression statement, or\r\n    otherwise the type of the last expression.\r\n    </returns>\r\n    <remarks>\r\n    Note that the return type is <see cref=\"T:System.Void\"/> if the last\r\n    statement is a non-expression statement e.g.,\r\n    <code>System.Console.WriteLine();</code>\r\n    and if the statement is an expression statement of type void e.g,\r\n    <code>System.Console.WriteLine()</code>. However,\r\n    <paramref name=\"hasValue\"/> is false in the former case and true\r\n    in the latter.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 344
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Boolean : hasValue": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.ITypeSymbol": ""
                },
                "Content": "public ITypeSymbol GetSubmissionResultType(out bool hasValue)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.GetSubmissionResultType(System.Boolean@)\">\r\n    <summary>\r\n    Returns the type of the submission return value.\r\n    </summary>\r\n    <param name=\"hasValue\">\r\n    True if the submission has a return value, i.e. if the submission\r\n    ends with an expression statement.\r\n    </param>\r\n    <exception cref=\"T:System.InvalidOperationException\">\r\n    The compilation doesn't represent a submission\r\n    (<see cref=\"P:Microsoft.CodeAnalysis.Compilation.IsSubmission\"/> return false).\r\n    </exception>\r\n    <returns>\r\n    Null if the type of the last expression is unknown, \r\n    <see cref=\"T:System.Void\"/> if the type of the last expression statement is\r\n    void or if the submission is not an expression statement, or\r\n    otherwise the type of the last expression.\r\n    </returns>\r\n    <remarks>\r\n    Note that the return type is <see cref=\"T:System.Void\"/> if the last\r\n    statement is a non-expression statement e.g.,\r\n    <code>System.Console.WriteLine();</code>\r\n    and if the statement is an expression statement of type void e.g,\r\n    <code>System.Console.WriteLine()</code>. However,\r\n    <paramref name=\"hasValue\"/> is false in the former case and true\r\n    in the latter.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 344
              },
              "Id": "M:Microsoft.CodeAnalysis.Compilation.GetSubmissionResultType(System.Boolean@)",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.GetSubmissionResultType(System.Boolean@)\">\r\n    <summary>\r\n    Returns the type of the submission return value.\r\n    </summary>\r\n    <param name=\"hasValue\">\r\n    True if the submission has a return value, i.e. if the submission\r\n    ends with an expression statement.\r\n    </param>\r\n    <exception cref=\"T:System.InvalidOperationException\">\r\n    The compilation doesn't represent a submission\r\n    (<see cref=\"P:Microsoft.CodeAnalysis.Compilation.IsSubmission\"/> return false).\r\n    </exception>\r\n    <returns>\r\n    Null if the type of the last expression is unknown, \r\n    <see cref=\"T:System.Void\"/> if the type of the last expression statement is\r\n    void or if the submission is not an expression statement, or\r\n    otherwise the type of the last expression.\r\n    </returns>\r\n    <remarks>\r\n    Note that the return type is <see cref=\"T:System.Void\"/> if the last\r\n    statement is a non-expression statement e.g.,\r\n    <code>System.Console.WriteLine();</code>\r\n    and if the statement is an expression statement of type void e.g,\r\n    <code>System.Console.WriteLine()</code>. However,\r\n    <paramref name=\"hasValue\"/> is false in the former case and true\r\n    in the latter.\r\n    </remarks>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SymbolFilter : filter": "",
                  "T:System.Func{System.String,System.Boolean} : predicate": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.ISymbol}": ""
                },
                "Content": "public abstract IEnumerable<ISymbol> GetSymbolsWithName(Func<string, bool> predicate, SymbolFilter filter = SymbolFilter.TypeAndMember, CancellationToken cancellationToken = default (CancellationToken));",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.GetSymbolsWithName(System.Func{System.String,System.Boolean},Microsoft.CodeAnalysis.SymbolFilter,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Return source declaration symbols whose name meets given predicate.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 1844
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SymbolFilter : filter": "",
                  "T:System.Func{System.String,System.Boolean} : predicate": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.ISymbol}": ""
                },
                "Content": "public abstract IEnumerable<ISymbol> GetSymbolsWithName(Func<string, bool> predicate, SymbolFilter filter = SymbolFilter.TypeAndMember, CancellationToken cancellationToken = default (CancellationToken));",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.GetSymbolsWithName(System.Func{System.String,System.Boolean},Microsoft.CodeAnalysis.SymbolFilter,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Return source declaration symbols whose name meets given predicate.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 1844
              },
              "Id": "M:Microsoft.CodeAnalysis.Compilation.GetSymbolsWithName(System.Func{System.String,System.Boolean},Microsoft.CodeAnalysis.SymbolFilter,System.Threading.CancellationToken)",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.GetSymbolsWithName(System.Func{System.String,System.Boolean},Microsoft.CodeAnalysis.SymbolFilter,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Return source declaration symbols whose name meets given predicate.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.String : fullyQualifiedMetadataName": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.INamedTypeSymbol": ""
                },
                "Content": "public INamedTypeSymbol GetTypeByMetadataName(string fullyQualifiedMetadataName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.GetTypeByMetadataName(System.String)\">\r\n    <summary>\r\n    Gets the type within the compilation's assembly and all referenced assemblies (other than\r\n    those that can only be referenced via an extern alias) using its canonical CLR metadata name.\r\n    </summary>\r\n    <returns>Null if the type can't be found.</returns>\r\n    <remarks>\r\n    Since VB does not have the concept of extern aliases, it considers all referenced assemblies.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 839
              },
              "Syntax": {
                "Parameters": {
                  "T:System.String : fullyQualifiedMetadataName": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.INamedTypeSymbol": ""
                },
                "Content": "public INamedTypeSymbol GetTypeByMetadataName(string fullyQualifiedMetadataName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.GetTypeByMetadataName(System.String)\">\r\n    <summary>\r\n    Gets the type within the compilation's assembly and all referenced assemblies (other than\r\n    those that can only be referenced via an extern alias) using its canonical CLR metadata name.\r\n    </summary>\r\n    <returns>Null if the type can't be found.</returns>\r\n    <remarks>\r\n    Since VB does not have the concept of extern aliases, it considers all referenced assemblies.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 839
              },
              "Id": "M:Microsoft.CodeAnalysis.Compilation.GetTypeByMetadataName(System.String)",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.GetTypeByMetadataName(System.String)\">\r\n    <summary>\r\n    Gets the type within the compilation's assembly and all referenced assemblies (other than\r\n    those that can only be referenced via an extern alias) using its canonical CLR metadata name.\r\n    </summary>\r\n    <returns>Null if the type can't be found.</returns>\r\n    <remarks>\r\n    Since VB does not have the concept of extern aliases, it considers all referenced assemblies.\r\n    </remarks>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "protected abstract bool HasCodeToEmit();",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.HasCodeToEmit\">\r\n    <summary>\r\n    Return true if the compilation contains any code or types.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 1220
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "protected abstract bool HasCodeToEmit();",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.HasCodeToEmit\">\r\n    <summary>\r\n    Return true if the compilation contains any code or types.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 1220
              },
              "Id": "M:Microsoft.CodeAnalysis.Compilation.HasCodeToEmit",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.HasCodeToEmit\">\r\n    <summary>\r\n    Return true if the compilation contains any code or types.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Compilation": ""
                },
                "Content": "public Compilation RemoveAllReferences()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.RemoveAllReferences\">\r\n    <summary>\r\n    Creates a new compilation without any metadata references.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 657
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Compilation": ""
                },
                "Content": "public Compilation RemoveAllReferences()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.RemoveAllReferences\">\r\n    <summary>\r\n    Creates a new compilation without any metadata references.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 657
              },
              "Id": "M:Microsoft.CodeAnalysis.Compilation.RemoveAllReferences",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.RemoveAllReferences\">\r\n    <summary>\r\n    Creates a new compilation without any metadata references.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Compilation": ""
                },
                "Content": "public Compilation RemoveAllSyntaxTrees()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.RemoveAllSyntaxTrees\">\r\n    <summary>\r\n    Creates a new compilation without any syntax trees. Preserves metadata info for use with\r\n    trees added later.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 431
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Compilation": ""
                },
                "Content": "public Compilation RemoveAllSyntaxTrees()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.RemoveAllSyntaxTrees\">\r\n    <summary>\r\n    Creates a new compilation without any syntax trees. Preserves metadata info for use with\r\n    trees added later.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 431
              },
              "Id": "M:Microsoft.CodeAnalysis.Compilation.RemoveAllSyntaxTrees",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.RemoveAllSyntaxTrees\">\r\n    <summary>\r\n    Creates a new compilation without any syntax trees. Preserves metadata info for use with\r\n    trees added later.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Array : references": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Compilation": ""
                },
                "Content": "public Compilation RemoveReferences(params MetadataReference[] references)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.RemoveReferences(Microsoft.CodeAnalysis.MetadataReference[])\">\r\n    <summary>\r\n    Creates a new compilation without the specified metadata references.\r\n    </summary>\r\n    <param name=\"references\">The new references.</param>\r\n    <returns>A new compilation.</returns>\r\n</member>\r\n",
                "StartLine": 616
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Array : references": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Compilation": ""
                },
                "Content": "public Compilation RemoveReferences(params MetadataReference[] references)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.RemoveReferences(Microsoft.CodeAnalysis.MetadataReference[])\">\r\n    <summary>\r\n    Creates a new compilation without the specified metadata references.\r\n    </summary>\r\n    <param name=\"references\">The new references.</param>\r\n    <returns>A new compilation.</returns>\r\n</member>\r\n",
                "StartLine": 616
              },
              "Id": "M:Microsoft.CodeAnalysis.Compilation.RemoveReferences(Microsoft.CodeAnalysis.MetadataReference[])",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.RemoveReferences(Microsoft.CodeAnalysis.MetadataReference[])\">\r\n    <summary>\r\n    Creates a new compilation without the specified metadata references.\r\n    </summary>\r\n    <param name=\"references\">The new references.</param>\r\n    <returns>A new compilation.</returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.MetadataReference} : references": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Compilation": ""
                },
                "Content": "public Compilation RemoveReferences(IEnumerable<MetadataReference> references)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.RemoveReferences(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.MetadataReference})\">\r\n    <summary>\r\n    Creates a new compilation without the specified metadata references.\r\n    </summary>\r\n    <param name=\"references\">The new references.</param>\r\n    <returns>A new compilation.</returns>\r\n</member>\r\n",
                "StartLine": 626
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.MetadataReference} : references": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Compilation": ""
                },
                "Content": "public Compilation RemoveReferences(IEnumerable<MetadataReference> references)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.RemoveReferences(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.MetadataReference})\">\r\n    <summary>\r\n    Creates a new compilation without the specified metadata references.\r\n    </summary>\r\n    <param name=\"references\">The new references.</param>\r\n    <returns>A new compilation.</returns>\r\n</member>\r\n",
                "StartLine": 626
              },
              "Id": "M:Microsoft.CodeAnalysis.Compilation.RemoveReferences(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.MetadataReference})",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.RemoveReferences(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.MetadataReference})\">\r\n    <summary>\r\n    Creates a new compilation without the specified metadata references.\r\n    </summary>\r\n    <param name=\"references\">The new references.</param>\r\n    <returns>A new compilation.</returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Array : trees": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Compilation": ""
                },
                "Content": "public Compilation RemoveSyntaxTrees(params SyntaxTree[] trees)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.RemoveSyntaxTrees(Microsoft.CodeAnalysis.SyntaxTree[])\">\r\n    <summary>\r\n    Creates a new compilation without the specified syntax trees. Preserves metadata info for use with trees\r\n    added later.\r\n    </summary>\r\n    <param name=\"trees\">The new syntax trees.</param>\r\n    <returns>A new compilation.</returns>\r\n</member>\r\n",
                "StartLine": 409
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Array : trees": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Compilation": ""
                },
                "Content": "public Compilation RemoveSyntaxTrees(params SyntaxTree[] trees)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.RemoveSyntaxTrees(Microsoft.CodeAnalysis.SyntaxTree[])\">\r\n    <summary>\r\n    Creates a new compilation without the specified syntax trees. Preserves metadata info for use with trees\r\n    added later.\r\n    </summary>\r\n    <param name=\"trees\">The new syntax trees.</param>\r\n    <returns>A new compilation.</returns>\r\n</member>\r\n",
                "StartLine": 409
              },
              "Id": "M:Microsoft.CodeAnalysis.Compilation.RemoveSyntaxTrees(Microsoft.CodeAnalysis.SyntaxTree[])",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.RemoveSyntaxTrees(Microsoft.CodeAnalysis.SyntaxTree[])\">\r\n    <summary>\r\n    Creates a new compilation without the specified syntax trees. Preserves metadata info for use with trees\r\n    added later.\r\n    </summary>\r\n    <param name=\"trees\">The new syntax trees.</param>\r\n    <returns>A new compilation.</returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTree} : trees": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Compilation": ""
                },
                "Content": "public Compilation RemoveSyntaxTrees(IEnumerable<SyntaxTree> trees)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.RemoveSyntaxTrees(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTree})\">\r\n    <summary>\r\n    Creates a new compilation without the specified syntax trees. Preserves metadata info for use with trees\r\n    added later.\r\n    </summary>\r\n    <param name=\"trees\">The new syntax trees.</param>\r\n    <returns>A new compilation.</returns>\r\n</member>\r\n",
                "StartLine": 420
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTree} : trees": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Compilation": ""
                },
                "Content": "public Compilation RemoveSyntaxTrees(IEnumerable<SyntaxTree> trees)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.RemoveSyntaxTrees(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTree})\">\r\n    <summary>\r\n    Creates a new compilation without the specified syntax trees. Preserves metadata info for use with trees\r\n    added later.\r\n    </summary>\r\n    <param name=\"trees\">The new syntax trees.</param>\r\n    <returns>A new compilation.</returns>\r\n</member>\r\n",
                "StartLine": 420
              },
              "Id": "M:Microsoft.CodeAnalysis.Compilation.RemoveSyntaxTrees(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTree})",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.RemoveSyntaxTrees(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTree})\">\r\n    <summary>\r\n    Creates a new compilation without the specified syntax trees. Preserves metadata info for use with trees\r\n    added later.\r\n    </summary>\r\n    <param name=\"trees\">The new syntax trees.</param>\r\n    <returns>A new compilation.</returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.MetadataReference : newReference": "",
                  "T:Microsoft.CodeAnalysis.MetadataReference : oldReference": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Compilation": ""
                },
                "Content": "public Compilation ReplaceReference(MetadataReference oldReference, MetadataReference newReference)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.ReplaceReference(Microsoft.CodeAnalysis.MetadataReference,Microsoft.CodeAnalysis.MetadataReference)\">\r\n    <summary>\r\n    Creates a new compilation with an old metadata reference replaced with a new metadata\r\n    reference.\r\n    </summary>\r\n    <param name=\"newReference\">The new reference.</param>\r\n    <param name=\"oldReference\">The old reference.</param>\r\n    <returns>A new compilation.</returns>\r\n</member>\r\n",
                "StartLine": 669
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.MetadataReference : newReference": "",
                  "T:Microsoft.CodeAnalysis.MetadataReference : oldReference": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Compilation": ""
                },
                "Content": "public Compilation ReplaceReference(MetadataReference oldReference, MetadataReference newReference)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.ReplaceReference(Microsoft.CodeAnalysis.MetadataReference,Microsoft.CodeAnalysis.MetadataReference)\">\r\n    <summary>\r\n    Creates a new compilation with an old metadata reference replaced with a new metadata\r\n    reference.\r\n    </summary>\r\n    <param name=\"newReference\">The new reference.</param>\r\n    <param name=\"oldReference\">The old reference.</param>\r\n    <returns>A new compilation.</returns>\r\n</member>\r\n",
                "StartLine": 669
              },
              "Id": "M:Microsoft.CodeAnalysis.Compilation.ReplaceReference(Microsoft.CodeAnalysis.MetadataReference,Microsoft.CodeAnalysis.MetadataReference)",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.ReplaceReference(Microsoft.CodeAnalysis.MetadataReference,Microsoft.CodeAnalysis.MetadataReference)\">\r\n    <summary>\r\n    Creates a new compilation with an old metadata reference replaced with a new metadata\r\n    reference.\r\n    </summary>\r\n    <param name=\"newReference\">The new reference.</param>\r\n    <param name=\"oldReference\">The old reference.</param>\r\n    <returns>A new compilation.</returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxTree : newTree": "",
                  "T:Microsoft.CodeAnalysis.SyntaxTree : oldTree": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Compilation": ""
                },
                "Content": "public Compilation ReplaceSyntaxTree(SyntaxTree oldTree, SyntaxTree newTree)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.ReplaceSyntaxTree(Microsoft.CodeAnalysis.SyntaxTree,Microsoft.CodeAnalysis.SyntaxTree)\">\r\n    <summary>\r\n    Creates a new compilation with an old syntax tree replaced with a new syntax tree.\r\n    Reuses metadata from old compilation object.\r\n    </summary>\r\n    <param name=\"newTree\">The new tree.</param>\r\n    <param name=\"oldTree\">The old tree.</param>\r\n    <returns>A new compilation.</returns>\r\n</member>\r\n",
                "StartLine": 445
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxTree : newTree": "",
                  "T:Microsoft.CodeAnalysis.SyntaxTree : oldTree": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Compilation": ""
                },
                "Content": "public Compilation ReplaceSyntaxTree(SyntaxTree oldTree, SyntaxTree newTree)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.ReplaceSyntaxTree(Microsoft.CodeAnalysis.SyntaxTree,Microsoft.CodeAnalysis.SyntaxTree)\">\r\n    <summary>\r\n    Creates a new compilation with an old syntax tree replaced with a new syntax tree.\r\n    Reuses metadata from old compilation object.\r\n    </summary>\r\n    <param name=\"newTree\">The new tree.</param>\r\n    <param name=\"oldTree\">The old tree.</param>\r\n    <returns>A new compilation.</returns>\r\n</member>\r\n",
                "StartLine": 445
              },
              "Id": "M:Microsoft.CodeAnalysis.Compilation.ReplaceSyntaxTree(Microsoft.CodeAnalysis.SyntaxTree,Microsoft.CodeAnalysis.SyntaxTree)",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.ReplaceSyntaxTree(Microsoft.CodeAnalysis.SyntaxTree,Microsoft.CodeAnalysis.SyntaxTree)\">\r\n    <summary>\r\n    Creates a new compilation with an old syntax tree replaced with a new syntax tree.\r\n    Reuses metadata from old compilation object.\r\n    </summary>\r\n    <param name=\"newTree\">The new tree.</param>\r\n    <param name=\"oldTree\">The old tree.</param>\r\n    <returns>A new compilation.</returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Boolean : embedInteropTypes": "",
                  "T:System.Collections.Immutable.ImmutableArray{System.String} : aliases": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.CompilationReference": ""
                },
                "Content": "public abstract CompilationReference ToMetadataReference(ImmutableArray<string> aliases = default (ImmutableArray<string>), bool embedInteropTypes = false);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.ToMetadataReference(System.Collections.Immutable.ImmutableArray{System.String},System.Boolean)\">\r\n    <summary>\r\n    Creates a metadata reference for this compilation.\r\n    </summary>\r\n    <param name=\"aliases\">\r\n    Optional aliases that can be used to refer to the compilation root namespace via extern alias directive.\r\n    </param>\r\n    <param name=\"embedInteropTypes\">\r\n    Embed the COM types from the reference so that the compiled\r\n    application no longer requires a primary interop assembly (PIA).\r\n    </param>\r\n</member>\r\n",
                "StartLine": 552
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Boolean : embedInteropTypes": "",
                  "T:System.Collections.Immutable.ImmutableArray{System.String} : aliases": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.CompilationReference": ""
                },
                "Content": "public abstract CompilationReference ToMetadataReference(ImmutableArray<string> aliases = default (ImmutableArray<string>), bool embedInteropTypes = false);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.ToMetadataReference(System.Collections.Immutable.ImmutableArray{System.String},System.Boolean)\">\r\n    <summary>\r\n    Creates a metadata reference for this compilation.\r\n    </summary>\r\n    <param name=\"aliases\">\r\n    Optional aliases that can be used to refer to the compilation root namespace via extern alias directive.\r\n    </param>\r\n    <param name=\"embedInteropTypes\">\r\n    Embed the COM types from the reference so that the compiled\r\n    application no longer requires a primary interop assembly (PIA).\r\n    </param>\r\n</member>\r\n",
                "StartLine": 552
              },
              "Id": "M:Microsoft.CodeAnalysis.Compilation.ToMetadataReference(System.Collections.Immutable.ImmutableArray{System.String},System.Boolean)",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.ToMetadataReference(System.Collections.Immutable.ImmutableArray{System.String},System.Boolean)\">\r\n    <summary>\r\n    Creates a metadata reference for this compilation.\r\n    </summary>\r\n    <param name=\"aliases\">\r\n    Optional aliases that can be used to refer to the compilation root namespace via extern alias directive.\r\n    </param>\r\n    <param name=\"embedInteropTypes\">\r\n    Embed the COM types from the reference so that the compiled\r\n    application no longer requires a primary interop assembly (PIA).\r\n    </param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.String : assemblyName": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Compilation": ""
                },
                "Content": "public Compilation WithAssemblyName(string assemblyName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.WithAssemblyName(System.String)\">\r\n    <summary>\r\n    Creates a compilation with the specified assembly name.\r\n    </summary>\r\n    <param name=\"assemblyName\">The new assembly name.</param>\r\n    <returns>A new compilation.</returns>\r\n</member>\r\n",
                "StartLine": 219
              },
              "Syntax": {
                "Parameters": {
                  "T:System.String : assemblyName": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Compilation": ""
                },
                "Content": "public Compilation WithAssemblyName(string assemblyName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.WithAssemblyName(System.String)\">\r\n    <summary>\r\n    Creates a compilation with the specified assembly name.\r\n    </summary>\r\n    <param name=\"assemblyName\">The new assembly name.</param>\r\n    <returns>A new compilation.</returns>\r\n</member>\r\n",
                "StartLine": 219
              },
              "Id": "M:Microsoft.CodeAnalysis.Compilation.WithAssemblyName(System.String)",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.WithAssemblyName(System.String)\">\r\n    <summary>\r\n    Creates a compilation with the specified assembly name.\r\n    </summary>\r\n    <param name=\"assemblyName\">The new assembly name.</param>\r\n    <returns>A new compilation.</returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.CompilationOptions : options": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Compilation": ""
                },
                "Content": "public Compilation WithOptions(CompilationOptions options)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.WithOptions(Microsoft.CodeAnalysis.CompilationOptions)\">\r\n    <summary>\r\n    Creates a new compilation with the specified compilation options.\r\n    </summary>\r\n    <param name=\"options\">The new options.</param>\r\n    <returns>A new compilation.</returns>\r\n</member>\r\n",
                "StartLine": 242
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.CompilationOptions : options": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Compilation": ""
                },
                "Content": "public Compilation WithOptions(CompilationOptions options)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.WithOptions(Microsoft.CodeAnalysis.CompilationOptions)\">\r\n    <summary>\r\n    Creates a new compilation with the specified compilation options.\r\n    </summary>\r\n    <param name=\"options\">The new options.</param>\r\n    <returns>A new compilation.</returns>\r\n</member>\r\n",
                "StartLine": 242
              },
              "Id": "M:Microsoft.CodeAnalysis.Compilation.WithOptions(Microsoft.CodeAnalysis.CompilationOptions)",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.WithOptions(Microsoft.CodeAnalysis.CompilationOptions)\">\r\n    <summary>\r\n    Creates a new compilation with the specified compilation options.\r\n    </summary>\r\n    <param name=\"options\">The new options.</param>\r\n    <returns>A new compilation.</returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Compilation : newPreviousSubmission": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Compilation": ""
                },
                "Content": "public Compilation WithPreviousSubmission(Compilation newPreviousSubmission)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.WithPreviousSubmission(Microsoft.CodeAnalysis.Compilation)\">\r\n    <summary>\r\n    Returns a new compilation with the given compilation set as the\r\n    previous submission.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 364
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Compilation : newPreviousSubmission": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Compilation": ""
                },
                "Content": "public Compilation WithPreviousSubmission(Compilation newPreviousSubmission)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.WithPreviousSubmission(Microsoft.CodeAnalysis.Compilation)\">\r\n    <summary>\r\n    Returns a new compilation with the given compilation set as the\r\n    previous submission.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 364
              },
              "Id": "M:Microsoft.CodeAnalysis.Compilation.WithPreviousSubmission(Microsoft.CodeAnalysis.Compilation)",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.WithPreviousSubmission(Microsoft.CodeAnalysis.Compilation)\">\r\n    <summary>\r\n    Returns a new compilation with the given compilation set as the\r\n    previous submission.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Array : newReferences": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Compilation": ""
                },
                "Content": "public Compilation WithReferences(params MetadataReference[] newReferences)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.WithReferences(Microsoft.CodeAnalysis.MetadataReference[])\">\r\n    <summary>\r\n    Creates a new compilation with the specified references.\r\n    </summary>\r\n    <param name=\"newReferences\">The new references.</param>\r\n    <returns>A new compilation.</returns>\r\n</member>\r\n",
                "StartLine": 571
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Array : newReferences": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Compilation": ""
                },
                "Content": "public Compilation WithReferences(params MetadataReference[] newReferences)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.WithReferences(Microsoft.CodeAnalysis.MetadataReference[])\">\r\n    <summary>\r\n    Creates a new compilation with the specified references.\r\n    </summary>\r\n    <param name=\"newReferences\">The new references.</param>\r\n    <returns>A new compilation.</returns>\r\n</member>\r\n",
                "StartLine": 571
              },
              "Id": "M:Microsoft.CodeAnalysis.Compilation.WithReferences(Microsoft.CodeAnalysis.MetadataReference[])",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.WithReferences(Microsoft.CodeAnalysis.MetadataReference[])\">\r\n    <summary>\r\n    Creates a new compilation with the specified references.\r\n    </summary>\r\n    <param name=\"newReferences\">The new references.</param>\r\n    <returns>A new compilation.</returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.MetadataReference} : newReferences": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Compilation": ""
                },
                "Content": "public Compilation WithReferences(IEnumerable<MetadataReference> newReferences)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.WithReferences(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.MetadataReference})\">\r\n    <summary>\r\n    Creates a new compilation with the specified references.\r\n    </summary>\r\n    <param name=\"newReferences\">\r\n    The new references.\r\n    </param>\r\n    <returns>A new compilation.</returns>\r\n</member>\r\n",
                "StartLine": 561
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.MetadataReference} : newReferences": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Compilation": ""
                },
                "Content": "public Compilation WithReferences(IEnumerable<MetadataReference> newReferences)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.WithReferences(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.MetadataReference})\">\r\n    <summary>\r\n    Creates a new compilation with the specified references.\r\n    </summary>\r\n    <param name=\"newReferences\">\r\n    The new references.\r\n    </param>\r\n    <returns>A new compilation.</returns>\r\n</member>\r\n",
                "StartLine": 561
              },
              "Id": "M:Microsoft.CodeAnalysis.Compilation.WithReferences(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.MetadataReference})",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Compilation.WithReferences(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.MetadataReference})\">\r\n    <summary>\r\n    Creates a new compilation with the specified references.\r\n    </summary>\r\n    <param name=\"newReferences\">\r\n    The new references.\r\n    </param>\r\n    <returns>A new compilation.</returns>\r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.IAssemblySymbol",
                "Content": "public IAssemblySymbol Assembly",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Compilation.Assembly\">\r\n    <summary>\r\n    The <see cref=\"T:Microsoft.CodeAnalysis.IAssemblySymbol\"/> that represents the assembly being created.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 726
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.IAssemblySymbol",
                "Content": "public IAssemblySymbol Assembly",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Compilation.Assembly\">\r\n    <summary>\r\n    The <see cref=\"T:Microsoft.CodeAnalysis.IAssemblySymbol\"/> that represents the assembly being created.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 726
              },
              "Id": "P:Microsoft.CodeAnalysis.Compilation.Assembly",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Compilation.Assembly\">\r\n    <summary>\r\n    The <see cref=\"T:Microsoft.CodeAnalysis.IAssemblySymbol\"/> that represents the assembly being created.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.String",
                "Content": "public string AssemblyName",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Compilation.AssemblyName\">\r\n    <summary>\r\n    Simple assembly name, or null if not specified.\r\n    </summary>\r\n    <remarks>\r\n    The name is used for determining internals-visible-to relationship with referenced assemblies.\r\n    \r\n    If the compilation represents an assembly the value of <see cref=\"P:Microsoft.CodeAnalysis.Compilation.AssemblyName\"/> is its simple name.\r\n    \r\n    Unless <see cref=\"P:Microsoft.CodeAnalysis.CompilationOptions.ModuleName\"/> specifies otherwise the module name\r\n    written to metadata is <see cref=\"P:Microsoft.CodeAnalysis.Compilation.AssemblyName\"/> with an extension based upon <see cref=\"P:Microsoft.CodeAnalysis.CompilationOptions.OutputKind\"/>.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 189
              },
              "Syntax": {
                "PropertyType": "T:System.String",
                "Content": "public string AssemblyName",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Compilation.AssemblyName\">\r\n    <summary>\r\n    Simple assembly name, or null if not specified.\r\n    </summary>\r\n    <remarks>\r\n    The name is used for determining internals-visible-to relationship with referenced assemblies.\r\n    \r\n    If the compilation represents an assembly the value of <see cref=\"P:Microsoft.CodeAnalysis.Compilation.AssemblyName\"/> is its simple name.\r\n    \r\n    Unless <see cref=\"P:Microsoft.CodeAnalysis.CompilationOptions.ModuleName\"/> specifies otherwise the module name\r\n    written to metadata is <see cref=\"P:Microsoft.CodeAnalysis.Compilation.AssemblyName\"/> with an extension based upon <see cref=\"P:Microsoft.CodeAnalysis.CompilationOptions.OutputKind\"/>.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 189
              },
              "Id": "P:Microsoft.CodeAnalysis.Compilation.AssemblyName",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Compilation.AssemblyName\">\r\n    <summary>\r\n    Simple assembly name, or null if not specified.\r\n    </summary>\r\n    <remarks>\r\n    The name is used for determining internals-visible-to relationship with referenced assemblies.\r\n    \r\n    If the compilation represents an assembly the value of <see cref=\"P:Microsoft.CodeAnalysis.Compilation.AssemblyName\"/> is its simple name.\r\n    \r\n    Unless <see cref=\"P:Microsoft.CodeAnalysis.CompilationOptions.ModuleName\"/> specifies otherwise the module name\r\n    written to metadata is <see cref=\"P:Microsoft.CodeAnalysis.Compilation.AssemblyName\"/> with an extension based upon <see cref=\"P:Microsoft.CodeAnalysis.CompilationOptions.OutputKind\"/>.\r\n    </remarks>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.IAssemblySymbol",
                "Content": "protected abstract IAssemblySymbol CommonAssembly",
                "XmlDocumentation": "",
                "StartLine": 727
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.IAssemblySymbol",
                "Content": "protected abstract IAssemblySymbol CommonAssembly",
                "XmlDocumentation": "",
                "StartLine": 727
              },
              "Id": "P:Microsoft.CodeAnalysis.Compilation.CommonAssembly",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": ""
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.ITypeSymbol",
                "Content": "protected abstract ITypeSymbol CommonDynamicType",
                "XmlDocumentation": "",
                "StartLine": 800
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.ITypeSymbol",
                "Content": "protected abstract ITypeSymbol CommonDynamicType",
                "XmlDocumentation": "",
                "StartLine": 800
              },
              "Id": "P:Microsoft.CodeAnalysis.Compilation.CommonDynamicType",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": ""
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.INamespaceSymbol",
                "Content": "protected abstract INamespaceSymbol CommonGlobalNamespace",
                "XmlDocumentation": "",
                "StartLine": 741
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.INamespaceSymbol",
                "Content": "protected abstract INamespaceSymbol CommonGlobalNamespace",
                "XmlDocumentation": "",
                "StartLine": 741
              },
              "Id": "P:Microsoft.CodeAnalysis.Compilation.CommonGlobalNamespace",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": ""
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.INamedTypeSymbol",
                "Content": "protected abstract INamedTypeSymbol CommonObjectType",
                "XmlDocumentation": "",
                "StartLine": 794
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.INamedTypeSymbol",
                "Content": "protected abstract INamedTypeSymbol CommonObjectType",
                "XmlDocumentation": "",
                "StartLine": 794
              },
              "Id": "P:Microsoft.CodeAnalysis.Compilation.CommonObjectType",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": ""
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.CompilationOptions",
                "Content": "protected abstract CompilationOptions CommonOptions",
                "XmlDocumentation": "",
                "StartLine": 235
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.CompilationOptions",
                "Content": "protected abstract CompilationOptions CommonOptions",
                "XmlDocumentation": "",
                "StartLine": 235
              },
              "Id": "P:Microsoft.CodeAnalysis.Compilation.CommonOptions",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": ""
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Compilation",
                "Content": "protected abstract Compilation CommonPreviousSubmission",
                "XmlDocumentation": "",
                "StartLine": 358
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Compilation",
                "Content": "protected abstract Compilation CommonPreviousSubmission",
                "XmlDocumentation": "",
                "StartLine": 358
              },
              "Id": "P:Microsoft.CodeAnalysis.Compilation.CommonPreviousSubmission",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": ""
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.INamedTypeSymbol",
                "Content": "protected abstract INamedTypeSymbol CommonScriptClass",
                "XmlDocumentation": "",
                "StartLine": 807
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.INamedTypeSymbol",
                "Content": "protected abstract INamedTypeSymbol CommonScriptClass",
                "XmlDocumentation": "",
                "StartLine": 807
              },
              "Id": "P:Microsoft.CodeAnalysis.Compilation.CommonScriptClass",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": ""
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.IModuleSymbol",
                "Content": "protected abstract IModuleSymbol CommonSourceModule",
                "XmlDocumentation": "",
                "StartLine": 734
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.IModuleSymbol",
                "Content": "protected abstract IModuleSymbol CommonSourceModule",
                "XmlDocumentation": "",
                "StartLine": 734
              },
              "Id": "P:Microsoft.CodeAnalysis.Compilation.CommonSourceModule",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": ""
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTree}",
                "Content": "protected abstract IEnumerable<SyntaxTree> CommonSyntaxTrees",
                "XmlDocumentation": "",
                "StartLine": 379
              },
              "Syntax": {
                "PropertyType": "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTree}",
                "Content": "protected abstract IEnumerable<SyntaxTree> CommonSyntaxTrees",
                "XmlDocumentation": "",
                "StartLine": 379
              },
              "Id": "P:Microsoft.CodeAnalysis.Compilation.CommonSyntaxTrees",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": ""
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.MetadataReference}",
                "Content": "public abstract ImmutableArray<MetadataReference> DirectiveReferences",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Compilation.DirectiveReferences\">\r\n    <summary>\r\n    Unique metadata references specified via #r directive in the source code of this compilation.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 510
              },
              "Syntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.MetadataReference}",
                "Content": "public abstract ImmutableArray<MetadataReference> DirectiveReferences",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Compilation.DirectiveReferences\">\r\n    <summary>\r\n    Unique metadata references specified via #r directive in the source code of this compilation.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 510
              },
              "Id": "P:Microsoft.CodeAnalysis.Compilation.DirectiveReferences",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Compilation.DirectiveReferences\">\r\n    <summary>\r\n    Unique metadata references specified via #r directive in the source code of this compilation.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.ITypeSymbol",
                "Content": "public ITypeSymbol DynamicType",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Compilation.DynamicType\">\r\n    <summary>\r\n    The TypeSymbol for the type 'dynamic' in this Compilation.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 799
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.ITypeSymbol",
                "Content": "public ITypeSymbol DynamicType",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Compilation.DynamicType\">\r\n    <summary>\r\n    The TypeSymbol for the type 'dynamic' in this Compilation.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 799
              },
              "Id": "P:Microsoft.CodeAnalysis.Compilation.DynamicType",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Compilation.DynamicType\">\r\n    <summary>\r\n    The TypeSymbol for the type 'dynamic' in this Compilation.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.MetadataReference}",
                "Content": "public ImmutableArray<MetadataReference> ExternalReferences",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Compilation.ExternalReferences\">\r\n    <summary>\r\n    Metadata references passed to the compilation constructor.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 505
              },
              "Syntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.MetadataReference}",
                "Content": "public ImmutableArray<MetadataReference> ExternalReferences",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Compilation.ExternalReferences\">\r\n    <summary>\r\n    Metadata references passed to the compilation constructor.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 505
              },
              "Id": "P:Microsoft.CodeAnalysis.Compilation.ExternalReferences",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Compilation.ExternalReferences\">\r\n    <summary>\r\n    Metadata references passed to the compilation constructor.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.INamespaceSymbol",
                "Content": "public INamespaceSymbol GlobalNamespace",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Compilation.GlobalNamespace\">\r\n    <summary>\r\n    The root namespace that contains all namespaces and types defined in source code or in \r\n    referenced metadata, merged into a single namespace hierarchy.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 740
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.INamespaceSymbol",
                "Content": "public INamespaceSymbol GlobalNamespace",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Compilation.GlobalNamespace\">\r\n    <summary>\r\n    The root namespace that contains all namespaces and types defined in source code or in \r\n    referenced metadata, merged into a single namespace hierarchy.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 740
              },
              "Id": "P:Microsoft.CodeAnalysis.Compilation.GlobalNamespace",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Compilation.GlobalNamespace\">\r\n    <summary>\r\n    The root namespace that contains all namespaces and types defined in source code or in \r\n    referenced metadata, merged into a single namespace hierarchy.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public abstract bool IsCaseSensitive",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Compilation.IsCaseSensitive\">\r\n    <summary>\r\n    Returns true if this is a case sensitive compilation, false otherwise.  Case sensitivity\r\n    affects compilation features such as name lookup as well as choosing what names to emit\r\n    when there are multiple different choices (for example between a virtual method and an\r\n    override).\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 43
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public abstract bool IsCaseSensitive",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Compilation.IsCaseSensitive\">\r\n    <summary>\r\n    Returns true if this is a case sensitive compilation, false otherwise.  Case sensitivity\r\n    affects compilation features such as name lookup as well as choosing what names to emit\r\n    when there are multiple different choices (for example between a virtual method and an\r\n    override).\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 43
              },
              "Id": "P:Microsoft.CodeAnalysis.Compilation.IsCaseSensitive",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Compilation.IsCaseSensitive\">\r\n    <summary>\r\n    Returns true if this is a case sensitive compilation, false otherwise.  Case sensitivity\r\n    affects compilation features such as name lookup as well as choosing what names to emit\r\n    when there are multiple different choices (for example between a virtual method and an\r\n    override).\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.String",
                "Content": "public abstract string Language",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Compilation.Language\">\r\n    <summary>\r\n    Gets the source language (\"C#\" or \"Visual Basic\").\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 88
              },
              "Syntax": {
                "PropertyType": "T:System.String",
                "Content": "public abstract string Language",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Compilation.Language\">\r\n    <summary>\r\n    Gets the source language (\"C#\" or \"Visual Basic\").\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 88
              },
              "Id": "P:Microsoft.CodeAnalysis.Compilation.Language",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Compilation.Language\">\r\n    <summary>\r\n    Gets the source language (\"C#\" or \"Visual Basic\").\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.INamedTypeSymbol",
                "Content": "public INamedTypeSymbol ObjectType",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Compilation.ObjectType\">\r\n    <summary>\r\n    The INamedTypeSymbol for the .NET System.Object type, which could have a TypeKind of\r\n    Error if there was no COR Library in this Compilation.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 793
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.INamedTypeSymbol",
                "Content": "public INamedTypeSymbol ObjectType",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Compilation.ObjectType\">\r\n    <summary>\r\n    The INamedTypeSymbol for the .NET System.Object type, which could have a TypeKind of\r\n    Error if there was no COR Library in this Compilation.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 793
              },
              "Id": "P:Microsoft.CodeAnalysis.Compilation.ObjectType",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Compilation.ObjectType\">\r\n    <summary>\r\n    The INamedTypeSymbol for the .NET System.Object type, which could have a TypeKind of\r\n    Error if there was no COR Library in this Compilation.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.CompilationOptions",
                "Content": "public CompilationOptions Options",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Compilation.Options\">\r\n    <summary>\r\n    Gets the options the compilation was created with.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 233
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.CompilationOptions",
                "Content": "public CompilationOptions Options",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Compilation.Options\">\r\n    <summary>\r\n    Gets the options the compilation was created with.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 233
              },
              "Id": "P:Microsoft.CodeAnalysis.Compilation.Options",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Compilation.Options\">\r\n    <summary>\r\n    Gets the options the compilation was created with.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Compilation",
                "Content": "public Compilation PreviousSubmission",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Compilation.PreviousSubmission\">\r\n    <summary>\r\n    The previous submission compilation, or null if either this\r\n    compilation doesn't represent a submission or the submission is the\r\n    first submission in a submission chain.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 356
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Compilation",
                "Content": "public Compilation PreviousSubmission",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Compilation.PreviousSubmission\">\r\n    <summary>\r\n    The previous submission compilation, or null if either this\r\n    compilation doesn't represent a submission or the submission is the\r\n    first submission in a submission chain.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 356
              },
              "Id": "P:Microsoft.CodeAnalysis.Compilation.PreviousSubmission",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Compilation.PreviousSubmission\">\r\n    <summary>\r\n    The previous submission compilation, or null if either this\r\n    compilation doesn't represent a submission or the submission is the\r\n    first submission in a submission chain.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.AssemblyIdentity}",
                "Content": "public abstract IEnumerable<AssemblyIdentity> ReferencedAssemblyNames",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Compilation.ReferencedAssemblyNames\">\r\n    <summary>\r\n    Assembly identities of all assemblies directly referenced by this compilation.\r\n    </summary>\r\n    <remarks>\r\n    Includes identities of references passed in the compilation constructor \r\n    as well as those specified via directives in source code. \r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 717
              },
              "Syntax": {
                "PropertyType": "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.AssemblyIdentity}",
                "Content": "public abstract IEnumerable<AssemblyIdentity> ReferencedAssemblyNames",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Compilation.ReferencedAssemblyNames\">\r\n    <summary>\r\n    Assembly identities of all assemblies directly referenced by this compilation.\r\n    </summary>\r\n    <remarks>\r\n    Includes identities of references passed in the compilation constructor \r\n    as well as those specified via directives in source code. \r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 717
              },
              "Id": "P:Microsoft.CodeAnalysis.Compilation.ReferencedAssemblyNames",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Compilation.ReferencedAssemblyNames\">\r\n    <summary>\r\n    Assembly identities of all assemblies directly referenced by this compilation.\r\n    </summary>\r\n    <remarks>\r\n    Includes identities of references passed in the compilation constructor \r\n    as well as those specified via directives in source code. \r\n    </remarks>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.MetadataReference}",
                "Content": "public IEnumerable<MetadataReference> References",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Compilation.References\">\r\n    <summary>\r\n    All metadata references -- references passed to the compilation\r\n    constructor as well as references specified via #r directives.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 526
              },
              "Syntax": {
                "PropertyType": "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.MetadataReference}",
                "Content": "public IEnumerable<MetadataReference> References",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Compilation.References\">\r\n    <summary>\r\n    All metadata references -- references passed to the compilation\r\n    constructor as well as references specified via #r directives.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 526
              },
              "Id": "P:Microsoft.CodeAnalysis.Compilation.References",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Compilation.References\">\r\n    <summary>\r\n    All metadata references -- references passed to the compilation\r\n    constructor as well as references specified via #r directives.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.INamedTypeSymbol",
                "Content": "public INamedTypeSymbol ScriptClass",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Compilation.ScriptClass\">\r\n    <summary>\r\n    A symbol representing the implicit Script class. This is null if the class is not\r\n    defined in the compilation.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 806
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.INamedTypeSymbol",
                "Content": "public INamedTypeSymbol ScriptClass",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Compilation.ScriptClass\">\r\n    <summary>\r\n    A symbol representing the implicit Script class. This is null if the class is not\r\n    defined in the compilation.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 806
              },
              "Id": "P:Microsoft.CodeAnalysis.Compilation.ScriptClass",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Compilation.ScriptClass\">\r\n    <summary>\r\n    A symbol representing the implicit Script class. This is null if the class is not\r\n    defined in the compilation.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "protected bool ShouldBeSigned",
                "XmlDocumentation": "",
                "StartLine": 1203
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "protected bool ShouldBeSigned",
                "XmlDocumentation": "",
                "StartLine": 1203
              },
              "Id": "P:Microsoft.CodeAnalysis.Compilation.ShouldBeSigned",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": ""
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.IModuleSymbol",
                "Content": "public IModuleSymbol SourceModule",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Compilation.SourceModule\">\r\n    <summary>\r\n    Gets the <see cref=\"T:Microsoft.CodeAnalysis.IModuleSymbol\"/> for the module being created by compiling all of\r\n    the source code.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 733
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.IModuleSymbol",
                "Content": "public IModuleSymbol SourceModule",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Compilation.SourceModule\">\r\n    <summary>\r\n    Gets the <see cref=\"T:Microsoft.CodeAnalysis.IModuleSymbol\"/> for the module being created by compiling all of\r\n    the source code.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 733
              },
              "Id": "P:Microsoft.CodeAnalysis.Compilation.SourceModule",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Compilation.SourceModule\">\r\n    <summary>\r\n    Gets the <see cref=\"T:Microsoft.CodeAnalysis.IModuleSymbol\"/> for the module being created by compiling all of\r\n    the source code.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTree}",
                "Content": "public IEnumerable<SyntaxTree> SyntaxTrees",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Compilation.SyntaxTrees\">\r\n    <summary>\r\n    Gets the syntax trees (parsed from source code) that this compilation was created with.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 378
              },
              "Syntax": {
                "PropertyType": "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTree}",
                "Content": "public IEnumerable<SyntaxTree> SyntaxTrees",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Compilation.SyntaxTrees\">\r\n    <summary>\r\n    Gets the syntax trees (parsed from source code) that this compilation was created with.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 378
              },
              "Id": "P:Microsoft.CodeAnalysis.Compilation.SyntaxTrees",
              "Parent": "T:Microsoft.CodeAnalysis.Compilation",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Compilation.SyntaxTrees\">\r\n    <summary>\r\n    Gets the syntax trees (parsed from source code) that this compilation was created with.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Compilation\\Compilation.cs",
          "InheritanceHierarchy": [
            "T:System.Object"
          ],
          "Syntax": {
            "Content": "public abstract partial class Compilation",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.Compilation\">\r\n    <summary>\r\n    The compilation object is an immutable representation of a single invocation of the\r\n    compiler. Although immutable, a compilation is also on-demand, and will realize and cache\r\n    data as necessary. A compilation can produce a new compilation from existing compilation\r\n    with the application of small deltas. In many cases, it is more efficient than creating a\r\n    new compilation from scratch, as the new compilation can reuse information from the old\r\n    compilation.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.Compilation",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.Compilation\">\r\n    <summary>\r\n    The compilation object is an immutable representation of a single invocation of the\r\n    compiler. Although immutable, a compilation is also on-demand, and will realize and cache\r\n    data as necessary. A compilation can produce a new compilation from existing compilation\r\n    with the application of small deltas. In many cases, it is more efficient than creating a\r\n    new compilation from scratch, as the new compilation can reuse information from the old\r\n    compilation.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.AssemblyIdentityComparer : comparer": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.CompilationOptions": ""
                },
                "Content": "protected abstract CompilationOptions CommonWithAssemblyIdentityComparer(AssemblyIdentityComparer comparer);",
                "XmlDocumentation": "",
                "StartLine": 330
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.AssemblyIdentityComparer : comparer": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.CompilationOptions": ""
                },
                "Content": "protected abstract CompilationOptions CommonWithAssemblyIdentityComparer(AssemblyIdentityComparer comparer);",
                "XmlDocumentation": "",
                "StartLine": 330
              },
              "Id": "M:Microsoft.CodeAnalysis.CompilationOptions.CommonWithAssemblyIdentityComparer(Microsoft.CodeAnalysis.AssemblyIdentityComparer)",
              "Parent": "T:Microsoft.CodeAnalysis.CompilationOptions",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Collections.Immutable.ImmutableArray{System.String} : features": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.CompilationOptions": ""
                },
                "Content": "protected abstract CompilationOptions CommonWithFeatures(ImmutableArray<string> features);",
                "XmlDocumentation": "",
                "StartLine": 335
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Collections.Immutable.ImmutableArray{System.String} : features": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.CompilationOptions": ""
                },
                "Content": "protected abstract CompilationOptions CommonWithFeatures(ImmutableArray<string> features);",
                "XmlDocumentation": "",
                "StartLine": 335
              },
              "Id": "M:Microsoft.CodeAnalysis.CompilationOptions.CommonWithFeatures(System.Collections.Immutable.ImmutableArray{System.String})",
              "Parent": "T:Microsoft.CodeAnalysis.CompilationOptions",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.ReportDiagnostic : generalDiagnosticOption": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.CompilationOptions": ""
                },
                "Content": "protected abstract CompilationOptions CommonWithGeneralDiagnosticOption(ReportDiagnostic generalDiagnosticOption);",
                "XmlDocumentation": "",
                "StartLine": 332
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.ReportDiagnostic : generalDiagnosticOption": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.CompilationOptions": ""
                },
                "Content": "protected abstract CompilationOptions CommonWithGeneralDiagnosticOption(ReportDiagnostic generalDiagnosticOption);",
                "XmlDocumentation": "",
                "StartLine": 332
              },
              "Id": "M:Microsoft.CodeAnalysis.CompilationOptions.CommonWithGeneralDiagnosticOption(Microsoft.CodeAnalysis.ReportDiagnostic)",
              "Parent": "T:Microsoft.CodeAnalysis.CompilationOptions",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.MetadataReferenceResolver : resolver": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.CompilationOptions": ""
                },
                "Content": "protected abstract CompilationOptions CommonWithMetadataReferenceResolver(MetadataReferenceResolver resolver);",
                "XmlDocumentation": "",
                "StartLine": 329
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.MetadataReferenceResolver : resolver": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.CompilationOptions": ""
                },
                "Content": "protected abstract CompilationOptions CommonWithMetadataReferenceResolver(MetadataReferenceResolver resolver);",
                "XmlDocumentation": "",
                "StartLine": 329
              },
              "Id": "M:Microsoft.CodeAnalysis.CompilationOptions.CommonWithMetadataReferenceResolver(Microsoft.CodeAnalysis.MetadataReferenceResolver)",
              "Parent": "T:Microsoft.CodeAnalysis.CompilationOptions",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.OptimizationLevel : value": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.CompilationOptions": ""
                },
                "Content": "protected abstract CompilationOptions CommonWithOptimizationLevel(OptimizationLevel value);",
                "XmlDocumentation": "",
                "StartLine": 326
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.OptimizationLevel : value": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.CompilationOptions": ""
                },
                "Content": "protected abstract CompilationOptions CommonWithOptimizationLevel(OptimizationLevel value);",
                "XmlDocumentation": "",
                "StartLine": 326
              },
              "Id": "M:Microsoft.CodeAnalysis.CompilationOptions.CommonWithOptimizationLevel(Microsoft.CodeAnalysis.OptimizationLevel)",
              "Parent": "T:Microsoft.CodeAnalysis.CompilationOptions",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.OutputKind : kind": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.CompilationOptions": ""
                },
                "Content": "protected abstract CompilationOptions CommonWithOutputKind(OutputKind kind);",
                "XmlDocumentation": "",
                "StartLine": 324
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.OutputKind : kind": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.CompilationOptions": ""
                },
                "Content": "protected abstract CompilationOptions CommonWithOutputKind(OutputKind kind);",
                "XmlDocumentation": "",
                "StartLine": 324
              },
              "Id": "M:Microsoft.CodeAnalysis.CompilationOptions.CommonWithOutputKind(Microsoft.CodeAnalysis.OutputKind)",
              "Parent": "T:Microsoft.CodeAnalysis.CompilationOptions",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Platform : platform": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.CompilationOptions": ""
                },
                "Content": "protected abstract CompilationOptions CommonWithPlatform(Platform platform);",
                "XmlDocumentation": "",
                "StartLine": 325
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Platform : platform": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.CompilationOptions": ""
                },
                "Content": "protected abstract CompilationOptions CommonWithPlatform(Platform platform);",
                "XmlDocumentation": "",
                "StartLine": 325
              },
              "Id": "M:Microsoft.CodeAnalysis.CompilationOptions.CommonWithPlatform(Microsoft.CodeAnalysis.Platform)",
              "Parent": "T:Microsoft.CodeAnalysis.CompilationOptions",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SourceReferenceResolver : resolver": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.CompilationOptions": ""
                },
                "Content": "protected abstract CompilationOptions CommonWithSourceReferenceResolver(SourceReferenceResolver resolver);",
                "XmlDocumentation": "",
                "StartLine": 328
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SourceReferenceResolver : resolver": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.CompilationOptions": ""
                },
                "Content": "protected abstract CompilationOptions CommonWithSourceReferenceResolver(SourceReferenceResolver resolver);",
                "XmlDocumentation": "",
                "StartLine": 328
              },
              "Id": "M:Microsoft.CodeAnalysis.CompilationOptions.CommonWithSourceReferenceResolver(Microsoft.CodeAnalysis.SourceReferenceResolver)",
              "Parent": "T:Microsoft.CodeAnalysis.CompilationOptions",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Microsoft.CodeAnalysis.ReportDiagnostic}} : specificDiagnosticOptions": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.CompilationOptions": ""
                },
                "Content": "protected abstract CompilationOptions CommonWithSpecificDiagnosticOptions(IEnumerable<KeyValuePair<string, ReportDiagnostic>> specificDiagnosticOptions);",
                "XmlDocumentation": "",
                "StartLine": 334
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Microsoft.CodeAnalysis.ReportDiagnostic}} : specificDiagnosticOptions": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.CompilationOptions": ""
                },
                "Content": "protected abstract CompilationOptions CommonWithSpecificDiagnosticOptions(IEnumerable<KeyValuePair<string, ReportDiagnostic>> specificDiagnosticOptions);",
                "XmlDocumentation": "",
                "StartLine": 334
              },
              "Id": "M:Microsoft.CodeAnalysis.CompilationOptions.CommonWithSpecificDiagnosticOptions(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Microsoft.CodeAnalysis.ReportDiagnostic}})",
              "Parent": "T:Microsoft.CodeAnalysis.CompilationOptions",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Collections.Immutable.ImmutableDictionary{System.String,Microsoft.CodeAnalysis.ReportDiagnostic} : specificDiagnosticOptions": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.CompilationOptions": ""
                },
                "Content": "protected abstract CompilationOptions CommonWithSpecificDiagnosticOptions(ImmutableDictionary<string, ReportDiagnostic> specificDiagnosticOptions);",
                "XmlDocumentation": "",
                "StartLine": 333
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Collections.Immutable.ImmutableDictionary{System.String,Microsoft.CodeAnalysis.ReportDiagnostic} : specificDiagnosticOptions": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.CompilationOptions": ""
                },
                "Content": "protected abstract CompilationOptions CommonWithSpecificDiagnosticOptions(ImmutableDictionary<string, ReportDiagnostic> specificDiagnosticOptions);",
                "XmlDocumentation": "",
                "StartLine": 333
              },
              "Id": "M:Microsoft.CodeAnalysis.CompilationOptions.CommonWithSpecificDiagnosticOptions(System.Collections.Immutable.ImmutableDictionary{System.String,Microsoft.CodeAnalysis.ReportDiagnostic})",
              "Parent": "T:Microsoft.CodeAnalysis.CompilationOptions",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.StrongNameProvider : provider": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.CompilationOptions": ""
                },
                "Content": "protected abstract CompilationOptions CommonWithStrongNameProvider(StrongNameProvider provider);",
                "XmlDocumentation": "",
                "StartLine": 331
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.StrongNameProvider : provider": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.CompilationOptions": ""
                },
                "Content": "protected abstract CompilationOptions CommonWithStrongNameProvider(StrongNameProvider provider);",
                "XmlDocumentation": "",
                "StartLine": 331
              },
              "Id": "M:Microsoft.CodeAnalysis.CompilationOptions.CommonWithStrongNameProvider(Microsoft.CodeAnalysis.StrongNameProvider)",
              "Parent": "T:Microsoft.CodeAnalysis.CompilationOptions",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.XmlReferenceResolver : resolver": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.CompilationOptions": ""
                },
                "Content": "protected abstract CompilationOptions CommonWithXmlReferenceResolver(XmlReferenceResolver resolver);",
                "XmlDocumentation": "",
                "StartLine": 327
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.XmlReferenceResolver : resolver": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.CompilationOptions": ""
                },
                "Content": "protected abstract CompilationOptions CommonWithXmlReferenceResolver(XmlReferenceResolver resolver);",
                "XmlDocumentation": "",
                "StartLine": 327
              },
              "Id": "M:Microsoft.CodeAnalysis.CompilationOptions.CommonWithXmlReferenceResolver(Microsoft.CodeAnalysis.XmlReferenceResolver)",
              "Parent": "T:Microsoft.CodeAnalysis.CompilationOptions",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Object : obj": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public abstract override bool Equals(object obj);",
                "XmlDocumentation": "",
                "StartLine": 350
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Object : obj": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public abstract override bool Equals(object obj);",
                "XmlDocumentation": "",
                "StartLine": 350
              },
              "Id": "M:Microsoft.CodeAnalysis.CompilationOptions.Equals(System.Object)",
              "Parent": "T:Microsoft.CodeAnalysis.CompilationOptions",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.CompilationOptions : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "protected bool EqualsHelper(CompilationOptions other)",
                "XmlDocumentation": "",
                "StartLine": 352
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.CompilationOptions : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "protected bool EqualsHelper(CompilationOptions other)",
                "XmlDocumentation": "",
                "StartLine": 352
              },
              "Id": "M:Microsoft.CodeAnalysis.CompilationOptions.EqualsHelper(Microsoft.CodeAnalysis.CompilationOptions)",
              "Parent": "T:Microsoft.CodeAnalysis.CompilationOptions",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public abstract override int GetHashCode();",
                "XmlDocumentation": "",
                "StartLine": 388
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public abstract override int GetHashCode();",
                "XmlDocumentation": "",
                "StartLine": 388
              },
              "Id": "M:Microsoft.CodeAnalysis.CompilationOptions.GetHashCode",
              "Parent": "T:Microsoft.CodeAnalysis.CompilationOptions",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "protected int GetHashCodeHelper()",
                "XmlDocumentation": "",
                "StartLine": 390
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "protected int GetHashCodeHelper()",
                "XmlDocumentation": "",
                "StartLine": 390
              },
              "Id": "M:Microsoft.CodeAnalysis.CompilationOptions.GetHashCodeHelper",
              "Parent": "T:Microsoft.CodeAnalysis.CompilationOptions",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.AssemblyIdentityComparer : comparer": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.CompilationOptions": ""
                },
                "Content": "public CompilationOptions WithAssemblyIdentityComparer(AssemblyIdentityComparer comparer)",
                "XmlDocumentation": "",
                "StartLine": 309
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.AssemblyIdentityComparer : comparer": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.CompilationOptions": ""
                },
                "Content": "public CompilationOptions WithAssemblyIdentityComparer(AssemblyIdentityComparer comparer)",
                "XmlDocumentation": "",
                "StartLine": 309
              },
              "Id": "M:Microsoft.CodeAnalysis.CompilationOptions.WithAssemblyIdentityComparer(Microsoft.CodeAnalysis.AssemblyIdentityComparer)",
              "Parent": "T:Microsoft.CodeAnalysis.CompilationOptions",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.ReportDiagnostic : value": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.CompilationOptions": ""
                },
                "Content": "public CompilationOptions WithGeneralDiagnosticOption(ReportDiagnostic value)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.CompilationOptions.WithGeneralDiagnosticOption(Microsoft.CodeAnalysis.ReportDiagnostic)\">\r\n    <summary>\r\n    Creates a new options instance with the specified general diagnostic option.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 249
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.ReportDiagnostic : value": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.CompilationOptions": ""
                },
                "Content": "public CompilationOptions WithGeneralDiagnosticOption(ReportDiagnostic value)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.CompilationOptions.WithGeneralDiagnosticOption(Microsoft.CodeAnalysis.ReportDiagnostic)\">\r\n    <summary>\r\n    Creates a new options instance with the specified general diagnostic option.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 249
              },
              "Id": "M:Microsoft.CodeAnalysis.CompilationOptions.WithGeneralDiagnosticOption(Microsoft.CodeAnalysis.ReportDiagnostic)",
              "Parent": "T:Microsoft.CodeAnalysis.CompilationOptions",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.CompilationOptions.WithGeneralDiagnosticOption(Microsoft.CodeAnalysis.ReportDiagnostic)\">\r\n    <summary>\r\n    Creates a new options instance with the specified general diagnostic option.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.MetadataReferenceResolver : resolver": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.CompilationOptions": ""
                },
                "Content": "public CompilationOptions WithMetadataReferenceResolver(MetadataReferenceResolver resolver)",
                "XmlDocumentation": "",
                "StartLine": 304
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.MetadataReferenceResolver : resolver": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.CompilationOptions": ""
                },
                "Content": "public CompilationOptions WithMetadataReferenceResolver(MetadataReferenceResolver resolver)",
                "XmlDocumentation": "",
                "StartLine": 304
              },
              "Id": "M:Microsoft.CodeAnalysis.CompilationOptions.WithMetadataReferenceResolver(Microsoft.CodeAnalysis.MetadataReferenceResolver)",
              "Parent": "T:Microsoft.CodeAnalysis.CompilationOptions",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.OptimizationLevel : value": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.CompilationOptions": ""
                },
                "Content": "public CompilationOptions WithOptimizationLevel(OptimizationLevel value)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.CompilationOptions.WithOptimizationLevel(Microsoft.CodeAnalysis.OptimizationLevel)\">\r\n    <summary>\r\n    Creates a new options instance with optimizations enabled or disabled.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 289
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.OptimizationLevel : value": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.CompilationOptions": ""
                },
                "Content": "public CompilationOptions WithOptimizationLevel(OptimizationLevel value)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.CompilationOptions.WithOptimizationLevel(Microsoft.CodeAnalysis.OptimizationLevel)\">\r\n    <summary>\r\n    Creates a new options instance with optimizations enabled or disabled.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 289
              },
              "Id": "M:Microsoft.CodeAnalysis.CompilationOptions.WithOptimizationLevel(Microsoft.CodeAnalysis.OptimizationLevel)",
              "Parent": "T:Microsoft.CodeAnalysis.CompilationOptions",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.CompilationOptions.WithOptimizationLevel(Microsoft.CodeAnalysis.OptimizationLevel)\">\r\n    <summary>\r\n    Creates a new options instance with optimizations enabled or disabled.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.OutputKind : kind": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.CompilationOptions": ""
                },
                "Content": "public CompilationOptions WithOutputKind(OutputKind kind)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.CompilationOptions.WithOutputKind(Microsoft.CodeAnalysis.OutputKind)\">\r\n    <summary>\r\n    Creates a new options instance with the specified output kind.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 273
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.OutputKind : kind": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.CompilationOptions": ""
                },
                "Content": "public CompilationOptions WithOutputKind(OutputKind kind)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.CompilationOptions.WithOutputKind(Microsoft.CodeAnalysis.OutputKind)\">\r\n    <summary>\r\n    Creates a new options instance with the specified output kind.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 273
              },
              "Id": "M:Microsoft.CodeAnalysis.CompilationOptions.WithOutputKind(Microsoft.CodeAnalysis.OutputKind)",
              "Parent": "T:Microsoft.CodeAnalysis.CompilationOptions",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.CompilationOptions.WithOutputKind(Microsoft.CodeAnalysis.OutputKind)\">\r\n    <summary>\r\n    Creates a new options instance with the specified output kind.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Platform : platform": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.CompilationOptions": ""
                },
                "Content": "public CompilationOptions WithPlatform(Platform platform)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.CompilationOptions.WithPlatform(Microsoft.CodeAnalysis.Platform)\">\r\n    <summary>\r\n    Creates a new options instance with the specified platform.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 281
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Platform : platform": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.CompilationOptions": ""
                },
                "Content": "public CompilationOptions WithPlatform(Platform platform)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.CompilationOptions.WithPlatform(Microsoft.CodeAnalysis.Platform)\">\r\n    <summary>\r\n    Creates a new options instance with the specified platform.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 281
              },
              "Id": "M:Microsoft.CodeAnalysis.CompilationOptions.WithPlatform(Microsoft.CodeAnalysis.Platform)",
              "Parent": "T:Microsoft.CodeAnalysis.CompilationOptions",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.CompilationOptions.WithPlatform(Microsoft.CodeAnalysis.Platform)\">\r\n    <summary>\r\n    Creates a new options instance with the specified platform.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SourceReferenceResolver : resolver": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.CompilationOptions": ""
                },
                "Content": "public CompilationOptions WithSourceReferenceResolver(SourceReferenceResolver resolver)",
                "XmlDocumentation": "",
                "StartLine": 299
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SourceReferenceResolver : resolver": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.CompilationOptions": ""
                },
                "Content": "public CompilationOptions WithSourceReferenceResolver(SourceReferenceResolver resolver)",
                "XmlDocumentation": "",
                "StartLine": 299
              },
              "Id": "M:Microsoft.CodeAnalysis.CompilationOptions.WithSourceReferenceResolver(Microsoft.CodeAnalysis.SourceReferenceResolver)",
              "Parent": "T:Microsoft.CodeAnalysis.CompilationOptions",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Microsoft.CodeAnalysis.ReportDiagnostic}} : value": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.CompilationOptions": ""
                },
                "Content": "public CompilationOptions WithSpecificDiagnosticOptions(IEnumerable<KeyValuePair<string, ReportDiagnostic>> value)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.CompilationOptions.WithSpecificDiagnosticOptions(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Microsoft.CodeAnalysis.ReportDiagnostic}})\">\r\n    <summary>\r\n    Creates a new options instance with the specified diagnostic-specific options.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 265
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Microsoft.CodeAnalysis.ReportDiagnostic}} : value": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.CompilationOptions": ""
                },
                "Content": "public CompilationOptions WithSpecificDiagnosticOptions(IEnumerable<KeyValuePair<string, ReportDiagnostic>> value)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.CompilationOptions.WithSpecificDiagnosticOptions(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Microsoft.CodeAnalysis.ReportDiagnostic}})\">\r\n    <summary>\r\n    Creates a new options instance with the specified diagnostic-specific options.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 265
              },
              "Id": "M:Microsoft.CodeAnalysis.CompilationOptions.WithSpecificDiagnosticOptions(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Microsoft.CodeAnalysis.ReportDiagnostic}})",
              "Parent": "T:Microsoft.CodeAnalysis.CompilationOptions",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.CompilationOptions.WithSpecificDiagnosticOptions(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Microsoft.CodeAnalysis.ReportDiagnostic}})\">\r\n    <summary>\r\n    Creates a new options instance with the specified diagnostic-specific options.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Collections.Immutable.ImmutableDictionary{System.String,Microsoft.CodeAnalysis.ReportDiagnostic} : value": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.CompilationOptions": ""
                },
                "Content": "public CompilationOptions WithSpecificDiagnosticOptions(ImmutableDictionary<string, ReportDiagnostic> value)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.CompilationOptions.WithSpecificDiagnosticOptions(System.Collections.Immutable.ImmutableDictionary{System.String,Microsoft.CodeAnalysis.ReportDiagnostic})\">\r\n    <summary>\r\n    Creates a new options instance with the specified diagnostic-specific options.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 257
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Collections.Immutable.ImmutableDictionary{System.String,Microsoft.CodeAnalysis.ReportDiagnostic} : value": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.CompilationOptions": ""
                },
                "Content": "public CompilationOptions WithSpecificDiagnosticOptions(ImmutableDictionary<string, ReportDiagnostic> value)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.CompilationOptions.WithSpecificDiagnosticOptions(System.Collections.Immutable.ImmutableDictionary{System.String,Microsoft.CodeAnalysis.ReportDiagnostic})\">\r\n    <summary>\r\n    Creates a new options instance with the specified diagnostic-specific options.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 257
              },
              "Id": "M:Microsoft.CodeAnalysis.CompilationOptions.WithSpecificDiagnosticOptions(System.Collections.Immutable.ImmutableDictionary{System.String,Microsoft.CodeAnalysis.ReportDiagnostic})",
              "Parent": "T:Microsoft.CodeAnalysis.CompilationOptions",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.CompilationOptions.WithSpecificDiagnosticOptions(System.Collections.Immutable.ImmutableDictionary{System.String,Microsoft.CodeAnalysis.ReportDiagnostic})\">\r\n    <summary>\r\n    Creates a new options instance with the specified diagnostic-specific options.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.StrongNameProvider : provider": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.CompilationOptions": ""
                },
                "Content": "public CompilationOptions WithStrongNameProvider(StrongNameProvider provider)",
                "XmlDocumentation": "",
                "StartLine": 314
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.StrongNameProvider : provider": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.CompilationOptions": ""
                },
                "Content": "public CompilationOptions WithStrongNameProvider(StrongNameProvider provider)",
                "XmlDocumentation": "",
                "StartLine": 314
              },
              "Id": "M:Microsoft.CodeAnalysis.CompilationOptions.WithStrongNameProvider(Microsoft.CodeAnalysis.StrongNameProvider)",
              "Parent": "T:Microsoft.CodeAnalysis.CompilationOptions",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.XmlReferenceResolver : resolver": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.CompilationOptions": ""
                },
                "Content": "public CompilationOptions WithXmlReferenceResolver(XmlReferenceResolver resolver)",
                "XmlDocumentation": "",
                "StartLine": 294
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.XmlReferenceResolver : resolver": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.CompilationOptions": ""
                },
                "Content": "public CompilationOptions WithXmlReferenceResolver(XmlReferenceResolver resolver)",
                "XmlDocumentation": "",
                "StartLine": 294
              },
              "Id": "M:Microsoft.CodeAnalysis.CompilationOptions.WithXmlReferenceResolver(Microsoft.CodeAnalysis.XmlReferenceResolver)",
              "Parent": "T:Microsoft.CodeAnalysis.CompilationOptions",
              "XmlDocumentation": ""
            }
          ],
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.AssemblyIdentityComparer",
                "Content": "public AssemblyIdentityComparer AssemblyIdentityComparer",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.CompilationOptions.AssemblyIdentityComparer\">\r\n    <summary>\r\n    Used to compare assembly identities. May implement unification and portability policies specific to the target platform.\r\n    <see cref=\"F:Microsoft.CodeAnalysis.AssemblyIdentityComparer.Default\"/> if not specified.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 144
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.AssemblyIdentityComparer",
                "Content": "public AssemblyIdentityComparer AssemblyIdentityComparer",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.CompilationOptions.AssemblyIdentityComparer\">\r\n    <summary>\r\n    Used to compare assembly identities. May implement unification and portability policies specific to the target platform.\r\n    <see cref=\"F:Microsoft.CodeAnalysis.AssemblyIdentityComparer.Default\"/> if not specified.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 144
              },
              "Id": "P:Microsoft.CodeAnalysis.CompilationOptions.AssemblyIdentityComparer",
              "Parent": "T:Microsoft.CodeAnalysis.CompilationOptions",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.CompilationOptions.AssemblyIdentityComparer\">\r\n    <summary>\r\n    Used to compare assembly identities. May implement unification and portability policies specific to the target platform.\r\n    <see cref=\"F:Microsoft.CodeAnalysis.AssemblyIdentityComparer.Default\"/> if not specified.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool CheckOverflow",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.CompilationOptions.CheckOverflow\">\r\n    <summary>\r\n    Whether bounds checking on integer arithmetic is enforced by default or not.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 67
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool CheckOverflow",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.CompilationOptions.CheckOverflow\">\r\n    <summary>\r\n    Whether bounds checking on integer arithmetic is enforced by default or not.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 67
              },
              "Id": "P:Microsoft.CodeAnalysis.CompilationOptions.CheckOverflow",
              "Parent": "T:Microsoft.CodeAnalysis.CompilationOptions",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.CompilationOptions.CheckOverflow\">\r\n    <summary>\r\n    Whether bounds checking on integer arithmetic is enforced by default or not.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool ConcurrentBuild",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.CompilationOptions.ConcurrentBuild\">\r\n    <summary>\r\n    Specifies whether building compilation may use multiple threads.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 93
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool ConcurrentBuild",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.CompilationOptions.ConcurrentBuild\">\r\n    <summary>\r\n    Specifies whether building compilation may use multiple threads.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 93
              },
              "Id": "P:Microsoft.CodeAnalysis.CompilationOptions.ConcurrentBuild",
              "Parent": "T:Microsoft.CodeAnalysis.CompilationOptions",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.CompilationOptions.ConcurrentBuild\">\r\n    <summary>\r\n    Specifies whether building compilation may use multiple threads.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.String",
                "Content": "public string CryptoKeyContainer",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.CompilationOptions.CryptoKeyContainer\">\r\n    <summary>\r\n    The CSP container containing the key with which to sign the output.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 56
              },
              "Syntax": {
                "PropertyType": "T:System.String",
                "Content": "public string CryptoKeyContainer",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.CompilationOptions.CryptoKeyContainer\">\r\n    <summary>\r\n    The CSP container containing the key with which to sign the output.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 56
              },
              "Id": "P:Microsoft.CodeAnalysis.CompilationOptions.CryptoKeyContainer",
              "Parent": "T:Microsoft.CodeAnalysis.CompilationOptions",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.CompilationOptions.CryptoKeyContainer\">\r\n    <summary>\r\n    The CSP container containing the key with which to sign the output.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.String",
                "Content": "public string CryptoKeyFile",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.CompilationOptions.CryptoKeyFile\">\r\n    <summary>\r\n    The name of the file containing the key with which to sign the output.\r\n    </summary>\r\n    <remarks>\r\n    To sign the output supply either one of <see cref=\"P:Microsoft.CodeAnalysis.CompilationOptions.CryptoKeyContainer\"/> or <see cref=\"P:Microsoft.CodeAnalysis.CompilationOptions.CryptoKeyFile\"/>.\r\n    but not both.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 51
              },
              "Syntax": {
                "PropertyType": "T:System.String",
                "Content": "public string CryptoKeyFile",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.CompilationOptions.CryptoKeyFile\">\r\n    <summary>\r\n    The name of the file containing the key with which to sign the output.\r\n    </summary>\r\n    <remarks>\r\n    To sign the output supply either one of <see cref=\"P:Microsoft.CodeAnalysis.CompilationOptions.CryptoKeyContainer\"/> or <see cref=\"P:Microsoft.CodeAnalysis.CompilationOptions.CryptoKeyFile\"/>.\r\n    but not both.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 51
              },
              "Id": "P:Microsoft.CodeAnalysis.CompilationOptions.CryptoKeyFile",
              "Parent": "T:Microsoft.CodeAnalysis.CompilationOptions",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.CompilationOptions.CryptoKeyFile\">\r\n    <summary>\r\n    The name of the file containing the key with which to sign the output.\r\n    </summary>\r\n    <remarks>\r\n    To sign the output supply either one of <see cref=\"P:Microsoft.CodeAnalysis.CompilationOptions.CryptoKeyContainer\"/> or <see cref=\"P:Microsoft.CodeAnalysis.CompilationOptions.CryptoKeyFile\"/>.\r\n    but not both.\r\n    </remarks>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Nullable{System.Boolean}",
                "Content": "public bool ? DelaySign",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.CompilationOptions.DelaySign\">\r\n    <summary>\r\n    Turn off strong name signing when you have supplied a key either through\r\n    attributes or <see cref=\"P:Microsoft.CodeAnalysis.CompilationOptions.CryptoKeyContainer\"/> or <see cref=\"P:Microsoft.CodeAnalysis.CompilationOptions.CryptoKeyFile\"/>.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 62
              },
              "Syntax": {
                "PropertyType": "T:System.Nullable{System.Boolean}",
                "Content": "public bool ? DelaySign",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.CompilationOptions.DelaySign\">\r\n    <summary>\r\n    Turn off strong name signing when you have supplied a key either through\r\n    attributes or <see cref=\"P:Microsoft.CodeAnalysis.CompilationOptions.CryptoKeyContainer\"/> or <see cref=\"P:Microsoft.CodeAnalysis.CompilationOptions.CryptoKeyFile\"/>.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 62
              },
              "Id": "P:Microsoft.CodeAnalysis.CompilationOptions.DelaySign",
              "Parent": "T:Microsoft.CodeAnalysis.CompilationOptions",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.CompilationOptions.DelaySign\">\r\n    <summary>\r\n    Turn off strong name signing when you have supplied a key either through\r\n    attributes or <see cref=\"P:Microsoft.CodeAnalysis.CompilationOptions.CryptoKeyContainer\"/> or <see cref=\"P:Microsoft.CodeAnalysis.CompilationOptions.CryptoKeyFile\"/>.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostic}",
                "Content": "public ImmutableArray<Diagnostic> Errors",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.CompilationOptions.Errors\">\r\n    <summary>\r\n    Errors collection related to an incompatible set of compilation options\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 345
              },
              "Syntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostic}",
                "Content": "public ImmutableArray<Diagnostic> Errors",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.CompilationOptions.Errors\">\r\n    <summary>\r\n    Errors collection related to an incompatible set of compilation options\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 345
              },
              "Id": "P:Microsoft.CodeAnalysis.CompilationOptions.Errors",
              "Parent": "T:Microsoft.CodeAnalysis.CompilationOptions",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.CompilationOptions.Errors\">\r\n    <summary>\r\n    Errors collection related to an incompatible set of compilation options\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.ReportDiagnostic",
                "Content": "public ReportDiagnostic GeneralDiagnosticOption",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.CompilationOptions.GeneralDiagnosticOption\">\r\n    <summary>\r\n    Global warning report option\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 83
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.ReportDiagnostic",
                "Content": "public ReportDiagnostic GeneralDiagnosticOption",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.CompilationOptions.GeneralDiagnosticOption\">\r\n    <summary>\r\n    Global warning report option\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 83
              },
              "Id": "P:Microsoft.CodeAnalysis.CompilationOptions.GeneralDiagnosticOption",
              "Parent": "T:Microsoft.CodeAnalysis.CompilationOptions",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.CompilationOptions.GeneralDiagnosticOption\">\r\n    <summary>\r\n    Global warning report option\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.String",
                "Content": "public string MainTypeName",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.CompilationOptions.MainTypeName\">\r\n    <summary>\r\n    The full name of a type that declares static Main method. Must be a valid non-generic namespace-qualified name.\r\n    Null if any static Main method is a candidate for an entry point.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 42
              },
              "Syntax": {
                "PropertyType": "T:System.String",
                "Content": "public string MainTypeName",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.CompilationOptions.MainTypeName\">\r\n    <summary>\r\n    The full name of a type that declares static Main method. Must be a valid non-generic namespace-qualified name.\r\n    Null if any static Main method is a candidate for an entry point.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 42
              },
              "Id": "P:Microsoft.CodeAnalysis.CompilationOptions.MainTypeName",
              "Parent": "T:Microsoft.CodeAnalysis.CompilationOptions",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.CompilationOptions.MainTypeName\">\r\n    <summary>\r\n    The full name of a type that declares static Main method. Must be a valid non-generic namespace-qualified name.\r\n    Null if any static Main method is a candidate for an entry point.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.MetadataReferenceResolver",
                "Content": "public MetadataReferenceResolver MetadataReferenceResolver",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.CompilationOptions.MetadataReferenceResolver\">\r\n    <summary>\r\n    Resolves paths to metadata references specified in source via #r directives.\r\n    Null if the compilation can't contain references to metadata other than those explicitly passed to its factory (such as #r directives in sources). \r\n    </summary>\r\n</member>\r\n",
                "StartLine": 120
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.MetadataReferenceResolver",
                "Content": "public MetadataReferenceResolver MetadataReferenceResolver",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.CompilationOptions.MetadataReferenceResolver\">\r\n    <summary>\r\n    Resolves paths to metadata references specified in source via #r directives.\r\n    Null if the compilation can't contain references to metadata other than those explicitly passed to its factory (such as #r directives in sources). \r\n    </summary>\r\n</member>\r\n",
                "StartLine": 120
              },
              "Id": "P:Microsoft.CodeAnalysis.CompilationOptions.MetadataReferenceResolver",
              "Parent": "T:Microsoft.CodeAnalysis.CompilationOptions",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.CompilationOptions.MetadataReferenceResolver\">\r\n    <summary>\r\n    Resolves paths to metadata references specified in source via #r directives.\r\n    Null if the compilation can't contain references to metadata other than those explicitly passed to its factory (such as #r directives in sources). \r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.String",
                "Content": "public string ModuleName",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.CompilationOptions.ModuleName\">\r\n    <summary>\r\n    Name of the primary module, or null if a default name should be used.\r\n    </summary>\r\n    <remarks>\r\n    The name usually (but not necessarily) includes an extension, e.g. \"MyModule.dll\".\r\n    \r\n    If <see cref=\"P:Microsoft.CodeAnalysis.CompilationOptions.ModuleName\"/> is null the actual name written to metadata  \r\n    is derived from the name of the compilation (<see cref=\"P:Microsoft.CodeAnalysis.Compilation.AssemblyName\"/>)\r\n    by appending a default extension for <see cref=\"P:Microsoft.CodeAnalysis.CompilationOptions.OutputKind\"/>.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 30
              },
              "Syntax": {
                "PropertyType": "T:System.String",
                "Content": "public string ModuleName",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.CompilationOptions.ModuleName\">\r\n    <summary>\r\n    Name of the primary module, or null if a default name should be used.\r\n    </summary>\r\n    <remarks>\r\n    The name usually (but not necessarily) includes an extension, e.g. \"MyModule.dll\".\r\n    \r\n    If <see cref=\"P:Microsoft.CodeAnalysis.CompilationOptions.ModuleName\"/> is null the actual name written to metadata  \r\n    is derived from the name of the compilation (<see cref=\"P:Microsoft.CodeAnalysis.Compilation.AssemblyName\"/>)\r\n    by appending a default extension for <see cref=\"P:Microsoft.CodeAnalysis.CompilationOptions.OutputKind\"/>.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 30
              },
              "Id": "P:Microsoft.CodeAnalysis.CompilationOptions.ModuleName",
              "Parent": "T:Microsoft.CodeAnalysis.CompilationOptions",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.CompilationOptions.ModuleName\">\r\n    <summary>\r\n    Name of the primary module, or null if a default name should be used.\r\n    </summary>\r\n    <remarks>\r\n    The name usually (but not necessarily) includes an extension, e.g. \"MyModule.dll\".\r\n    \r\n    If <see cref=\"P:Microsoft.CodeAnalysis.CompilationOptions.ModuleName\"/> is null the actual name written to metadata  \r\n    is derived from the name of the compilation (<see cref=\"P:Microsoft.CodeAnalysis.Compilation.AssemblyName\"/>)\r\n    by appending a default extension for <see cref=\"P:Microsoft.CodeAnalysis.CompilationOptions.OutputKind\"/>.\r\n    </remarks>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.OptimizationLevel",
                "Content": "public OptimizationLevel OptimizationLevel",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.CompilationOptions.OptimizationLevel\">\r\n    <summary>\r\n    Specifies whether or not optimizations should be performed on the output IL.\r\n    This is independent of whether or not PDB information is generated.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 78
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.OptimizationLevel",
                "Content": "public OptimizationLevel OptimizationLevel",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.CompilationOptions.OptimizationLevel\">\r\n    <summary>\r\n    Specifies whether or not optimizations should be performed on the output IL.\r\n    This is independent of whether or not PDB information is generated.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 78
              },
              "Id": "P:Microsoft.CodeAnalysis.CompilationOptions.OptimizationLevel",
              "Parent": "T:Microsoft.CodeAnalysis.CompilationOptions",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.CompilationOptions.OptimizationLevel\">\r\n    <summary>\r\n    Specifies whether or not optimizations should be performed on the output IL.\r\n    This is independent of whether or not PDB information is generated.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.OutputKind",
                "Content": "public OutputKind OutputKind",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.CompilationOptions.OutputKind\">\r\n    <summary>\r\n    The kind of assembly generated when emitted.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 18
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.OutputKind",
                "Content": "public OutputKind OutputKind",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.CompilationOptions.OutputKind\">\r\n    <summary>\r\n    The kind of assembly generated when emitted.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 18
              },
              "Id": "P:Microsoft.CodeAnalysis.CompilationOptions.OutputKind",
              "Parent": "T:Microsoft.CodeAnalysis.CompilationOptions",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.CompilationOptions.OutputKind\">\r\n    <summary>\r\n    The kind of assembly generated when emitted.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Platform",
                "Content": "public Platform Platform",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.CompilationOptions.Platform\">\r\n    <summary>\r\n    Specifies which version of the common language runtime (CLR) can run the assembly.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 72
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Platform",
                "Content": "public Platform Platform",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.CompilationOptions.Platform\">\r\n    <summary>\r\n    Specifies which version of the common language runtime (CLR) can run the assembly.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 72
              },
              "Id": "P:Microsoft.CodeAnalysis.CompilationOptions.Platform",
              "Parent": "T:Microsoft.CodeAnalysis.CompilationOptions",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.CompilationOptions.Platform\">\r\n    <summary>\r\n    Specifies which version of the common language runtime (CLR) can run the assembly.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.String",
                "Content": "public string ScriptClassName",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.CompilationOptions.ScriptClassName\">\r\n    <summary>\r\n    The full name of a global implicit class (script class). This class implicitly encapsulates top-level statements, \r\n    type declarations, and member declarations. Could be a namespace qualified name.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 36
              },
              "Syntax": {
                "PropertyType": "T:System.String",
                "Content": "public string ScriptClassName",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.CompilationOptions.ScriptClassName\">\r\n    <summary>\r\n    The full name of a global implicit class (script class). This class implicitly encapsulates top-level statements, \r\n    type declarations, and member declarations. Could be a namespace qualified name.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 36
              },
              "Id": "P:Microsoft.CodeAnalysis.CompilationOptions.ScriptClassName",
              "Parent": "T:Microsoft.CodeAnalysis.CompilationOptions",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.CompilationOptions.ScriptClassName\">\r\n    <summary>\r\n    The full name of a global implicit class (script class). This class implicitly encapsulates top-level statements, \r\n    type declarations, and member declarations. Could be a namespace qualified name.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SourceReferenceResolver",
                "Content": "public SourceReferenceResolver SourceReferenceResolver",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.CompilationOptions.SourceReferenceResolver\">\r\n    <summary>\r\n    Gets the resolver for resolving source document references for the compilation.\r\n    Null if the compilation is not allowed to contain source file references, such as #line pragmas and #load directives.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 132
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SourceReferenceResolver",
                "Content": "public SourceReferenceResolver SourceReferenceResolver",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.CompilationOptions.SourceReferenceResolver\">\r\n    <summary>\r\n    Gets the resolver for resolving source document references for the compilation.\r\n    Null if the compilation is not allowed to contain source file references, such as #line pragmas and #load directives.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 132
              },
              "Id": "P:Microsoft.CodeAnalysis.CompilationOptions.SourceReferenceResolver",
              "Parent": "T:Microsoft.CodeAnalysis.CompilationOptions",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.CompilationOptions.SourceReferenceResolver\">\r\n    <summary>\r\n    Gets the resolver for resolving source document references for the compilation.\r\n    Null if the compilation is not allowed to contain source file references, such as #line pragmas and #load directives.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableDictionary{System.String,Microsoft.CodeAnalysis.ReportDiagnostic}",
                "Content": "public ImmutableDictionary<string, ReportDiagnostic> SpecificDiagnosticOptions",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.CompilationOptions.SpecificDiagnosticOptions\">\r\n    <summary>\r\n    Warning report option for each warning.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 114
              },
              "Syntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableDictionary{System.String,Microsoft.CodeAnalysis.ReportDiagnostic}",
                "Content": "public ImmutableDictionary<string, ReportDiagnostic> SpecificDiagnosticOptions",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.CompilationOptions.SpecificDiagnosticOptions\">\r\n    <summary>\r\n    Warning report option for each warning.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 114
              },
              "Id": "P:Microsoft.CodeAnalysis.CompilationOptions.SpecificDiagnosticOptions",
              "Parent": "T:Microsoft.CodeAnalysis.CompilationOptions",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.CompilationOptions.SpecificDiagnosticOptions\">\r\n    <summary>\r\n    Warning report option for each warning.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.StrongNameProvider",
                "Content": "public StrongNameProvider StrongNameProvider",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.CompilationOptions.StrongNameProvider\">\r\n    <summary>\r\n    Provides strong name and signature the source assembly.\r\n    Null if assembly signing is not supported.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 138
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.StrongNameProvider",
                "Content": "public StrongNameProvider StrongNameProvider",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.CompilationOptions.StrongNameProvider\">\r\n    <summary>\r\n    Provides strong name and signature the source assembly.\r\n    Null if assembly signing is not supported.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 138
              },
              "Id": "P:Microsoft.CodeAnalysis.CompilationOptions.StrongNameProvider",
              "Parent": "T:Microsoft.CodeAnalysis.CompilationOptions",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.CompilationOptions.StrongNameProvider\">\r\n    <summary>\r\n    Provides strong name and signature the source assembly.\r\n    Null if assembly signing is not supported.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Int32",
                "Content": "public int WarningLevel",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.CompilationOptions.WarningLevel\">\r\n    <summary>\r\n    Global warning level (from 0 to 4).\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 88
              },
              "Syntax": {
                "PropertyType": "T:System.Int32",
                "Content": "public int WarningLevel",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.CompilationOptions.WarningLevel\">\r\n    <summary>\r\n    Global warning level (from 0 to 4).\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 88
              },
              "Id": "P:Microsoft.CodeAnalysis.CompilationOptions.WarningLevel",
              "Parent": "T:Microsoft.CodeAnalysis.CompilationOptions",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.CompilationOptions.WarningLevel\">\r\n    <summary>\r\n    Global warning level (from 0 to 4).\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.XmlReferenceResolver",
                "Content": "public XmlReferenceResolver XmlReferenceResolver",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.CompilationOptions.XmlReferenceResolver\">\r\n    <summary>\r\n    Gets the resolver for resolving XML document references for the compilation.\r\n    Null if the compilation is not allowed to contain XML file references, such as XML doc comment include tags and permission sets stored in an XML file.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 126
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.XmlReferenceResolver",
                "Content": "public XmlReferenceResolver XmlReferenceResolver",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.CompilationOptions.XmlReferenceResolver\">\r\n    <summary>\r\n    Gets the resolver for resolving XML document references for the compilation.\r\n    Null if the compilation is not allowed to contain XML file references, such as XML doc comment include tags and permission sets stored in an XML file.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 126
              },
              "Id": "P:Microsoft.CodeAnalysis.CompilationOptions.XmlReferenceResolver",
              "Parent": "T:Microsoft.CodeAnalysis.CompilationOptions",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.CompilationOptions.XmlReferenceResolver\">\r\n    <summary>\r\n    Gets the resolver for resolving XML document references for the compilation.\r\n    Null if the compilation is not allowed to contain XML file references, such as XML doc comment include tags and permission sets stored in an XML file.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Compilation\\CompilationOptions.cs",
          "InheritanceHierarchy": [
            "T:System.Object"
          ],
          "Syntax": {
            "Content": "public abstract class CompilationOptions",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.CompilationOptions\">\r\n    <summary>\r\n    Represents compilation options common to C# and VB.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.CompilationOptions",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.CompilationOptions\">\r\n    <summary>\r\n    Represents compilation options common to C# and VB.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{System.String} : aliases": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.CompilationReference": ""
                },
                "Content": "public new CompilationReference WithAliases(IEnumerable<string> aliases)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.CompilationReference.WithAliases(System.Collections.Generic.IEnumerable{System.String})\">\r\n    <summary>\r\n    Returns an instance of the reference with specified aliases.\r\n    </summary>\r\n    <param name=\"aliases\">The new aliases for the reference.</param>\r\n    <exception cref=\"T:System.ArgumentException\">Alias is invalid for the metadata kind.</exception> \r\n</member>\r\n",
                "StartLine": 48
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{System.String} : aliases": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.CompilationReference": ""
                },
                "Content": "public new CompilationReference WithAliases(IEnumerable<string> aliases)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.CompilationReference.WithAliases(System.Collections.Generic.IEnumerable{System.String})\">\r\n    <summary>\r\n    Returns an instance of the reference with specified aliases.\r\n    </summary>\r\n    <param name=\"aliases\">The new aliases for the reference.</param>\r\n    <exception cref=\"T:System.ArgumentException\">Alias is invalid for the metadata kind.</exception> \r\n</member>\r\n",
                "StartLine": 48
              },
              "Id": "M:Microsoft.CodeAnalysis.CompilationReference.WithAliases(System.Collections.Generic.IEnumerable{System.String})",
              "Parent": "T:Microsoft.CodeAnalysis.CompilationReference",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.CompilationReference.WithAliases(System.Collections.Generic.IEnumerable{System.String})\">\r\n    <summary>\r\n    Returns an instance of the reference with specified aliases.\r\n    </summary>\r\n    <param name=\"aliases\">The new aliases for the reference.</param>\r\n    <exception cref=\"T:System.ArgumentException\">Alias is invalid for the metadata kind.</exception> \r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Collections.Immutable.ImmutableArray{System.String} : aliases": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.CompilationReference": ""
                },
                "Content": "public new CompilationReference WithAliases(ImmutableArray<string> aliases)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.CompilationReference.WithAliases(System.Collections.Immutable.ImmutableArray{System.String})\">\r\n    <summary>\r\n    Returns an instance of the reference with specified aliases.\r\n    </summary>\r\n    <param name=\"aliases\">The new aliases for the reference.</param>\r\n    <exception cref=\"T:System.ArgumentException\">Alias is invalid for the metadata kind.</exception> \r\n</member>\r\n",
                "StartLine": 58
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Collections.Immutable.ImmutableArray{System.String} : aliases": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.CompilationReference": ""
                },
                "Content": "public new CompilationReference WithAliases(ImmutableArray<string> aliases)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.CompilationReference.WithAliases(System.Collections.Immutable.ImmutableArray{System.String})\">\r\n    <summary>\r\n    Returns an instance of the reference with specified aliases.\r\n    </summary>\r\n    <param name=\"aliases\">The new aliases for the reference.</param>\r\n    <exception cref=\"T:System.ArgumentException\">Alias is invalid for the metadata kind.</exception> \r\n</member>\r\n",
                "StartLine": 58
              },
              "Id": "M:Microsoft.CodeAnalysis.CompilationReference.WithAliases(System.Collections.Immutable.ImmutableArray{System.String})",
              "Parent": "T:Microsoft.CodeAnalysis.CompilationReference",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.CompilationReference.WithAliases(System.Collections.Immutable.ImmutableArray{System.String})\">\r\n    <summary>\r\n    Returns an instance of the reference with specified aliases.\r\n    </summary>\r\n    <param name=\"aliases\">The new aliases for the reference.</param>\r\n    <exception cref=\"T:System.ArgumentException\">Alias is invalid for the metadata kind.</exception> \r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Boolean : value": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.CompilationReference": ""
                },
                "Content": "public new CompilationReference WithEmbedInteropTypes(bool value)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.CompilationReference.WithEmbedInteropTypes(System.Boolean)\">\r\n    <summary>\r\n    Returns an instance of the reference with specified interop types embedding.\r\n    </summary>\r\n    <param name=\"value\">The new value for <see cref=\"P:Microsoft.CodeAnalysis.MetadataReferenceProperties.EmbedInteropTypes\"/>.</param>\r\n    <exception cref=\"T:System.ArgumentException\">Interop types can't be embedded from modules.</exception> \r\n</member>\r\n",
                "StartLine": 68
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Boolean : value": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.CompilationReference": ""
                },
                "Content": "public new CompilationReference WithEmbedInteropTypes(bool value)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.CompilationReference.WithEmbedInteropTypes(System.Boolean)\">\r\n    <summary>\r\n    Returns an instance of the reference with specified interop types embedding.\r\n    </summary>\r\n    <param name=\"value\">The new value for <see cref=\"P:Microsoft.CodeAnalysis.MetadataReferenceProperties.EmbedInteropTypes\"/>.</param>\r\n    <exception cref=\"T:System.ArgumentException\">Interop types can't be embedded from modules.</exception> \r\n</member>\r\n",
                "StartLine": 68
              },
              "Id": "M:Microsoft.CodeAnalysis.CompilationReference.WithEmbedInteropTypes(System.Boolean)",
              "Parent": "T:Microsoft.CodeAnalysis.CompilationReference",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.CompilationReference.WithEmbedInteropTypes(System.Boolean)\">\r\n    <summary>\r\n    Returns an instance of the reference with specified interop types embedding.\r\n    </summary>\r\n    <param name=\"value\">The new value for <see cref=\"P:Microsoft.CodeAnalysis.MetadataReferenceProperties.EmbedInteropTypes\"/>.</param>\r\n    <exception cref=\"T:System.ArgumentException\">Interop types can't be embedded from modules.</exception> \r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.MetadataReferenceProperties : properties": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.CompilationReference": ""
                },
                "Content": "public new CompilationReference WithProperties(MetadataReferenceProperties properties)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.CompilationReference.WithProperties(Microsoft.CodeAnalysis.MetadataReferenceProperties)\">\r\n    <summary>\r\n    Returns an instance of the reference with specified properties, or this instance if properties haven't changed.\r\n    </summary>\r\n    <param name=\"properties\">The new properties for the reference.</param>\r\n    <exception cref=\"T:System.ArgumentException\">Specified values not valid for this reference.</exception> \r\n</member>\r\n",
                "StartLine": 78
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.MetadataReferenceProperties : properties": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.CompilationReference": ""
                },
                "Content": "public new CompilationReference WithProperties(MetadataReferenceProperties properties)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.CompilationReference.WithProperties(Microsoft.CodeAnalysis.MetadataReferenceProperties)\">\r\n    <summary>\r\n    Returns an instance of the reference with specified properties, or this instance if properties haven't changed.\r\n    </summary>\r\n    <param name=\"properties\">The new properties for the reference.</param>\r\n    <exception cref=\"T:System.ArgumentException\">Specified values not valid for this reference.</exception> \r\n</member>\r\n",
                "StartLine": 78
              },
              "Id": "M:Microsoft.CodeAnalysis.CompilationReference.WithProperties(Microsoft.CodeAnalysis.MetadataReferenceProperties)",
              "Parent": "T:Microsoft.CodeAnalysis.CompilationReference",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.CompilationReference.WithProperties(Microsoft.CodeAnalysis.MetadataReferenceProperties)\">\r\n    <summary>\r\n    Returns an instance of the reference with specified properties, or this instance if properties haven't changed.\r\n    </summary>\r\n    <param name=\"properties\">The new properties for the reference.</param>\r\n    <exception cref=\"T:System.ArgumentException\">Specified values not valid for this reference.</exception> \r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Compilation",
                "Content": "public Compilation Compilation",
                "XmlDocumentation": "",
                "StartLine": 14
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Compilation",
                "Content": "public Compilation Compilation",
                "XmlDocumentation": "",
                "StartLine": 14
              },
              "Id": "P:Microsoft.CodeAnalysis.CompilationReference.Compilation",
              "Parent": "T:Microsoft.CodeAnalysis.CompilationReference",
              "XmlDocumentation": ""
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.String",
                "Content": "public override string Display",
                "XmlDocumentation": "",
                "StartLine": 105
              },
              "Syntax": {
                "PropertyType": "T:System.String",
                "Content": "public override string Display",
                "XmlDocumentation": "",
                "StartLine": 105
              },
              "Id": "P:Microsoft.CodeAnalysis.CompilationReference.Display",
              "Parent": "T:Microsoft.CodeAnalysis.CompilationReference",
              "XmlDocumentation": ""
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\MetadataReference\\CompilationReference.cs",
          "InheritanceHierarchy": [
            "T:System.Object",
            "T:Microsoft.CodeAnalysis.MetadataReference"
          ],
          "Syntax": {
            "Content": "public abstract class CompilationReference",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.CompilationReference\">\r\n    <summary>\r\n    Reference to another C# or VB compilation.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.CompilationReference",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.CompilationReference\">\r\n    <summary>\r\n    Reference to another C# or VB compilation.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public abstract bool EndPointIsReachable",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ControlFlowAnalysis.EndPointIsReachable\">\r\n    <summary>\r\n    Indicates whether a region completes normally. Return true if and only if the end of the\r\n    last statement in a region is reachable or the region contains no statements.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 28
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public abstract bool EndPointIsReachable",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ControlFlowAnalysis.EndPointIsReachable\">\r\n    <summary>\r\n    Indicates whether a region completes normally. Return true if and only if the end of the\r\n    last statement in a region is reachable or the region contains no statements.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 28
              },
              "Id": "P:Microsoft.CodeAnalysis.ControlFlowAnalysis.EndPointIsReachable",
              "Parent": "T:Microsoft.CodeAnalysis.ControlFlowAnalysis",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ControlFlowAnalysis.EndPointIsReachable\">\r\n    <summary>\r\n    Indicates whether a region completes normally. Return true if and only if the end of the\r\n    last statement in a region is reachable or the region contains no statements.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.SyntaxNode}",
                "Content": "public abstract ImmutableArray<SyntaxNode> EntryPoints",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ControlFlowAnalysis.EntryPoints\">\r\n    <summary>\r\n    The set of statements inside the region what are the\r\n    destination of branches outside the region.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 16
              },
              "Syntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.SyntaxNode}",
                "Content": "public abstract ImmutableArray<SyntaxNode> EntryPoints",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ControlFlowAnalysis.EntryPoints\">\r\n    <summary>\r\n    The set of statements inside the region what are the\r\n    destination of branches outside the region.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 16
              },
              "Id": "P:Microsoft.CodeAnalysis.ControlFlowAnalysis.EntryPoints",
              "Parent": "T:Microsoft.CodeAnalysis.ControlFlowAnalysis",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ControlFlowAnalysis.EntryPoints\">\r\n    <summary>\r\n    The set of statements inside the region what are the\r\n    destination of branches outside the region.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.SyntaxNode}",
                "Content": "public abstract ImmutableArray<SyntaxNode> ExitPoints",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ControlFlowAnalysis.ExitPoints\">\r\n    <summary>\r\n    The set of statements inside a region that jump to locations outside\r\n    the region.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 22
              },
              "Syntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.SyntaxNode}",
                "Content": "public abstract ImmutableArray<SyntaxNode> ExitPoints",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ControlFlowAnalysis.ExitPoints\">\r\n    <summary>\r\n    The set of statements inside a region that jump to locations outside\r\n    the region.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 22
              },
              "Id": "P:Microsoft.CodeAnalysis.ControlFlowAnalysis.ExitPoints",
              "Parent": "T:Microsoft.CodeAnalysis.ControlFlowAnalysis",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ControlFlowAnalysis.ExitPoints\">\r\n    <summary>\r\n    The set of statements inside a region that jump to locations outside\r\n    the region.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.SyntaxNode}",
                "Content": "public abstract ImmutableArray<SyntaxNode> ReturnStatements",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ControlFlowAnalysis.ReturnStatements\">\r\n    <summary>\r\n    The set of return statements found within a region.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 35
              },
              "Syntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.SyntaxNode}",
                "Content": "public abstract ImmutableArray<SyntaxNode> ReturnStatements",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ControlFlowAnalysis.ReturnStatements\">\r\n    <summary>\r\n    The set of return statements found within a region.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 35
              },
              "Id": "P:Microsoft.CodeAnalysis.ControlFlowAnalysis.ReturnStatements",
              "Parent": "T:Microsoft.CodeAnalysis.ControlFlowAnalysis",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ControlFlowAnalysis.ReturnStatements\">\r\n    <summary>\r\n    The set of return statements found within a region.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public abstract bool StartPointIsReachable",
                "XmlDocumentation": "",
                "StartLine": 30
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public abstract bool StartPointIsReachable",
                "XmlDocumentation": "",
                "StartLine": 30
              },
              "Id": "P:Microsoft.CodeAnalysis.ControlFlowAnalysis.StartPointIsReachable",
              "Parent": "T:Microsoft.CodeAnalysis.ControlFlowAnalysis",
              "XmlDocumentation": ""
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public abstract bool Succeeded",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ControlFlowAnalysis.Succeeded\">\r\n    <summary>\r\n    Returns true iff analysis was successful.  Analysis can fail if the region does not properly span a single expression,\r\n    a single statement, or a contiguous series of statements within the enclosing block.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 41
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public abstract bool Succeeded",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ControlFlowAnalysis.Succeeded\">\r\n    <summary>\r\n    Returns true iff analysis was successful.  Analysis can fail if the region does not properly span a single expression,\r\n    a single statement, or a contiguous series of statements within the enclosing block.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 41
              },
              "Id": "P:Microsoft.CodeAnalysis.ControlFlowAnalysis.Succeeded",
              "Parent": "T:Microsoft.CodeAnalysis.ControlFlowAnalysis",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ControlFlowAnalysis.Succeeded\">\r\n    <summary>\r\n    Returns true iff analysis was successful.  Analysis can fail if the region does not properly span a single expression,\r\n    a single statement, or a contiguous series of statements within the enclosing block.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Compilation\\ControlFlowAnalysis.cs",
          "InheritanceHierarchy": [
            "T:System.Object"
          ],
          "Syntax": {
            "Content": "public abstract class ControlFlowAnalysis",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.ControlFlowAnalysis\">\r\n    <summary>\r\n    Provides information about statements which transfer control in and out of a region. This\r\n    information is returned from a call to <see cref=\"M:Microsoft.CodeAnalysis.SemanticModel.AnalyzeControlFlow(Microsoft.CodeAnalysis.SyntaxNode)\" />.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.ControlFlowAnalysis",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.ControlFlowAnalysis\">\r\n    <summary>\r\n    Provides information about statements which transfer control in and out of a region. This\r\n    information is returned from a call to <see cref=\"M:Microsoft.CodeAnalysis.SemanticModel.AnalyzeControlFlow(Microsoft.CodeAnalysis.SyntaxNode)\" />.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public abstract bool IsOptional",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.CustomModifier.IsOptional\">\r\n    <summary>\r\n    If true, a language may use the modified storage location without \r\n    being aware of the meaning of the modification, modopt vs. modreq. \r\n    </summary>\r\n</member>\r\n",
                "StartLine": 13
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public abstract bool IsOptional",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.CustomModifier.IsOptional\">\r\n    <summary>\r\n    If true, a language may use the modified storage location without \r\n    being aware of the meaning of the modification, modopt vs. modreq. \r\n    </summary>\r\n</member>\r\n",
                "StartLine": 13
              },
              "Id": "P:Microsoft.CodeAnalysis.CustomModifier.IsOptional",
              "Parent": "T:Microsoft.CodeAnalysis.CustomModifier",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.CustomModifier.IsOptional\">\r\n    <summary>\r\n    If true, a language may use the modified storage location without \r\n    being aware of the meaning of the modification, modopt vs. modreq. \r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.INamedTypeSymbol",
                "Content": "public abstract INamedTypeSymbol Modifier",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.CustomModifier.Modifier\">\r\n    <summary>\r\n    A type used as a tag that indicates which type of modification applies.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 18
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.INamedTypeSymbol",
                "Content": "public abstract INamedTypeSymbol Modifier",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.CustomModifier.Modifier\">\r\n    <summary>\r\n    A type used as a tag that indicates which type of modification applies.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 18
              },
              "Id": "P:Microsoft.CodeAnalysis.CustomModifier.Modifier",
              "Parent": "T:Microsoft.CodeAnalysis.CustomModifier",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.CustomModifier.Modifier\">\r\n    <summary>\r\n    A type used as a tag that indicates which type of modification applies.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Symbols\\CustomModifer.cs",
          "InheritanceHierarchy": [
            "T:System.Object"
          ],
          "Syntax": {
            "Content": "public abstract class CustomModifier\r\n\r\n#endregion",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.CodeAnalysis.CustomModifier",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": ""
        },
        {
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ISymbol}",
                "Content": "public abstract ImmutableArray<ISymbol> AlwaysAssigned",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DataFlowAnalysis.AlwaysAssigned\">\r\n    <summary>\r\n    The set of local variables for which a value is always assigned inside\r\n    a region.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 38
              },
              "Syntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ISymbol}",
                "Content": "public abstract ImmutableArray<ISymbol> AlwaysAssigned",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DataFlowAnalysis.AlwaysAssigned\">\r\n    <summary>\r\n    The set of local variables for which a value is always assigned inside\r\n    a region.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 38
              },
              "Id": "P:Microsoft.CodeAnalysis.DataFlowAnalysis.AlwaysAssigned",
              "Parent": "T:Microsoft.CodeAnalysis.DataFlowAnalysis",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DataFlowAnalysis.AlwaysAssigned\">\r\n    <summary>\r\n    The set of local variables for which a value is always assigned inside\r\n    a region.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ISymbol}",
                "Content": "public abstract ImmutableArray<ISymbol> Captured",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DataFlowAnalysis.Captured\">\r\n    <summary>\r\n    The set of the local variables that have been referenced in anonymous\r\n    functions within a region and therefore must be moved to a field of a frame class.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 64
              },
              "Syntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ISymbol}",
                "Content": "public abstract ImmutableArray<ISymbol> Captured",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DataFlowAnalysis.Captured\">\r\n    <summary>\r\n    The set of the local variables that have been referenced in anonymous\r\n    functions within a region and therefore must be moved to a field of a frame class.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 64
              },
              "Id": "P:Microsoft.CodeAnalysis.DataFlowAnalysis.Captured",
              "Parent": "T:Microsoft.CodeAnalysis.DataFlowAnalysis",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DataFlowAnalysis.Captured\">\r\n    <summary>\r\n    The set of the local variables that have been referenced in anonymous\r\n    functions within a region and therefore must be moved to a field of a frame class.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ISymbol}",
                "Content": "public abstract ImmutableArray<ISymbol> DataFlowsIn",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DataFlowAnalysis.DataFlowsIn\">\r\n    <summary>\r\n    The set of local variables which are assigned a value outside a region\r\n    that may be used inside the region.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 26
              },
              "Syntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ISymbol}",
                "Content": "public abstract ImmutableArray<ISymbol> DataFlowsIn",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DataFlowAnalysis.DataFlowsIn\">\r\n    <summary>\r\n    The set of local variables which are assigned a value outside a region\r\n    that may be used inside the region.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 26
              },
              "Id": "P:Microsoft.CodeAnalysis.DataFlowAnalysis.DataFlowsIn",
              "Parent": "T:Microsoft.CodeAnalysis.DataFlowAnalysis",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DataFlowAnalysis.DataFlowsIn\">\r\n    <summary>\r\n    The set of local variables which are assigned a value outside a region\r\n    that may be used inside the region.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ISymbol}",
                "Content": "public abstract ImmutableArray<ISymbol> DataFlowsOut",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DataFlowAnalysis.DataFlowsOut\">\r\n    <summary>\r\n    The set of local variables which are assigned a value inside a region\r\n    that may be used outside the region.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 32
              },
              "Syntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ISymbol}",
                "Content": "public abstract ImmutableArray<ISymbol> DataFlowsOut",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DataFlowAnalysis.DataFlowsOut\">\r\n    <summary>\r\n    The set of local variables which are assigned a value inside a region\r\n    that may be used outside the region.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 32
              },
              "Id": "P:Microsoft.CodeAnalysis.DataFlowAnalysis.DataFlowsOut",
              "Parent": "T:Microsoft.CodeAnalysis.DataFlowAnalysis",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DataFlowAnalysis.DataFlowsOut\">\r\n    <summary>\r\n    The set of local variables which are assigned a value inside a region\r\n    that may be used outside the region.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ISymbol}",
                "Content": "public abstract ImmutableArray<ISymbol> ReadInside",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DataFlowAnalysis.ReadInside\">\r\n    <summary>\r\n    The set of local variables that are read inside a region.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 43
              },
              "Syntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ISymbol}",
                "Content": "public abstract ImmutableArray<ISymbol> ReadInside",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DataFlowAnalysis.ReadInside\">\r\n    <summary>\r\n    The set of local variables that are read inside a region.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 43
              },
              "Id": "P:Microsoft.CodeAnalysis.DataFlowAnalysis.ReadInside",
              "Parent": "T:Microsoft.CodeAnalysis.DataFlowAnalysis",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DataFlowAnalysis.ReadInside\">\r\n    <summary>\r\n    The set of local variables that are read inside a region.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ISymbol}",
                "Content": "public abstract ImmutableArray<ISymbol> ReadOutside",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DataFlowAnalysis.ReadOutside\">\r\n    <summary>\r\n    The set of the local variables that are read outside a region.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 53
              },
              "Syntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ISymbol}",
                "Content": "public abstract ImmutableArray<ISymbol> ReadOutside",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DataFlowAnalysis.ReadOutside\">\r\n    <summary>\r\n    The set of the local variables that are read outside a region.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 53
              },
              "Id": "P:Microsoft.CodeAnalysis.DataFlowAnalysis.ReadOutside",
              "Parent": "T:Microsoft.CodeAnalysis.DataFlowAnalysis",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DataFlowAnalysis.ReadOutside\">\r\n    <summary>\r\n    The set of the local variables that are read outside a region.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public abstract bool Succeeded",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DataFlowAnalysis.Succeeded\">\r\n    <summary>\r\n    Returns true iff analysis was successful.  Analysis can fail if the region does not\r\n    properly span a single expression, a single statement, or a contiguous series of\r\n    statements within the enclosing block.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 77
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public abstract bool Succeeded",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DataFlowAnalysis.Succeeded\">\r\n    <summary>\r\n    Returns true iff analysis was successful.  Analysis can fail if the region does not\r\n    properly span a single expression, a single statement, or a contiguous series of\r\n    statements within the enclosing block.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 77
              },
              "Id": "P:Microsoft.CodeAnalysis.DataFlowAnalysis.Succeeded",
              "Parent": "T:Microsoft.CodeAnalysis.DataFlowAnalysis",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DataFlowAnalysis.Succeeded\">\r\n    <summary>\r\n    Returns true iff analysis was successful.  Analysis can fail if the region does not\r\n    properly span a single expression, a single statement, or a contiguous series of\r\n    statements within the enclosing block.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ISymbol}",
                "Content": "public abstract ImmutableArray<ISymbol> UnsafeAddressTaken",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DataFlowAnalysis.UnsafeAddressTaken\">\r\n    <summary>\r\n    The set of non-constant local variables and parameters that have had their\r\n    address (or the address of one of their fields) taken.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 70
              },
              "Syntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ISymbol}",
                "Content": "public abstract ImmutableArray<ISymbol> UnsafeAddressTaken",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DataFlowAnalysis.UnsafeAddressTaken\">\r\n    <summary>\r\n    The set of non-constant local variables and parameters that have had their\r\n    address (or the address of one of their fields) taken.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 70
              },
              "Id": "P:Microsoft.CodeAnalysis.DataFlowAnalysis.UnsafeAddressTaken",
              "Parent": "T:Microsoft.CodeAnalysis.DataFlowAnalysis",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DataFlowAnalysis.UnsafeAddressTaken\">\r\n    <summary>\r\n    The set of non-constant local variables and parameters that have had their\r\n    address (or the address of one of their fields) taken.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ISymbol}",
                "Content": "public abstract ImmutableArray<ISymbol> VariablesDeclared",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DataFlowAnalysis.VariablesDeclared\">\r\n    <summary>\r\n    The set of local variables that are declared within a region. Note\r\n    that the region must be bounded by a method's body or a field's initializer, so\r\n    parameter symbols are never included in the result.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 20
              },
              "Syntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ISymbol}",
                "Content": "public abstract ImmutableArray<ISymbol> VariablesDeclared",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DataFlowAnalysis.VariablesDeclared\">\r\n    <summary>\r\n    The set of local variables that are declared within a region. Note\r\n    that the region must be bounded by a method's body or a field's initializer, so\r\n    parameter symbols are never included in the result.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 20
              },
              "Id": "P:Microsoft.CodeAnalysis.DataFlowAnalysis.VariablesDeclared",
              "Parent": "T:Microsoft.CodeAnalysis.DataFlowAnalysis",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DataFlowAnalysis.VariablesDeclared\">\r\n    <summary>\r\n    The set of local variables that are declared within a region. Note\r\n    that the region must be bounded by a method's body or a field's initializer, so\r\n    parameter symbols are never included in the result.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ISymbol}",
                "Content": "public abstract ImmutableArray<ISymbol> WrittenInside",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DataFlowAnalysis.WrittenInside\">\r\n    <summary>\r\n    The set of local variables that are written inside a region.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 48
              },
              "Syntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ISymbol}",
                "Content": "public abstract ImmutableArray<ISymbol> WrittenInside",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DataFlowAnalysis.WrittenInside\">\r\n    <summary>\r\n    The set of local variables that are written inside a region.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 48
              },
              "Id": "P:Microsoft.CodeAnalysis.DataFlowAnalysis.WrittenInside",
              "Parent": "T:Microsoft.CodeAnalysis.DataFlowAnalysis",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DataFlowAnalysis.WrittenInside\">\r\n    <summary>\r\n    The set of local variables that are written inside a region.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ISymbol}",
                "Content": "public abstract ImmutableArray<ISymbol> WrittenOutside",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DataFlowAnalysis.WrittenOutside\">\r\n    <summary>\r\n    The set of local variables that are written outside a region.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 58
              },
              "Syntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ISymbol}",
                "Content": "public abstract ImmutableArray<ISymbol> WrittenOutside",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DataFlowAnalysis.WrittenOutside\">\r\n    <summary>\r\n    The set of local variables that are written outside a region.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 58
              },
              "Id": "P:Microsoft.CodeAnalysis.DataFlowAnalysis.WrittenOutside",
              "Parent": "T:Microsoft.CodeAnalysis.DataFlowAnalysis",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DataFlowAnalysis.WrittenOutside\">\r\n    <summary>\r\n    The set of local variables that are written outside a region.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Compilation\\DataFlowAnalysis.cs",
          "InheritanceHierarchy": [
            "T:System.Object"
          ],
          "Syntax": {
            "Content": "public abstract class DataFlowAnalysis",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.DataFlowAnalysis\">\r\n    <summary>\r\n    Provides information about how data flows into and out of a region. This information is\r\n    returned from a call to\r\n    <see cref=\"M:Microsoft.CodeAnalysis.SemanticModel.AnalyzeDataFlow(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)\" />, or one of its language-specific overloads,\r\n    where you pass the first and last statements of the region as parameters.\r\n    \"Inside\" means those statements or ones between them. \"Outside\" are any other statements of the same method.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.DataFlowAnalysis",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.DataFlowAnalysis\">\r\n    <summary>\r\n    Provides information about how data flows into and out of a region. This information is\r\n    returned from a call to\r\n    <see cref=\"M:Microsoft.CodeAnalysis.SemanticModel.AnalyzeDataFlow(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)\" />, or one of its language-specific overloads,\r\n    where you pass the first and last statements of the region as parameters.\r\n    \"Inside\" means those statements or ones between them. \"Outside\" are any other statements of the same method.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.DiagnosticDescriptor : descriptor": "",
                  "T:Microsoft.CodeAnalysis.Location : location": "",
                  "T:System.Array : messageArgs": "",
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Location} : additionalLocations": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Diagnostic": ""
                },
                "Content": "public static Diagnostic Create(DiagnosticDescriptor descriptor, Location location, IEnumerable<Location> additionalLocations, params object[] messageArgs)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostic.Create(Microsoft.CodeAnalysis.DiagnosticDescriptor,Microsoft.CodeAnalysis.Location,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Location},System.Object[])\">\r\n    <summary>\r\n    Creates a <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/> instance.\r\n    </summary>\r\n    <param name=\"descriptor\">A <see cref=\"T:Microsoft.CodeAnalysis.DiagnosticDescriptor\"/> describing the diagnostic.</param>\r\n    <param name=\"location\">An optional primary location of the diagnostic. If null, <see cref=\"P:Microsoft.CodeAnalysis.Diagnostic.Location\"/> will return <see cref=\"P:Microsoft.CodeAnalysis.Location.None\"/>.</param>\r\n    <param name=\"additionalLocations\">\r\n    An optional set of additional locations related to the diagnostic.\r\n    Typically, these are locations of other items referenced in the message.\r\n    If null, <see cref=\"P:Microsoft.CodeAnalysis.Diagnostic.AdditionalLocations\"/> will return an empty list.\r\n    </param>\r\n    <param name=\"messageArgs\">Arguments to the message of the diagnostic.</param>\r\n    <returns>The <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/> instance.</returns>\r\n</member>\r\n",
                "StartLine": 51
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.DiagnosticDescriptor : descriptor": "",
                  "T:Microsoft.CodeAnalysis.Location : location": "",
                  "T:System.Array : messageArgs": "",
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Location} : additionalLocations": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Diagnostic": ""
                },
                "Content": "public static Diagnostic Create(DiagnosticDescriptor descriptor, Location location, IEnumerable<Location> additionalLocations, params object[] messageArgs)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostic.Create(Microsoft.CodeAnalysis.DiagnosticDescriptor,Microsoft.CodeAnalysis.Location,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Location},System.Object[])\">\r\n    <summary>\r\n    Creates a <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/> instance.\r\n    </summary>\r\n    <param name=\"descriptor\">A <see cref=\"T:Microsoft.CodeAnalysis.DiagnosticDescriptor\"/> describing the diagnostic.</param>\r\n    <param name=\"location\">An optional primary location of the diagnostic. If null, <see cref=\"P:Microsoft.CodeAnalysis.Diagnostic.Location\"/> will return <see cref=\"P:Microsoft.CodeAnalysis.Location.None\"/>.</param>\r\n    <param name=\"additionalLocations\">\r\n    An optional set of additional locations related to the diagnostic.\r\n    Typically, these are locations of other items referenced in the message.\r\n    If null, <see cref=\"P:Microsoft.CodeAnalysis.Diagnostic.AdditionalLocations\"/> will return an empty list.\r\n    </param>\r\n    <param name=\"messageArgs\">Arguments to the message of the diagnostic.</param>\r\n    <returns>The <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/> instance.</returns>\r\n</member>\r\n",
                "StartLine": 51
              },
              "Id": "M:Microsoft.CodeAnalysis.Diagnostic.Create(Microsoft.CodeAnalysis.DiagnosticDescriptor,Microsoft.CodeAnalysis.Location,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Location},System.Object[])",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostic",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostic.Create(Microsoft.CodeAnalysis.DiagnosticDescriptor,Microsoft.CodeAnalysis.Location,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Location},System.Object[])\">\r\n    <summary>\r\n    Creates a <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/> instance.\r\n    </summary>\r\n    <param name=\"descriptor\">A <see cref=\"T:Microsoft.CodeAnalysis.DiagnosticDescriptor\"/> describing the diagnostic.</param>\r\n    <param name=\"location\">An optional primary location of the diagnostic. If null, <see cref=\"P:Microsoft.CodeAnalysis.Diagnostic.Location\"/> will return <see cref=\"P:Microsoft.CodeAnalysis.Location.None\"/>.</param>\r\n    <param name=\"additionalLocations\">\r\n    An optional set of additional locations related to the diagnostic.\r\n    Typically, these are locations of other items referenced in the message.\r\n    If null, <see cref=\"P:Microsoft.CodeAnalysis.Diagnostic.AdditionalLocations\"/> will return an empty list.\r\n    </param>\r\n    <param name=\"messageArgs\">Arguments to the message of the diagnostic.</param>\r\n    <returns>The <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/> instance.</returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.DiagnosticDescriptor : descriptor": "",
                  "T:Microsoft.CodeAnalysis.Location : location": "",
                  "T:System.Array : messageArgs": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Diagnostic": ""
                },
                "Content": "public static Diagnostic Create(DiagnosticDescriptor descriptor, Location location, params object[] messageArgs)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostic.Create(Microsoft.CodeAnalysis.DiagnosticDescriptor,Microsoft.CodeAnalysis.Location,System.Object[])\">\r\n    <summary>\r\n    Creates a <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/> instance.\r\n    </summary>\r\n    <param name=\"descriptor\">A <see cref=\"T:Microsoft.CodeAnalysis.DiagnosticDescriptor\"/> describing the diagnostic</param>\r\n    <param name=\"location\">An optional primary location of the diagnostic. If null, <see cref=\"P:Microsoft.CodeAnalysis.Diagnostic.Location\"/> will return <see cref=\"P:Microsoft.CodeAnalysis.Location.None\"/>.</param>\r\n    <param name=\"messageArgs\">Arguments to the message of the diagnostic</param>\r\n    <returns>The <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/> instance.</returns>\r\n</member>\r\n",
                "StartLine": 31
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.DiagnosticDescriptor : descriptor": "",
                  "T:Microsoft.CodeAnalysis.Location : location": "",
                  "T:System.Array : messageArgs": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Diagnostic": ""
                },
                "Content": "public static Diagnostic Create(DiagnosticDescriptor descriptor, Location location, params object[] messageArgs)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostic.Create(Microsoft.CodeAnalysis.DiagnosticDescriptor,Microsoft.CodeAnalysis.Location,System.Object[])\">\r\n    <summary>\r\n    Creates a <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/> instance.\r\n    </summary>\r\n    <param name=\"descriptor\">A <see cref=\"T:Microsoft.CodeAnalysis.DiagnosticDescriptor\"/> describing the diagnostic</param>\r\n    <param name=\"location\">An optional primary location of the diagnostic. If null, <see cref=\"P:Microsoft.CodeAnalysis.Diagnostic.Location\"/> will return <see cref=\"P:Microsoft.CodeAnalysis.Location.None\"/>.</param>\r\n    <param name=\"messageArgs\">Arguments to the message of the diagnostic</param>\r\n    <returns>The <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/> instance.</returns>\r\n</member>\r\n",
                "StartLine": 31
              },
              "Id": "M:Microsoft.CodeAnalysis.Diagnostic.Create(Microsoft.CodeAnalysis.DiagnosticDescriptor,Microsoft.CodeAnalysis.Location,System.Object[])",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostic",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostic.Create(Microsoft.CodeAnalysis.DiagnosticDescriptor,Microsoft.CodeAnalysis.Location,System.Object[])\">\r\n    <summary>\r\n    Creates a <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/> instance.\r\n    </summary>\r\n    <param name=\"descriptor\">A <see cref=\"T:Microsoft.CodeAnalysis.DiagnosticDescriptor\"/> describing the diagnostic</param>\r\n    <param name=\"location\">An optional primary location of the diagnostic. If null, <see cref=\"P:Microsoft.CodeAnalysis.Diagnostic.Location\"/> will return <see cref=\"P:Microsoft.CodeAnalysis.Location.None\"/>.</param>\r\n    <param name=\"messageArgs\">Arguments to the message of the diagnostic</param>\r\n    <returns>The <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/> instance.</returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.DiagnosticSeverity : defaultSeverity": "",
                  "T:Microsoft.CodeAnalysis.DiagnosticSeverity : severity": "",
                  "T:Microsoft.CodeAnalysis.LocalizableString : description": "",
                  "T:Microsoft.CodeAnalysis.LocalizableString : message": "",
                  "T:Microsoft.CodeAnalysis.LocalizableString : title": "",
                  "T:Microsoft.CodeAnalysis.Location : location": "",
                  "T:System.Boolean : isEnabledByDefault": "",
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Location} : additionalLocations": "",
                  "T:System.Collections.Generic.IEnumerable{System.String} : customTags": "",
                  "T:System.Int32 : warningLevel": "",
                  "T:System.String : category": "",
                  "T:System.String : helpLink": "",
                  "T:System.String : id": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Diagnostic": ""
                },
                "Content": "public static Diagnostic Create(string id, string category, LocalizableString message, DiagnosticSeverity severity, DiagnosticSeverity defaultSeverity, bool isEnabledByDefault, int warningLevel, LocalizableString title = null, LocalizableString description = null, string helpLink = null, Location location = null, IEnumerable<Location> additionalLocations = null, IEnumerable<string> customTags = null)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostic.Create(System.String,System.String,Microsoft.CodeAnalysis.LocalizableString,Microsoft.CodeAnalysis.DiagnosticSeverity,Microsoft.CodeAnalysis.DiagnosticSeverity,System.Boolean,System.Int32,Microsoft.CodeAnalysis.LocalizableString,Microsoft.CodeAnalysis.LocalizableString,System.String,Microsoft.CodeAnalysis.Location,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Location},System.Collections.Generic.IEnumerable{System.String})\">\r\n    <summary>\r\n    Creates a <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/> instance which is localizable.\r\n    </summary>\r\n    <param name=\"id\">An identifier for the diagnostic. For diagnostics generated by the compiler, this will be a numeric code with a prefix such as \"CS1001\".</param>\r\n    <param name=\"category\">The category of the diagnostic. For diagnostics generated by the compiler, the category will be \"Compiler\".</param>\r\n    <param name=\"message\">The diagnostic message text.</param>\r\n    <param name=\"severity\">The diagnostic's effective severity.</param>\r\n    <param name=\"defaultSeverity\">The diagnostic's default severity.</param>\r\n    <param name=\"isEnabledByDefault\">True if the diagnostic is enabled by default</param>\r\n    <param name=\"warningLevel\">The warning level, between 1 and 4 if severity is <see cref=\"F:Microsoft.CodeAnalysis.DiagnosticSeverity.Warning\"/>; otherwise 0.</param>\r\n    <param name=\"title\">An optional short localizable title describing the diagnostic.</param>\r\n    <param name=\"description\">An optional longer localizable description for the diagnostic.</param>\r\n    <param name=\"helpLink\">An optional hyperlink that provides more detailed information regarding the diagnostic.</param>\r\n    <param name=\"location\">An optional primary location of the diagnostic. If null, <see cref=\"P:Microsoft.CodeAnalysis.Diagnostic.Location\"/> will return <see cref=\"P:Microsoft.CodeAnalysis.Location.None\"/>.</param>\r\n    <param name=\"additionalLocations\">\r\n    An optional set of additional locations related to the diagnostic.\r\n    Typically, these are locations of other items referenced in the message.\r\n    If null, <see cref=\"P:Microsoft.CodeAnalysis.Diagnostic.AdditionalLocations\"/> will return an empty list.\r\n    </param>\r\n    <param name=\"customTags\">\r\n    An optional set of custom tags for the diagnostic. See <see cref=\"T:Microsoft.CodeAnalysis.WellKnownDiagnosticTags\"/> for some well known tags.\r\n    If null, <see cref=\"P:Microsoft.CodeAnalysis.Diagnostic.CustomTags\"/> will return an empty list.\r\n    </param>\r\n    <returns>The <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/> instance.</returns>\r\n</member>\r\n",
                "StartLine": 96
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.DiagnosticSeverity : defaultSeverity": "",
                  "T:Microsoft.CodeAnalysis.DiagnosticSeverity : severity": "",
                  "T:Microsoft.CodeAnalysis.LocalizableString : description": "",
                  "T:Microsoft.CodeAnalysis.LocalizableString : message": "",
                  "T:Microsoft.CodeAnalysis.LocalizableString : title": "",
                  "T:Microsoft.CodeAnalysis.Location : location": "",
                  "T:System.Boolean : isEnabledByDefault": "",
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Location} : additionalLocations": "",
                  "T:System.Collections.Generic.IEnumerable{System.String} : customTags": "",
                  "T:System.Int32 : warningLevel": "",
                  "T:System.String : category": "",
                  "T:System.String : helpLink": "",
                  "T:System.String : id": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Diagnostic": ""
                },
                "Content": "public static Diagnostic Create(string id, string category, LocalizableString message, DiagnosticSeverity severity, DiagnosticSeverity defaultSeverity, bool isEnabledByDefault, int warningLevel, LocalizableString title = null, LocalizableString description = null, string helpLink = null, Location location = null, IEnumerable<Location> additionalLocations = null, IEnumerable<string> customTags = null)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostic.Create(System.String,System.String,Microsoft.CodeAnalysis.LocalizableString,Microsoft.CodeAnalysis.DiagnosticSeverity,Microsoft.CodeAnalysis.DiagnosticSeverity,System.Boolean,System.Int32,Microsoft.CodeAnalysis.LocalizableString,Microsoft.CodeAnalysis.LocalizableString,System.String,Microsoft.CodeAnalysis.Location,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Location},System.Collections.Generic.IEnumerable{System.String})\">\r\n    <summary>\r\n    Creates a <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/> instance which is localizable.\r\n    </summary>\r\n    <param name=\"id\">An identifier for the diagnostic. For diagnostics generated by the compiler, this will be a numeric code with a prefix such as \"CS1001\".</param>\r\n    <param name=\"category\">The category of the diagnostic. For diagnostics generated by the compiler, the category will be \"Compiler\".</param>\r\n    <param name=\"message\">The diagnostic message text.</param>\r\n    <param name=\"severity\">The diagnostic's effective severity.</param>\r\n    <param name=\"defaultSeverity\">The diagnostic's default severity.</param>\r\n    <param name=\"isEnabledByDefault\">True if the diagnostic is enabled by default</param>\r\n    <param name=\"warningLevel\">The warning level, between 1 and 4 if severity is <see cref=\"F:Microsoft.CodeAnalysis.DiagnosticSeverity.Warning\"/>; otherwise 0.</param>\r\n    <param name=\"title\">An optional short localizable title describing the diagnostic.</param>\r\n    <param name=\"description\">An optional longer localizable description for the diagnostic.</param>\r\n    <param name=\"helpLink\">An optional hyperlink that provides more detailed information regarding the diagnostic.</param>\r\n    <param name=\"location\">An optional primary location of the diagnostic. If null, <see cref=\"P:Microsoft.CodeAnalysis.Diagnostic.Location\"/> will return <see cref=\"P:Microsoft.CodeAnalysis.Location.None\"/>.</param>\r\n    <param name=\"additionalLocations\">\r\n    An optional set of additional locations related to the diagnostic.\r\n    Typically, these are locations of other items referenced in the message.\r\n    If null, <see cref=\"P:Microsoft.CodeAnalysis.Diagnostic.AdditionalLocations\"/> will return an empty list.\r\n    </param>\r\n    <param name=\"customTags\">\r\n    An optional set of custom tags for the diagnostic. See <see cref=\"T:Microsoft.CodeAnalysis.WellKnownDiagnosticTags\"/> for some well known tags.\r\n    If null, <see cref=\"P:Microsoft.CodeAnalysis.Diagnostic.CustomTags\"/> will return an empty list.\r\n    </param>\r\n    <returns>The <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/> instance.</returns>\r\n</member>\r\n",
                "StartLine": 96
              },
              "Id": "M:Microsoft.CodeAnalysis.Diagnostic.Create(System.String,System.String,Microsoft.CodeAnalysis.LocalizableString,Microsoft.CodeAnalysis.DiagnosticSeverity,Microsoft.CodeAnalysis.DiagnosticSeverity,System.Boolean,System.Int32,Microsoft.CodeAnalysis.LocalizableString,Microsoft.CodeAnalysis.LocalizableString,System.String,Microsoft.CodeAnalysis.Location,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Location},System.Collections.Generic.IEnumerable{System.String})",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostic",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostic.Create(System.String,System.String,Microsoft.CodeAnalysis.LocalizableString,Microsoft.CodeAnalysis.DiagnosticSeverity,Microsoft.CodeAnalysis.DiagnosticSeverity,System.Boolean,System.Int32,Microsoft.CodeAnalysis.LocalizableString,Microsoft.CodeAnalysis.LocalizableString,System.String,Microsoft.CodeAnalysis.Location,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Location},System.Collections.Generic.IEnumerable{System.String})\">\r\n    <summary>\r\n    Creates a <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/> instance which is localizable.\r\n    </summary>\r\n    <param name=\"id\">An identifier for the diagnostic. For diagnostics generated by the compiler, this will be a numeric code with a prefix such as \"CS1001\".</param>\r\n    <param name=\"category\">The category of the diagnostic. For diagnostics generated by the compiler, the category will be \"Compiler\".</param>\r\n    <param name=\"message\">The diagnostic message text.</param>\r\n    <param name=\"severity\">The diagnostic's effective severity.</param>\r\n    <param name=\"defaultSeverity\">The diagnostic's default severity.</param>\r\n    <param name=\"isEnabledByDefault\">True if the diagnostic is enabled by default</param>\r\n    <param name=\"warningLevel\">The warning level, between 1 and 4 if severity is <see cref=\"F:Microsoft.CodeAnalysis.DiagnosticSeverity.Warning\"/>; otherwise 0.</param>\r\n    <param name=\"title\">An optional short localizable title describing the diagnostic.</param>\r\n    <param name=\"description\">An optional longer localizable description for the diagnostic.</param>\r\n    <param name=\"helpLink\">An optional hyperlink that provides more detailed information regarding the diagnostic.</param>\r\n    <param name=\"location\">An optional primary location of the diagnostic. If null, <see cref=\"P:Microsoft.CodeAnalysis.Diagnostic.Location\"/> will return <see cref=\"P:Microsoft.CodeAnalysis.Location.None\"/>.</param>\r\n    <param name=\"additionalLocations\">\r\n    An optional set of additional locations related to the diagnostic.\r\n    Typically, these are locations of other items referenced in the message.\r\n    If null, <see cref=\"P:Microsoft.CodeAnalysis.Diagnostic.AdditionalLocations\"/> will return an empty list.\r\n    </param>\r\n    <param name=\"customTags\">\r\n    An optional set of custom tags for the diagnostic. See <see cref=\"T:Microsoft.CodeAnalysis.WellKnownDiagnosticTags\"/> for some well known tags.\r\n    If null, <see cref=\"P:Microsoft.CodeAnalysis.Diagnostic.CustomTags\"/> will return an empty list.\r\n    </param>\r\n    <returns>The <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/> instance.</returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Diagnostic : obj": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public abstract bool Equals(Diagnostic obj);",
                "XmlDocumentation": "",
                "StartLine": 239
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Diagnostic : obj": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public abstract bool Equals(Diagnostic obj);",
                "XmlDocumentation": "",
                "StartLine": 239
              },
              "Id": "M:Microsoft.CodeAnalysis.Diagnostic.Equals(Microsoft.CodeAnalysis.Diagnostic)",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostic",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Object : obj": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public abstract override bool Equals(object obj);",
                "XmlDocumentation": "",
                "StartLine": 235
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Object : obj": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public abstract override bool Equals(object obj);",
                "XmlDocumentation": "",
                "StartLine": 235
              },
              "Id": "M:Microsoft.CodeAnalysis.Diagnostic.Equals(System.Object)",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostic",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public abstract override int GetHashCode();",
                "XmlDocumentation": "",
                "StartLine": 237
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public abstract override int GetHashCode();",
                "XmlDocumentation": "",
                "StartLine": 237
              },
              "Id": "M:Microsoft.CodeAnalysis.Diagnostic.GetHashCode",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostic",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.IFormatProvider : formatProvider": ""
                },
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public abstract string GetMessage(IFormatProvider formatProvider = null);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostic.GetMessage(System.IFormatProvider)\">\r\n    <summary>\r\n    Get the culture specific text of the message.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 163
              },
              "Syntax": {
                "Parameters": {
                  "T:System.IFormatProvider : formatProvider": ""
                },
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public abstract string GetMessage(IFormatProvider formatProvider = null);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostic.GetMessage(System.IFormatProvider)\">\r\n    <summary>\r\n    Get the culture specific text of the message.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 163
              },
              "Id": "M:Microsoft.CodeAnalysis.Diagnostic.GetMessage(System.IFormatProvider)",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostic",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostic.GetMessage(System.IFormatProvider)\">\r\n    <summary>\r\n    Get the culture specific text of the message.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public override string ToString()",
                "XmlDocumentation": "",
                "StartLine": 230
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public override string ToString()",
                "XmlDocumentation": "",
                "StartLine": 230
              },
              "Id": "M:Microsoft.CodeAnalysis.Diagnostic.ToString",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostic",
              "XmlDocumentation": ""
            }
          ],
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Collections.Generic.IReadOnlyList{Microsoft.CodeAnalysis.Location}",
                "Content": "public abstract IReadOnlyList<Location> AdditionalLocations",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostic.AdditionalLocations\">\r\n    <summary>\r\n    Gets an array of additional locations related to the diagnostic.\r\n    Typically these are the locations of other items referenced in the message.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 218
              },
              "Syntax": {
                "PropertyType": "T:System.Collections.Generic.IReadOnlyList{Microsoft.CodeAnalysis.Location}",
                "Content": "public abstract IReadOnlyList<Location> AdditionalLocations",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostic.AdditionalLocations\">\r\n    <summary>\r\n    Gets an array of additional locations related to the diagnostic.\r\n    Typically these are the locations of other items referenced in the message.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 218
              },
              "Id": "P:Microsoft.CodeAnalysis.Diagnostic.AdditionalLocations",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostic",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostic.AdditionalLocations\">\r\n    <summary>\r\n    Gets an array of additional locations related to the diagnostic.\r\n    Typically these are the locations of other items referenced in the message.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.DiagnosticSeverity",
                "Content": "public virtual DiagnosticSeverity DefaultSeverity",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostic.DefaultSeverity\">\r\n    <summary>\r\n    Gets the default <see cref=\"T:Microsoft.CodeAnalysis.DiagnosticSeverity\"/> of the diagnostic's <see cref=\"T:Microsoft.CodeAnalysis.DiagnosticDescriptor\"/>.\r\n    </summary>\r\n    <remarks>\r\n    To get the effective severity of the diagnostic, use <see cref=\"P:Microsoft.CodeAnalysis.Diagnostic.Severity\"/>.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 171
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.DiagnosticSeverity",
                "Content": "public virtual DiagnosticSeverity DefaultSeverity",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostic.DefaultSeverity\">\r\n    <summary>\r\n    Gets the default <see cref=\"T:Microsoft.CodeAnalysis.DiagnosticSeverity\"/> of the diagnostic's <see cref=\"T:Microsoft.CodeAnalysis.DiagnosticDescriptor\"/>.\r\n    </summary>\r\n    <remarks>\r\n    To get the effective severity of the diagnostic, use <see cref=\"P:Microsoft.CodeAnalysis.Diagnostic.Severity\"/>.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 171
              },
              "Id": "P:Microsoft.CodeAnalysis.Diagnostic.DefaultSeverity",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostic",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostic.DefaultSeverity\">\r\n    <summary>\r\n    Gets the default <see cref=\"T:Microsoft.CodeAnalysis.DiagnosticSeverity\"/> of the diagnostic's <see cref=\"T:Microsoft.CodeAnalysis.DiagnosticDescriptor\"/>.\r\n    </summary>\r\n    <remarks>\r\n    To get the effective severity of the diagnostic, use <see cref=\"P:Microsoft.CodeAnalysis.Diagnostic.Severity\"/>.\r\n    </remarks>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.DiagnosticDescriptor",
                "Content": "public abstract DiagnosticDescriptor Descriptor",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostic.Descriptor\">\r\n    <summary>\r\n    Gets the diagnostic descriptor, which provides a description about a <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 148
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.DiagnosticDescriptor",
                "Content": "public abstract DiagnosticDescriptor Descriptor",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostic.Descriptor\">\r\n    <summary>\r\n    Gets the diagnostic descriptor, which provides a description about a <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 148
              },
              "Id": "P:Microsoft.CodeAnalysis.Diagnostic.Descriptor",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostic",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostic.Descriptor\">\r\n    <summary>\r\n    Gets the diagnostic descriptor, which provides a description about a <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.String",
                "Content": "public abstract string Id",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostic.Id\">\r\n    <summary>\r\n    Gets the diagnostic identifier. For diagnostics generated by the compiler, this will be a numeric code with a prefix such as \"CS1001\".\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 153
              },
              "Syntax": {
                "PropertyType": "T:System.String",
                "Content": "public abstract string Id",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostic.Id\">\r\n    <summary>\r\n    Gets the diagnostic identifier. For diagnostics generated by the compiler, this will be a numeric code with a prefix such as \"CS1001\".\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 153
              },
              "Id": "P:Microsoft.CodeAnalysis.Diagnostic.Id",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostic",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostic.Id\">\r\n    <summary>\r\n    Gets the diagnostic identifier. For diagnostics generated by the compiler, this will be a numeric code with a prefix such as \"CS1001\".\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool IsWarningAsError",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostic.IsWarningAsError\">\r\n    <summary>\r\n    Returns true if this is a warning treated as an error; otherwise false.\r\n    </summary>\r\n    <remarks>\r\n    True implies <see cref=\"P:Microsoft.CodeAnalysis.Diagnostic.DefaultSeverity\"/> = <see cref=\"F:Microsoft.CodeAnalysis.DiagnosticSeverity.Warning\"/>\r\n    and <see cref=\"P:Microsoft.CodeAnalysis.Diagnostic.Severity\"/> = <see cref=\"F:Microsoft.CodeAnalysis.DiagnosticSeverity.Error\"/>.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 200
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool IsWarningAsError",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostic.IsWarningAsError\">\r\n    <summary>\r\n    Returns true if this is a warning treated as an error; otherwise false.\r\n    </summary>\r\n    <remarks>\r\n    True implies <see cref=\"P:Microsoft.CodeAnalysis.Diagnostic.DefaultSeverity\"/> = <see cref=\"F:Microsoft.CodeAnalysis.DiagnosticSeverity.Warning\"/>\r\n    and <see cref=\"P:Microsoft.CodeAnalysis.Diagnostic.Severity\"/> = <see cref=\"F:Microsoft.CodeAnalysis.DiagnosticSeverity.Error\"/>.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 200
              },
              "Id": "P:Microsoft.CodeAnalysis.Diagnostic.IsWarningAsError",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostic",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostic.IsWarningAsError\">\r\n    <summary>\r\n    Returns true if this is a warning treated as an error; otherwise false.\r\n    </summary>\r\n    <remarks>\r\n    True implies <see cref=\"P:Microsoft.CodeAnalysis.Diagnostic.DefaultSeverity\"/> = <see cref=\"F:Microsoft.CodeAnalysis.DiagnosticSeverity.Warning\"/>\r\n    and <see cref=\"P:Microsoft.CodeAnalysis.Diagnostic.Severity\"/> = <see cref=\"F:Microsoft.CodeAnalysis.DiagnosticSeverity.Error\"/>.\r\n    </remarks>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Location",
                "Content": "public abstract Location Location",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostic.Location\">\r\n    <summary>\r\n    Gets the primary location of the diagnostic, or <see cref=\"P:Microsoft.CodeAnalysis.Location.None\"/> if no primary location.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 212
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Location",
                "Content": "public abstract Location Location",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostic.Location\">\r\n    <summary>\r\n    Gets the primary location of the diagnostic, or <see cref=\"P:Microsoft.CodeAnalysis.Location.None\"/> if no primary location.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 212
              },
              "Id": "P:Microsoft.CodeAnalysis.Diagnostic.Location",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostic",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostic.Location\">\r\n    <summary>\r\n    Gets the primary location of the diagnostic, or <see cref=\"P:Microsoft.CodeAnalysis.Location.None\"/> if no primary location.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.DiagnosticSeverity",
                "Content": "public abstract DiagnosticSeverity Severity",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostic.Severity\">\r\n    <summary>\r\n    Gets the effective <see cref=\"T:Microsoft.CodeAnalysis.DiagnosticSeverity\"/> of the diagnostic.\r\n    </summary>\r\n    <remarks>\r\n    To get the default severity of diagnostic's <see cref=\"T:Microsoft.CodeAnalysis.DiagnosticDescriptor\"/>, use <see cref=\"P:Microsoft.CodeAnalysis.Diagnostic.DefaultSeverity\"/>.\r\n    To determine if this is a warning treated as an error, use <see cref=\"P:Microsoft.CodeAnalysis.Diagnostic.IsWarningAsError\"/>.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 180
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.DiagnosticSeverity",
                "Content": "public abstract DiagnosticSeverity Severity",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostic.Severity\">\r\n    <summary>\r\n    Gets the effective <see cref=\"T:Microsoft.CodeAnalysis.DiagnosticSeverity\"/> of the diagnostic.\r\n    </summary>\r\n    <remarks>\r\n    To get the default severity of diagnostic's <see cref=\"T:Microsoft.CodeAnalysis.DiagnosticDescriptor\"/>, use <see cref=\"P:Microsoft.CodeAnalysis.Diagnostic.DefaultSeverity\"/>.\r\n    To determine if this is a warning treated as an error, use <see cref=\"P:Microsoft.CodeAnalysis.Diagnostic.IsWarningAsError\"/>.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 180
              },
              "Id": "P:Microsoft.CodeAnalysis.Diagnostic.Severity",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostic",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostic.Severity\">\r\n    <summary>\r\n    Gets the effective <see cref=\"T:Microsoft.CodeAnalysis.DiagnosticSeverity\"/> of the diagnostic.\r\n    </summary>\r\n    <remarks>\r\n    To get the default severity of diagnostic's <see cref=\"T:Microsoft.CodeAnalysis.DiagnosticDescriptor\"/>, use <see cref=\"P:Microsoft.CodeAnalysis.Diagnostic.DefaultSeverity\"/>.\r\n    To determine if this is a warning treated as an error, use <see cref=\"P:Microsoft.CodeAnalysis.Diagnostic.IsWarningAsError\"/>.\r\n    </remarks>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Int32",
                "Content": "public abstract int WarningLevel",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostic.WarningLevel\">\r\n    <summary>\r\n    Gets the warning level. This is 0 for diagnostics with severity <see cref=\"F:Microsoft.CodeAnalysis.DiagnosticSeverity.Error\"/>,\r\n    otherwise an integer between 1 and 4.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 186
              },
              "Syntax": {
                "PropertyType": "T:System.Int32",
                "Content": "public abstract int WarningLevel",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostic.WarningLevel\">\r\n    <summary>\r\n    Gets the warning level. This is 0 for diagnostics with severity <see cref=\"F:Microsoft.CodeAnalysis.DiagnosticSeverity.Error\"/>,\r\n    otherwise an integer between 1 and 4.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 186
              },
              "Id": "P:Microsoft.CodeAnalysis.Diagnostic.WarningLevel",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostic",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostic.WarningLevel\">\r\n    <summary>\r\n    Gets the warning level. This is 0 for diagnostics with severity <see cref=\"F:Microsoft.CodeAnalysis.DiagnosticSeverity.Error\"/>,\r\n    otherwise an integer between 1 and 4.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Diagnostic\\Diagnostic.cs",
          "InheritanceHierarchy": [
            "T:System.Object"
          ],
          "Syntax": {
            "Content": "public abstract partial class Diagnostic",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.Diagnostic\">\r\n    <summary>\r\n    Represents a diagnostic, such as a compiler error or a warning, along with the location where it occurred.\r\n    </summary>\r\n    <summary>\r\n    A diagnostic (such as a compiler error or a warning), along with the location where it occurred.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.Diagnostic",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.Diagnostic\">\r\n    <summary>\r\n    Represents a diagnostic, such as a compiler error or a warning, along with the location where it occurred.\r\n    </summary>\r\n    <summary>\r\n    A diagnostic (such as a compiler error or a warning), along with the location where it occurred.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.DiagnosticDescriptor : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool Equals(DiagnosticDescriptor other)",
                "XmlDocumentation": "",
                "StartLine": 169
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.DiagnosticDescriptor : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool Equals(DiagnosticDescriptor other)",
                "XmlDocumentation": "",
                "StartLine": 169
              },
              "Id": "M:Microsoft.CodeAnalysis.DiagnosticDescriptor.Equals(Microsoft.CodeAnalysis.DiagnosticDescriptor)",
              "Parent": "T:Microsoft.CodeAnalysis.DiagnosticDescriptor",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Object : obj": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public override bool Equals(object obj)",
                "XmlDocumentation": "",
                "StartLine": 183
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Object : obj": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public override bool Equals(object obj)",
                "XmlDocumentation": "",
                "StartLine": 183
              },
              "Id": "M:Microsoft.CodeAnalysis.DiagnosticDescriptor.Equals(System.Object)",
              "Parent": "T:Microsoft.CodeAnalysis.DiagnosticDescriptor",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public override int GetHashCode()",
                "XmlDocumentation": "",
                "StartLine": 188
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public override int GetHashCode()",
                "XmlDocumentation": "",
                "StartLine": 188
              },
              "Id": "M:Microsoft.CodeAnalysis.DiagnosticDescriptor.GetHashCode",
              "Parent": "T:Microsoft.CodeAnalysis.DiagnosticDescriptor",
              "XmlDocumentation": ""
            }
          ],
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:System.String",
                "Content": "public string Category",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DiagnosticDescriptor.Category\">\r\n    <summary>\r\n    The category of the diagnostic (like Design, Naming etc.)\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 44
              },
              "Syntax": {
                "PropertyType": "T:System.String",
                "Content": "public string Category",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DiagnosticDescriptor.Category\">\r\n    <summary>\r\n    The category of the diagnostic (like Design, Naming etc.)\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 44
              },
              "Id": "P:Microsoft.CodeAnalysis.DiagnosticDescriptor.Category",
              "Parent": "T:Microsoft.CodeAnalysis.DiagnosticDescriptor",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DiagnosticDescriptor.Category\">\r\n    <summary>\r\n    The category of the diagnostic (like Design, Naming etc.)\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Collections.Generic.IEnumerable{System.String}",
                "Content": "public IEnumerable<string> CustomTags",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DiagnosticDescriptor.CustomTags\">\r\n    <summary>\r\n    Custom tags for the diagnostic.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 59
              },
              "Syntax": {
                "PropertyType": "T:System.Collections.Generic.IEnumerable{System.String}",
                "Content": "public IEnumerable<string> CustomTags",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DiagnosticDescriptor.CustomTags\">\r\n    <summary>\r\n    Custom tags for the diagnostic.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 59
              },
              "Id": "P:Microsoft.CodeAnalysis.DiagnosticDescriptor.CustomTags",
              "Parent": "T:Microsoft.CodeAnalysis.DiagnosticDescriptor",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DiagnosticDescriptor.CustomTags\">\r\n    <summary>\r\n    Custom tags for the diagnostic.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.DiagnosticSeverity",
                "Content": "public DiagnosticSeverity DefaultSeverity",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DiagnosticDescriptor.DefaultSeverity\">\r\n    <summary>\r\n    The default severity of the diagnostic.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 49
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.DiagnosticSeverity",
                "Content": "public DiagnosticSeverity DefaultSeverity",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DiagnosticDescriptor.DefaultSeverity\">\r\n    <summary>\r\n    The default severity of the diagnostic.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 49
              },
              "Id": "P:Microsoft.CodeAnalysis.DiagnosticDescriptor.DefaultSeverity",
              "Parent": "T:Microsoft.CodeAnalysis.DiagnosticDescriptor",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DiagnosticDescriptor.DefaultSeverity\">\r\n    <summary>\r\n    The default severity of the diagnostic.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.LocalizableString",
                "Content": "public LocalizableString Description",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DiagnosticDescriptor.Description\">\r\n    <summary>\r\n    An optional longer localizable description for the diagnostic.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 28
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.LocalizableString",
                "Content": "public LocalizableString Description",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DiagnosticDescriptor.Description\">\r\n    <summary>\r\n    An optional longer localizable description for the diagnostic.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 28
              },
              "Id": "P:Microsoft.CodeAnalysis.DiagnosticDescriptor.Description",
              "Parent": "T:Microsoft.CodeAnalysis.DiagnosticDescriptor",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DiagnosticDescriptor.Description\">\r\n    <summary>\r\n    An optional longer localizable description for the diagnostic.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.String",
                "Content": "public string HelpLinkUri",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DiagnosticDescriptor.HelpLinkUri\">\r\n    <summary>\r\n    An optional hyperlink that provides more detailed information regarding the diagnostic.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 33
              },
              "Syntax": {
                "PropertyType": "T:System.String",
                "Content": "public string HelpLinkUri",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DiagnosticDescriptor.HelpLinkUri\">\r\n    <summary>\r\n    An optional hyperlink that provides more detailed information regarding the diagnostic.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 33
              },
              "Id": "P:Microsoft.CodeAnalysis.DiagnosticDescriptor.HelpLinkUri",
              "Parent": "T:Microsoft.CodeAnalysis.DiagnosticDescriptor",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DiagnosticDescriptor.HelpLinkUri\">\r\n    <summary>\r\n    An optional hyperlink that provides more detailed information regarding the diagnostic.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.String",
                "Content": "public string Id",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DiagnosticDescriptor.Id\">\r\n    <summary>\r\n    An unique identifier for the diagnostic.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 18
              },
              "Syntax": {
                "PropertyType": "T:System.String",
                "Content": "public string Id",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DiagnosticDescriptor.Id\">\r\n    <summary>\r\n    An unique identifier for the diagnostic.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 18
              },
              "Id": "P:Microsoft.CodeAnalysis.DiagnosticDescriptor.Id",
              "Parent": "T:Microsoft.CodeAnalysis.DiagnosticDescriptor",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DiagnosticDescriptor.Id\">\r\n    <summary>\r\n    An unique identifier for the diagnostic.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool IsEnabledByDefault",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DiagnosticDescriptor.IsEnabledByDefault\">\r\n    <summary>\r\n    Returns true if the diagnostic is enabled by default.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 54
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool IsEnabledByDefault",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DiagnosticDescriptor.IsEnabledByDefault\">\r\n    <summary>\r\n    Returns true if the diagnostic is enabled by default.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 54
              },
              "Id": "P:Microsoft.CodeAnalysis.DiagnosticDescriptor.IsEnabledByDefault",
              "Parent": "T:Microsoft.CodeAnalysis.DiagnosticDescriptor",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DiagnosticDescriptor.IsEnabledByDefault\">\r\n    <summary>\r\n    Returns true if the diagnostic is enabled by default.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.LocalizableString",
                "Content": "public LocalizableString MessageFormat",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DiagnosticDescriptor.MessageFormat\">\r\n    <summary>\r\n    A localizable format message string, which can be passed as the first argument to <see cref=\"M:System.String.Format(System.String,System.Object[])\"/> when creating the diagnostic message with this descriptor.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n",
                "StartLine": 39
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.LocalizableString",
                "Content": "public LocalizableString MessageFormat",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DiagnosticDescriptor.MessageFormat\">\r\n    <summary>\r\n    A localizable format message string, which can be passed as the first argument to <see cref=\"M:System.String.Format(System.String,System.Object[])\"/> when creating the diagnostic message with this descriptor.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n",
                "StartLine": 39
              },
              "Id": "P:Microsoft.CodeAnalysis.DiagnosticDescriptor.MessageFormat",
              "Parent": "T:Microsoft.CodeAnalysis.DiagnosticDescriptor",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DiagnosticDescriptor.MessageFormat\">\r\n    <summary>\r\n    A localizable format message string, which can be passed as the first argument to <see cref=\"M:System.String.Format(System.String,System.Object[])\"/> when creating the diagnostic message with this descriptor.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.LocalizableString",
                "Content": "public LocalizableString Title",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DiagnosticDescriptor.Title\">\r\n    <summary>\r\n    A short localizable title describing the diagnostic.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 23
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.LocalizableString",
                "Content": "public LocalizableString Title",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DiagnosticDescriptor.Title\">\r\n    <summary>\r\n    A short localizable title describing the diagnostic.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 23
              },
              "Id": "P:Microsoft.CodeAnalysis.DiagnosticDescriptor.Title",
              "Parent": "T:Microsoft.CodeAnalysis.DiagnosticDescriptor",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DiagnosticDescriptor.Title\">\r\n    <summary>\r\n    A short localizable title describing the diagnostic.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Constructors": [
            {
              "ConstructorSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.DiagnosticSeverity : defaultSeverity": "",
                  "T:Microsoft.CodeAnalysis.LocalizableString : description": "",
                  "T:Microsoft.CodeAnalysis.LocalizableString : messageFormat": "",
                  "T:Microsoft.CodeAnalysis.LocalizableString : title": "",
                  "T:System.Array : customTags": "",
                  "T:System.Boolean : isEnabledByDefault": "",
                  "T:System.String : category": "",
                  "T:System.String : helpLinkUri": "",
                  "T:System.String : id": ""
                },
                "Content": "public DiagnosticDescriptor(string id, LocalizableString title, LocalizableString messageFormat, string category, DiagnosticSeverity defaultSeverity, bool isEnabledByDefault, LocalizableString description = null, string helpLinkUri = null, params string[] customTags): this (id, title, messageFormat, category, defaultSeverity, isEnabledByDefault, description, helpLinkUri, customTags.AsImmutableOrEmpty())",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.DiagnosticDescriptor.#ctor(System.String,Microsoft.CodeAnalysis.LocalizableString,Microsoft.CodeAnalysis.LocalizableString,System.String,Microsoft.CodeAnalysis.DiagnosticSeverity,System.Boolean,Microsoft.CodeAnalysis.LocalizableString,System.String,System.String[])\">\r\n    <summary>\r\n    Create a DiagnosticDescriptor, which provides description about a <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>.\r\n    </summary>\r\n    <param name=\"id\">A unique identifier for the diagnostic. For example, code analysis diagnostic ID \"CA1001\".</param>\r\n    <param name=\"title\">A short localizable title describing the diagnostic. For example, for CA1001: \"Types that own disposable fields should be disposable\".</param>\r\n    <param name=\"messageFormat\">A localizable format message string, which can be passed as the first argument to <see cref=\"M:System.String.Format(System.String,System.Object[])\"/> when creating the diagnostic message with this descriptor.\r\n    For example, for CA1001: \"Implement IDisposable on '{0}' because it creates members of the following IDisposable types: '{1}'.\"</param>\r\n    <param name=\"category\">The category of the diagnostic (like Design, Naming etc.). For example, for CA1001: \"Microsoft.Design\".</param>\r\n    <param name=\"defaultSeverity\">Default severity of the diagnostic.</param>\r\n    <param name=\"isEnabledByDefault\">True if the diagnostic is enabled by default.</param>\r\n    <param name=\"description\">An optional longer localizable description of the diagnostic.</param>\r\n    <param name=\"helpLinkUri\">An optional hyperlink that provides a more detailed description regarding the diagnostic.</param>\r\n    <param name=\"customTags\">Optional custom tags for the diagnostic. See <see cref=\"T:Microsoft.CodeAnalysis.WellKnownDiagnosticTags\"/> for some well known tags.</param>\r\n    <remarks>Example descriptor for rule CA1001:\r\n        internal static DiagnosticDescriptor Rule = new DiagnosticDescriptor(RuleId,\r\n            new LocalizableResourceString(nameof(FxCopRulesResources.TypesThatOwnDisposableFieldsShouldBeDisposable), FxCopRulesResources.ResourceManager, typeof(FxCopRulesResources)),\r\n            new LocalizableResourceString(nameof(FxCopRulesResources.TypeOwnsDisposableFieldButIsNotDisposable), FxCopRulesResources.ResourceManager, typeof(FxCopRulesResources)),\r\n            FxCopDiagnosticCategory.Design,\r\n            DiagnosticSeverity.Warning,\r\n            isEnabledByDefault: true,\r\n            helpLinkUri: \"http://msdn.microsoft.com/library/ms182172.aspx\",\r\n            customTags: DiagnosticCustomTags.Microsoft);\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 113
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.DiagnosticSeverity : defaultSeverity": "",
                  "T:Microsoft.CodeAnalysis.LocalizableString : description": "",
                  "T:Microsoft.CodeAnalysis.LocalizableString : messageFormat": "",
                  "T:Microsoft.CodeAnalysis.LocalizableString : title": "",
                  "T:System.Array : customTags": "",
                  "T:System.Boolean : isEnabledByDefault": "",
                  "T:System.String : category": "",
                  "T:System.String : helpLinkUri": "",
                  "T:System.String : id": ""
                },
                "Content": "public DiagnosticDescriptor(string id, LocalizableString title, LocalizableString messageFormat, string category, DiagnosticSeverity defaultSeverity, bool isEnabledByDefault, LocalizableString description = null, string helpLinkUri = null, params string[] customTags): this (id, title, messageFormat, category, defaultSeverity, isEnabledByDefault, description, helpLinkUri, customTags.AsImmutableOrEmpty())",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.DiagnosticDescriptor.#ctor(System.String,Microsoft.CodeAnalysis.LocalizableString,Microsoft.CodeAnalysis.LocalizableString,System.String,Microsoft.CodeAnalysis.DiagnosticSeverity,System.Boolean,Microsoft.CodeAnalysis.LocalizableString,System.String,System.String[])\">\r\n    <summary>\r\n    Create a DiagnosticDescriptor, which provides description about a <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>.\r\n    </summary>\r\n    <param name=\"id\">A unique identifier for the diagnostic. For example, code analysis diagnostic ID \"CA1001\".</param>\r\n    <param name=\"title\">A short localizable title describing the diagnostic. For example, for CA1001: \"Types that own disposable fields should be disposable\".</param>\r\n    <param name=\"messageFormat\">A localizable format message string, which can be passed as the first argument to <see cref=\"M:System.String.Format(System.String,System.Object[])\"/> when creating the diagnostic message with this descriptor.\r\n    For example, for CA1001: \"Implement IDisposable on '{0}' because it creates members of the following IDisposable types: '{1}'.\"</param>\r\n    <param name=\"category\">The category of the diagnostic (like Design, Naming etc.). For example, for CA1001: \"Microsoft.Design\".</param>\r\n    <param name=\"defaultSeverity\">Default severity of the diagnostic.</param>\r\n    <param name=\"isEnabledByDefault\">True if the diagnostic is enabled by default.</param>\r\n    <param name=\"description\">An optional longer localizable description of the diagnostic.</param>\r\n    <param name=\"helpLinkUri\">An optional hyperlink that provides a more detailed description regarding the diagnostic.</param>\r\n    <param name=\"customTags\">Optional custom tags for the diagnostic. See <see cref=\"T:Microsoft.CodeAnalysis.WellKnownDiagnosticTags\"/> for some well known tags.</param>\r\n    <remarks>Example descriptor for rule CA1001:\r\n        internal static DiagnosticDescriptor Rule = new DiagnosticDescriptor(RuleId,\r\n            new LocalizableResourceString(nameof(FxCopRulesResources.TypesThatOwnDisposableFieldsShouldBeDisposable), FxCopRulesResources.ResourceManager, typeof(FxCopRulesResources)),\r\n            new LocalizableResourceString(nameof(FxCopRulesResources.TypeOwnsDisposableFieldButIsNotDisposable), FxCopRulesResources.ResourceManager, typeof(FxCopRulesResources)),\r\n            FxCopDiagnosticCategory.Design,\r\n            DiagnosticSeverity.Warning,\r\n            isEnabledByDefault: true,\r\n            helpLinkUri: \"http://msdn.microsoft.com/library/ms182172.aspx\",\r\n            customTags: DiagnosticCustomTags.Microsoft);\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 113
              },
              "Id": "M:Microsoft.CodeAnalysis.DiagnosticDescriptor.#ctor(System.String,Microsoft.CodeAnalysis.LocalizableString,Microsoft.CodeAnalysis.LocalizableString,System.String,Microsoft.CodeAnalysis.DiagnosticSeverity,System.Boolean,Microsoft.CodeAnalysis.LocalizableString,System.String,System.String[])",
              "Parent": "T:Microsoft.CodeAnalysis.DiagnosticDescriptor",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.DiagnosticDescriptor.#ctor(System.String,Microsoft.CodeAnalysis.LocalizableString,Microsoft.CodeAnalysis.LocalizableString,System.String,Microsoft.CodeAnalysis.DiagnosticSeverity,System.Boolean,Microsoft.CodeAnalysis.LocalizableString,System.String,System.String[])\">\r\n    <summary>\r\n    Create a DiagnosticDescriptor, which provides description about a <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>.\r\n    </summary>\r\n    <param name=\"id\">A unique identifier for the diagnostic. For example, code analysis diagnostic ID \"CA1001\".</param>\r\n    <param name=\"title\">A short localizable title describing the diagnostic. For example, for CA1001: \"Types that own disposable fields should be disposable\".</param>\r\n    <param name=\"messageFormat\">A localizable format message string, which can be passed as the first argument to <see cref=\"M:System.String.Format(System.String,System.Object[])\"/> when creating the diagnostic message with this descriptor.\r\n    For example, for CA1001: \"Implement IDisposable on '{0}' because it creates members of the following IDisposable types: '{1}'.\"</param>\r\n    <param name=\"category\">The category of the diagnostic (like Design, Naming etc.). For example, for CA1001: \"Microsoft.Design\".</param>\r\n    <param name=\"defaultSeverity\">Default severity of the diagnostic.</param>\r\n    <param name=\"isEnabledByDefault\">True if the diagnostic is enabled by default.</param>\r\n    <param name=\"description\">An optional longer localizable description of the diagnostic.</param>\r\n    <param name=\"helpLinkUri\">An optional hyperlink that provides a more detailed description regarding the diagnostic.</param>\r\n    <param name=\"customTags\">Optional custom tags for the diagnostic. See <see cref=\"T:Microsoft.CodeAnalysis.WellKnownDiagnosticTags\"/> for some well known tags.</param>\r\n    <remarks>Example descriptor for rule CA1001:\r\n        internal static DiagnosticDescriptor Rule = new DiagnosticDescriptor(RuleId,\r\n            new LocalizableResourceString(nameof(FxCopRulesResources.TypesThatOwnDisposableFieldsShouldBeDisposable), FxCopRulesResources.ResourceManager, typeof(FxCopRulesResources)),\r\n            new LocalizableResourceString(nameof(FxCopRulesResources.TypeOwnsDisposableFieldButIsNotDisposable), FxCopRulesResources.ResourceManager, typeof(FxCopRulesResources)),\r\n            FxCopDiagnosticCategory.Design,\r\n            DiagnosticSeverity.Warning,\r\n            isEnabledByDefault: true,\r\n            helpLinkUri: \"http://msdn.microsoft.com/library/ms182172.aspx\",\r\n            customTags: DiagnosticCustomTags.Microsoft);\r\n    </remarks>\r\n</member>\r\n"
            },
            {
              "ConstructorSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.DiagnosticSeverity : defaultSeverity": "",
                  "T:System.Array : customTags": "",
                  "T:System.Boolean : isEnabledByDefault": "",
                  "T:System.String : category": "",
                  "T:System.String : description": "",
                  "T:System.String : helpLinkUri": "",
                  "T:System.String : id": "",
                  "T:System.String : messageFormat": "",
                  "T:System.String : title": ""
                },
                "Content": "public DiagnosticDescriptor(string id, string title, string messageFormat, string category, DiagnosticSeverity defaultSeverity, bool isEnabledByDefault, string description = null, string helpLinkUri = null, params string[] customTags): this (id, title, messageFormat, category, defaultSeverity, isEnabledByDefault, description, helpLinkUri, customTags.AsImmutableOrEmpty())",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.DiagnosticDescriptor.#ctor(System.String,System.String,System.String,System.String,Microsoft.CodeAnalysis.DiagnosticSeverity,System.Boolean,System.String,System.String,System.String[])\">\r\n    <summary>\r\n    Create a DiagnosticDescriptor, which provides description about a <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>.\r\n    NOTE: For localizable <paramref name=\"title\"/>, <paramref name=\"description\"/> and/or <paramref name=\"messageFormat\"/>,\r\n    use constructor overload <see cref=\"M:Microsoft.CodeAnalysis.DiagnosticDescriptor.#ctor(System.String,Microsoft.CodeAnalysis.LocalizableString,Microsoft.CodeAnalysis.LocalizableString,System.String,Microsoft.CodeAnalysis.DiagnosticSeverity,System.Boolean,Microsoft.CodeAnalysis.LocalizableString,System.String,System.String[])\"/>.\r\n    </summary>\r\n    <param name=\"id\">A unique identifier for the diagnostic. For example, code analysis diagnostic ID \"CA1001\".</param>\r\n    <param name=\"title\">A short title describing the diagnostic. For example, for CA1001: \"Types that own disposable fields should be disposable\".</param>\r\n    <param name=\"messageFormat\">A format message string, which can be passed as the first argument to <see cref=\"M:System.String.Format(System.String,System.Object[])\"/> when creating the diagnostic message with this descriptor.\r\n    For example, for CA1001: \"Implement IDisposable on '{0}' because it creates members of the following IDisposable types: '{1}'.\"</param>\r\n    <param name=\"category\">The category of the diagnostic (like Design, Naming etc.). For example, for CA1001: \"Microsoft.Design\".</param>\r\n    <param name=\"defaultSeverity\">Default severity of the diagnostic.</param>\r\n    <param name=\"isEnabledByDefault\">True if the diagnostic is enabled by default.</param>\r\n    <param name=\"description\">An optional longer description of the diagnostic.</param>\r\n    <param name=\"helpLinkUri\">An optional hyperlink that provides a more detailed description regarding the diagnostic.</param>\r\n    <param name=\"customTags\">Optional custom tags for the diagnostic. See <see cref=\"T:Microsoft.CodeAnalysis.WellKnownDiagnosticTags\"/> for some well known tags.</param>\r\n</member>\r\n",
                "StartLine": 76
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.DiagnosticSeverity : defaultSeverity": "",
                  "T:System.Array : customTags": "",
                  "T:System.Boolean : isEnabledByDefault": "",
                  "T:System.String : category": "",
                  "T:System.String : description": "",
                  "T:System.String : helpLinkUri": "",
                  "T:System.String : id": "",
                  "T:System.String : messageFormat": "",
                  "T:System.String : title": ""
                },
                "Content": "public DiagnosticDescriptor(string id, string title, string messageFormat, string category, DiagnosticSeverity defaultSeverity, bool isEnabledByDefault, string description = null, string helpLinkUri = null, params string[] customTags): this (id, title, messageFormat, category, defaultSeverity, isEnabledByDefault, description, helpLinkUri, customTags.AsImmutableOrEmpty())",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.DiagnosticDescriptor.#ctor(System.String,System.String,System.String,System.String,Microsoft.CodeAnalysis.DiagnosticSeverity,System.Boolean,System.String,System.String,System.String[])\">\r\n    <summary>\r\n    Create a DiagnosticDescriptor, which provides description about a <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>.\r\n    NOTE: For localizable <paramref name=\"title\"/>, <paramref name=\"description\"/> and/or <paramref name=\"messageFormat\"/>,\r\n    use constructor overload <see cref=\"M:Microsoft.CodeAnalysis.DiagnosticDescriptor.#ctor(System.String,Microsoft.CodeAnalysis.LocalizableString,Microsoft.CodeAnalysis.LocalizableString,System.String,Microsoft.CodeAnalysis.DiagnosticSeverity,System.Boolean,Microsoft.CodeAnalysis.LocalizableString,System.String,System.String[])\"/>.\r\n    </summary>\r\n    <param name=\"id\">A unique identifier for the diagnostic. For example, code analysis diagnostic ID \"CA1001\".</param>\r\n    <param name=\"title\">A short title describing the diagnostic. For example, for CA1001: \"Types that own disposable fields should be disposable\".</param>\r\n    <param name=\"messageFormat\">A format message string, which can be passed as the first argument to <see cref=\"M:System.String.Format(System.String,System.Object[])\"/> when creating the diagnostic message with this descriptor.\r\n    For example, for CA1001: \"Implement IDisposable on '{0}' because it creates members of the following IDisposable types: '{1}'.\"</param>\r\n    <param name=\"category\">The category of the diagnostic (like Design, Naming etc.). For example, for CA1001: \"Microsoft.Design\".</param>\r\n    <param name=\"defaultSeverity\">Default severity of the diagnostic.</param>\r\n    <param name=\"isEnabledByDefault\">True if the diagnostic is enabled by default.</param>\r\n    <param name=\"description\">An optional longer description of the diagnostic.</param>\r\n    <param name=\"helpLinkUri\">An optional hyperlink that provides a more detailed description regarding the diagnostic.</param>\r\n    <param name=\"customTags\">Optional custom tags for the diagnostic. See <see cref=\"T:Microsoft.CodeAnalysis.WellKnownDiagnosticTags\"/> for some well known tags.</param>\r\n</member>\r\n",
                "StartLine": 76
              },
              "Id": "M:Microsoft.CodeAnalysis.DiagnosticDescriptor.#ctor(System.String,System.String,System.String,System.String,Microsoft.CodeAnalysis.DiagnosticSeverity,System.Boolean,System.String,System.String,System.String[])",
              "Parent": "T:Microsoft.CodeAnalysis.DiagnosticDescriptor",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.DiagnosticDescriptor.#ctor(System.String,System.String,System.String,System.String,Microsoft.CodeAnalysis.DiagnosticSeverity,System.Boolean,System.String,System.String,System.String[])\">\r\n    <summary>\r\n    Create a DiagnosticDescriptor, which provides description about a <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>.\r\n    NOTE: For localizable <paramref name=\"title\"/>, <paramref name=\"description\"/> and/or <paramref name=\"messageFormat\"/>,\r\n    use constructor overload <see cref=\"M:Microsoft.CodeAnalysis.DiagnosticDescriptor.#ctor(System.String,Microsoft.CodeAnalysis.LocalizableString,Microsoft.CodeAnalysis.LocalizableString,System.String,Microsoft.CodeAnalysis.DiagnosticSeverity,System.Boolean,Microsoft.CodeAnalysis.LocalizableString,System.String,System.String[])\"/>.\r\n    </summary>\r\n    <param name=\"id\">A unique identifier for the diagnostic. For example, code analysis diagnostic ID \"CA1001\".</param>\r\n    <param name=\"title\">A short title describing the diagnostic. For example, for CA1001: \"Types that own disposable fields should be disposable\".</param>\r\n    <param name=\"messageFormat\">A format message string, which can be passed as the first argument to <see cref=\"M:System.String.Format(System.String,System.Object[])\"/> when creating the diagnostic message with this descriptor.\r\n    For example, for CA1001: \"Implement IDisposable on '{0}' because it creates members of the following IDisposable types: '{1}'.\"</param>\r\n    <param name=\"category\">The category of the diagnostic (like Design, Naming etc.). For example, for CA1001: \"Microsoft.Design\".</param>\r\n    <param name=\"defaultSeverity\">Default severity of the diagnostic.</param>\r\n    <param name=\"isEnabledByDefault\">True if the diagnostic is enabled by default.</param>\r\n    <param name=\"description\">An optional longer description of the diagnostic.</param>\r\n    <param name=\"helpLinkUri\">An optional hyperlink that provides a more detailed description regarding the diagnostic.</param>\r\n    <param name=\"customTags\">Optional custom tags for the diagnostic. See <see cref=\"T:Microsoft.CodeAnalysis.WellKnownDiagnosticTags\"/> for some well known tags.</param>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Diagnostic\\DiagnosticDescriptor.cs",
          "InheritanceHierarchy": [
            "T:System.Object"
          ],
          "Syntax": {
            "Content": "public class DiagnosticDescriptor",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.DiagnosticDescriptor\">\r\n    <summary>\r\n    Provides a description about a <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.DiagnosticDescriptor",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.DiagnosticDescriptor\">\r\n    <summary>\r\n    Provides a description about a <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Diagnostic : diagnostic": "",
                  "T:System.IFormatProvider : formatter": ""
                },
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public virtual string Format(Diagnostic diagnostic, IFormatProvider formatter = null)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.DiagnosticFormatter.Format(Microsoft.CodeAnalysis.Diagnostic,System.IFormatProvider)\">\r\n    <summary>\r\n    Formats the <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/> message using the optional <see cref=\"T:System.IFormatProvider\"/>.\r\n    </summary>\r\n    <param name=\"diagnostic\">The diagnostic.</param>\r\n    <param name=\"formatter\">The formatter; or null to use the default formatter.</param>\r\n    <returns>The formatted message.</returns>\r\n</member>\r\n",
                "StartLine": 20
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Diagnostic : diagnostic": "",
                  "T:System.IFormatProvider : formatter": ""
                },
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public virtual string Format(Diagnostic diagnostic, IFormatProvider formatter = null)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.DiagnosticFormatter.Format(Microsoft.CodeAnalysis.Diagnostic,System.IFormatProvider)\">\r\n    <summary>\r\n    Formats the <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/> message using the optional <see cref=\"T:System.IFormatProvider\"/>.\r\n    </summary>\r\n    <param name=\"diagnostic\">The diagnostic.</param>\r\n    <param name=\"formatter\">The formatter; or null to use the default formatter.</param>\r\n    <returns>The formatted message.</returns>\r\n</member>\r\n",
                "StartLine": 20
              },
              "Id": "M:Microsoft.CodeAnalysis.DiagnosticFormatter.Format(Microsoft.CodeAnalysis.Diagnostic,System.IFormatProvider)",
              "Parent": "T:Microsoft.CodeAnalysis.DiagnosticFormatter",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.DiagnosticFormatter.Format(Microsoft.CodeAnalysis.Diagnostic,System.IFormatProvider)\">\r\n    <summary>\r\n    Formats the <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/> message using the optional <see cref=\"T:System.IFormatProvider\"/>.\r\n    </summary>\r\n    <param name=\"diagnostic\">The diagnostic.</param>\r\n    <param name=\"formatter\">The formatter; or null to use the default formatter.</param>\r\n    <returns>The formatted message.</returns>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Diagnostic\\DiagnosticFormatter.cs",
          "InheritanceHierarchy": [
            "T:System.Object"
          ],
          "Syntax": {
            "Content": "public class DiagnosticFormatter",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.DiagnosticFormatter\">\r\n    <summary>\r\n    Formats <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/> messages.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.DiagnosticFormatter",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.DiagnosticFormatter\">\r\n    <summary>\r\n    Formats <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/> messages.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Nullable{System.Boolean}",
                "Content": "public bool ? BestFitMapping",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DllImportData.BestFitMapping\">\r\n    <summary>\r\n    Enables or disables best-fit mapping behavior when converting Unicode characters to ANSI characters.\r\n    Null if not specified (the setting for the containing type or assembly should be used, <see cref=\"T:System.Runtime.InteropServices.BestFitMappingAttribute\"/>).\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 127
              },
              "Syntax": {
                "PropertyType": "T:System.Nullable{System.Boolean}",
                "Content": "public bool ? BestFitMapping",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DllImportData.BestFitMapping\">\r\n    <summary>\r\n    Enables or disables best-fit mapping behavior when converting Unicode characters to ANSI characters.\r\n    Null if not specified (the setting for the containing type or assembly should be used, <see cref=\"T:System.Runtime.InteropServices.BestFitMappingAttribute\"/>).\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 127
              },
              "Id": "P:Microsoft.CodeAnalysis.DllImportData.BestFitMapping",
              "Parent": "T:Microsoft.CodeAnalysis.DllImportData",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DllImportData.BestFitMapping\">\r\n    <summary>\r\n    Enables or disables best-fit mapping behavior when converting Unicode characters to ANSI characters.\r\n    Null if not specified (the setting for the containing type or assembly should be used, <see cref=\"T:System.Runtime.InteropServices.BestFitMappingAttribute\"/>).\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Runtime.InteropServices.CallingConvention",
                "Content": "public CallingConvention CallingConvention",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DllImportData.CallingConvention\">\r\n    <summary>\r\n    Indicates the calling convention of an entry point.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 98
              },
              "Syntax": {
                "PropertyType": "T:System.Runtime.InteropServices.CallingConvention",
                "Content": "public CallingConvention CallingConvention",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DllImportData.CallingConvention\">\r\n    <summary>\r\n    Indicates the calling convention of an entry point.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 98
              },
              "Id": "P:Microsoft.CodeAnalysis.DllImportData.CallingConvention",
              "Parent": "T:Microsoft.CodeAnalysis.DllImportData",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DllImportData.CallingConvention\">\r\n    <summary>\r\n    Indicates the calling convention of an entry point.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Runtime.InteropServices.CharSet",
                "Content": "public CharSet CharacterSet",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DllImportData.CharacterSet\">\r\n    <summary>\r\n    Indicates how to marshal string parameters and controls name mangling.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 61
              },
              "Syntax": {
                "PropertyType": "T:System.Runtime.InteropServices.CharSet",
                "Content": "public CharSet CharacterSet",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DllImportData.CharacterSet\">\r\n    <summary>\r\n    Indicates how to marshal string parameters and controls name mangling.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 61
              },
              "Id": "P:Microsoft.CodeAnalysis.DllImportData.CharacterSet",
              "Parent": "T:Microsoft.CodeAnalysis.DllImportData",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DllImportData.CharacterSet\">\r\n    <summary>\r\n    Indicates how to marshal string parameters and controls name mangling.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.String",
                "Content": "public string EntryPointName",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DllImportData.EntryPointName\">\r\n    <summary>\r\n    Name of the native entry point or null if not specified (the effective name is the same as the name of the target method).\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 36
              },
              "Syntax": {
                "PropertyType": "T:System.String",
                "Content": "public string EntryPointName",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DllImportData.EntryPointName\">\r\n    <summary>\r\n    Name of the native entry point or null if not specified (the effective name is the same as the name of the target method).\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 36
              },
              "Id": "P:Microsoft.CodeAnalysis.DllImportData.EntryPointName",
              "Parent": "T:Microsoft.CodeAnalysis.DllImportData",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DllImportData.EntryPointName\">\r\n    <summary>\r\n    Name of the native entry point or null if not specified (the effective name is the same as the name of the target method).\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool ExactSpelling",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DllImportData.ExactSpelling\">\r\n    <summary>\r\n    Controls whether the <see cref=\"P:Microsoft.CodeAnalysis.DllImportData.CharacterSet\"/> field causes the common language runtime \r\n    to search an unmanaged DLL for entry-point names other than the one specified.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 50
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool ExactSpelling",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DllImportData.ExactSpelling\">\r\n    <summary>\r\n    Controls whether the <see cref=\"P:Microsoft.CodeAnalysis.DllImportData.CharacterSet\"/> field causes the common language runtime \r\n    to search an unmanaged DLL for entry-point names other than the one specified.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 50
              },
              "Id": "P:Microsoft.CodeAnalysis.DllImportData.ExactSpelling",
              "Parent": "T:Microsoft.CodeAnalysis.DllImportData",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DllImportData.ExactSpelling\">\r\n    <summary>\r\n    Controls whether the <see cref=\"P:Microsoft.CodeAnalysis.DllImportData.CharacterSet\"/> field causes the common language runtime \r\n    to search an unmanaged DLL for entry-point names other than the one specified.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.String",
                "Content": "public string ModuleName",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DllImportData.ModuleName\">\r\n    <summary>\r\n    Module name. Null if value specified in the attribute is not valid.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 28
              },
              "Syntax": {
                "PropertyType": "T:System.String",
                "Content": "public string ModuleName",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DllImportData.ModuleName\">\r\n    <summary>\r\n    Module name. Null if value specified in the attribute is not valid.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 28
              },
              "Id": "P:Microsoft.CodeAnalysis.DllImportData.ModuleName",
              "Parent": "T:Microsoft.CodeAnalysis.DllImportData",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DllImportData.ModuleName\">\r\n    <summary>\r\n    Module name. Null if value specified in the attribute is not valid.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool SetLastError",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DllImportData.SetLastError\">\r\n    <summary>\r\n    Indicates whether the callee calls the SetLastError Win32 API function before returning from the attributed method.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 87
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool SetLastError",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DllImportData.SetLastError\">\r\n    <summary>\r\n    Indicates whether the callee calls the SetLastError Win32 API function before returning from the attributed method.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 87
              },
              "Id": "P:Microsoft.CodeAnalysis.DllImportData.SetLastError",
              "Parent": "T:Microsoft.CodeAnalysis.DllImportData",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DllImportData.SetLastError\">\r\n    <summary>\r\n    Indicates whether the callee calls the SetLastError Win32 API function before returning from the attributed method.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Nullable{System.Boolean}",
                "Content": "public bool ? ThrowOnUnmappableCharacter",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DllImportData.ThrowOnUnmappableCharacter\">\r\n    <summary>\r\n    Enables or disables the throwing of an exception on an unmappable Unicode character that is converted to an ANSI \"?\" character.\r\n    Null if not specified.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 149
              },
              "Syntax": {
                "PropertyType": "T:System.Nullable{System.Boolean}",
                "Content": "public bool ? ThrowOnUnmappableCharacter",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DllImportData.ThrowOnUnmappableCharacter\">\r\n    <summary>\r\n    Enables or disables the throwing of an exception on an unmappable Unicode character that is converted to an ANSI \"?\" character.\r\n    Null if not specified.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 149
              },
              "Id": "P:Microsoft.CodeAnalysis.DllImportData.ThrowOnUnmappableCharacter",
              "Parent": "T:Microsoft.CodeAnalysis.DllImportData",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.DllImportData.ThrowOnUnmappableCharacter\">\r\n    <summary>\r\n    Enables or disables the throwing of an exception on an unmappable Unicode character that is converted to an ANSI \"?\" character.\r\n    Null if not specified.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Symbols\\PlatformInvokeInformation.cs",
          "InheritanceHierarchy": [
            "T:System.Object"
          ],
          "Syntax": {
            "Content": "public sealed class DllImportData",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.DllImportData\">\r\n    <summary>\r\n    Information that describes how a method from the underlying Platform is to be invoked.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.DllImportData",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.DllImportData\">\r\n    <summary>\r\n    Information that describes how a method from the underlying Platform is to be invoked.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Object : obj": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public abstract override bool Equals(object obj);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.DocumentationProvider.Equals(System.Object)\">\r\n    <summary>\r\n    DocumentationProviders are compared when determining whether an AssemblySymbol can be reused.\r\n    Hence, if multiple instances can represent the same documentation, it is imperative that\r\n    Equals (and GetHashCode) be overridden to capture this fact.  Otherwise, it is possible to end\r\n    up with multiple AssemblySymbols for the same assembly, which plays havoc with the type hierarchy.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 42
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Object : obj": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public abstract override bool Equals(object obj);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.DocumentationProvider.Equals(System.Object)\">\r\n    <summary>\r\n    DocumentationProviders are compared when determining whether an AssemblySymbol can be reused.\r\n    Hence, if multiple instances can represent the same documentation, it is imperative that\r\n    Equals (and GetHashCode) be overridden to capture this fact.  Otherwise, it is possible to end\r\n    up with multiple AssemblySymbols for the same assembly, which plays havoc with the type hierarchy.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 42
              },
              "Id": "M:Microsoft.CodeAnalysis.DocumentationProvider.Equals(System.Object)",
              "Parent": "T:Microsoft.CodeAnalysis.DocumentationProvider",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.DocumentationProvider.Equals(System.Object)\">\r\n    <summary>\r\n    DocumentationProviders are compared when determining whether an AssemblySymbol can be reused.\r\n    Hence, if multiple instances can represent the same documentation, it is imperative that\r\n    Equals (and GetHashCode) be overridden to capture this fact.  Otherwise, it is possible to end\r\n    up with multiple AssemblySymbols for the same assembly, which plays havoc with the type hierarchy.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public abstract override int GetHashCode();",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.DocumentationProvider.GetHashCode\">\r\n    <summary>\r\n    DocumentationProviders are compared when determining whether an AssemblySymbol can be reused.\r\n    Hence, if multiple instances can represent the same documentation, it is imperative that\r\n    GetHashCode (and Equals) be overridden to capture this fact.  Otherwise, it is possible to end\r\n    up with multiple AssemblySymbols for the same assembly, which plays havoc with the type hierarchy.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 50
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public abstract override int GetHashCode();",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.DocumentationProvider.GetHashCode\">\r\n    <summary>\r\n    DocumentationProviders are compared when determining whether an AssemblySymbol can be reused.\r\n    Hence, if multiple instances can represent the same documentation, it is imperative that\r\n    GetHashCode (and Equals) be overridden to capture this fact.  Otherwise, it is possible to end\r\n    up with multiple AssemblySymbols for the same assembly, which plays havoc with the type hierarchy.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 50
              },
              "Id": "M:Microsoft.CodeAnalysis.DocumentationProvider.GetHashCode",
              "Parent": "T:Microsoft.CodeAnalysis.DocumentationProvider",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.DocumentationProvider.GetHashCode\">\r\n    <summary>\r\n    DocumentationProviders are compared when determining whether an AssemblySymbol can be reused.\r\n    Hence, if multiple instances can represent the same documentation, it is imperative that\r\n    GetHashCode (and Equals) be overridden to capture this fact.  Otherwise, it is possible to end\r\n    up with multiple AssemblySymbols for the same assembly, which plays havoc with the type hierarchy.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "Default",
                "XmlDocumentation": "",
                "StartLine": 16
              },
              "Id": "F:Microsoft.CodeAnalysis.DocumentationProvider.Default",
              "Parent": "T:Microsoft.CodeAnalysis.DocumentationProvider",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "ConstructorSyntax": {
                "Parameters": {},
                "Content": "protected DocumentationProvider()",
                "XmlDocumentation": "",
                "StartLine": 18
              },
              "Syntax": {
                "Parameters": {},
                "Content": "protected DocumentationProvider()",
                "XmlDocumentation": "",
                "StartLine": 18
              },
              "Id": "M:Microsoft.CodeAnalysis.DocumentationProvider.#ctor",
              "Parent": "T:Microsoft.CodeAnalysis.DocumentationProvider",
              "XmlDocumentation": ""
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\DocumentationComments\\DocumentationProvider.cs",
          "InheritanceHierarchy": [
            "T:System.Object"
          ],
          "Syntax": {
            "Content": "public abstract partial class DocumentationProvider",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.DocumentationProvider\">\r\n    <summary>\r\n    A class used to provide XML documentation to the compiler for members from metadata. A\r\n    custom implementation of this class should be returned from a DocumentationResolver to provide XML\r\n    documentation comments from custom caches or locations.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.DocumentationProvider",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.DocumentationProvider\">\r\n    <summary>\r\n    A class used to provide XML documentation to the compiler for members from metadata. A\r\n    custom implementation of this class should be returned from a DocumentationResolver to provide XML\r\n    documentation comments from custom caches or locations.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.IMethodSymbol : method": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.IMethodSymbol": ""
                },
                "Content": "public static IMethodSymbol GetConstructedReducedFrom(this IMethodSymbol method)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ISymbolExtensions.GetConstructedReducedFrom(Microsoft.CodeAnalysis.IMethodSymbol)\">\r\n    <summary>\r\n    Returns the constructed form of the ReducedFrom property,\r\n    including the type arguments that were either inferred during reduction or supplied at the call site.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 17
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.IMethodSymbol : method": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.IMethodSymbol": ""
                },
                "Content": "public static IMethodSymbol GetConstructedReducedFrom(this IMethodSymbol method)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ISymbolExtensions.GetConstructedReducedFrom(Microsoft.CodeAnalysis.IMethodSymbol)\">\r\n    <summary>\r\n    Returns the constructed form of the ReducedFrom property,\r\n    including the type arguments that were either inferred during reduction or supplied at the call site.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 17
              },
              "Id": "M:Microsoft.CodeAnalysis.ISymbolExtensions.GetConstructedReducedFrom(Microsoft.CodeAnalysis.IMethodSymbol)",
              "Parent": "T:Microsoft.CodeAnalysis.ISymbolExtensions",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ISymbolExtensions.GetConstructedReducedFrom(Microsoft.CodeAnalysis.IMethodSymbol)\">\r\n    <summary>\r\n    Returns the constructed form of the ReducedFrom property,\r\n    including the type arguments that were either inferred during reduction or supplied at the call site.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Symbols\\ISymbolExtensions.cs",
          "InheritanceHierarchy": [
            "T:System.Object"
          ],
          "Syntax": {
            "Content": "public static class ISymbolExtensions",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.CodeAnalysis.ISymbolExtensions",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": ""
        },
        {
          "Fields": [
            {
              "Syntax": {
                "Content": "CSharp",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.LanguageNames.CSharp\">\r\n    <summary>\r\n    The common name used from the C# language.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 14
              },
              "Id": "F:Microsoft.CodeAnalysis.LanguageNames.CSharp",
              "Parent": "T:Microsoft.CodeAnalysis.LanguageNames",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.LanguageNames.CSharp\">\r\n    <summary>\r\n    The common name used from the C# language.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "VisualBasic",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.LanguageNames.VisualBasic\">\r\n    <summary>\r\n    The common name used for the Visual Basic language.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 19
              },
              "Id": "F:Microsoft.CodeAnalysis.LanguageNames.VisualBasic",
              "Parent": "T:Microsoft.CodeAnalysis.LanguageNames",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.LanguageNames.VisualBasic\">\r\n    <summary>\r\n    The common name used for the Visual Basic language.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Symbols\\LanguageNames.cs",
          "InheritanceHierarchy": [
            "T:System.Object"
          ],
          "Syntax": {
            "Content": "public static class LanguageNames",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.LanguageNames\">\r\n    <summary>\r\n    A class that provides constants for common language names.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.LanguageNames",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.LanguageNames\">\r\n    <summary>\r\n    A class that provides constants for common language names.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.IFormatProvider : formatProvider": ""
                },
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public override string ToString(IFormatProvider formatProvider)",
                "XmlDocumentation": "",
                "StartLine": 107
              },
              "Syntax": {
                "Parameters": {
                  "T:System.IFormatProvider : formatProvider": ""
                },
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public override string ToString(IFormatProvider formatProvider)",
                "XmlDocumentation": "",
                "StartLine": 107
              },
              "Id": "M:Microsoft.CodeAnalysis.LocalizableResourceString.ToString(System.IFormatProvider)",
              "Parent": "T:Microsoft.CodeAnalysis.LocalizableResourceString",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "ConstructorSyntax": {
                "Parameters": {
                  "T:System.Resources.ResourceManager : resourceManager": "",
                  "T:System.String : nameOfLocalizableResource": "",
                  "T:System.Type : resourceSource": ""
                },
                "Content": "public LocalizableResourceString(string nameOfLocalizableResource, ResourceManager resourceManager, Type resourceSource): this (nameOfLocalizableResource, resourceManager, resourceSource, SpecializedCollections.EmptyArray<string>())",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.LocalizableResourceString.#ctor(System.String,System.Resources.ResourceManager,System.Type)\">\r\n    <summary>\r\n    Creates a localizable resource string with no formatting arguments.\r\n    </summary>\r\n    <param name=\"nameOfLocalizableResource\">nameof the resource that needs to be localized.</param>\r\n    <param name=\"resourceManager\"><see cref=\"T:System.Resources.ResourceManager\"/> for the calling assembly.</param>\r\n    <param name=\"resourceSource\">Type handling assembly's resource management. Typically, this is the static class generated for the resources file from which resources are accessed.</param>\r\n</member>\r\n",
                "StartLine": 27
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Resources.ResourceManager : resourceManager": "",
                  "T:System.String : nameOfLocalizableResource": "",
                  "T:System.Type : resourceSource": ""
                },
                "Content": "public LocalizableResourceString(string nameOfLocalizableResource, ResourceManager resourceManager, Type resourceSource): this (nameOfLocalizableResource, resourceManager, resourceSource, SpecializedCollections.EmptyArray<string>())",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.LocalizableResourceString.#ctor(System.String,System.Resources.ResourceManager,System.Type)\">\r\n    <summary>\r\n    Creates a localizable resource string with no formatting arguments.\r\n    </summary>\r\n    <param name=\"nameOfLocalizableResource\">nameof the resource that needs to be localized.</param>\r\n    <param name=\"resourceManager\"><see cref=\"T:System.Resources.ResourceManager\"/> for the calling assembly.</param>\r\n    <param name=\"resourceSource\">Type handling assembly's resource management. Typically, this is the static class generated for the resources file from which resources are accessed.</param>\r\n</member>\r\n",
                "StartLine": 27
              },
              "Id": "M:Microsoft.CodeAnalysis.LocalizableResourceString.#ctor(System.String,System.Resources.ResourceManager,System.Type)",
              "Parent": "T:Microsoft.CodeAnalysis.LocalizableResourceString",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.LocalizableResourceString.#ctor(System.String,System.Resources.ResourceManager,System.Type)\">\r\n    <summary>\r\n    Creates a localizable resource string with no formatting arguments.\r\n    </summary>\r\n    <param name=\"nameOfLocalizableResource\">nameof the resource that needs to be localized.</param>\r\n    <param name=\"resourceManager\"><see cref=\"T:System.Resources.ResourceManager\"/> for the calling assembly.</param>\r\n    <param name=\"resourceSource\">Type handling assembly's resource management. Typically, this is the static class generated for the resources file from which resources are accessed.</param>\r\n</member>\r\n"
            },
            {
              "ConstructorSyntax": {
                "Parameters": {
                  "T:System.Array : formatArguments": "",
                  "T:System.Resources.ResourceManager : resourceManager": "",
                  "T:System.String : nameOfLocalizableResource": "",
                  "T:System.Type : resourceSource": ""
                },
                "Content": "public LocalizableResourceString(string nameOfLocalizableResource, ResourceManager resourceManager, Type resourceSource, params string[] formatArguments)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.LocalizableResourceString.#ctor(System.String,System.Resources.ResourceManager,System.Type,System.String[])\">\r\n    <summary>\r\n    Creates a localizable resource string that may possibly be formatted differently depending on culture.\r\n    </summary>\r\n    <param name=\"nameOfLocalizableResource\">nameof the resource that needs to be localized.</param>\r\n    <param name=\"resourceManager\"><see cref=\"T:System.Resources.ResourceManager\"/> for the calling assembly.</param>\r\n    <param name=\"resourceSource\">Type handling assembly's resource management. Typically, this is the static class generated for the resources file from which resources are accessed.</param>\r\n    <param name=\"formatArguments\">Optional arguments for formatting the localizable resource string.</param>\r\n</member>\r\n",
                "StartLine": 39
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Array : formatArguments": "",
                  "T:System.Resources.ResourceManager : resourceManager": "",
                  "T:System.String : nameOfLocalizableResource": "",
                  "T:System.Type : resourceSource": ""
                },
                "Content": "public LocalizableResourceString(string nameOfLocalizableResource, ResourceManager resourceManager, Type resourceSource, params string[] formatArguments)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.LocalizableResourceString.#ctor(System.String,System.Resources.ResourceManager,System.Type,System.String[])\">\r\n    <summary>\r\n    Creates a localizable resource string that may possibly be formatted differently depending on culture.\r\n    </summary>\r\n    <param name=\"nameOfLocalizableResource\">nameof the resource that needs to be localized.</param>\r\n    <param name=\"resourceManager\"><see cref=\"T:System.Resources.ResourceManager\"/> for the calling assembly.</param>\r\n    <param name=\"resourceSource\">Type handling assembly's resource management. Typically, this is the static class generated for the resources file from which resources are accessed.</param>\r\n    <param name=\"formatArguments\">Optional arguments for formatting the localizable resource string.</param>\r\n</member>\r\n",
                "StartLine": 39
              },
              "Id": "M:Microsoft.CodeAnalysis.LocalizableResourceString.#ctor(System.String,System.Resources.ResourceManager,System.Type,System.String[])",
              "Parent": "T:Microsoft.CodeAnalysis.LocalizableResourceString",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.LocalizableResourceString.#ctor(System.String,System.Resources.ResourceManager,System.Type,System.String[])\">\r\n    <summary>\r\n    Creates a localizable resource string that may possibly be formatted differently depending on culture.\r\n    </summary>\r\n    <param name=\"nameOfLocalizableResource\">nameof the resource that needs to be localized.</param>\r\n    <param name=\"resourceManager\"><see cref=\"T:System.Resources.ResourceManager\"/> for the calling assembly.</param>\r\n    <param name=\"resourceSource\">Type handling assembly's resource management. Typically, this is the static class generated for the resources file from which resources are accessed.</param>\r\n    <param name=\"formatArguments\">Optional arguments for formatting the localizable resource string.</param>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Diagnostic\\LocalizableResourceString.cs",
          "InheritanceHierarchy": [
            "T:System.Object",
            "T:Microsoft.CodeAnalysis.LocalizableString"
          ],
          "Syntax": {
            "Content": "public sealed class LocalizableResourceString",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.LocalizableResourceString\">\r\n    <summary>\r\n    A localizable resource string that may possibly be formatted differently depending on culture.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.LocalizableResourceString",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.LocalizableResourceString\">\r\n    <summary>\r\n    A localizable resource string that may possibly be formatted differently depending on culture.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public sealed override string ToString()",
                "XmlDocumentation": "",
                "StartLine": 28
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public sealed override string ToString()",
                "XmlDocumentation": "",
                "StartLine": 28
              },
              "Id": "M:Microsoft.CodeAnalysis.LocalizableString.ToString",
              "Parent": "T:Microsoft.CodeAnalysis.LocalizableString",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.IFormatProvider : formatProvider": ""
                },
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public abstract string ToString(IFormatProvider formatProvider);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.LocalizableString.ToString(System.IFormatProvider)\">\r\n    <summary>\r\n    Formats the value of the current instance using the optionally specified format. \r\n    </summary>\r\n</member>\r\n",
                "StartLine": 16
              },
              "Syntax": {
                "Parameters": {
                  "T:System.IFormatProvider : formatProvider": ""
                },
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public abstract string ToString(IFormatProvider formatProvider);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.LocalizableString.ToString(System.IFormatProvider)\">\r\n    <summary>\r\n    Formats the value of the current instance using the optionally specified format. \r\n    </summary>\r\n</member>\r\n",
                "StartLine": 16
              },
              "Id": "M:Microsoft.CodeAnalysis.LocalizableString.ToString(System.IFormatProvider)",
              "Parent": "T:Microsoft.CodeAnalysis.LocalizableString",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.LocalizableString.ToString(System.IFormatProvider)\">\r\n    <summary>\r\n    Formats the value of the current instance using the optionally specified format. \r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Diagnostic\\LocalizableString.cs",
          "InheritanceHierarchy": [
            "T:System.Object"
          ],
          "Syntax": {
            "Content": "public abstract class LocalizableString",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.LocalizableString\">\r\n    <summary>\r\n    A string that may possibly be formatted differently depending on culture.\r\n    NOTE: Types implementing <see cref=\"T:Microsoft.CodeAnalysis.LocalizableString\"/> must be serializable.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.LocalizableString",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.LocalizableString\">\r\n    <summary>\r\n    A string that may possibly be formatted differently depending on culture.\r\n    NOTE: Types implementing <see cref=\"T:Microsoft.CodeAnalysis.LocalizableString\"/> must be serializable.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxTree : syntaxTree": "",
                  "T:Microsoft.CodeAnalysis.Text.TextSpan : textSpan": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Location": ""
                },
                "Content": "public static Location Create(SyntaxTree syntaxTree, TextSpan textSpan)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Location.Create(Microsoft.CodeAnalysis.SyntaxTree,Microsoft.CodeAnalysis.Text.TextSpan)\">\r\n    <summary>\r\n    Creates an instance of a <see cref=\"T:Microsoft.CodeAnalysis.Location\"/> for a span in a <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTree\"/>.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 150
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxTree : syntaxTree": "",
                  "T:Microsoft.CodeAnalysis.Text.TextSpan : textSpan": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Location": ""
                },
                "Content": "public static Location Create(SyntaxTree syntaxTree, TextSpan textSpan)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Location.Create(Microsoft.CodeAnalysis.SyntaxTree,Microsoft.CodeAnalysis.Text.TextSpan)\">\r\n    <summary>\r\n    Creates an instance of a <see cref=\"T:Microsoft.CodeAnalysis.Location\"/> for a span in a <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTree\"/>.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 150
              },
              "Id": "M:Microsoft.CodeAnalysis.Location.Create(Microsoft.CodeAnalysis.SyntaxTree,Microsoft.CodeAnalysis.Text.TextSpan)",
              "Parent": "T:Microsoft.CodeAnalysis.Location",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Location.Create(Microsoft.CodeAnalysis.SyntaxTree,Microsoft.CodeAnalysis.Text.TextSpan)\">\r\n    <summary>\r\n    Creates an instance of a <see cref=\"T:Microsoft.CodeAnalysis.Location\"/> for a span in a <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTree\"/>.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.LinePositionSpan : lineSpan": "",
                  "T:Microsoft.CodeAnalysis.Text.TextSpan : textSpan": "",
                  "T:System.String : filePath": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Location": ""
                },
                "Content": "public static Location Create(string filePath, TextSpan textSpan, LinePositionSpan lineSpan)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Location.Create(System.String,Microsoft.CodeAnalysis.Text.TextSpan,Microsoft.CodeAnalysis.Text.LinePositionSpan)\">\r\n    <summary>\r\n    Creates an instance of a <see cref=\"T:Microsoft.CodeAnalysis.Location\"/> for a span in a file.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 163
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.LinePositionSpan : lineSpan": "",
                  "T:Microsoft.CodeAnalysis.Text.TextSpan : textSpan": "",
                  "T:System.String : filePath": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Location": ""
                },
                "Content": "public static Location Create(string filePath, TextSpan textSpan, LinePositionSpan lineSpan)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Location.Create(System.String,Microsoft.CodeAnalysis.Text.TextSpan,Microsoft.CodeAnalysis.Text.LinePositionSpan)\">\r\n    <summary>\r\n    Creates an instance of a <see cref=\"T:Microsoft.CodeAnalysis.Location\"/> for a span in a file.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 163
              },
              "Id": "M:Microsoft.CodeAnalysis.Location.Create(System.String,Microsoft.CodeAnalysis.Text.TextSpan,Microsoft.CodeAnalysis.Text.LinePositionSpan)",
              "Parent": "T:Microsoft.CodeAnalysis.Location",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Location.Create(System.String,Microsoft.CodeAnalysis.Text.TextSpan,Microsoft.CodeAnalysis.Text.LinePositionSpan)\">\r\n    <summary>\r\n    Creates an instance of a <see cref=\"T:Microsoft.CodeAnalysis.Location\"/> for a span in a file.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Object : obj": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public abstract override bool Equals(object obj);",
                "XmlDocumentation": "",
                "StartLine": 84
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Object : obj": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public abstract override bool Equals(object obj);",
                "XmlDocumentation": "",
                "StartLine": 84
              },
              "Id": "M:Microsoft.CodeAnalysis.Location.Equals(System.Object)",
              "Parent": "T:Microsoft.CodeAnalysis.Location",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "protected virtual string GetDebuggerDisplay()",
                "XmlDocumentation": "",
                "StartLine": 129
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "protected virtual string GetDebuggerDisplay()",
                "XmlDocumentation": "",
                "StartLine": 129
              },
              "Id": "M:Microsoft.CodeAnalysis.Location.GetDebuggerDisplay",
              "Parent": "T:Microsoft.CodeAnalysis.Location",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public abstract override int GetHashCode();",
                "XmlDocumentation": "",
                "StartLine": 85
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public abstract override int GetHashCode();",
                "XmlDocumentation": "",
                "StartLine": 85
              },
              "Id": "M:Microsoft.CodeAnalysis.Location.GetHashCode",
              "Parent": "T:Microsoft.CodeAnalysis.Location",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.FileLinePositionSpan": ""
                },
                "Content": "public virtual FileLinePositionSpan GetLineSpan()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Location.GetLineSpan\">\r\n    <summary>\r\n    Gets the location in terms of path, line and column.\r\n    </summary>\r\n    <returns>\r\n    <see cref=\"T:Microsoft.CodeAnalysis.FileLinePositionSpan\"/> that contains path, line and column information.\r\n    \r\n    Returns an invalid span (see <see cref=\"P:Microsoft.CodeAnalysis.FileLinePositionSpan.IsValid\"/>) if the information is not available.\r\n    \r\n    The values are not affected by line mapping directives (#line in C# or #ExternalSource in VB).\r\n    </returns>\r\n</member>\r\n",
                "StartLine": 65
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.FileLinePositionSpan": ""
                },
                "Content": "public virtual FileLinePositionSpan GetLineSpan()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Location.GetLineSpan\">\r\n    <summary>\r\n    Gets the location in terms of path, line and column.\r\n    </summary>\r\n    <returns>\r\n    <see cref=\"T:Microsoft.CodeAnalysis.FileLinePositionSpan\"/> that contains path, line and column information.\r\n    \r\n    Returns an invalid span (see <see cref=\"P:Microsoft.CodeAnalysis.FileLinePositionSpan.IsValid\"/>) if the information is not available.\r\n    \r\n    The values are not affected by line mapping directives (#line in C# or #ExternalSource in VB).\r\n    </returns>\r\n</member>\r\n",
                "StartLine": 65
              },
              "Id": "M:Microsoft.CodeAnalysis.Location.GetLineSpan",
              "Parent": "T:Microsoft.CodeAnalysis.Location",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Location.GetLineSpan\">\r\n    <summary>\r\n    Gets the location in terms of path, line and column.\r\n    </summary>\r\n    <returns>\r\n    <see cref=\"T:Microsoft.CodeAnalysis.FileLinePositionSpan\"/> that contains path, line and column information.\r\n    \r\n    Returns an invalid span (see <see cref=\"P:Microsoft.CodeAnalysis.FileLinePositionSpan.IsValid\"/>) if the information is not available.\r\n    \r\n    The values are not affected by line mapping directives (#line in C# or #ExternalSource in VB).\r\n    </returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.FileLinePositionSpan": ""
                },
                "Content": "public virtual FileLinePositionSpan GetMappedLineSpan()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Location.GetMappedLineSpan\">\r\n    <summary>\r\n    Gets the location in terms of path, line and column after applying source line mapping directives\r\n    (<code>#line</code> in C# or <code>#ExternalSource</code> in VB). \r\n    </summary>\r\n    <returns>\r\n    <see cref=\"T:Microsoft.CodeAnalysis.FileLinePositionSpan\"/> that contains file, line and column information,\r\n    or an invalid span (see <see cref=\"P:Microsoft.CodeAnalysis.FileLinePositionSpan.IsValid\"/>) if not available.\r\n    </returns>\r\n</member>\r\n",
                "StartLine": 78
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.FileLinePositionSpan": ""
                },
                "Content": "public virtual FileLinePositionSpan GetMappedLineSpan()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Location.GetMappedLineSpan\">\r\n    <summary>\r\n    Gets the location in terms of path, line and column after applying source line mapping directives\r\n    (<code>#line</code> in C# or <code>#ExternalSource</code> in VB). \r\n    </summary>\r\n    <returns>\r\n    <see cref=\"T:Microsoft.CodeAnalysis.FileLinePositionSpan\"/> that contains file, line and column information,\r\n    or an invalid span (see <see cref=\"P:Microsoft.CodeAnalysis.FileLinePositionSpan.IsValid\"/>) if not available.\r\n    </returns>\r\n</member>\r\n",
                "StartLine": 78
              },
              "Id": "M:Microsoft.CodeAnalysis.Location.GetMappedLineSpan",
              "Parent": "T:Microsoft.CodeAnalysis.Location",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Location.GetMappedLineSpan\">\r\n    <summary>\r\n    Gets the location in terms of path, line and column after applying source line mapping directives\r\n    (<code>#line</code> in C# or <code>#ExternalSource</code> in VB). \r\n    </summary>\r\n    <returns>\r\n    <see cref=\"T:Microsoft.CodeAnalysis.FileLinePositionSpan\"/> that contains file, line and column information,\r\n    or an invalid span (see <see cref=\"P:Microsoft.CodeAnalysis.FileLinePositionSpan.IsValid\"/>) if not available.\r\n    </returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public override string ToString()",
                "XmlDocumentation": "",
                "StartLine": 87
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public override string ToString()",
                "XmlDocumentation": "",
                "StartLine": 87
              },
              "Id": "M:Microsoft.CodeAnalysis.Location.ToString",
              "Parent": "T:Microsoft.CodeAnalysis.Location",
              "XmlDocumentation": ""
            }
          ],
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool IsInMetadata",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Location.IsInMetadata\">\r\n    <summary>\r\n    Returns true if the location is in metadata.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 31
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool IsInMetadata",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Location.IsInMetadata\">\r\n    <summary>\r\n    Returns true if the location is in metadata.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 31
              },
              "Id": "P:Microsoft.CodeAnalysis.Location.IsInMetadata",
              "Parent": "T:Microsoft.CodeAnalysis.Location",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Location.IsInMetadata\">\r\n    <summary>\r\n    Returns true if the location is in metadata.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool IsInSource",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Location.IsInSource\">\r\n    <summary>\r\n    Returns true if the location represents a specific location in a source code file.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 26
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool IsInSource",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Location.IsInSource\">\r\n    <summary>\r\n    Returns true if the location represents a specific location in a source code file.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 26
              },
              "Id": "P:Microsoft.CodeAnalysis.Location.IsInSource",
              "Parent": "T:Microsoft.CodeAnalysis.Location",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Location.IsInSource\">\r\n    <summary>\r\n    Returns true if the location represents a specific location in a source code file.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.LocationKind",
                "Content": "public abstract LocationKind Kind",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Location.Kind\">\r\n    <summary>\r\n    Location kind (None/SourceFile/MetadataFile).\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 21
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.LocationKind",
                "Content": "public abstract LocationKind Kind",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Location.Kind\">\r\n    <summary>\r\n    Location kind (None/SourceFile/MetadataFile).\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 21
              },
              "Id": "P:Microsoft.CodeAnalysis.Location.Kind",
              "Parent": "T:Microsoft.CodeAnalysis.Location",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Location.Kind\">\r\n    <summary>\r\n    Location kind (None/SourceFile/MetadataFile).\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.IModuleSymbol",
                "Content": "public virtual IModuleSymbol MetadataModule",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Location.MetadataModule\">\r\n    <summary>\r\n    Returns the metadata module the location is associated with or <c>null</c> if the module is not available.\r\n    </summary>\r\n    <remarks>\r\n    Might return null even if <see cref=\"P:Microsoft.CodeAnalysis.Location.IsInMetadata\"/> returns true. The module symbol might not be available anymore, \r\n    for example, if the location is serialized and deserialized.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 45
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.IModuleSymbol",
                "Content": "public virtual IModuleSymbol MetadataModule",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Location.MetadataModule\">\r\n    <summary>\r\n    Returns the metadata module the location is associated with or <c>null</c> if the module is not available.\r\n    </summary>\r\n    <remarks>\r\n    Might return null even if <see cref=\"P:Microsoft.CodeAnalysis.Location.IsInMetadata\"/> returns true. The module symbol might not be available anymore, \r\n    for example, if the location is serialized and deserialized.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 45
              },
              "Id": "P:Microsoft.CodeAnalysis.Location.MetadataModule",
              "Parent": "T:Microsoft.CodeAnalysis.Location",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Location.MetadataModule\">\r\n    <summary>\r\n    Returns the metadata module the location is associated with or <c>null</c> if the module is not available.\r\n    </summary>\r\n    <remarks>\r\n    Might return null even if <see cref=\"P:Microsoft.CodeAnalysis.Location.IsInMetadata\"/> returns true. The module symbol might not be available anymore, \r\n    for example, if the location is serialized and deserialized.\r\n    </remarks>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Location",
                "Content": "public static Location None",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Location.None\">\r\n    <summary>\r\n    A location of kind LocationKind.None. \r\n    </summary>\r\n</member>\r\n",
                "StartLine": 145
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Location",
                "Content": "public static Location None",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Location.None\">\r\n    <summary>\r\n    A location of kind LocationKind.None. \r\n    </summary>\r\n</member>\r\n",
                "StartLine": 145
              },
              "Id": "P:Microsoft.CodeAnalysis.Location.None",
              "Parent": "T:Microsoft.CodeAnalysis.Location",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Location.None\">\r\n    <summary>\r\n    A location of kind LocationKind.None. \r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Text.TextSpan",
                "Content": "public virtual TextSpan SourceSpan",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Location.SourceSpan\">\r\n    <summary>\r\n    The location within the syntax tree that this location is associated with.\r\n    </summary>\r\n    <remarks>\r\n    If <see cref=\"P:Microsoft.CodeAnalysis.Location.IsInSource\"/> returns False this method returns an empty <see cref=\"T:Microsoft.CodeAnalysis.Text.TextSpan\"/> which starts at position 0.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 53
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Text.TextSpan",
                "Content": "public virtual TextSpan SourceSpan",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Location.SourceSpan\">\r\n    <summary>\r\n    The location within the syntax tree that this location is associated with.\r\n    </summary>\r\n    <remarks>\r\n    If <see cref=\"P:Microsoft.CodeAnalysis.Location.IsInSource\"/> returns False this method returns an empty <see cref=\"T:Microsoft.CodeAnalysis.Text.TextSpan\"/> which starts at position 0.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 53
              },
              "Id": "P:Microsoft.CodeAnalysis.Location.SourceSpan",
              "Parent": "T:Microsoft.CodeAnalysis.Location",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Location.SourceSpan\">\r\n    <summary>\r\n    The location within the syntax tree that this location is associated with.\r\n    </summary>\r\n    <remarks>\r\n    If <see cref=\"P:Microsoft.CodeAnalysis.Location.IsInSource\"/> returns False this method returns an empty <see cref=\"T:Microsoft.CodeAnalysis.Text.TextSpan\"/> which starts at position 0.\r\n    </remarks>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SyntaxTree",
                "Content": "public virtual SyntaxTree SourceTree",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Location.SourceTree\">\r\n    <summary>\r\n    The syntax tree this location is located in or <c>null</c> if not in a syntax tree.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 36
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SyntaxTree",
                "Content": "public virtual SyntaxTree SourceTree",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Location.SourceTree\">\r\n    <summary>\r\n    The syntax tree this location is located in or <c>null</c> if not in a syntax tree.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 36
              },
              "Id": "P:Microsoft.CodeAnalysis.Location.SourceTree",
              "Parent": "T:Microsoft.CodeAnalysis.Location",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Location.SourceTree\">\r\n    <summary>\r\n    The syntax tree this location is located in or <c>null</c> if not in a syntax tree.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Constructors": [
            {
              "ConstructorSyntax": {
                "Parameters": {},
                "Content": "protected Location()",
                "XmlDocumentation": "",
                "StartLine": 14
              },
              "Syntax": {
                "Parameters": {},
                "Content": "protected Location()",
                "XmlDocumentation": "",
                "StartLine": 14
              },
              "Id": "M:Microsoft.CodeAnalysis.Location.#ctor",
              "Parent": "T:Microsoft.CodeAnalysis.Location",
              "XmlDocumentation": ""
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Diagnostic\\Location.cs",
          "InheritanceHierarchy": [
            "T:System.Object"
          ],
          "Syntax": {
            "Content": "public abstract class Location",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.Location\">\r\n    <summary>\r\n    A program location in source code.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.Location",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.Location\">\r\n    <summary>\r\n    A program location in source code.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Metadata": ""
                },
                "Content": "protected abstract Metadata CommonCopy();",
                "XmlDocumentation": "",
                "StartLine": 29
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Metadata": ""
                },
                "Content": "protected abstract Metadata CommonCopy();",
                "XmlDocumentation": "",
                "StartLine": 29
              },
              "Id": "M:Microsoft.CodeAnalysis.Metadata.CommonCopy",
              "Parent": "T:Microsoft.CodeAnalysis.Metadata",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Metadata": ""
                },
                "Content": "public Metadata Copy()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Metadata.Copy\">\r\n    <summary>\r\n    Creates a copy of this object.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 34
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Metadata": ""
                },
                "Content": "public Metadata Copy()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Metadata.Copy\">\r\n    <summary>\r\n    Creates a copy of this object.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 34
              },
              "Id": "M:Microsoft.CodeAnalysis.Metadata.Copy",
              "Parent": "T:Microsoft.CodeAnalysis.Metadata",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Metadata.Copy\">\r\n    <summary>\r\n    Creates a copy of this object.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public abstract void Dispose();",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Metadata.Dispose\">\r\n    <summary>\r\n    Releases any resources associated with this instance.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 27
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public abstract void Dispose();",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Metadata.Dispose\">\r\n    <summary>\r\n    Releases any resources associated with this instance.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 27
              },
              "Id": "M:Microsoft.CodeAnalysis.Metadata.Dispose",
              "Parent": "T:Microsoft.CodeAnalysis.Metadata",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Metadata.Dispose\">\r\n    <summary>\r\n    Releases any resources associated with this instance.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.MetadataImageKind",
                "Content": "public abstract MetadataImageKind Kind",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Metadata.Kind\">\r\n    <summary>\r\n    Retrieves the <see cref=\"T:Microsoft.CodeAnalysis.MetadataImageKind\"/> for this instance.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 22
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.MetadataImageKind",
                "Content": "public abstract MetadataImageKind Kind",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Metadata.Kind\">\r\n    <summary>\r\n    Retrieves the <see cref=\"T:Microsoft.CodeAnalysis.MetadataImageKind\"/> for this instance.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 22
              },
              "Id": "P:Microsoft.CodeAnalysis.Metadata.Kind",
              "Parent": "T:Microsoft.CodeAnalysis.Metadata",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Metadata.Kind\">\r\n    <summary>\r\n    Retrieves the <see cref=\"T:Microsoft.CodeAnalysis.MetadataImageKind\"/> for this instance.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\MetadataReference\\Metadata.cs",
          "InheritanceHierarchy": [
            "T:System.Object"
          ],
          "Syntax": {
            "Content": "public abstract class Metadata",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.Metadata\">\r\n    <summary>\r\n    Represents immutable assembly or module CLI metadata.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.Metadata",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.Metadata\">\r\n    <summary>\r\n    Represents immutable assembly or module CLI metadata.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Reflection.Assembly : assembly": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.MetadataReference": ""
                },
                "Content": "public static MetadataReference CreateFromAssembly(Assembly assembly)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.MetadataReference.CreateFromAssembly(System.Reflection.Assembly)\">\r\n    <summary>\r\n    Creates a reference to a loaded assembly.\r\n    </summary>\r\n    <param name=\"assembly\">Path to the module file.</param>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"assembly\"/> is null.</exception>\r\n    <exception cref=\"T:System.NotSupportedException\"><paramref name=\"assembly\"/> is dynamic, doesn't have a location, or the platform doesn't support reading from the location.</exception>\r\n</member>\r\n",
                "StartLine": 251
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Reflection.Assembly : assembly": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.MetadataReference": ""
                },
                "Content": "public static MetadataReference CreateFromAssembly(Assembly assembly)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.MetadataReference.CreateFromAssembly(System.Reflection.Assembly)\">\r\n    <summary>\r\n    Creates a reference to a loaded assembly.\r\n    </summary>\r\n    <param name=\"assembly\">Path to the module file.</param>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"assembly\"/> is null.</exception>\r\n    <exception cref=\"T:System.NotSupportedException\"><paramref name=\"assembly\"/> is dynamic, doesn't have a location, or the platform doesn't support reading from the location.</exception>\r\n</member>\r\n",
                "StartLine": 251
              },
              "Id": "M:Microsoft.CodeAnalysis.MetadataReference.CreateFromAssembly(System.Reflection.Assembly)",
              "Parent": "T:Microsoft.CodeAnalysis.MetadataReference",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.MetadataReference.CreateFromAssembly(System.Reflection.Assembly)\">\r\n    <summary>\r\n    Creates a reference to a loaded assembly.\r\n    </summary>\r\n    <param name=\"assembly\">Path to the module file.</param>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"assembly\"/> is null.</exception>\r\n    <exception cref=\"T:System.NotSupportedException\"><paramref name=\"assembly\"/> is dynamic, doesn't have a location, or the platform doesn't support reading from the location.</exception>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.DocumentationProvider : documentation": "",
                  "T:Microsoft.CodeAnalysis.MetadataReferenceProperties : properties": "",
                  "T:System.Reflection.Assembly : assembly": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.MetadataReference": ""
                },
                "Content": "public static MetadataReference CreateFromAssembly(Assembly assembly, MetadataReferenceProperties properties, DocumentationProvider documentation = null)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.MetadataReference.CreateFromAssembly(System.Reflection.Assembly,Microsoft.CodeAnalysis.MetadataReferenceProperties,Microsoft.CodeAnalysis.DocumentationProvider)\">\r\n    <summary>\r\n    Creates a reference to a loaded assembly.\r\n    </summary>\r\n    <param name=\"assembly\">Path to the module file.</param>\r\n    <param name=\"properties\">Reference properties (extern aliases, type embedding).</param>\r\n    <param name=\"documentation\">Provides XML documentation for symbol found in the reference.</param>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"assembly\"/> is null.</exception>\r\n    <exception cref=\"T:System.ArgumentException\"><paramref name=\"properties\"/>.<see cref=\"P:Microsoft.CodeAnalysis.MetadataReferenceProperties.Kind\"/> is not <see cref=\"F:Microsoft.CodeAnalysis.MetadataImageKind.Assembly\"/>.</exception>\r\n    <exception cref=\"T:System.NotSupportedException\"><paramref name=\"assembly\"/> is dynamic, doesn't have a location, or the platform doesn't support reading from the location.</exception>\r\n    <remarks>\r\n    Performance considerations:\r\n    <para>\r\n    It is recommended to use <see cref=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.CreateFromFile(System.String)\"/> API when creating multiple references to the same assembly.\r\n    Reusing <see cref=\"T:Microsoft.CodeAnalysis.AssemblyMetadata\"/> object allows for sharing data accross these references.\r\n    </para>\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 272
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.DocumentationProvider : documentation": "",
                  "T:Microsoft.CodeAnalysis.MetadataReferenceProperties : properties": "",
                  "T:System.Reflection.Assembly : assembly": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.MetadataReference": ""
                },
                "Content": "public static MetadataReference CreateFromAssembly(Assembly assembly, MetadataReferenceProperties properties, DocumentationProvider documentation = null)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.MetadataReference.CreateFromAssembly(System.Reflection.Assembly,Microsoft.CodeAnalysis.MetadataReferenceProperties,Microsoft.CodeAnalysis.DocumentationProvider)\">\r\n    <summary>\r\n    Creates a reference to a loaded assembly.\r\n    </summary>\r\n    <param name=\"assembly\">Path to the module file.</param>\r\n    <param name=\"properties\">Reference properties (extern aliases, type embedding).</param>\r\n    <param name=\"documentation\">Provides XML documentation for symbol found in the reference.</param>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"assembly\"/> is null.</exception>\r\n    <exception cref=\"T:System.ArgumentException\"><paramref name=\"properties\"/>.<see cref=\"P:Microsoft.CodeAnalysis.MetadataReferenceProperties.Kind\"/> is not <see cref=\"F:Microsoft.CodeAnalysis.MetadataImageKind.Assembly\"/>.</exception>\r\n    <exception cref=\"T:System.NotSupportedException\"><paramref name=\"assembly\"/> is dynamic, doesn't have a location, or the platform doesn't support reading from the location.</exception>\r\n    <remarks>\r\n    Performance considerations:\r\n    <para>\r\n    It is recommended to use <see cref=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.CreateFromFile(System.String)\"/> API when creating multiple references to the same assembly.\r\n    Reusing <see cref=\"T:Microsoft.CodeAnalysis.AssemblyMetadata\"/> object allows for sharing data accross these references.\r\n    </para>\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 272
              },
              "Id": "M:Microsoft.CodeAnalysis.MetadataReference.CreateFromAssembly(System.Reflection.Assembly,Microsoft.CodeAnalysis.MetadataReferenceProperties,Microsoft.CodeAnalysis.DocumentationProvider)",
              "Parent": "T:Microsoft.CodeAnalysis.MetadataReference",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.MetadataReference.CreateFromAssembly(System.Reflection.Assembly,Microsoft.CodeAnalysis.MetadataReferenceProperties,Microsoft.CodeAnalysis.DocumentationProvider)\">\r\n    <summary>\r\n    Creates a reference to a loaded assembly.\r\n    </summary>\r\n    <param name=\"assembly\">Path to the module file.</param>\r\n    <param name=\"properties\">Reference properties (extern aliases, type embedding).</param>\r\n    <param name=\"documentation\">Provides XML documentation for symbol found in the reference.</param>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"assembly\"/> is null.</exception>\r\n    <exception cref=\"T:System.ArgumentException\"><paramref name=\"properties\"/>.<see cref=\"P:Microsoft.CodeAnalysis.MetadataReferenceProperties.Kind\"/> is not <see cref=\"F:Microsoft.CodeAnalysis.MetadataImageKind.Assembly\"/>.</exception>\r\n    <exception cref=\"T:System.NotSupportedException\"><paramref name=\"assembly\"/> is dynamic, doesn't have a location, or the platform doesn't support reading from the location.</exception>\r\n    <remarks>\r\n    Performance considerations:\r\n    <para>\r\n    It is recommended to use <see cref=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.CreateFromFile(System.String)\"/> API when creating multiple references to the same assembly.\r\n    Reusing <see cref=\"T:Microsoft.CodeAnalysis.AssemblyMetadata\"/> object allows for sharing data accross these references.\r\n    </para>\r\n    </remarks>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.DocumentationProvider : documentation": "",
                  "T:Microsoft.CodeAnalysis.MetadataReferenceProperties : properties": "",
                  "T:System.String : path": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.PortableExecutableReference": ""
                },
                "Content": "public static PortableExecutableReference CreateFromFile(string path, MetadataReferenceProperties properties = default (MetadataReferenceProperties), DocumentationProvider documentation = null)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.MetadataReference.CreateFromFile(System.String,Microsoft.CodeAnalysis.MetadataReferenceProperties,Microsoft.CodeAnalysis.DocumentationProvider)\">\r\n    <summary>\r\n    Creates a reference to an assembly or standalone module stored in a file.\r\n    Reads the content of the file into memory.\r\n    </summary>\r\n    <param name=\"path\">Path to the assembly file.</param>\r\n    <param name=\"properties\">Reference properties (extern aliases, type embedding, <see cref=\"T:Microsoft.CodeAnalysis.MetadataImageKind\"/>).</param>\r\n    <param name=\"documentation\">Provides XML documentation for symbol found in the reference.</param>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"path\"/> is null.</exception>\r\n    <exception cref=\"T:System.ArgumentException\"><paramref name=\"path\"/> is invalid.</exception>\r\n    <exception cref=\"T:System.IO.IOException\">An error occurred while reading the file.</exception>\r\n    <remarks>\r\n    Performance considerations:\r\n    <para>\r\n    It is recommended to use <see cref=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.CreateFromFile(System.String)\"/> or <see cref=\"M:Microsoft.CodeAnalysis.ModuleMetadata.CreateFromFile(System.String)\"/> \r\n    API when creating multiple references to the same file.\r\n    Reusing <see cref=\"T:Microsoft.CodeAnalysis.Metadata\"/> object allows for sharing data accross these references.\r\n    </para> \r\n    <para>\r\n    The method eagerly reads the entire content of the file into native heap. The native memory block is released \r\n    when the resulting reference becomes unreachable and GC collects it. To decrease memory footprint of the reference and/or manage\r\n    the lifetime deterministically use <see cref=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.CreateFromFile(System.String)\"/> \r\n    to create an <see cref=\"T:System.IDisposable\"/> metadata object and \r\n    <see cref=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.GetReference(Microsoft.CodeAnalysis.DocumentationProvider,System.Collections.Immutable.ImmutableArray{System.String},System.Boolean,System.String,System.String)\"/> \r\n    to get a reference to it.\r\n    </para>\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 224
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.DocumentationProvider : documentation": "",
                  "T:Microsoft.CodeAnalysis.MetadataReferenceProperties : properties": "",
                  "T:System.String : path": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.PortableExecutableReference": ""
                },
                "Content": "public static PortableExecutableReference CreateFromFile(string path, MetadataReferenceProperties properties = default (MetadataReferenceProperties), DocumentationProvider documentation = null)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.MetadataReference.CreateFromFile(System.String,Microsoft.CodeAnalysis.MetadataReferenceProperties,Microsoft.CodeAnalysis.DocumentationProvider)\">\r\n    <summary>\r\n    Creates a reference to an assembly or standalone module stored in a file.\r\n    Reads the content of the file into memory.\r\n    </summary>\r\n    <param name=\"path\">Path to the assembly file.</param>\r\n    <param name=\"properties\">Reference properties (extern aliases, type embedding, <see cref=\"T:Microsoft.CodeAnalysis.MetadataImageKind\"/>).</param>\r\n    <param name=\"documentation\">Provides XML documentation for symbol found in the reference.</param>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"path\"/> is null.</exception>\r\n    <exception cref=\"T:System.ArgumentException\"><paramref name=\"path\"/> is invalid.</exception>\r\n    <exception cref=\"T:System.IO.IOException\">An error occurred while reading the file.</exception>\r\n    <remarks>\r\n    Performance considerations:\r\n    <para>\r\n    It is recommended to use <see cref=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.CreateFromFile(System.String)\"/> or <see cref=\"M:Microsoft.CodeAnalysis.ModuleMetadata.CreateFromFile(System.String)\"/> \r\n    API when creating multiple references to the same file.\r\n    Reusing <see cref=\"T:Microsoft.CodeAnalysis.Metadata\"/> object allows for sharing data accross these references.\r\n    </para> \r\n    <para>\r\n    The method eagerly reads the entire content of the file into native heap. The native memory block is released \r\n    when the resulting reference becomes unreachable and GC collects it. To decrease memory footprint of the reference and/or manage\r\n    the lifetime deterministically use <see cref=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.CreateFromFile(System.String)\"/> \r\n    to create an <see cref=\"T:System.IDisposable\"/> metadata object and \r\n    <see cref=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.GetReference(Microsoft.CodeAnalysis.DocumentationProvider,System.Collections.Immutable.ImmutableArray{System.String},System.Boolean,System.String,System.String)\"/> \r\n    to get a reference to it.\r\n    </para>\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 224
              },
              "Id": "M:Microsoft.CodeAnalysis.MetadataReference.CreateFromFile(System.String,Microsoft.CodeAnalysis.MetadataReferenceProperties,Microsoft.CodeAnalysis.DocumentationProvider)",
              "Parent": "T:Microsoft.CodeAnalysis.MetadataReference",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.MetadataReference.CreateFromFile(System.String,Microsoft.CodeAnalysis.MetadataReferenceProperties,Microsoft.CodeAnalysis.DocumentationProvider)\">\r\n    <summary>\r\n    Creates a reference to an assembly or standalone module stored in a file.\r\n    Reads the content of the file into memory.\r\n    </summary>\r\n    <param name=\"path\">Path to the assembly file.</param>\r\n    <param name=\"properties\">Reference properties (extern aliases, type embedding, <see cref=\"T:Microsoft.CodeAnalysis.MetadataImageKind\"/>).</param>\r\n    <param name=\"documentation\">Provides XML documentation for symbol found in the reference.</param>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"path\"/> is null.</exception>\r\n    <exception cref=\"T:System.ArgumentException\"><paramref name=\"path\"/> is invalid.</exception>\r\n    <exception cref=\"T:System.IO.IOException\">An error occurred while reading the file.</exception>\r\n    <remarks>\r\n    Performance considerations:\r\n    <para>\r\n    It is recommended to use <see cref=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.CreateFromFile(System.String)\"/> or <see cref=\"M:Microsoft.CodeAnalysis.ModuleMetadata.CreateFromFile(System.String)\"/> \r\n    API when creating multiple references to the same file.\r\n    Reusing <see cref=\"T:Microsoft.CodeAnalysis.Metadata\"/> object allows for sharing data accross these references.\r\n    </para> \r\n    <para>\r\n    The method eagerly reads the entire content of the file into native heap. The native memory block is released \r\n    when the resulting reference becomes unreachable and GC collects it. To decrease memory footprint of the reference and/or manage\r\n    the lifetime deterministically use <see cref=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.CreateFromFile(System.String)\"/> \r\n    to create an <see cref=\"T:System.IDisposable\"/> metadata object and \r\n    <see cref=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.GetReference(Microsoft.CodeAnalysis.DocumentationProvider,System.Collections.Immutable.ImmutableArray{System.String},System.Boolean,System.String,System.String)\"/> \r\n    to get a reference to it.\r\n    </para>\r\n    </remarks>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.DocumentationProvider : documentation": "",
                  "T:Microsoft.CodeAnalysis.MetadataReferenceProperties : properties": "",
                  "T:System.Collections.Generic.IEnumerable{System.Byte} : peImage": "",
                  "T:System.String : filePath": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.PortableExecutableReference": ""
                },
                "Content": "public static PortableExecutableReference CreateFromImage(IEnumerable<byte> peImage, MetadataReferenceProperties properties = default (MetadataReferenceProperties), DocumentationProvider documentation = null, string filePath = null)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.MetadataReference.CreateFromImage(System.Collections.Generic.IEnumerable{System.Byte},Microsoft.CodeAnalysis.MetadataReferenceProperties,Microsoft.CodeAnalysis.DocumentationProvider,System.String)\">\r\n    <summary>\r\n    Creates a reference to a single-module assembly or a standalone module stored in memory.\r\n    </summary>\r\n    <param name=\"peImage\">Assembly image.</param>\r\n    <param name=\"properties\">Reference properties (extern aliases, type embedding, <see cref=\"T:Microsoft.CodeAnalysis.MetadataImageKind\"/>).</param>\r\n    <param name=\"documentation\">Provides XML documentation for symbol found in the reference.</param>\r\n    <param name=\"filePath\">Optional path that describes the location of the metadata. The file doesn't need to exist on disk. The path is opaque to the compiler.</param>\r\n    <remarks>\r\n    Performance considerations: \r\n    <para>\r\n    It is recommended to use <see cref=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.CreateFromImage(System.Collections.Generic.IEnumerable{System.Byte})\"/> or <see cref=\"M:Microsoft.CodeAnalysis.ModuleMetadata.CreateFromImage(System.Collections.Generic.IEnumerable{System.Byte})\"/> \r\n    API when creating multiple references to the same metadata.\r\n    Reusing <see cref=\"T:Microsoft.CodeAnalysis.Metadata\"/> object to create multiple references allows for sharing data accross these references.\r\n    </para> \r\n    <para>\r\n    The method makes a copy of the data and pins it. To avoid making a copy use an overload that takes an <see cref=\"T:System.Collections.Immutable.ImmutableArray`1\"/>.\r\n    The pinned memory is released when the resulting reference becomes unreachable and GC collects it. To control the lifetime of the pinned memory \r\n    deterministically use <see cref=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.CreateFromStream(System.IO.Stream,System.Reflection.PortableExecutable.PEStreamOptions)\"/> \r\n    to create an <see cref=\"T:System.IDisposable\"/> metadata object and \r\n    <see cref=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.GetReference(Microsoft.CodeAnalysis.DocumentationProvider,System.Collections.Immutable.ImmutableArray{System.String},System.Boolean,System.String,System.String)\"/> to get a reference to it.\r\n    to get a reference to it.\r\n    </para>\r\n    </remarks>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"peImage\"/> is null.</exception>\r\n</member>\r\n",
                "StartLine": 149
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.DocumentationProvider : documentation": "",
                  "T:Microsoft.CodeAnalysis.MetadataReferenceProperties : properties": "",
                  "T:System.Collections.Generic.IEnumerable{System.Byte} : peImage": "",
                  "T:System.String : filePath": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.PortableExecutableReference": ""
                },
                "Content": "public static PortableExecutableReference CreateFromImage(IEnumerable<byte> peImage, MetadataReferenceProperties properties = default (MetadataReferenceProperties), DocumentationProvider documentation = null, string filePath = null)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.MetadataReference.CreateFromImage(System.Collections.Generic.IEnumerable{System.Byte},Microsoft.CodeAnalysis.MetadataReferenceProperties,Microsoft.CodeAnalysis.DocumentationProvider,System.String)\">\r\n    <summary>\r\n    Creates a reference to a single-module assembly or a standalone module stored in memory.\r\n    </summary>\r\n    <param name=\"peImage\">Assembly image.</param>\r\n    <param name=\"properties\">Reference properties (extern aliases, type embedding, <see cref=\"T:Microsoft.CodeAnalysis.MetadataImageKind\"/>).</param>\r\n    <param name=\"documentation\">Provides XML documentation for symbol found in the reference.</param>\r\n    <param name=\"filePath\">Optional path that describes the location of the metadata. The file doesn't need to exist on disk. The path is opaque to the compiler.</param>\r\n    <remarks>\r\n    Performance considerations: \r\n    <para>\r\n    It is recommended to use <see cref=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.CreateFromImage(System.Collections.Generic.IEnumerable{System.Byte})\"/> or <see cref=\"M:Microsoft.CodeAnalysis.ModuleMetadata.CreateFromImage(System.Collections.Generic.IEnumerable{System.Byte})\"/> \r\n    API when creating multiple references to the same metadata.\r\n    Reusing <see cref=\"T:Microsoft.CodeAnalysis.Metadata\"/> object to create multiple references allows for sharing data accross these references.\r\n    </para> \r\n    <para>\r\n    The method makes a copy of the data and pins it. To avoid making a copy use an overload that takes an <see cref=\"T:System.Collections.Immutable.ImmutableArray`1\"/>.\r\n    The pinned memory is released when the resulting reference becomes unreachable and GC collects it. To control the lifetime of the pinned memory \r\n    deterministically use <see cref=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.CreateFromStream(System.IO.Stream,System.Reflection.PortableExecutable.PEStreamOptions)\"/> \r\n    to create an <see cref=\"T:System.IDisposable\"/> metadata object and \r\n    <see cref=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.GetReference(Microsoft.CodeAnalysis.DocumentationProvider,System.Collections.Immutable.ImmutableArray{System.String},System.Boolean,System.String,System.String)\"/> to get a reference to it.\r\n    to get a reference to it.\r\n    </para>\r\n    </remarks>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"peImage\"/> is null.</exception>\r\n</member>\r\n",
                "StartLine": 149
              },
              "Id": "M:Microsoft.CodeAnalysis.MetadataReference.CreateFromImage(System.Collections.Generic.IEnumerable{System.Byte},Microsoft.CodeAnalysis.MetadataReferenceProperties,Microsoft.CodeAnalysis.DocumentationProvider,System.String)",
              "Parent": "T:Microsoft.CodeAnalysis.MetadataReference",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.MetadataReference.CreateFromImage(System.Collections.Generic.IEnumerable{System.Byte},Microsoft.CodeAnalysis.MetadataReferenceProperties,Microsoft.CodeAnalysis.DocumentationProvider,System.String)\">\r\n    <summary>\r\n    Creates a reference to a single-module assembly or a standalone module stored in memory.\r\n    </summary>\r\n    <param name=\"peImage\">Assembly image.</param>\r\n    <param name=\"properties\">Reference properties (extern aliases, type embedding, <see cref=\"T:Microsoft.CodeAnalysis.MetadataImageKind\"/>).</param>\r\n    <param name=\"documentation\">Provides XML documentation for symbol found in the reference.</param>\r\n    <param name=\"filePath\">Optional path that describes the location of the metadata. The file doesn't need to exist on disk. The path is opaque to the compiler.</param>\r\n    <remarks>\r\n    Performance considerations: \r\n    <para>\r\n    It is recommended to use <see cref=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.CreateFromImage(System.Collections.Generic.IEnumerable{System.Byte})\"/> or <see cref=\"M:Microsoft.CodeAnalysis.ModuleMetadata.CreateFromImage(System.Collections.Generic.IEnumerable{System.Byte})\"/> \r\n    API when creating multiple references to the same metadata.\r\n    Reusing <see cref=\"T:Microsoft.CodeAnalysis.Metadata\"/> object to create multiple references allows for sharing data accross these references.\r\n    </para> \r\n    <para>\r\n    The method makes a copy of the data and pins it. To avoid making a copy use an overload that takes an <see cref=\"T:System.Collections.Immutable.ImmutableArray`1\"/>.\r\n    The pinned memory is released when the resulting reference becomes unreachable and GC collects it. To control the lifetime of the pinned memory \r\n    deterministically use <see cref=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.CreateFromStream(System.IO.Stream,System.Reflection.PortableExecutable.PEStreamOptions)\"/> \r\n    to create an <see cref=\"T:System.IDisposable\"/> metadata object and \r\n    <see cref=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.GetReference(Microsoft.CodeAnalysis.DocumentationProvider,System.Collections.Immutable.ImmutableArray{System.String},System.Boolean,System.String,System.String)\"/> to get a reference to it.\r\n    to get a reference to it.\r\n    </para>\r\n    </remarks>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"peImage\"/> is null.</exception>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.DocumentationProvider : documentation": "",
                  "T:Microsoft.CodeAnalysis.MetadataReferenceProperties : properties": "",
                  "T:System.Collections.Immutable.ImmutableArray{System.Byte} : peImage": "",
                  "T:System.String : filePath": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.PortableExecutableReference": ""
                },
                "Content": "public static PortableExecutableReference CreateFromImage(ImmutableArray<byte> peImage, MetadataReferenceProperties properties = default (MetadataReferenceProperties), DocumentationProvider documentation = null, string filePath = null)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.MetadataReference.CreateFromImage(System.Collections.Immutable.ImmutableArray{System.Byte},Microsoft.CodeAnalysis.MetadataReferenceProperties,Microsoft.CodeAnalysis.DocumentationProvider,System.String)\">\r\n    <summary>\r\n    Creates a reference to a single-module assembly or a standalone module stored in memory.\r\n    </summary>\r\n    <param name=\"peImage\">Assembly image.</param>\r\n    <param name=\"properties\">Reference properties (extern aliases, type embedding, <see cref=\"T:Microsoft.CodeAnalysis.MetadataImageKind\"/>).</param>\r\n    <param name=\"documentation\">Provides XML documentation for symbol found in the reference.</param>\r\n    <param name=\"filePath\">Optional path that describes the location of the metadata. The file doesn't need to exist on disk. The path is opaque to the compiler.</param>\r\n    <remarks>\r\n    Performance considerations: \r\n    <para>\r\n    It is recommended to use <see cref=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.CreateFromImage(System.Collections.Immutable.ImmutableArray{System.Byte})\"/> or <see cref=\"M:Microsoft.CodeAnalysis.ModuleMetadata.CreateFromImage(System.Collections.Immutable.ImmutableArray{System.Byte})\"/> \r\n    API when creating multiple references to the same metadata.\r\n    Reusing <see cref=\"T:Microsoft.CodeAnalysis.Metadata\"/> object to create multiple references allows for sharing data accross these references.\r\n    </para> \r\n    <para>\r\n    The method pins <paramref name=\"peImage\"/> in managed heap. The pinned memory is released \r\n    when the resulting reference becomes unreachable and GC collects it. To control the lifetime of the pinned memory \r\n    deterministically use <see cref=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.CreateFromImage(System.Collections.Immutable.ImmutableArray{System.Byte})\"/> \r\n    to create an <see cref=\"T:System.IDisposable\"/> metadata object and \r\n    <see cref=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.GetReference(Microsoft.CodeAnalysis.DocumentationProvider,System.Collections.Immutable.ImmutableArray{System.String},System.Boolean,System.String,System.String)\"/> to get a reference to it.\r\n    </para>\r\n    <para>\r\n    The method creates a reference to a single-module assembly. To create a reference to a multi-module assembly or a stand-alone module use \r\n    <see cref=\"M:Microsoft.CodeAnalysis.ModuleMetadata.CreateFromImage(System.Collections.Immutable.ImmutableArray{System.Byte})\"/> and <see cref=\"M:Microsoft.CodeAnalysis.ModuleMetadata.GetReference(Microsoft.CodeAnalysis.DocumentationProvider,System.String,System.String)\"/>.\r\n    </para>\r\n    </remarks>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"peImage\"/> is null.</exception>\r\n</member>\r\n",
                "StartLine": 115
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.DocumentationProvider : documentation": "",
                  "T:Microsoft.CodeAnalysis.MetadataReferenceProperties : properties": "",
                  "T:System.Collections.Immutable.ImmutableArray{System.Byte} : peImage": "",
                  "T:System.String : filePath": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.PortableExecutableReference": ""
                },
                "Content": "public static PortableExecutableReference CreateFromImage(ImmutableArray<byte> peImage, MetadataReferenceProperties properties = default (MetadataReferenceProperties), DocumentationProvider documentation = null, string filePath = null)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.MetadataReference.CreateFromImage(System.Collections.Immutable.ImmutableArray{System.Byte},Microsoft.CodeAnalysis.MetadataReferenceProperties,Microsoft.CodeAnalysis.DocumentationProvider,System.String)\">\r\n    <summary>\r\n    Creates a reference to a single-module assembly or a standalone module stored in memory.\r\n    </summary>\r\n    <param name=\"peImage\">Assembly image.</param>\r\n    <param name=\"properties\">Reference properties (extern aliases, type embedding, <see cref=\"T:Microsoft.CodeAnalysis.MetadataImageKind\"/>).</param>\r\n    <param name=\"documentation\">Provides XML documentation for symbol found in the reference.</param>\r\n    <param name=\"filePath\">Optional path that describes the location of the metadata. The file doesn't need to exist on disk. The path is opaque to the compiler.</param>\r\n    <remarks>\r\n    Performance considerations: \r\n    <para>\r\n    It is recommended to use <see cref=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.CreateFromImage(System.Collections.Immutable.ImmutableArray{System.Byte})\"/> or <see cref=\"M:Microsoft.CodeAnalysis.ModuleMetadata.CreateFromImage(System.Collections.Immutable.ImmutableArray{System.Byte})\"/> \r\n    API when creating multiple references to the same metadata.\r\n    Reusing <see cref=\"T:Microsoft.CodeAnalysis.Metadata\"/> object to create multiple references allows for sharing data accross these references.\r\n    </para> \r\n    <para>\r\n    The method pins <paramref name=\"peImage\"/> in managed heap. The pinned memory is released \r\n    when the resulting reference becomes unreachable and GC collects it. To control the lifetime of the pinned memory \r\n    deterministically use <see cref=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.CreateFromImage(System.Collections.Immutable.ImmutableArray{System.Byte})\"/> \r\n    to create an <see cref=\"T:System.IDisposable\"/> metadata object and \r\n    <see cref=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.GetReference(Microsoft.CodeAnalysis.DocumentationProvider,System.Collections.Immutable.ImmutableArray{System.String},System.Boolean,System.String,System.String)\"/> to get a reference to it.\r\n    </para>\r\n    <para>\r\n    The method creates a reference to a single-module assembly. To create a reference to a multi-module assembly or a stand-alone module use \r\n    <see cref=\"M:Microsoft.CodeAnalysis.ModuleMetadata.CreateFromImage(System.Collections.Immutable.ImmutableArray{System.Byte})\"/> and <see cref=\"M:Microsoft.CodeAnalysis.ModuleMetadata.GetReference(Microsoft.CodeAnalysis.DocumentationProvider,System.String,System.String)\"/>.\r\n    </para>\r\n    </remarks>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"peImage\"/> is null.</exception>\r\n</member>\r\n",
                "StartLine": 115
              },
              "Id": "M:Microsoft.CodeAnalysis.MetadataReference.CreateFromImage(System.Collections.Immutable.ImmutableArray{System.Byte},Microsoft.CodeAnalysis.MetadataReferenceProperties,Microsoft.CodeAnalysis.DocumentationProvider,System.String)",
              "Parent": "T:Microsoft.CodeAnalysis.MetadataReference",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.MetadataReference.CreateFromImage(System.Collections.Immutable.ImmutableArray{System.Byte},Microsoft.CodeAnalysis.MetadataReferenceProperties,Microsoft.CodeAnalysis.DocumentationProvider,System.String)\">\r\n    <summary>\r\n    Creates a reference to a single-module assembly or a standalone module stored in memory.\r\n    </summary>\r\n    <param name=\"peImage\">Assembly image.</param>\r\n    <param name=\"properties\">Reference properties (extern aliases, type embedding, <see cref=\"T:Microsoft.CodeAnalysis.MetadataImageKind\"/>).</param>\r\n    <param name=\"documentation\">Provides XML documentation for symbol found in the reference.</param>\r\n    <param name=\"filePath\">Optional path that describes the location of the metadata. The file doesn't need to exist on disk. The path is opaque to the compiler.</param>\r\n    <remarks>\r\n    Performance considerations: \r\n    <para>\r\n    It is recommended to use <see cref=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.CreateFromImage(System.Collections.Immutable.ImmutableArray{System.Byte})\"/> or <see cref=\"M:Microsoft.CodeAnalysis.ModuleMetadata.CreateFromImage(System.Collections.Immutable.ImmutableArray{System.Byte})\"/> \r\n    API when creating multiple references to the same metadata.\r\n    Reusing <see cref=\"T:Microsoft.CodeAnalysis.Metadata\"/> object to create multiple references allows for sharing data accross these references.\r\n    </para> \r\n    <para>\r\n    The method pins <paramref name=\"peImage\"/> in managed heap. The pinned memory is released \r\n    when the resulting reference becomes unreachable and GC collects it. To control the lifetime of the pinned memory \r\n    deterministically use <see cref=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.CreateFromImage(System.Collections.Immutable.ImmutableArray{System.Byte})\"/> \r\n    to create an <see cref=\"T:System.IDisposable\"/> metadata object and \r\n    <see cref=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.GetReference(Microsoft.CodeAnalysis.DocumentationProvider,System.Collections.Immutable.ImmutableArray{System.String},System.Boolean,System.String,System.String)\"/> to get a reference to it.\r\n    </para>\r\n    <para>\r\n    The method creates a reference to a single-module assembly. To create a reference to a multi-module assembly or a stand-alone module use \r\n    <see cref=\"M:Microsoft.CodeAnalysis.ModuleMetadata.CreateFromImage(System.Collections.Immutable.ImmutableArray{System.Byte})\"/> and <see cref=\"M:Microsoft.CodeAnalysis.ModuleMetadata.GetReference(Microsoft.CodeAnalysis.DocumentationProvider,System.String,System.String)\"/>.\r\n    </para>\r\n    </remarks>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"peImage\"/> is null.</exception>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.DocumentationProvider : documentation": "",
                  "T:Microsoft.CodeAnalysis.MetadataReferenceProperties : properties": "",
                  "T:System.IO.Stream : peStream": "",
                  "T:System.String : filePath": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.PortableExecutableReference": ""
                },
                "Content": "public static PortableExecutableReference CreateFromStream(Stream peStream, MetadataReferenceProperties properties = default (MetadataReferenceProperties), DocumentationProvider documentation = null, string filePath = null)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.MetadataReference.CreateFromStream(System.IO.Stream,Microsoft.CodeAnalysis.MetadataReferenceProperties,Microsoft.CodeAnalysis.DocumentationProvider,System.String)\">\r\n    <summary>\r\n    Creates a reference to a single-module assembly or a stand-alone module from data in specified stream. \r\n    Reads the content of the stream into memory and closes the stream upon return.\r\n    </summary>\r\n    <param name=\"peStream\">Assembly image.</param>\r\n    <param name=\"properties\">Reference properties (extern aliases, type embedding, <see cref=\"T:Microsoft.CodeAnalysis.MetadataImageKind\"/>).</param>\r\n    <param name=\"documentation\">Provides XML documentation for symbol found in the reference.</param>\r\n    <param name=\"filePath\">Optional path that describes the location of the metadata. The file doesn't need to exist on disk. The path is opaque to the compiler.</param>\r\n    <exception cref=\"T:System.ArgumentException\"><paramref name=\"peStream\"/> doesn't support read and seek operations.</exception>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"peStream\"/> is null.</exception>\r\n    <exception cref=\"T:System.IO.IOException\">An error occurred while reading the stream.</exception>\r\n    <remarks>\r\n    Performance considerations: \r\n    <para>\r\n    It is recommended to use <see cref=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.CreateFromStream(System.IO.Stream,System.Reflection.PortableExecutable.PEStreamOptions)\"/> or <see cref=\"M:Microsoft.CodeAnalysis.ModuleMetadata.CreateFromStream(System.IO.Stream,System.Reflection.PortableExecutable.PEStreamOptions)\"/> \r\n    API when creating multiple references to the same metadata.\r\n    Reusing <see cref=\"T:Microsoft.CodeAnalysis.Metadata\"/> object to create multiple references allows for sharing data accross these references.\r\n    </para> \r\n    <para>\r\n    The method eagerly reads the entire content of <paramref name=\"peStream\"/> into native heap. The native memory block is released \r\n    when the resulting reference becomes unreachable and GC collects it. To decrease memory footprint of the reference and/or manage\r\n    the lifetime deterministically use <see cref=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.CreateFromStream(System.IO.Stream,System.Reflection.PortableExecutable.PEStreamOptions)\"/> \r\n    to create an <see cref=\"T:System.IDisposable\"/> metadata object and \r\n    <see cref=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.GetReference(Microsoft.CodeAnalysis.DocumentationProvider,System.Collections.Immutable.ImmutableArray{System.String},System.Boolean,System.String,System.String)\"/> to get a reference to it.\r\n    to get a reference to it.\r\n    </para>\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 186
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.DocumentationProvider : documentation": "",
                  "T:Microsoft.CodeAnalysis.MetadataReferenceProperties : properties": "",
                  "T:System.IO.Stream : peStream": "",
                  "T:System.String : filePath": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.PortableExecutableReference": ""
                },
                "Content": "public static PortableExecutableReference CreateFromStream(Stream peStream, MetadataReferenceProperties properties = default (MetadataReferenceProperties), DocumentationProvider documentation = null, string filePath = null)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.MetadataReference.CreateFromStream(System.IO.Stream,Microsoft.CodeAnalysis.MetadataReferenceProperties,Microsoft.CodeAnalysis.DocumentationProvider,System.String)\">\r\n    <summary>\r\n    Creates a reference to a single-module assembly or a stand-alone module from data in specified stream. \r\n    Reads the content of the stream into memory and closes the stream upon return.\r\n    </summary>\r\n    <param name=\"peStream\">Assembly image.</param>\r\n    <param name=\"properties\">Reference properties (extern aliases, type embedding, <see cref=\"T:Microsoft.CodeAnalysis.MetadataImageKind\"/>).</param>\r\n    <param name=\"documentation\">Provides XML documentation for symbol found in the reference.</param>\r\n    <param name=\"filePath\">Optional path that describes the location of the metadata. The file doesn't need to exist on disk. The path is opaque to the compiler.</param>\r\n    <exception cref=\"T:System.ArgumentException\"><paramref name=\"peStream\"/> doesn't support read and seek operations.</exception>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"peStream\"/> is null.</exception>\r\n    <exception cref=\"T:System.IO.IOException\">An error occurred while reading the stream.</exception>\r\n    <remarks>\r\n    Performance considerations: \r\n    <para>\r\n    It is recommended to use <see cref=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.CreateFromStream(System.IO.Stream,System.Reflection.PortableExecutable.PEStreamOptions)\"/> or <see cref=\"M:Microsoft.CodeAnalysis.ModuleMetadata.CreateFromStream(System.IO.Stream,System.Reflection.PortableExecutable.PEStreamOptions)\"/> \r\n    API when creating multiple references to the same metadata.\r\n    Reusing <see cref=\"T:Microsoft.CodeAnalysis.Metadata\"/> object to create multiple references allows for sharing data accross these references.\r\n    </para> \r\n    <para>\r\n    The method eagerly reads the entire content of <paramref name=\"peStream\"/> into native heap. The native memory block is released \r\n    when the resulting reference becomes unreachable and GC collects it. To decrease memory footprint of the reference and/or manage\r\n    the lifetime deterministically use <see cref=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.CreateFromStream(System.IO.Stream,System.Reflection.PortableExecutable.PEStreamOptions)\"/> \r\n    to create an <see cref=\"T:System.IDisposable\"/> metadata object and \r\n    <see cref=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.GetReference(Microsoft.CodeAnalysis.DocumentationProvider,System.Collections.Immutable.ImmutableArray{System.String},System.Boolean,System.String,System.String)\"/> to get a reference to it.\r\n    to get a reference to it.\r\n    </para>\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 186
              },
              "Id": "M:Microsoft.CodeAnalysis.MetadataReference.CreateFromStream(System.IO.Stream,Microsoft.CodeAnalysis.MetadataReferenceProperties,Microsoft.CodeAnalysis.DocumentationProvider,System.String)",
              "Parent": "T:Microsoft.CodeAnalysis.MetadataReference",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.MetadataReference.CreateFromStream(System.IO.Stream,Microsoft.CodeAnalysis.MetadataReferenceProperties,Microsoft.CodeAnalysis.DocumentationProvider,System.String)\">\r\n    <summary>\r\n    Creates a reference to a single-module assembly or a stand-alone module from data in specified stream. \r\n    Reads the content of the stream into memory and closes the stream upon return.\r\n    </summary>\r\n    <param name=\"peStream\">Assembly image.</param>\r\n    <param name=\"properties\">Reference properties (extern aliases, type embedding, <see cref=\"T:Microsoft.CodeAnalysis.MetadataImageKind\"/>).</param>\r\n    <param name=\"documentation\">Provides XML documentation for symbol found in the reference.</param>\r\n    <param name=\"filePath\">Optional path that describes the location of the metadata. The file doesn't need to exist on disk. The path is opaque to the compiler.</param>\r\n    <exception cref=\"T:System.ArgumentException\"><paramref name=\"peStream\"/> doesn't support read and seek operations.</exception>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"peStream\"/> is null.</exception>\r\n    <exception cref=\"T:System.IO.IOException\">An error occurred while reading the stream.</exception>\r\n    <remarks>\r\n    Performance considerations: \r\n    <para>\r\n    It is recommended to use <see cref=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.CreateFromStream(System.IO.Stream,System.Reflection.PortableExecutable.PEStreamOptions)\"/> or <see cref=\"M:Microsoft.CodeAnalysis.ModuleMetadata.CreateFromStream(System.IO.Stream,System.Reflection.PortableExecutable.PEStreamOptions)\"/> \r\n    API when creating multiple references to the same metadata.\r\n    Reusing <see cref=\"T:Microsoft.CodeAnalysis.Metadata\"/> object to create multiple references allows for sharing data accross these references.\r\n    </para> \r\n    <para>\r\n    The method eagerly reads the entire content of <paramref name=\"peStream\"/> into native heap. The native memory block is released \r\n    when the resulting reference becomes unreachable and GC collects it. To decrease memory footprint of the reference and/or manage\r\n    the lifetime deterministically use <see cref=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.CreateFromStream(System.IO.Stream,System.Reflection.PortableExecutable.PEStreamOptions)\"/> \r\n    to create an <see cref=\"T:System.IDisposable\"/> metadata object and \r\n    <see cref=\"M:Microsoft.CodeAnalysis.AssemblyMetadata.GetReference(Microsoft.CodeAnalysis.DocumentationProvider,System.Collections.Immutable.ImmutableArray{System.String},System.Boolean,System.String,System.String)\"/> to get a reference to it.\r\n    to get a reference to it.\r\n    </para>\r\n    </remarks>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{System.String} : aliases": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.MetadataReference": ""
                },
                "Content": "public MetadataReference WithAliases(IEnumerable<string> aliases)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.MetadataReference.WithAliases(System.Collections.Generic.IEnumerable{System.String})\">\r\n    <summary>\r\n    Returns an instance of the reference with specified aliases.\r\n    </summary>\r\n    <param name=\"aliases\">The new aliases for the reference.</param>\r\n    <exception cref=\"T:System.ArgumentException\">Alias is invalid for the metadata kind.</exception> \r\n</member>\r\n",
                "StartLine": 46
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{System.String} : aliases": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.MetadataReference": ""
                },
                "Content": "public MetadataReference WithAliases(IEnumerable<string> aliases)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.MetadataReference.WithAliases(System.Collections.Generic.IEnumerable{System.String})\">\r\n    <summary>\r\n    Returns an instance of the reference with specified aliases.\r\n    </summary>\r\n    <param name=\"aliases\">The new aliases for the reference.</param>\r\n    <exception cref=\"T:System.ArgumentException\">Alias is invalid for the metadata kind.</exception> \r\n</member>\r\n",
                "StartLine": 46
              },
              "Id": "M:Microsoft.CodeAnalysis.MetadataReference.WithAliases(System.Collections.Generic.IEnumerable{System.String})",
              "Parent": "T:Microsoft.CodeAnalysis.MetadataReference",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.MetadataReference.WithAliases(System.Collections.Generic.IEnumerable{System.String})\">\r\n    <summary>\r\n    Returns an instance of the reference with specified aliases.\r\n    </summary>\r\n    <param name=\"aliases\">The new aliases for the reference.</param>\r\n    <exception cref=\"T:System.ArgumentException\">Alias is invalid for the metadata kind.</exception> \r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Collections.Immutable.ImmutableArray{System.String} : aliases": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.MetadataReference": ""
                },
                "Content": "public MetadataReference WithAliases(ImmutableArray<string> aliases)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.MetadataReference.WithAliases(System.Collections.Immutable.ImmutableArray{System.String})\">\r\n    <summary>\r\n    Returns an instance of the reference with specified aliases.\r\n    </summary>\r\n    <param name=\"aliases\">The new aliases for the reference.</param>\r\n    <exception cref=\"T:System.ArgumentException\">Alias is invalid for the metadata kind.</exception> \r\n</member>\r\n",
                "StartLine": 66
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Collections.Immutable.ImmutableArray{System.String} : aliases": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.MetadataReference": ""
                },
                "Content": "public MetadataReference WithAliases(ImmutableArray<string> aliases)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.MetadataReference.WithAliases(System.Collections.Immutable.ImmutableArray{System.String})\">\r\n    <summary>\r\n    Returns an instance of the reference with specified aliases.\r\n    </summary>\r\n    <param name=\"aliases\">The new aliases for the reference.</param>\r\n    <exception cref=\"T:System.ArgumentException\">Alias is invalid for the metadata kind.</exception> \r\n</member>\r\n",
                "StartLine": 66
              },
              "Id": "M:Microsoft.CodeAnalysis.MetadataReference.WithAliases(System.Collections.Immutable.ImmutableArray{System.String})",
              "Parent": "T:Microsoft.CodeAnalysis.MetadataReference",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.MetadataReference.WithAliases(System.Collections.Immutable.ImmutableArray{System.String})\">\r\n    <summary>\r\n    Returns an instance of the reference with specified aliases.\r\n    </summary>\r\n    <param name=\"aliases\">The new aliases for the reference.</param>\r\n    <exception cref=\"T:System.ArgumentException\">Alias is invalid for the metadata kind.</exception> \r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Boolean : value": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.MetadataReference": ""
                },
                "Content": "public MetadataReference WithEmbedInteropTypes(bool value)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.MetadataReference.WithEmbedInteropTypes(System.Boolean)\">\r\n    <summary>\r\n    Returns an instance of the reference with specified interop types embedding.\r\n    </summary>\r\n    <param name=\"value\">The new value for <see cref=\"P:Microsoft.CodeAnalysis.MetadataReferenceProperties.EmbedInteropTypes\"/>.</param>\r\n    <exception cref=\"T:System.ArgumentException\">Interop types can't be embedded from modules.</exception> \r\n</member>\r\n",
                "StartLine": 56
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Boolean : value": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.MetadataReference": ""
                },
                "Content": "public MetadataReference WithEmbedInteropTypes(bool value)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.MetadataReference.WithEmbedInteropTypes(System.Boolean)\">\r\n    <summary>\r\n    Returns an instance of the reference with specified interop types embedding.\r\n    </summary>\r\n    <param name=\"value\">The new value for <see cref=\"P:Microsoft.CodeAnalysis.MetadataReferenceProperties.EmbedInteropTypes\"/>.</param>\r\n    <exception cref=\"T:System.ArgumentException\">Interop types can't be embedded from modules.</exception> \r\n</member>\r\n",
                "StartLine": 56
              },
              "Id": "M:Microsoft.CodeAnalysis.MetadataReference.WithEmbedInteropTypes(System.Boolean)",
              "Parent": "T:Microsoft.CodeAnalysis.MetadataReference",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.MetadataReference.WithEmbedInteropTypes(System.Boolean)\">\r\n    <summary>\r\n    Returns an instance of the reference with specified interop types embedding.\r\n    </summary>\r\n    <param name=\"value\">The new value for <see cref=\"P:Microsoft.CodeAnalysis.MetadataReferenceProperties.EmbedInteropTypes\"/>.</param>\r\n    <exception cref=\"T:System.ArgumentException\">Interop types can't be embedded from modules.</exception> \r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.MetadataReferenceProperties : properties": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.MetadataReference": ""
                },
                "Content": "public MetadataReference WithProperties(MetadataReferenceProperties properties)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.MetadataReference.WithProperties(Microsoft.CodeAnalysis.MetadataReferenceProperties)\">\r\n    <summary>\r\n    Returns an instance of the reference with specified properties, or this instance if properties haven't changed.\r\n    </summary>\r\n    <param name=\"properties\">The new properties for the reference.</param>\r\n    <exception cref=\"T:System.ArgumentException\">Specified values not valid for this reference.</exception>\r\n</member>\r\n",
                "StartLine": 76
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.MetadataReferenceProperties : properties": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.MetadataReference": ""
                },
                "Content": "public MetadataReference WithProperties(MetadataReferenceProperties properties)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.MetadataReference.WithProperties(Microsoft.CodeAnalysis.MetadataReferenceProperties)\">\r\n    <summary>\r\n    Returns an instance of the reference with specified properties, or this instance if properties haven't changed.\r\n    </summary>\r\n    <param name=\"properties\">The new properties for the reference.</param>\r\n    <exception cref=\"T:System.ArgumentException\">Specified values not valid for this reference.</exception>\r\n</member>\r\n",
                "StartLine": 76
              },
              "Id": "M:Microsoft.CodeAnalysis.MetadataReference.WithProperties(Microsoft.CodeAnalysis.MetadataReferenceProperties)",
              "Parent": "T:Microsoft.CodeAnalysis.MetadataReference",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.MetadataReference.WithProperties(Microsoft.CodeAnalysis.MetadataReferenceProperties)\">\r\n    <summary>\r\n    Returns an instance of the reference with specified properties, or this instance if properties haven't changed.\r\n    </summary>\r\n    <param name=\"properties\">The new properties for the reference.</param>\r\n    <exception cref=\"T:System.ArgumentException\">Specified values not valid for this reference.</exception>\r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:System.String",
                "Content": "public virtual string Display",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.MetadataReference.Display\">\r\n    <summary>\r\n    Path or name used in error messages to identity the reference.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 31
              },
              "Syntax": {
                "PropertyType": "T:System.String",
                "Content": "public virtual string Display",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.MetadataReference.Display\">\r\n    <summary>\r\n    Path or name used in error messages to identity the reference.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 31
              },
              "Id": "P:Microsoft.CodeAnalysis.MetadataReference.Display",
              "Parent": "T:Microsoft.CodeAnalysis.MetadataReference",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.MetadataReference.Display\">\r\n    <summary>\r\n    Path or name used in error messages to identity the reference.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.MetadataReferenceProperties",
                "Content": "public MetadataReferenceProperties Properties",
                "XmlDocumentation": "",
                "StartLine": 21
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.MetadataReferenceProperties",
                "Content": "public MetadataReferenceProperties Properties",
                "XmlDocumentation": "",
                "StartLine": 21
              },
              "Id": "P:Microsoft.CodeAnalysis.MetadataReference.Properties",
              "Parent": "T:Microsoft.CodeAnalysis.MetadataReference",
              "XmlDocumentation": ""
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\MetadataReference\\MetadataReference.cs",
          "InheritanceHierarchy": [
            "T:System.Object"
          ],
          "Syntax": {
            "Content": "public abstract class MetadataReference",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.MetadataReference\">\r\n    <summary>\r\n    Represents metadata image reference.\r\n    </summary>\r\n    <remarks>\r\n    Represents a logical location of the image, not the content of the image. \r\n    The content might change in time. A snapshot is taken when the compiler queries the reference for its metadata.\r\n    </remarks>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.MetadataReference",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.MetadataReference\">\r\n    <summary>\r\n    Represents metadata image reference.\r\n    </summary>\r\n    <remarks>\r\n    Represents a logical location of the image, not the content of the image. \r\n    The content might change in time. A snapshot is taken when the compiler queries the reference for its metadata.\r\n    </remarks>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Object : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public abstract override bool Equals(object other);",
                "XmlDocumentation": "",
                "StartLine": 11
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Object : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public abstract override bool Equals(object other);",
                "XmlDocumentation": "",
                "StartLine": 11
              },
              "Id": "M:Microsoft.CodeAnalysis.MetadataReferenceResolver.Equals(System.Object)",
              "Parent": "T:Microsoft.CodeAnalysis.MetadataReferenceResolver",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public abstract override int GetHashCode();",
                "XmlDocumentation": "",
                "StartLine": 12
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public abstract override int GetHashCode();",
                "XmlDocumentation": "",
                "StartLine": 12
              },
              "Id": "M:Microsoft.CodeAnalysis.MetadataReferenceResolver.GetHashCode",
              "Parent": "T:Microsoft.CodeAnalysis.MetadataReferenceResolver",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.MetadataReferenceProperties : properties": "",
                  "T:System.String : baseFilePath": "",
                  "T:System.String : reference": ""
                },
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.PortableExecutableReference}": ""
                },
                "Content": "public abstract ImmutableArray<PortableExecutableReference> ResolveReference(string reference, string baseFilePath, MetadataReferenceProperties properties);",
                "XmlDocumentation": "",
                "StartLine": 13
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.MetadataReferenceProperties : properties": "",
                  "T:System.String : baseFilePath": "",
                  "T:System.String : reference": ""
                },
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.PortableExecutableReference}": ""
                },
                "Content": "public abstract ImmutableArray<PortableExecutableReference> ResolveReference(string reference, string baseFilePath, MetadataReferenceProperties properties);",
                "XmlDocumentation": "",
                "StartLine": 13
              },
              "Id": "M:Microsoft.CodeAnalysis.MetadataReferenceResolver.ResolveReference(System.String,System.String,Microsoft.CodeAnalysis.MetadataReferenceProperties)",
              "Parent": "T:Microsoft.CodeAnalysis.MetadataReferenceResolver",
              "XmlDocumentation": ""
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\MetadataReference\\MetadataReferenceResolver.cs",
          "InheritanceHierarchy": [
            "T:System.Object"
          ],
          "Syntax": {
            "Content": "public abstract class MetadataReferenceResolver",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.MetadataReferenceResolver\">\r\n    <summary>\r\n    Resolves references to metadata specified in the source (#r directives).\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.MetadataReferenceResolver",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.MetadataReferenceResolver\">\r\n    <summary>\r\n    Resolves references to metadata specified in the source (#r directives).\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SemanticModel : semanticModel": "",
                  "T:Microsoft.CodeAnalysis.SyntaxNode : statement": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.ControlFlowAnalysis": ""
                },
                "Content": "public static ControlFlowAnalysis AnalyzeControlFlow(this SemanticModel semanticModel, SyntaxNode statement)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ModelExtensions.AnalyzeControlFlow(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.SyntaxNode)\">\r\n    <summary>\r\n    Analyze control-flow within a part of a method body. \r\n    </summary>\r\n</member>\r\n",
                "StartLine": 159
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SemanticModel : semanticModel": "",
                  "T:Microsoft.CodeAnalysis.SyntaxNode : statement": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.ControlFlowAnalysis": ""
                },
                "Content": "public static ControlFlowAnalysis AnalyzeControlFlow(this SemanticModel semanticModel, SyntaxNode statement)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ModelExtensions.AnalyzeControlFlow(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.SyntaxNode)\">\r\n    <summary>\r\n    Analyze control-flow within a part of a method body. \r\n    </summary>\r\n</member>\r\n",
                "StartLine": 159
              },
              "Id": "M:Microsoft.CodeAnalysis.ModelExtensions.AnalyzeControlFlow(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.SyntaxNode)",
              "Parent": "T:Microsoft.CodeAnalysis.ModelExtensions",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ModelExtensions.AnalyzeControlFlow(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.SyntaxNode)\">\r\n    <summary>\r\n    Analyze control-flow within a part of a method body. \r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SemanticModel : semanticModel": "",
                  "T:Microsoft.CodeAnalysis.SyntaxNode : firstStatement": "",
                  "T:Microsoft.CodeAnalysis.SyntaxNode : lastStatement": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.ControlFlowAnalysis": ""
                },
                "Content": "public static ControlFlowAnalysis AnalyzeControlFlow(this SemanticModel semanticModel, SyntaxNode firstStatement, SyntaxNode lastStatement)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ModelExtensions.AnalyzeControlFlow(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)\">\r\n    <summary>\r\n    Analyze control-flow within a part of a method body. \r\n    </summary>\r\n</member>\r\n",
                "StartLine": 151
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SemanticModel : semanticModel": "",
                  "T:Microsoft.CodeAnalysis.SyntaxNode : firstStatement": "",
                  "T:Microsoft.CodeAnalysis.SyntaxNode : lastStatement": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.ControlFlowAnalysis": ""
                },
                "Content": "public static ControlFlowAnalysis AnalyzeControlFlow(this SemanticModel semanticModel, SyntaxNode firstStatement, SyntaxNode lastStatement)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ModelExtensions.AnalyzeControlFlow(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)\">\r\n    <summary>\r\n    Analyze control-flow within a part of a method body. \r\n    </summary>\r\n</member>\r\n",
                "StartLine": 151
              },
              "Id": "M:Microsoft.CodeAnalysis.ModelExtensions.AnalyzeControlFlow(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)",
              "Parent": "T:Microsoft.CodeAnalysis.ModelExtensions",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ModelExtensions.AnalyzeControlFlow(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)\">\r\n    <summary>\r\n    Analyze control-flow within a part of a method body. \r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SemanticModel : semanticModel": "",
                  "T:Microsoft.CodeAnalysis.SyntaxNode : statementOrExpression": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.DataFlowAnalysis": ""
                },
                "Content": "public static DataFlowAnalysis AnalyzeDataFlow(this SemanticModel semanticModel, SyntaxNode statementOrExpression)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ModelExtensions.AnalyzeDataFlow(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.SyntaxNode)\">\r\n    <summary>\r\n    Analyze data-flow within a part of a method body. \r\n    </summary>\r\n</member>\r\n",
                "StartLine": 175
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SemanticModel : semanticModel": "",
                  "T:Microsoft.CodeAnalysis.SyntaxNode : statementOrExpression": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.DataFlowAnalysis": ""
                },
                "Content": "public static DataFlowAnalysis AnalyzeDataFlow(this SemanticModel semanticModel, SyntaxNode statementOrExpression)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ModelExtensions.AnalyzeDataFlow(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.SyntaxNode)\">\r\n    <summary>\r\n    Analyze data-flow within a part of a method body. \r\n    </summary>\r\n</member>\r\n",
                "StartLine": 175
              },
              "Id": "M:Microsoft.CodeAnalysis.ModelExtensions.AnalyzeDataFlow(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.SyntaxNode)",
              "Parent": "T:Microsoft.CodeAnalysis.ModelExtensions",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ModelExtensions.AnalyzeDataFlow(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.SyntaxNode)\">\r\n    <summary>\r\n    Analyze data-flow within a part of a method body. \r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SemanticModel : semanticModel": "",
                  "T:Microsoft.CodeAnalysis.SyntaxNode : firstStatement": "",
                  "T:Microsoft.CodeAnalysis.SyntaxNode : lastStatement": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.DataFlowAnalysis": ""
                },
                "Content": "public static DataFlowAnalysis AnalyzeDataFlow(this SemanticModel semanticModel, SyntaxNode firstStatement, SyntaxNode lastStatement)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ModelExtensions.AnalyzeDataFlow(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)\">\r\n    <summary>\r\n    Analyze data-flow within a part of a method body. \r\n    </summary>\r\n</member>\r\n",
                "StartLine": 167
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SemanticModel : semanticModel": "",
                  "T:Microsoft.CodeAnalysis.SyntaxNode : firstStatement": "",
                  "T:Microsoft.CodeAnalysis.SyntaxNode : lastStatement": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.DataFlowAnalysis": ""
                },
                "Content": "public static DataFlowAnalysis AnalyzeDataFlow(this SemanticModel semanticModel, SyntaxNode firstStatement, SyntaxNode lastStatement)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ModelExtensions.AnalyzeDataFlow(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)\">\r\n    <summary>\r\n    Analyze data-flow within a part of a method body. \r\n    </summary>\r\n</member>\r\n",
                "StartLine": 167
              },
              "Id": "M:Microsoft.CodeAnalysis.ModelExtensions.AnalyzeDataFlow(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)",
              "Parent": "T:Microsoft.CodeAnalysis.ModelExtensions",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ModelExtensions.AnalyzeDataFlow(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)\">\r\n    <summary>\r\n    Analyze data-flow within a part of a method body. \r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SemanticModel : semanticModel": "",
                  "T:Microsoft.CodeAnalysis.SyntaxNode : nameSyntax": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.IAliasSymbol": ""
                },
                "Content": "public static IAliasSymbol GetAliasInfo(this SemanticModel semanticModel, SyntaxNode nameSyntax, CancellationToken cancellationToken = default (CancellationToken))",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ModelExtensions.GetAliasInfo(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    If \"nameSyntax\" resolves to an alias name, return the IAliasSymbol corresponding\r\n    to A. Otherwise return null.\r\n    </summary>\r\n    <param name=\"semanticModel\"></param>\r\n    <param name=\"nameSyntax\">Name to get alias info for.</param>\r\n    <param name=\"cancellationToken\">A cancellation token that can be used to cancel the\r\n    process of obtaining the alias information.</param>\r\n</member>\r\n",
                "StartLine": 70
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SemanticModel : semanticModel": "",
                  "T:Microsoft.CodeAnalysis.SyntaxNode : nameSyntax": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.IAliasSymbol": ""
                },
                "Content": "public static IAliasSymbol GetAliasInfo(this SemanticModel semanticModel, SyntaxNode nameSyntax, CancellationToken cancellationToken = default (CancellationToken))",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ModelExtensions.GetAliasInfo(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    If \"nameSyntax\" resolves to an alias name, return the IAliasSymbol corresponding\r\n    to A. Otherwise return null.\r\n    </summary>\r\n    <param name=\"semanticModel\"></param>\r\n    <param name=\"nameSyntax\">Name to get alias info for.</param>\r\n    <param name=\"cancellationToken\">A cancellation token that can be used to cancel the\r\n    process of obtaining the alias information.</param>\r\n</member>\r\n",
                "StartLine": 70
              },
              "Id": "M:Microsoft.CodeAnalysis.ModelExtensions.GetAliasInfo(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)",
              "Parent": "T:Microsoft.CodeAnalysis.ModelExtensions",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ModelExtensions.GetAliasInfo(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    If \"nameSyntax\" resolves to an alias name, return the IAliasSymbol corresponding\r\n    to A. Otherwise return null.\r\n    </summary>\r\n    <param name=\"semanticModel\"></param>\r\n    <param name=\"nameSyntax\">Name to get alias info for.</param>\r\n    <param name=\"cancellationToken\">A cancellation token that can be used to cancel the\r\n    process of obtaining the alias information.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SemanticModel : semanticModel": "",
                  "T:Microsoft.CodeAnalysis.SyntaxNode : declaration": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.ISymbol": ""
                },
                "Content": "public static ISymbol GetDeclaredSymbol(this SemanticModel semanticModel, SyntaxNode declaration, CancellationToken cancellationToken = default (CancellationToken))",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ModelExtensions.GetDeclaredSymbol(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Gets the symbol associated with a declaration syntax node.\r\n    </summary>\r\n    <param name=\"semanticModel\"></param>\r\n    <param name=\"declaration\">A syntax node that is a declaration. This can be any type\r\n    derived from MemberDeclarationSyntax, TypeDeclarationSyntax, EnumDeclarationSyntax,\r\n    NamespaceDeclarationSyntax, ParameterSyntax, TypeParameterSyntax, or the alias part of a\r\n    UsingDirectiveSyntax</param>\r\n    <param name=\"cancellationToken\">The cancellation token.</param>\r\n    <returns>The symbol declared by the node or null if the node is not a declaration.</returns>\r\n</member>\r\n",
                "StartLine": 132
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SemanticModel : semanticModel": "",
                  "T:Microsoft.CodeAnalysis.SyntaxNode : declaration": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.ISymbol": ""
                },
                "Content": "public static ISymbol GetDeclaredSymbol(this SemanticModel semanticModel, SyntaxNode declaration, CancellationToken cancellationToken = default (CancellationToken))",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ModelExtensions.GetDeclaredSymbol(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Gets the symbol associated with a declaration syntax node.\r\n    </summary>\r\n    <param name=\"semanticModel\"></param>\r\n    <param name=\"declaration\">A syntax node that is a declaration. This can be any type\r\n    derived from MemberDeclarationSyntax, TypeDeclarationSyntax, EnumDeclarationSyntax,\r\n    NamespaceDeclarationSyntax, ParameterSyntax, TypeParameterSyntax, or the alias part of a\r\n    UsingDirectiveSyntax</param>\r\n    <param name=\"cancellationToken\">The cancellation token.</param>\r\n    <returns>The symbol declared by the node or null if the node is not a declaration.</returns>\r\n</member>\r\n",
                "StartLine": 132
              },
              "Id": "M:Microsoft.CodeAnalysis.ModelExtensions.GetDeclaredSymbol(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)",
              "Parent": "T:Microsoft.CodeAnalysis.ModelExtensions",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ModelExtensions.GetDeclaredSymbol(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Gets the symbol associated with a declaration syntax node.\r\n    </summary>\r\n    <param name=\"semanticModel\"></param>\r\n    <param name=\"declaration\">A syntax node that is a declaration. This can be any type\r\n    derived from MemberDeclarationSyntax, TypeDeclarationSyntax, EnumDeclarationSyntax,\r\n    NamespaceDeclarationSyntax, ParameterSyntax, TypeParameterSyntax, or the alias part of a\r\n    UsingDirectiveSyntax</param>\r\n    <param name=\"cancellationToken\">The cancellation token.</param>\r\n    <returns>The symbol declared by the node or null if the node is not a declaration.</returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SemanticModel : semanticModel": "",
                  "T:Microsoft.CodeAnalysis.SyntaxNode : node": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ISymbol}": ""
                },
                "Content": "public static ImmutableArray<ISymbol> GetMemberGroup(this SemanticModel semanticModel, SyntaxNode node, CancellationToken cancellationToken = default (CancellationToken))",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ModelExtensions.GetMemberGroup(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Gets a list of method or indexed property symbols for a syntax node.\r\n    </summary>\r\n    <param name=\"semanticModel\"></param>\r\n    <param name=\"node\">The syntax node to get semantic information for.</param>\r\n    <param name=\"cancellationToken\">The cancellation token.</param>\r\n</member>\r\n",
                "StartLine": 143
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SemanticModel : semanticModel": "",
                  "T:Microsoft.CodeAnalysis.SyntaxNode : node": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ISymbol}": ""
                },
                "Content": "public static ImmutableArray<ISymbol> GetMemberGroup(this SemanticModel semanticModel, SyntaxNode node, CancellationToken cancellationToken = default (CancellationToken))",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ModelExtensions.GetMemberGroup(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Gets a list of method or indexed property symbols for a syntax node.\r\n    </summary>\r\n    <param name=\"semanticModel\"></param>\r\n    <param name=\"node\">The syntax node to get semantic information for.</param>\r\n    <param name=\"cancellationToken\">The cancellation token.</param>\r\n</member>\r\n",
                "StartLine": 143
              },
              "Id": "M:Microsoft.CodeAnalysis.ModelExtensions.GetMemberGroup(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)",
              "Parent": "T:Microsoft.CodeAnalysis.ModelExtensions",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ModelExtensions.GetMemberGroup(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Gets a list of method or indexed property symbols for a syntax node.\r\n    </summary>\r\n    <param name=\"semanticModel\"></param>\r\n    <param name=\"node\">The syntax node to get semantic information for.</param>\r\n    <param name=\"cancellationToken\">The cancellation token.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SemanticModel : semanticModel": "",
                  "T:Microsoft.CodeAnalysis.SpeculativeBindingOption : bindingOption": "",
                  "T:Microsoft.CodeAnalysis.SyntaxNode : nameSyntax": "",
                  "T:System.Int32 : position": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.IAliasSymbol": ""
                },
                "Content": "public static IAliasSymbol GetSpeculativeAliasInfo(this SemanticModel semanticModel, int position, SyntaxNode nameSyntax, SpeculativeBindingOption bindingOption)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ModelExtensions.GetSpeculativeAliasInfo(Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SpeculativeBindingOption)\">\r\n    <summary>\r\n    Binds the name in the context of the specified location and sees if it resolves to an\r\n    alias name. If it does, return the AliasSymbol corresponding to it. Otherwise, return null.\r\n    </summary>\r\n    <param name=\"semanticModel\"></param>\r\n    <param name=\"position\">A character position used to identify a declaration scope and\r\n    accessibility. This character position must be within the FullSpan of the Root syntax\r\n    node in this SemanticModel.\r\n    </param>\r\n    <param name=\"nameSyntax\">A syntax node that represents a name. This syntax\r\n    node need not and typically does not appear in the source code referred to by the\r\n    SemanticModel instance.</param>\r\n    <param name=\"bindingOption\">Indicates whether to binding the name as a full expression,\r\n    or as a type or namespace. If SpeculativeBindingOption.BindAsTypeOrNamespace is supplied, then\r\n    expression should derive from TypeSyntax.</param>\r\n    <remarks>The passed in name is interpreted as a stand-alone name, as if it\r\n    appeared by itself somewhere within the scope that encloses \"position\".</remarks>\r\n</member>\r\n",
                "StartLine": 92
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SemanticModel : semanticModel": "",
                  "T:Microsoft.CodeAnalysis.SpeculativeBindingOption : bindingOption": "",
                  "T:Microsoft.CodeAnalysis.SyntaxNode : nameSyntax": "",
                  "T:System.Int32 : position": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.IAliasSymbol": ""
                },
                "Content": "public static IAliasSymbol GetSpeculativeAliasInfo(this SemanticModel semanticModel, int position, SyntaxNode nameSyntax, SpeculativeBindingOption bindingOption)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ModelExtensions.GetSpeculativeAliasInfo(Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SpeculativeBindingOption)\">\r\n    <summary>\r\n    Binds the name in the context of the specified location and sees if it resolves to an\r\n    alias name. If it does, return the AliasSymbol corresponding to it. Otherwise, return null.\r\n    </summary>\r\n    <param name=\"semanticModel\"></param>\r\n    <param name=\"position\">A character position used to identify a declaration scope and\r\n    accessibility. This character position must be within the FullSpan of the Root syntax\r\n    node in this SemanticModel.\r\n    </param>\r\n    <param name=\"nameSyntax\">A syntax node that represents a name. This syntax\r\n    node need not and typically does not appear in the source code referred to by the\r\n    SemanticModel instance.</param>\r\n    <param name=\"bindingOption\">Indicates whether to binding the name as a full expression,\r\n    or as a type or namespace. If SpeculativeBindingOption.BindAsTypeOrNamespace is supplied, then\r\n    expression should derive from TypeSyntax.</param>\r\n    <remarks>The passed in name is interpreted as a stand-alone name, as if it\r\n    appeared by itself somewhere within the scope that encloses \"position\".</remarks>\r\n</member>\r\n",
                "StartLine": 92
              },
              "Id": "M:Microsoft.CodeAnalysis.ModelExtensions.GetSpeculativeAliasInfo(Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SpeculativeBindingOption)",
              "Parent": "T:Microsoft.CodeAnalysis.ModelExtensions",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ModelExtensions.GetSpeculativeAliasInfo(Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SpeculativeBindingOption)\">\r\n    <summary>\r\n    Binds the name in the context of the specified location and sees if it resolves to an\r\n    alias name. If it does, return the AliasSymbol corresponding to it. Otherwise, return null.\r\n    </summary>\r\n    <param name=\"semanticModel\"></param>\r\n    <param name=\"position\">A character position used to identify a declaration scope and\r\n    accessibility. This character position must be within the FullSpan of the Root syntax\r\n    node in this SemanticModel.\r\n    </param>\r\n    <param name=\"nameSyntax\">A syntax node that represents a name. This syntax\r\n    node need not and typically does not appear in the source code referred to by the\r\n    SemanticModel instance.</param>\r\n    <param name=\"bindingOption\">Indicates whether to binding the name as a full expression,\r\n    or as a type or namespace. If SpeculativeBindingOption.BindAsTypeOrNamespace is supplied, then\r\n    expression should derive from TypeSyntax.</param>\r\n    <remarks>The passed in name is interpreted as a stand-alone name, as if it\r\n    appeared by itself somewhere within the scope that encloses \"position\".</remarks>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SemanticModel : semanticModel": "",
                  "T:Microsoft.CodeAnalysis.SpeculativeBindingOption : bindingOption": "",
                  "T:Microsoft.CodeAnalysis.SyntaxNode : expression": "",
                  "T:System.Int32 : position": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SymbolInfo": ""
                },
                "Content": "public static SymbolInfo GetSpeculativeSymbolInfo(this SemanticModel semanticModel, int position, SyntaxNode expression, SpeculativeBindingOption bindingOption)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ModelExtensions.GetSpeculativeSymbolInfo(Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SpeculativeBindingOption)\">\r\n    <summary>\r\n    Binds the node in the context of the specified location and get semantic information\r\n    such as type, symbols and diagnostics. This method is used to get semantic information\r\n    about an expression that did not actually appear in the source code.\r\n    </summary>\r\n    <param name=\"semanticModel\"></param>\r\n    <param name=\"position\">A character position used to identify a declaration scope and\r\n    accessibility. This character position must be within the FullSpan of the Root syntax\r\n    node in this SemanticModel.\r\n    </param>\r\n    <param name=\"expression\">A syntax node that represents a parsed expression. This syntax\r\n    node need not and typically does not appear in the source code referred to  SemanticModel\r\n    instance.</param>\r\n    <param name=\"bindingOption\">Indicates whether to binding the expression as a full expressions,\r\n    or as a type or namespace. If SpeculativeBindingOption.BindAsTypeOrNamespace is supplied, then\r\n    expression should derive from TypeSyntax.</param>\r\n    <returns>The semantic information for the topmost node of the expression.</returns>\r\n    <remarks>The passed in expression is interpreted as a stand-alone expression, as if it\r\n    appeared by itself somewhere within the scope that encloses \"position\".</remarks>\r\n</member>\r\n",
                "StartLine": 45
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SemanticModel : semanticModel": "",
                  "T:Microsoft.CodeAnalysis.SpeculativeBindingOption : bindingOption": "",
                  "T:Microsoft.CodeAnalysis.SyntaxNode : expression": "",
                  "T:System.Int32 : position": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SymbolInfo": ""
                },
                "Content": "public static SymbolInfo GetSpeculativeSymbolInfo(this SemanticModel semanticModel, int position, SyntaxNode expression, SpeculativeBindingOption bindingOption)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ModelExtensions.GetSpeculativeSymbolInfo(Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SpeculativeBindingOption)\">\r\n    <summary>\r\n    Binds the node in the context of the specified location and get semantic information\r\n    such as type, symbols and diagnostics. This method is used to get semantic information\r\n    about an expression that did not actually appear in the source code.\r\n    </summary>\r\n    <param name=\"semanticModel\"></param>\r\n    <param name=\"position\">A character position used to identify a declaration scope and\r\n    accessibility. This character position must be within the FullSpan of the Root syntax\r\n    node in this SemanticModel.\r\n    </param>\r\n    <param name=\"expression\">A syntax node that represents a parsed expression. This syntax\r\n    node need not and typically does not appear in the source code referred to  SemanticModel\r\n    instance.</param>\r\n    <param name=\"bindingOption\">Indicates whether to binding the expression as a full expressions,\r\n    or as a type or namespace. If SpeculativeBindingOption.BindAsTypeOrNamespace is supplied, then\r\n    expression should derive from TypeSyntax.</param>\r\n    <returns>The semantic information for the topmost node of the expression.</returns>\r\n    <remarks>The passed in expression is interpreted as a stand-alone expression, as if it\r\n    appeared by itself somewhere within the scope that encloses \"position\".</remarks>\r\n</member>\r\n",
                "StartLine": 45
              },
              "Id": "M:Microsoft.CodeAnalysis.ModelExtensions.GetSpeculativeSymbolInfo(Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SpeculativeBindingOption)",
              "Parent": "T:Microsoft.CodeAnalysis.ModelExtensions",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ModelExtensions.GetSpeculativeSymbolInfo(Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SpeculativeBindingOption)\">\r\n    <summary>\r\n    Binds the node in the context of the specified location and get semantic information\r\n    such as type, symbols and diagnostics. This method is used to get semantic information\r\n    about an expression that did not actually appear in the source code.\r\n    </summary>\r\n    <param name=\"semanticModel\"></param>\r\n    <param name=\"position\">A character position used to identify a declaration scope and\r\n    accessibility. This character position must be within the FullSpan of the Root syntax\r\n    node in this SemanticModel.\r\n    </param>\r\n    <param name=\"expression\">A syntax node that represents a parsed expression. This syntax\r\n    node need not and typically does not appear in the source code referred to  SemanticModel\r\n    instance.</param>\r\n    <param name=\"bindingOption\">Indicates whether to binding the expression as a full expressions,\r\n    or as a type or namespace. If SpeculativeBindingOption.BindAsTypeOrNamespace is supplied, then\r\n    expression should derive from TypeSyntax.</param>\r\n    <returns>The semantic information for the topmost node of the expression.</returns>\r\n    <remarks>The passed in expression is interpreted as a stand-alone expression, as if it\r\n    appeared by itself somewhere within the scope that encloses \"position\".</remarks>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SemanticModel : semanticModel": "",
                  "T:Microsoft.CodeAnalysis.SpeculativeBindingOption : bindingOption": "",
                  "T:Microsoft.CodeAnalysis.SyntaxNode : expression": "",
                  "T:System.Int32 : position": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.TypeInfo": ""
                },
                "Content": "public static TypeInfo GetSpeculativeTypeInfo(this SemanticModel semanticModel, int position, SyntaxNode expression, SpeculativeBindingOption bindingOption)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ModelExtensions.GetSpeculativeTypeInfo(Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SpeculativeBindingOption)\">\r\n    <summary>\r\n    Binds the node in the context of the specified location and get semantic information\r\n    such as type, symbols and diagnostics. This method is used to get semantic information\r\n    about an expression that did not actually appear in the source code.\r\n    </summary>\r\n    <param name=\"semanticModel\"></param>\r\n    <param name=\"position\">A character position used to identify a declaration scope and\r\n    accessibility. This character position must be within the FullSpan of the Root syntax\r\n    node in this SemanticModel.\r\n    </param>\r\n    <param name=\"expression\">A syntax node that represents a parsed expression. This syntax\r\n    node need not and typically does not appear in the source code referred to  SemanticModel\r\n    instance.</param>\r\n    <param name=\"bindingOption\">Indicates whether to binding the expression as a full expressions,\r\n    or as a type or namespace. If SpeculativeBindingOption.BindAsTypeOrNamespace is supplied, then\r\n    expression should derive from TypeSyntax.</param>\r\n    <returns>The semantic information for the topmost node of the expression.</returns>\r\n    <remarks>The passed in expression is interpreted as a stand-alone expression, as if it\r\n    appeared by itself somewhere within the scope that encloses \"position\".</remarks>\r\n</member>\r\n",
                "StartLine": 116
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SemanticModel : semanticModel": "",
                  "T:Microsoft.CodeAnalysis.SpeculativeBindingOption : bindingOption": "",
                  "T:Microsoft.CodeAnalysis.SyntaxNode : expression": "",
                  "T:System.Int32 : position": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.TypeInfo": ""
                },
                "Content": "public static TypeInfo GetSpeculativeTypeInfo(this SemanticModel semanticModel, int position, SyntaxNode expression, SpeculativeBindingOption bindingOption)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ModelExtensions.GetSpeculativeTypeInfo(Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SpeculativeBindingOption)\">\r\n    <summary>\r\n    Binds the node in the context of the specified location and get semantic information\r\n    such as type, symbols and diagnostics. This method is used to get semantic information\r\n    about an expression that did not actually appear in the source code.\r\n    </summary>\r\n    <param name=\"semanticModel\"></param>\r\n    <param name=\"position\">A character position used to identify a declaration scope and\r\n    accessibility. This character position must be within the FullSpan of the Root syntax\r\n    node in this SemanticModel.\r\n    </param>\r\n    <param name=\"expression\">A syntax node that represents a parsed expression. This syntax\r\n    node need not and typically does not appear in the source code referred to  SemanticModel\r\n    instance.</param>\r\n    <param name=\"bindingOption\">Indicates whether to binding the expression as a full expressions,\r\n    or as a type or namespace. If SpeculativeBindingOption.BindAsTypeOrNamespace is supplied, then\r\n    expression should derive from TypeSyntax.</param>\r\n    <returns>The semantic information for the topmost node of the expression.</returns>\r\n    <remarks>The passed in expression is interpreted as a stand-alone expression, as if it\r\n    appeared by itself somewhere within the scope that encloses \"position\".</remarks>\r\n</member>\r\n",
                "StartLine": 116
              },
              "Id": "M:Microsoft.CodeAnalysis.ModelExtensions.GetSpeculativeTypeInfo(Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SpeculativeBindingOption)",
              "Parent": "T:Microsoft.CodeAnalysis.ModelExtensions",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ModelExtensions.GetSpeculativeTypeInfo(Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SpeculativeBindingOption)\">\r\n    <summary>\r\n    Binds the node in the context of the specified location and get semantic information\r\n    such as type, symbols and diagnostics. This method is used to get semantic information\r\n    about an expression that did not actually appear in the source code.\r\n    </summary>\r\n    <param name=\"semanticModel\"></param>\r\n    <param name=\"position\">A character position used to identify a declaration scope and\r\n    accessibility. This character position must be within the FullSpan of the Root syntax\r\n    node in this SemanticModel.\r\n    </param>\r\n    <param name=\"expression\">A syntax node that represents a parsed expression. This syntax\r\n    node need not and typically does not appear in the source code referred to  SemanticModel\r\n    instance.</param>\r\n    <param name=\"bindingOption\">Indicates whether to binding the expression as a full expressions,\r\n    or as a type or namespace. If SpeculativeBindingOption.BindAsTypeOrNamespace is supplied, then\r\n    expression should derive from TypeSyntax.</param>\r\n    <returns>The semantic information for the topmost node of the expression.</returns>\r\n    <remarks>The passed in expression is interpreted as a stand-alone expression, as if it\r\n    appeared by itself somewhere within the scope that encloses \"position\".</remarks>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SemanticModel : semanticModel": "",
                  "T:Microsoft.CodeAnalysis.SyntaxNode : node": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SymbolInfo": ""
                },
                "Content": "public static SymbolInfo GetSymbolInfo(this SemanticModel semanticModel, SyntaxNode node, CancellationToken cancellationToken = default (CancellationToken))",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ModelExtensions.GetSymbolInfo(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Gets symbol information about a syntax node.\r\n    </summary>\r\n    <param name=\"semanticModel\"></param>\r\n    <param name=\"node\">The syntax node to get semantic information for.</param>\r\n    <param name=\"cancellationToken\">A cancellation token that can be used to cancel the\r\n    process of obtaining the semantic info.</param>\r\n</member>\r\n",
                "StartLine": 21
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SemanticModel : semanticModel": "",
                  "T:Microsoft.CodeAnalysis.SyntaxNode : node": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SymbolInfo": ""
                },
                "Content": "public static SymbolInfo GetSymbolInfo(this SemanticModel semanticModel, SyntaxNode node, CancellationToken cancellationToken = default (CancellationToken))",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ModelExtensions.GetSymbolInfo(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Gets symbol information about a syntax node.\r\n    </summary>\r\n    <param name=\"semanticModel\"></param>\r\n    <param name=\"node\">The syntax node to get semantic information for.</param>\r\n    <param name=\"cancellationToken\">A cancellation token that can be used to cancel the\r\n    process of obtaining the semantic info.</param>\r\n</member>\r\n",
                "StartLine": 21
              },
              "Id": "M:Microsoft.CodeAnalysis.ModelExtensions.GetSymbolInfo(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)",
              "Parent": "T:Microsoft.CodeAnalysis.ModelExtensions",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ModelExtensions.GetSymbolInfo(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Gets symbol information about a syntax node.\r\n    </summary>\r\n    <param name=\"semanticModel\"></param>\r\n    <param name=\"node\">The syntax node to get semantic information for.</param>\r\n    <param name=\"cancellationToken\">A cancellation token that can be used to cancel the\r\n    process of obtaining the semantic info.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SemanticModel : semanticModel": "",
                  "T:Microsoft.CodeAnalysis.SyntaxNode : node": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.TypeInfo": ""
                },
                "Content": "public static TypeInfo GetTypeInfo(this SemanticModel semanticModel, SyntaxNode node, CancellationToken cancellationToken = default (CancellationToken))",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ModelExtensions.GetTypeInfo(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Gets type information about a syntax node.\r\n    </summary>\r\n    <param name=\"semanticModel\"></param>\r\n    <param name=\"node\">The syntax node to get semantic information for.</param>\r\n    <param name=\"cancellationToken\">A cancellation token that can be used to cancel the\r\n    process of obtaining the semantic info.</param>\r\n</member>\r\n",
                "StartLine": 57
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SemanticModel : semanticModel": "",
                  "T:Microsoft.CodeAnalysis.SyntaxNode : node": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.TypeInfo": ""
                },
                "Content": "public static TypeInfo GetTypeInfo(this SemanticModel semanticModel, SyntaxNode node, CancellationToken cancellationToken = default (CancellationToken))",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ModelExtensions.GetTypeInfo(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Gets type information about a syntax node.\r\n    </summary>\r\n    <param name=\"semanticModel\"></param>\r\n    <param name=\"node\">The syntax node to get semantic information for.</param>\r\n    <param name=\"cancellationToken\">A cancellation token that can be used to cancel the\r\n    process of obtaining the semantic info.</param>\r\n</member>\r\n",
                "StartLine": 57
              },
              "Id": "M:Microsoft.CodeAnalysis.ModelExtensions.GetTypeInfo(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)",
              "Parent": "T:Microsoft.CodeAnalysis.ModelExtensions",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ModelExtensions.GetTypeInfo(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Gets type information about a syntax node.\r\n    </summary>\r\n    <param name=\"semanticModel\"></param>\r\n    <param name=\"node\">The syntax node to get semantic information for.</param>\r\n    <param name=\"cancellationToken\">A cancellation token that can be used to cancel the\r\n    process of obtaining the semantic info.</param>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Compilation\\Extensions.cs",
          "InheritanceHierarchy": [
            "T:System.Object"
          ],
          "Syntax": {
            "Content": "public static class ModelExtensions",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.CodeAnalysis.ModelExtensions",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Metadata": ""
                },
                "Content": "protected override Metadata CommonCopy()",
                "XmlDocumentation": "",
                "StartLine": 206
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Metadata": ""
                },
                "Content": "protected override Metadata CommonCopy()",
                "XmlDocumentation": "",
                "StartLine": 206
              },
              "Id": "M:Microsoft.CodeAnalysis.ModuleMetadata.CommonCopy",
              "Parent": "T:Microsoft.CodeAnalysis.ModuleMetadata",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.String : path": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.ModuleMetadata": ""
                },
                "Content": "public static ModuleMetadata CreateFromFile(string path)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ModuleMetadata.CreateFromFile(System.String)\">\r\n    <summary>\r\n    Creates metadata module from a file containing a portable executable image.\r\n    </summary>\r\n    <param name=\"path\">File path.</param>\r\n    <remarks>\r\n    The file might remain mapped (and read-locked) until this object is disposed.\r\n    The memory map is only created for large files. Small files are read into memory.\r\n    </remarks>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"path\"/> is null.</exception>\r\n    <exception cref=\"T:System.ArgumentException\"><paramref name=\"path\"/> is invalid.</exception>\r\n    <exception cref=\"T:System.IO.IOException\">Error opening file <paramref name=\"path\"/>. See <see cref=\"P:System.Exception.InnerException\"/> for details.</exception>\r\n    <exception cref=\"T:System.IO.FileNotFoundException\">File <paramref name=\"path\"/> not found.</exception>\r\n    <exception cref=\"T:System.NotSupportedException\">Reading from a file path is not supported by the platform.</exception>\r\n</member>\r\n",
                "StartLine": 186
              },
              "Syntax": {
                "Parameters": {
                  "T:System.String : path": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.ModuleMetadata": ""
                },
                "Content": "public static ModuleMetadata CreateFromFile(string path)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ModuleMetadata.CreateFromFile(System.String)\">\r\n    <summary>\r\n    Creates metadata module from a file containing a portable executable image.\r\n    </summary>\r\n    <param name=\"path\">File path.</param>\r\n    <remarks>\r\n    The file might remain mapped (and read-locked) until this object is disposed.\r\n    The memory map is only created for large files. Small files are read into memory.\r\n    </remarks>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"path\"/> is null.</exception>\r\n    <exception cref=\"T:System.ArgumentException\"><paramref name=\"path\"/> is invalid.</exception>\r\n    <exception cref=\"T:System.IO.IOException\">Error opening file <paramref name=\"path\"/>. See <see cref=\"P:System.Exception.InnerException\"/> for details.</exception>\r\n    <exception cref=\"T:System.IO.FileNotFoundException\">File <paramref name=\"path\"/> not found.</exception>\r\n    <exception cref=\"T:System.NotSupportedException\">Reading from a file path is not supported by the platform.</exception>\r\n</member>\r\n",
                "StartLine": 186
              },
              "Id": "M:Microsoft.CodeAnalysis.ModuleMetadata.CreateFromFile(System.String)",
              "Parent": "T:Microsoft.CodeAnalysis.ModuleMetadata",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ModuleMetadata.CreateFromFile(System.String)\">\r\n    <summary>\r\n    Creates metadata module from a file containing a portable executable image.\r\n    </summary>\r\n    <param name=\"path\">File path.</param>\r\n    <remarks>\r\n    The file might remain mapped (and read-locked) until this object is disposed.\r\n    The memory map is only created for large files. Small files are read into memory.\r\n    </remarks>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"path\"/> is null.</exception>\r\n    <exception cref=\"T:System.ArgumentException\"><paramref name=\"path\"/> is invalid.</exception>\r\n    <exception cref=\"T:System.IO.IOException\">Error opening file <paramref name=\"path\"/>. See <see cref=\"P:System.Exception.InnerException\"/> for details.</exception>\r\n    <exception cref=\"T:System.IO.FileNotFoundException\">File <paramref name=\"path\"/> not found.</exception>\r\n    <exception cref=\"T:System.NotSupportedException\">Reading from a file path is not supported by the platform.</exception>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{System.Byte} : peImage": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.ModuleMetadata": ""
                },
                "Content": "public static ModuleMetadata CreateFromImage(IEnumerable<byte> peImage)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ModuleMetadata.CreateFromImage(System.Collections.Generic.IEnumerable{System.Byte})\">\r\n    <summary>\r\n    Create metadata module from a sequence of bytes.\r\n    </summary>\r\n    <param name=\"peImage\">The portable executable image beginning with the DOS header (\"MZ\").</param>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"peImage\"/> is null.</exception>\r\n</member>\r\n",
                "StartLine": 99
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{System.Byte} : peImage": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.ModuleMetadata": ""
                },
                "Content": "public static ModuleMetadata CreateFromImage(IEnumerable<byte> peImage)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ModuleMetadata.CreateFromImage(System.Collections.Generic.IEnumerable{System.Byte})\">\r\n    <summary>\r\n    Create metadata module from a sequence of bytes.\r\n    </summary>\r\n    <param name=\"peImage\">The portable executable image beginning with the DOS header (\"MZ\").</param>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"peImage\"/> is null.</exception>\r\n</member>\r\n",
                "StartLine": 99
              },
              "Id": "M:Microsoft.CodeAnalysis.ModuleMetadata.CreateFromImage(System.Collections.Generic.IEnumerable{System.Byte})",
              "Parent": "T:Microsoft.CodeAnalysis.ModuleMetadata",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ModuleMetadata.CreateFromImage(System.Collections.Generic.IEnumerable{System.Byte})\">\r\n    <summary>\r\n    Create metadata module from a sequence of bytes.\r\n    </summary>\r\n    <param name=\"peImage\">The portable executable image beginning with the DOS header (\"MZ\").</param>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"peImage\"/> is null.</exception>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Collections.Immutable.ImmutableArray{System.Byte} : peImage": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.ModuleMetadata": ""
                },
                "Content": "public static ModuleMetadata CreateFromImage(ImmutableArray<byte> peImage)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ModuleMetadata.CreateFromImage(System.Collections.Immutable.ImmutableArray{System.Byte})\">\r\n    <summary>\r\n    Create metadata module from a byte array.\r\n    </summary>\r\n    <param name=\"peImage\">Portable executable image beginning with the DOS header (\"MZ\").</param>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"peImage\"/> is null.</exception>\r\n</member>\r\n",
                "StartLine": 114
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Collections.Immutable.ImmutableArray{System.Byte} : peImage": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.ModuleMetadata": ""
                },
                "Content": "public static ModuleMetadata CreateFromImage(ImmutableArray<byte> peImage)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ModuleMetadata.CreateFromImage(System.Collections.Immutable.ImmutableArray{System.Byte})\">\r\n    <summary>\r\n    Create metadata module from a byte array.\r\n    </summary>\r\n    <param name=\"peImage\">Portable executable image beginning with the DOS header (\"MZ\").</param>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"peImage\"/> is null.</exception>\r\n</member>\r\n",
                "StartLine": 114
              },
              "Id": "M:Microsoft.CodeAnalysis.ModuleMetadata.CreateFromImage(System.Collections.Immutable.ImmutableArray{System.Byte})",
              "Parent": "T:Microsoft.CodeAnalysis.ModuleMetadata",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ModuleMetadata.CreateFromImage(System.Collections.Immutable.ImmutableArray{System.Byte})\">\r\n    <summary>\r\n    Create metadata module from a byte array.\r\n    </summary>\r\n    <param name=\"peImage\">Portable executable image beginning with the DOS header (\"MZ\").</param>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"peImage\"/> is null.</exception>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Int32 : size": "",
                  "T:System.IntPtr : peImage": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.ModuleMetadata": ""
                },
                "Content": "public static unsafe ModuleMetadata CreateFromImage(IntPtr peImage, int size)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ModuleMetadata.CreateFromImage(System.IntPtr,System.Int32)\">\r\n    <summary>\r\n    Create metadata module from a raw memory pointer to a PE image or an object file.\r\n    </summary>\r\n    <param name=\"peImage\">Pointer to the DOS header (\"MZ\") of a portable executable image.</param>\r\n    <param name=\"size\">The size of the image pointed to by <paramref name=\"peImage\"/>.</param>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"peImage\"/> is null.</exception>\r\n    <exception cref=\"T:System.ArgumentOutOfRangeException\"><paramref name=\"size\"/> is not positive.</exception>\r\n</member>\r\n",
                "StartLine": 79
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Int32 : size": "",
                  "T:System.IntPtr : peImage": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.ModuleMetadata": ""
                },
                "Content": "public static unsafe ModuleMetadata CreateFromImage(IntPtr peImage, int size)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ModuleMetadata.CreateFromImage(System.IntPtr,System.Int32)\">\r\n    <summary>\r\n    Create metadata module from a raw memory pointer to a PE image or an object file.\r\n    </summary>\r\n    <param name=\"peImage\">Pointer to the DOS header (\"MZ\") of a portable executable image.</param>\r\n    <param name=\"size\">The size of the image pointed to by <paramref name=\"peImage\"/>.</param>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"peImage\"/> is null.</exception>\r\n    <exception cref=\"T:System.ArgumentOutOfRangeException\"><paramref name=\"size\"/> is not positive.</exception>\r\n</member>\r\n",
                "StartLine": 79
              },
              "Id": "M:Microsoft.CodeAnalysis.ModuleMetadata.CreateFromImage(System.IntPtr,System.Int32)",
              "Parent": "T:Microsoft.CodeAnalysis.ModuleMetadata",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ModuleMetadata.CreateFromImage(System.IntPtr,System.Int32)\">\r\n    <summary>\r\n    Create metadata module from a raw memory pointer to a PE image or an object file.\r\n    </summary>\r\n    <param name=\"peImage\">Pointer to the DOS header (\"MZ\") of a portable executable image.</param>\r\n    <param name=\"size\">The size of the image pointed to by <paramref name=\"peImage\"/>.</param>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"peImage\"/> is null.</exception>\r\n    <exception cref=\"T:System.ArgumentOutOfRangeException\"><paramref name=\"size\"/> is not positive.</exception>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Int32 : size": "",
                  "T:System.IntPtr : metadata": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.ModuleMetadata": ""
                },
                "Content": "public static ModuleMetadata CreateFromMetadata(IntPtr metadata, int size)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ModuleMetadata.CreateFromMetadata(System.IntPtr,System.Int32)\">\r\n    <summary>\r\n    Create metadata module from a raw memory pointer to metadata directory of a PE image or .cormeta section of an object file.\r\n    Only manifest modules are currently supported.\r\n    </summary>\r\n    <param name=\"metadata\">Pointer to the start of metadata block.</param>\r\n    <param name=\"size\">The size of the metadata block.</param>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"metadata\"/> is null.</exception>\r\n    <exception cref=\"T:System.ArgumentOutOfRangeException\"><paramref name=\"size\"/> is not positive.</exception>\r\n</member>\r\n",
                "StartLine": 50
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Int32 : size": "",
                  "T:System.IntPtr : metadata": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.ModuleMetadata": ""
                },
                "Content": "public static ModuleMetadata CreateFromMetadata(IntPtr metadata, int size)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ModuleMetadata.CreateFromMetadata(System.IntPtr,System.Int32)\">\r\n    <summary>\r\n    Create metadata module from a raw memory pointer to metadata directory of a PE image or .cormeta section of an object file.\r\n    Only manifest modules are currently supported.\r\n    </summary>\r\n    <param name=\"metadata\">Pointer to the start of metadata block.</param>\r\n    <param name=\"size\">The size of the metadata block.</param>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"metadata\"/> is null.</exception>\r\n    <exception cref=\"T:System.ArgumentOutOfRangeException\"><paramref name=\"size\"/> is not positive.</exception>\r\n</member>\r\n",
                "StartLine": 50
              },
              "Id": "M:Microsoft.CodeAnalysis.ModuleMetadata.CreateFromMetadata(System.IntPtr,System.Int32)",
              "Parent": "T:Microsoft.CodeAnalysis.ModuleMetadata",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ModuleMetadata.CreateFromMetadata(System.IntPtr,System.Int32)\">\r\n    <summary>\r\n    Create metadata module from a raw memory pointer to metadata directory of a PE image or .cormeta section of an object file.\r\n    Only manifest modules are currently supported.\r\n    </summary>\r\n    <param name=\"metadata\">Pointer to the start of metadata block.</param>\r\n    <param name=\"size\">The size of the metadata block.</param>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"metadata\"/> is null.</exception>\r\n    <exception cref=\"T:System.ArgumentOutOfRangeException\"><paramref name=\"size\"/> is not positive.</exception>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Boolean : leaveOpen": "",
                  "T:System.IO.Stream : peStream": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.ModuleMetadata": ""
                },
                "Content": "public static ModuleMetadata CreateFromStream(Stream peStream, bool leaveOpen = false)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ModuleMetadata.CreateFromStream(System.IO.Stream,System.Boolean)\">\r\n    <summary>\r\n    Create metadata module from a stream.\r\n    </summary>\r\n    <param name=\"peStream\">Stream containing portable executable image. Position zero should contain the first byte of the DOS header (\"MZ\").</param>\r\n    <param name=\"leaveOpen\">\r\n    False to close the stream upon disposal of the metadata (the responsibility for disposal of the stream is transferred upon entry of the constructor\r\n    unless the arguments given are invalid).\r\n    </param>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"peStream\"/> is null.</exception>\r\n    <exception cref=\"T:System.ArgumentException\">The stream doesn't support seek operations.</exception>\r\n</member>\r\n",
                "StartLine": 134
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Boolean : leaveOpen": "",
                  "T:System.IO.Stream : peStream": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.ModuleMetadata": ""
                },
                "Content": "public static ModuleMetadata CreateFromStream(Stream peStream, bool leaveOpen = false)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ModuleMetadata.CreateFromStream(System.IO.Stream,System.Boolean)\">\r\n    <summary>\r\n    Create metadata module from a stream.\r\n    </summary>\r\n    <param name=\"peStream\">Stream containing portable executable image. Position zero should contain the first byte of the DOS header (\"MZ\").</param>\r\n    <param name=\"leaveOpen\">\r\n    False to close the stream upon disposal of the metadata (the responsibility for disposal of the stream is transferred upon entry of the constructor\r\n    unless the arguments given are invalid).\r\n    </param>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"peStream\"/> is null.</exception>\r\n    <exception cref=\"T:System.ArgumentException\">The stream doesn't support seek operations.</exception>\r\n</member>\r\n",
                "StartLine": 134
              },
              "Id": "M:Microsoft.CodeAnalysis.ModuleMetadata.CreateFromStream(System.IO.Stream,System.Boolean)",
              "Parent": "T:Microsoft.CodeAnalysis.ModuleMetadata",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ModuleMetadata.CreateFromStream(System.IO.Stream,System.Boolean)\">\r\n    <summary>\r\n    Create metadata module from a stream.\r\n    </summary>\r\n    <param name=\"peStream\">Stream containing portable executable image. Position zero should contain the first byte of the DOS header (\"MZ\").</param>\r\n    <param name=\"leaveOpen\">\r\n    False to close the stream upon disposal of the metadata (the responsibility for disposal of the stream is transferred upon entry of the constructor\r\n    unless the arguments given are invalid).\r\n    </param>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"peStream\"/> is null.</exception>\r\n    <exception cref=\"T:System.ArgumentException\">The stream doesn't support seek operations.</exception>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.IO.Stream : peStream": "",
                  "T:System.Reflection.PortableExecutable.PEStreamOptions : options": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.ModuleMetadata": ""
                },
                "Content": "public static ModuleMetadata CreateFromStream(Stream peStream, PEStreamOptions options)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ModuleMetadata.CreateFromStream(System.IO.Stream,System.Reflection.PortableExecutable.PEStreamOptions)\">\r\n    <summary>\r\n    Create metadata module from a stream.\r\n    </summary>\r\n    <param name=\"peStream\">Stream containing portable executable image. Position zero should contain the first byte of the DOS header (\"MZ\").</param>\r\n    <param name=\"options\">\r\n    Options specifying how sections of the PE image are read from the stream.\r\n    Unless <see cref=\"F:System.Reflection.PortableExecutable.PEStreamOptions.LeaveOpen\"/> is specified, the responsibility for disposal of the stream is transferred upon entry of the constructor\r\n    unless the arguments given are invalid.\r\n    </param>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"peStream\"/> is null.</exception>\r\n    <exception cref=\"T:System.ArgumentException\">The stream doesn't support read and seek operations.</exception>\r\n    <exception cref=\"T:System.ArgumentOutOfRangeException\"><paramref name=\"options\"/> has an invalid value.</exception>\r\n    <exception cref=\"T:System.BadImageFormatException\">\r\n    <see cref=\"F:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata\"/> or <see cref=\"F:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchEntireImage\"/> is specified and the PE headers of the image are invalid.\r\n    </exception>\r\n    <exception cref=\"T:System.IO.IOException\">\r\n    <see cref=\"F:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata\"/> or <see cref=\"F:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchEntireImage\"/> is specified and an error occurs while reading the stream.\r\n    </exception>\r\n</member>\r\n",
                "StartLine": 157
              },
              "Syntax": {
                "Parameters": {
                  "T:System.IO.Stream : peStream": "",
                  "T:System.Reflection.PortableExecutable.PEStreamOptions : options": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.ModuleMetadata": ""
                },
                "Content": "public static ModuleMetadata CreateFromStream(Stream peStream, PEStreamOptions options)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ModuleMetadata.CreateFromStream(System.IO.Stream,System.Reflection.PortableExecutable.PEStreamOptions)\">\r\n    <summary>\r\n    Create metadata module from a stream.\r\n    </summary>\r\n    <param name=\"peStream\">Stream containing portable executable image. Position zero should contain the first byte of the DOS header (\"MZ\").</param>\r\n    <param name=\"options\">\r\n    Options specifying how sections of the PE image are read from the stream.\r\n    Unless <see cref=\"F:System.Reflection.PortableExecutable.PEStreamOptions.LeaveOpen\"/> is specified, the responsibility for disposal of the stream is transferred upon entry of the constructor\r\n    unless the arguments given are invalid.\r\n    </param>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"peStream\"/> is null.</exception>\r\n    <exception cref=\"T:System.ArgumentException\">The stream doesn't support read and seek operations.</exception>\r\n    <exception cref=\"T:System.ArgumentOutOfRangeException\"><paramref name=\"options\"/> has an invalid value.</exception>\r\n    <exception cref=\"T:System.BadImageFormatException\">\r\n    <see cref=\"F:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata\"/> or <see cref=\"F:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchEntireImage\"/> is specified and the PE headers of the image are invalid.\r\n    </exception>\r\n    <exception cref=\"T:System.IO.IOException\">\r\n    <see cref=\"F:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata\"/> or <see cref=\"F:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchEntireImage\"/> is specified and an error occurs while reading the stream.\r\n    </exception>\r\n</member>\r\n",
                "StartLine": 157
              },
              "Id": "M:Microsoft.CodeAnalysis.ModuleMetadata.CreateFromStream(System.IO.Stream,System.Reflection.PortableExecutable.PEStreamOptions)",
              "Parent": "T:Microsoft.CodeAnalysis.ModuleMetadata",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ModuleMetadata.CreateFromStream(System.IO.Stream,System.Reflection.PortableExecutable.PEStreamOptions)\">\r\n    <summary>\r\n    Create metadata module from a stream.\r\n    </summary>\r\n    <param name=\"peStream\">Stream containing portable executable image. Position zero should contain the first byte of the DOS header (\"MZ\").</param>\r\n    <param name=\"options\">\r\n    Options specifying how sections of the PE image are read from the stream.\r\n    Unless <see cref=\"F:System.Reflection.PortableExecutable.PEStreamOptions.LeaveOpen\"/> is specified, the responsibility for disposal of the stream is transferred upon entry of the constructor\r\n    unless the arguments given are invalid.\r\n    </param>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"peStream\"/> is null.</exception>\r\n    <exception cref=\"T:System.ArgumentException\">The stream doesn't support read and seek operations.</exception>\r\n    <exception cref=\"T:System.ArgumentOutOfRangeException\"><paramref name=\"options\"/> has an invalid value.</exception>\r\n    <exception cref=\"T:System.BadImageFormatException\">\r\n    <see cref=\"F:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata\"/> or <see cref=\"F:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchEntireImage\"/> is specified and the PE headers of the image are invalid.\r\n    </exception>\r\n    <exception cref=\"T:System.IO.IOException\">\r\n    <see cref=\"F:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata\"/> or <see cref=\"F:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchEntireImage\"/> is specified and an error occurs while reading the stream.\r\n    </exception>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public override void Dispose()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ModuleMetadata.Dispose\">\r\n    <summary>\r\n    Frees memory and handles allocated for the module.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 214
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public override void Dispose()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ModuleMetadata.Dispose\">\r\n    <summary>\r\n    Frees memory and handles allocated for the module.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 214
              },
              "Id": "M:Microsoft.CodeAnalysis.ModuleMetadata.Dispose",
              "Parent": "T:Microsoft.CodeAnalysis.ModuleMetadata",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ModuleMetadata.Dispose\">\r\n    <summary>\r\n    Frees memory and handles allocated for the module.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{System.String}": ""
                },
                "Content": "public ImmutableArray<string> GetModuleNames()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ModuleMetadata.GetModuleNames\">\r\n    <summary>\r\n    Returns the file names of linked managed modules.\r\n    </summary>\r\n    <exception cref=\"T:System.BadImageFormatException\">When an invalid module name is encountered.</exception>\r\n    <exception cref=\"T:System.ObjectDisposedException\">Module has been disposed.</exception>\r\n</member>\r\n",
                "StartLine": 275
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{System.String}": ""
                },
                "Content": "public ImmutableArray<string> GetModuleNames()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ModuleMetadata.GetModuleNames\">\r\n    <summary>\r\n    Returns the file names of linked managed modules.\r\n    </summary>\r\n    <exception cref=\"T:System.BadImageFormatException\">When an invalid module name is encountered.</exception>\r\n    <exception cref=\"T:System.ObjectDisposedException\">Module has been disposed.</exception>\r\n</member>\r\n",
                "StartLine": 275
              },
              "Id": "M:Microsoft.CodeAnalysis.ModuleMetadata.GetModuleNames",
              "Parent": "T:Microsoft.CodeAnalysis.ModuleMetadata",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ModuleMetadata.GetModuleNames\">\r\n    <summary>\r\n    Returns the file names of linked managed modules.\r\n    </summary>\r\n    <exception cref=\"T:System.BadImageFormatException\">When an invalid module name is encountered.</exception>\r\n    <exception cref=\"T:System.ObjectDisposedException\">Module has been disposed.</exception>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Guid": ""
                },
                "Content": "public Guid GetModuleVersionId()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ModuleMetadata.GetModuleVersionId\">\r\n    <summary>\r\n    Version of the module content.\r\n    </summary>\r\n    <exception cref=\"T:System.BadImageFormatException\">Invalid metadata.</exception>\r\n    <exception cref=\"T:System.ObjectDisposedException\">Module has been disposed.</exception>\r\n</member>\r\n",
                "StartLine": 257
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Guid": ""
                },
                "Content": "public Guid GetModuleVersionId()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ModuleMetadata.GetModuleVersionId\">\r\n    <summary>\r\n    Version of the module content.\r\n    </summary>\r\n    <exception cref=\"T:System.BadImageFormatException\">Invalid metadata.</exception>\r\n    <exception cref=\"T:System.ObjectDisposedException\">Module has been disposed.</exception>\r\n</member>\r\n",
                "StartLine": 257
              },
              "Id": "M:Microsoft.CodeAnalysis.ModuleMetadata.GetModuleVersionId",
              "Parent": "T:Microsoft.CodeAnalysis.ModuleMetadata",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ModuleMetadata.GetModuleVersionId\">\r\n    <summary>\r\n    Version of the module content.\r\n    </summary>\r\n    <exception cref=\"T:System.BadImageFormatException\">Invalid metadata.</exception>\r\n    <exception cref=\"T:System.ObjectDisposedException\">Module has been disposed.</exception>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.DocumentationProvider : documentation": "",
                  "T:System.String : display": "",
                  "T:System.String : filePath": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.PortableExecutableReference": ""
                },
                "Content": "public PortableExecutableReference GetReference(DocumentationProvider documentation = null, string filePath = null, string display = null)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ModuleMetadata.GetReference(Microsoft.CodeAnalysis.DocumentationProvider,System.String,System.String)\">\r\n    <summary>\r\n    Creates a reference to the module metadata.\r\n    </summary>\r\n    <param name=\"documentation\">Provider of XML documentation comments for the metadata symbols contained in the module.</param>\r\n    <param name=\"filePath\">Path describing the location of the metadata, or null if the metadata have no location.</param>\r\n    <param name=\"display\">Display string used in error messages to identity the reference.</param>\r\n    <returns>A reference to the module metadata.</returns>\r\n</member>\r\n",
                "StartLine": 297
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.DocumentationProvider : documentation": "",
                  "T:System.String : display": "",
                  "T:System.String : filePath": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.PortableExecutableReference": ""
                },
                "Content": "public PortableExecutableReference GetReference(DocumentationProvider documentation = null, string filePath = null, string display = null)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ModuleMetadata.GetReference(Microsoft.CodeAnalysis.DocumentationProvider,System.String,System.String)\">\r\n    <summary>\r\n    Creates a reference to the module metadata.\r\n    </summary>\r\n    <param name=\"documentation\">Provider of XML documentation comments for the metadata symbols contained in the module.</param>\r\n    <param name=\"filePath\">Path describing the location of the metadata, or null if the metadata have no location.</param>\r\n    <param name=\"display\">Display string used in error messages to identity the reference.</param>\r\n    <returns>A reference to the module metadata.</returns>\r\n</member>\r\n",
                "StartLine": 297
              },
              "Id": "M:Microsoft.CodeAnalysis.ModuleMetadata.GetReference(Microsoft.CodeAnalysis.DocumentationProvider,System.String,System.String)",
              "Parent": "T:Microsoft.CodeAnalysis.ModuleMetadata",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ModuleMetadata.GetReference(Microsoft.CodeAnalysis.DocumentationProvider,System.String,System.String)\">\r\n    <summary>\r\n    Creates a reference to the module metadata.\r\n    </summary>\r\n    <param name=\"documentation\">Provider of XML documentation comments for the metadata symbols contained in the module.</param>\r\n    <param name=\"filePath\">Path describing the location of the metadata, or null if the metadata have no location.</param>\r\n    <param name=\"display\">Display string used in error messages to identity the reference.</param>\r\n    <returns>A reference to the module metadata.</returns>\r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.MetadataImageKind",
                "Content": "public override MetadataImageKind Kind",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ModuleMetadata.Kind\">\r\n    <summary>\r\n    Returns the <see cref=\"T:Microsoft.CodeAnalysis.MetadataImageKind\"/> for this instance.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 265
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.MetadataImageKind",
                "Content": "public override MetadataImageKind Kind",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ModuleMetadata.Kind\">\r\n    <summary>\r\n    Returns the <see cref=\"T:Microsoft.CodeAnalysis.MetadataImageKind\"/> for this instance.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 265
              },
              "Id": "P:Microsoft.CodeAnalysis.ModuleMetadata.Kind",
              "Parent": "T:Microsoft.CodeAnalysis.ModuleMetadata",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ModuleMetadata.Kind\">\r\n    <summary>\r\n    Returns the <see cref=\"T:Microsoft.CodeAnalysis.MetadataImageKind\"/> for this instance.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.String",
                "Content": "public string Name",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ModuleMetadata.Name\">\r\n    <summary>\r\n    Name of the module.\r\n    </summary>\r\n    <exception cref=\"T:System.BadImageFormatException\">Invalid metadata.</exception>\r\n    <exception cref=\"T:System.ObjectDisposedException\">Module has been disposed.</exception>\r\n</member>\r\n",
                "StartLine": 247
              },
              "Syntax": {
                "PropertyType": "T:System.String",
                "Content": "public string Name",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ModuleMetadata.Name\">\r\n    <summary>\r\n    Name of the module.\r\n    </summary>\r\n    <exception cref=\"T:System.BadImageFormatException\">Invalid metadata.</exception>\r\n    <exception cref=\"T:System.ObjectDisposedException\">Module has been disposed.</exception>\r\n</member>\r\n",
                "StartLine": 247
              },
              "Id": "P:Microsoft.CodeAnalysis.ModuleMetadata.Name",
              "Parent": "T:Microsoft.CodeAnalysis.ModuleMetadata",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ModuleMetadata.Name\">\r\n    <summary>\r\n    Name of the module.\r\n    </summary>\r\n    <exception cref=\"T:System.BadImageFormatException\">Invalid metadata.</exception>\r\n    <exception cref=\"T:System.ObjectDisposedException\">Module has been disposed.</exception>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\MetadataReference\\ModuleMetadata.cs",
          "InheritanceHierarchy": [
            "T:System.Object",
            "T:Microsoft.CodeAnalysis.Metadata"
          ],
          "Syntax": {
            "Content": "public sealed partial class ModuleMetadata",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.ModuleMetadata\">\r\n    <summary>\r\n    Represents an immutable snapshot of module CLI metadata.\r\n    </summary>\r\n    <remarks>This object may allocate significant resources or lock files depending upon how it is constructed.</remarks>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.ModuleMetadata",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.ModuleMetadata\">\r\n    <summary>\r\n    Represents an immutable snapshot of module CLI metadata.\r\n    </summary>\r\n    <remarks>This object may allocate significant resources or lock files depending upon how it is constructed.</remarks>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.DocumentationMode : documentationMode": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.ParseOptions": ""
                },
                "Content": "protected abstract ParseOptions CommonWithDocumentationMode(DocumentationMode documentationMode);",
                "XmlDocumentation": "",
                "StartLine": 51
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.DocumentationMode : documentationMode": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.ParseOptions": ""
                },
                "Content": "protected abstract ParseOptions CommonWithDocumentationMode(DocumentationMode documentationMode);",
                "XmlDocumentation": "",
                "StartLine": 51
              },
              "Id": "M:Microsoft.CodeAnalysis.ParseOptions.CommonWithDocumentationMode(Microsoft.CodeAnalysis.DocumentationMode)",
              "Parent": "T:Microsoft.CodeAnalysis.ParseOptions",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}} : features": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.ParseOptions": ""
                },
                "Content": "protected abstract ParseOptions CommonWithFeatures(IEnumerable<KeyValuePair<string, string>> features);",
                "XmlDocumentation": "",
                "StartLine": 61
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}} : features": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.ParseOptions": ""
                },
                "Content": "protected abstract ParseOptions CommonWithFeatures(IEnumerable<KeyValuePair<string, string>> features);",
                "XmlDocumentation": "",
                "StartLine": 61
              },
              "Id": "M:Microsoft.CodeAnalysis.ParseOptions.CommonWithFeatures(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})",
              "Parent": "T:Microsoft.CodeAnalysis.ParseOptions",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SourceCodeKind : kind": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.ParseOptions": ""
                },
                "Content": "protected abstract ParseOptions CommonWithKind(SourceCodeKind kind);",
                "XmlDocumentation": "",
                "StartLine": 41
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SourceCodeKind : kind": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.ParseOptions": ""
                },
                "Content": "protected abstract ParseOptions CommonWithKind(SourceCodeKind kind);",
                "XmlDocumentation": "",
                "StartLine": 41
              },
              "Id": "M:Microsoft.CodeAnalysis.ParseOptions.CommonWithKind(Microsoft.CodeAnalysis.SourceCodeKind)",
              "Parent": "T:Microsoft.CodeAnalysis.ParseOptions",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Object : obj": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public abstract override bool Equals(object obj);",
                "XmlDocumentation": "",
                "StartLine": 76
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Object : obj": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public abstract override bool Equals(object obj);",
                "XmlDocumentation": "",
                "StartLine": 76
              },
              "Id": "M:Microsoft.CodeAnalysis.ParseOptions.Equals(System.Object)",
              "Parent": "T:Microsoft.CodeAnalysis.ParseOptions",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.ParseOptions : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "protected bool EqualsHelper(ParseOptions other)",
                "XmlDocumentation": "",
                "StartLine": 78
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.ParseOptions : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "protected bool EqualsHelper(ParseOptions other)",
                "XmlDocumentation": "",
                "StartLine": 78
              },
              "Id": "M:Microsoft.CodeAnalysis.ParseOptions.EqualsHelper(Microsoft.CodeAnalysis.ParseOptions)",
              "Parent": "T:Microsoft.CodeAnalysis.ParseOptions",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public abstract override int GetHashCode();",
                "XmlDocumentation": "",
                "StartLine": 92
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public abstract override int GetHashCode();",
                "XmlDocumentation": "",
                "StartLine": 92
              },
              "Id": "M:Microsoft.CodeAnalysis.ParseOptions.GetHashCode",
              "Parent": "T:Microsoft.CodeAnalysis.ParseOptions",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "protected int GetHashCodeHelper()",
                "XmlDocumentation": "",
                "StartLine": 94
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "protected int GetHashCodeHelper()",
                "XmlDocumentation": "",
                "StartLine": 94
              },
              "Id": "M:Microsoft.CodeAnalysis.ParseOptions.GetHashCodeHelper",
              "Parent": "T:Microsoft.CodeAnalysis.ParseOptions",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.DocumentationMode : documentationMode": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.ParseOptions": ""
                },
                "Content": "public ParseOptions WithDocumentationMode(DocumentationMode documentationMode)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ParseOptions.WithDocumentationMode(Microsoft.CodeAnalysis.DocumentationMode)\">\r\n    <summary>\r\n    Creates a new options instance with the specified documentation mode.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 46
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.DocumentationMode : documentationMode": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.ParseOptions": ""
                },
                "Content": "public ParseOptions WithDocumentationMode(DocumentationMode documentationMode)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ParseOptions.WithDocumentationMode(Microsoft.CodeAnalysis.DocumentationMode)\">\r\n    <summary>\r\n    Creates a new options instance with the specified documentation mode.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 46
              },
              "Id": "M:Microsoft.CodeAnalysis.ParseOptions.WithDocumentationMode(Microsoft.CodeAnalysis.DocumentationMode)",
              "Parent": "T:Microsoft.CodeAnalysis.ParseOptions",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ParseOptions.WithDocumentationMode(Microsoft.CodeAnalysis.DocumentationMode)\">\r\n    <summary>\r\n    Creates a new options instance with the specified documentation mode.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}} : features": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.ParseOptions": ""
                },
                "Content": "public ParseOptions WithFeatures(IEnumerable<KeyValuePair<string, string>> features)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ParseOptions.WithFeatures(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})\">\r\n    <summary>\r\n    Enable some experimental language features for testing.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 56
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}} : features": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.ParseOptions": ""
                },
                "Content": "public ParseOptions WithFeatures(IEnumerable<KeyValuePair<string, string>> features)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ParseOptions.WithFeatures(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})\">\r\n    <summary>\r\n    Enable some experimental language features for testing.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 56
              },
              "Id": "M:Microsoft.CodeAnalysis.ParseOptions.WithFeatures(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})",
              "Parent": "T:Microsoft.CodeAnalysis.ParseOptions",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ParseOptions.WithFeatures(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})\">\r\n    <summary>\r\n    Enable some experimental language features for testing.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SourceCodeKind : kind": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.ParseOptions": ""
                },
                "Content": "public ParseOptions WithKind(SourceCodeKind kind)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ParseOptions.WithKind(Microsoft.CodeAnalysis.SourceCodeKind)\">\r\n    <summary>\r\n    Creates a new options instance with the specified source code kind.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 36
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SourceCodeKind : kind": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.ParseOptions": ""
                },
                "Content": "public ParseOptions WithKind(SourceCodeKind kind)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ParseOptions.WithKind(Microsoft.CodeAnalysis.SourceCodeKind)\">\r\n    <summary>\r\n    Creates a new options instance with the specified source code kind.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 36
              },
              "Id": "M:Microsoft.CodeAnalysis.ParseOptions.WithKind(Microsoft.CodeAnalysis.SourceCodeKind)",
              "Parent": "T:Microsoft.CodeAnalysis.ParseOptions",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ParseOptions.WithKind(Microsoft.CodeAnalysis.SourceCodeKind)\">\r\n    <summary>\r\n    Creates a new options instance with the specified source code kind.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.DocumentationMode",
                "Content": "public DocumentationMode DocumentationMode",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ParseOptions.DocumentationMode\">\r\n    <summary>\r\n    Gets a value indicating whether the documentation comments are parsed.\r\n    </summary>\r\n    <value><c>true</c> if documentation comments are parsed, <c>false</c> otherwise.</value>\r\n</member>\r\n",
                "StartLine": 25
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.DocumentationMode",
                "Content": "public DocumentationMode DocumentationMode",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ParseOptions.DocumentationMode\">\r\n    <summary>\r\n    Gets a value indicating whether the documentation comments are parsed.\r\n    </summary>\r\n    <value><c>true</c> if documentation comments are parsed, <c>false</c> otherwise.</value>\r\n</member>\r\n",
                "StartLine": 25
              },
              "Id": "P:Microsoft.CodeAnalysis.ParseOptions.DocumentationMode",
              "Parent": "T:Microsoft.CodeAnalysis.ParseOptions",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ParseOptions.DocumentationMode\">\r\n    <summary>\r\n    Gets a value indicating whether the documentation comments are parsed.\r\n    </summary>\r\n    <value><c>true</c> if documentation comments are parsed, <c>false</c> otherwise.</value>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Collections.Generic.IReadOnlyDictionary{System.String,System.String}",
                "Content": "public abstract IReadOnlyDictionary<string, string> Features",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ParseOptions.Features\">\r\n    <summary>\r\n    Returns the experimental features.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 66
              },
              "Syntax": {
                "PropertyType": "T:System.Collections.Generic.IReadOnlyDictionary{System.String,System.String}",
                "Content": "public abstract IReadOnlyDictionary<string, string> Features",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ParseOptions.Features\">\r\n    <summary>\r\n    Returns the experimental features.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 66
              },
              "Id": "P:Microsoft.CodeAnalysis.ParseOptions.Features",
              "Parent": "T:Microsoft.CodeAnalysis.ParseOptions",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ParseOptions.Features\">\r\n    <summary>\r\n    Returns the experimental features.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SourceCodeKind",
                "Content": "public SourceCodeKind Kind",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ParseOptions.Kind\">\r\n    <summary>\r\n    Specifies whether to parse as regular code files, script files or interactive code.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 19
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SourceCodeKind",
                "Content": "public SourceCodeKind Kind",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ParseOptions.Kind\">\r\n    <summary>\r\n    Specifies whether to parse as regular code files, script files or interactive code.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 19
              },
              "Id": "P:Microsoft.CodeAnalysis.ParseOptions.Kind",
              "Parent": "T:Microsoft.CodeAnalysis.ParseOptions",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ParseOptions.Kind\">\r\n    <summary>\r\n    Specifies whether to parse as regular code files, script files or interactive code.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Collections.Generic.IEnumerable{System.String}",
                "Content": "public abstract IEnumerable<string> PreprocessorSymbolNames",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ParseOptions.PreprocessorSymbolNames\">\r\n    <summary>\r\n    Names of defined preprocessor symbols.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 74
              },
              "Syntax": {
                "PropertyType": "T:System.Collections.Generic.IEnumerable{System.String}",
                "Content": "public abstract IEnumerable<string> PreprocessorSymbolNames",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ParseOptions.PreprocessorSymbolNames\">\r\n    <summary>\r\n    Names of defined preprocessor symbols.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 74
              },
              "Id": "P:Microsoft.CodeAnalysis.ParseOptions.PreprocessorSymbolNames",
              "Parent": "T:Microsoft.CodeAnalysis.ParseOptions",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ParseOptions.PreprocessorSymbolNames\">\r\n    <summary>\r\n    Names of defined preprocessor symbols.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Compilation\\ParseOptions.cs",
          "InheritanceHierarchy": [
            "T:System.Object"
          ],
          "Syntax": {
            "Content": "public abstract class ParseOptions",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.ParseOptions\">\r\n    <summary>\r\n    Represents parse options common to C# and VB.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.ParseOptions",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.ParseOptions\">\r\n    <summary>\r\n    Represents parse options common to C# and VB.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.DocumentationProvider": ""
                },
                "Content": "protected abstract DocumentationProvider CreateDocumentationProvider();",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.PortableExecutableReference.CreateDocumentationProvider\">\r\n    <summary>\r\n    Create documentation provider for the reference.\r\n    </summary>\r\n    <remarks>\r\n    Called when the compiler needs to read the documentation for the reference. \r\n    This method can be called multiple times from different threads.  The result of one of the calls\r\n    is cached on the reference object.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 71
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.DocumentationProvider": ""
                },
                "Content": "protected abstract DocumentationProvider CreateDocumentationProvider();",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.PortableExecutableReference.CreateDocumentationProvider\">\r\n    <summary>\r\n    Create documentation provider for the reference.\r\n    </summary>\r\n    <remarks>\r\n    Called when the compiler needs to read the documentation for the reference. \r\n    This method can be called multiple times from different threads.  The result of one of the calls\r\n    is cached on the reference object.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 71
              },
              "Id": "M:Microsoft.CodeAnalysis.PortableExecutableReference.CreateDocumentationProvider",
              "Parent": "T:Microsoft.CodeAnalysis.PortableExecutableReference",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.PortableExecutableReference.CreateDocumentationProvider\">\r\n    <summary>\r\n    Create documentation provider for the reference.\r\n    </summary>\r\n    <remarks>\r\n    Called when the compiler needs to read the documentation for the reference. \r\n    This method can be called multiple times from different threads.  The result of one of the calls\r\n    is cached on the reference object.\r\n    </remarks>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Metadata": ""
                },
                "Content": "protected abstract Metadata GetMetadataImpl();",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.PortableExecutableReference.GetMetadataImpl\">\r\n     <summary>\r\n     Get metadata representation for the PE file.\r\n     </summary>\r\n     <exception cref=\"T:System.BadImageFormatException\">If the PE image format is invalid.</exception>\r\n     <exception cref=\"T:System.IO.IOException\">The metadata image content can't be read.</exception>\r\n     <exception cref=\"T:System.IO.FileNotFoundException\">The metadata image is stored in a file that can't be found.</exception>\r\n     <remarks>\r\n     Called when the <see cref=\"T:Microsoft.CodeAnalysis.Compilation\"/> needs to read the reference metadata.\r\n     \r\n     The listed exceptions are caught and converted to compilation diagnostics.\r\n     Any other exception is considered an unexpected error in the implementation and is not caught.\r\n    \r\n     <see cref=\"T:Microsoft.CodeAnalysis.Metadata\"/> objects may cache information decoded from the PE image.\r\n     Reusing <see cref=\"T:Microsoft.CodeAnalysis.Metadata\"/> instances accross metadata references will result in better performance.\r\n     \r\n     The calling <see cref=\"T:Microsoft.CodeAnalysis.Compilation\"/> doesn't take ownership of the <see cref=\"T:Microsoft.CodeAnalysis.Metadata\"/> objects returned by this method.\r\n     The implementation needs to retrieve the object from a provider that manages their lifetime (such as metadata cache).\r\n     The <see cref=\"T:Microsoft.CodeAnalysis.Metadata\"/> object is kept alive by the <see cref=\"T:Microsoft.CodeAnalysis.Compilation\"/> that called <see cref=\"M:Microsoft.CodeAnalysis.PortableExecutableReference.GetMetadata\"/>\r\n     and by all compilations created from it via calls to With- factory methods on <see cref=\"T:Microsoft.CodeAnalysis.Compilation\"/>, \r\n     other than <see cref=\"M:Microsoft.CodeAnalysis.Compilation.WithReferences(Microsoft.CodeAnalysis.MetadataReference[])\"/> overloads. A compilation created using \r\n     <see cref=\"M:Microsoft.CodeAnalysis.Compilation.WithReferences(Microsoft.CodeAnalysis.MetadataReference[])\"/> will call to <see cref=\"M:Microsoft.CodeAnalysis.PortableExecutableReference.GetMetadata\"/> again.\r\n     </remarks>\r\n</member>\r\n",
                "StartLine": 153
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Metadata": ""
                },
                "Content": "protected abstract Metadata GetMetadataImpl();",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.PortableExecutableReference.GetMetadataImpl\">\r\n     <summary>\r\n     Get metadata representation for the PE file.\r\n     </summary>\r\n     <exception cref=\"T:System.BadImageFormatException\">If the PE image format is invalid.</exception>\r\n     <exception cref=\"T:System.IO.IOException\">The metadata image content can't be read.</exception>\r\n     <exception cref=\"T:System.IO.FileNotFoundException\">The metadata image is stored in a file that can't be found.</exception>\r\n     <remarks>\r\n     Called when the <see cref=\"T:Microsoft.CodeAnalysis.Compilation\"/> needs to read the reference metadata.\r\n     \r\n     The listed exceptions are caught and converted to compilation diagnostics.\r\n     Any other exception is considered an unexpected error in the implementation and is not caught.\r\n    \r\n     <see cref=\"T:Microsoft.CodeAnalysis.Metadata\"/> objects may cache information decoded from the PE image.\r\n     Reusing <see cref=\"T:Microsoft.CodeAnalysis.Metadata\"/> instances accross metadata references will result in better performance.\r\n     \r\n     The calling <see cref=\"T:Microsoft.CodeAnalysis.Compilation\"/> doesn't take ownership of the <see cref=\"T:Microsoft.CodeAnalysis.Metadata\"/> objects returned by this method.\r\n     The implementation needs to retrieve the object from a provider that manages their lifetime (such as metadata cache).\r\n     The <see cref=\"T:Microsoft.CodeAnalysis.Metadata\"/> object is kept alive by the <see cref=\"T:Microsoft.CodeAnalysis.Compilation\"/> that called <see cref=\"M:Microsoft.CodeAnalysis.PortableExecutableReference.GetMetadata\"/>\r\n     and by all compilations created from it via calls to With- factory methods on <see cref=\"T:Microsoft.CodeAnalysis.Compilation\"/>, \r\n     other than <see cref=\"M:Microsoft.CodeAnalysis.Compilation.WithReferences(Microsoft.CodeAnalysis.MetadataReference[])\"/> overloads. A compilation created using \r\n     <see cref=\"M:Microsoft.CodeAnalysis.Compilation.WithReferences(Microsoft.CodeAnalysis.MetadataReference[])\"/> will call to <see cref=\"M:Microsoft.CodeAnalysis.PortableExecutableReference.GetMetadata\"/> again.\r\n     </remarks>\r\n</member>\r\n",
                "StartLine": 153
              },
              "Id": "M:Microsoft.CodeAnalysis.PortableExecutableReference.GetMetadataImpl",
              "Parent": "T:Microsoft.CodeAnalysis.PortableExecutableReference",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.PortableExecutableReference.GetMetadataImpl\">\r\n     <summary>\r\n     Get metadata representation for the PE file.\r\n     </summary>\r\n     <exception cref=\"T:System.BadImageFormatException\">If the PE image format is invalid.</exception>\r\n     <exception cref=\"T:System.IO.IOException\">The metadata image content can't be read.</exception>\r\n     <exception cref=\"T:System.IO.FileNotFoundException\">The metadata image is stored in a file that can't be found.</exception>\r\n     <remarks>\r\n     Called when the <see cref=\"T:Microsoft.CodeAnalysis.Compilation\"/> needs to read the reference metadata.\r\n     \r\n     The listed exceptions are caught and converted to compilation diagnostics.\r\n     Any other exception is considered an unexpected error in the implementation and is not caught.\r\n    \r\n     <see cref=\"T:Microsoft.CodeAnalysis.Metadata\"/> objects may cache information decoded from the PE image.\r\n     Reusing <see cref=\"T:Microsoft.CodeAnalysis.Metadata\"/> instances accross metadata references will result in better performance.\r\n     \r\n     The calling <see cref=\"T:Microsoft.CodeAnalysis.Compilation\"/> doesn't take ownership of the <see cref=\"T:Microsoft.CodeAnalysis.Metadata\"/> objects returned by this method.\r\n     The implementation needs to retrieve the object from a provider that manages their lifetime (such as metadata cache).\r\n     The <see cref=\"T:Microsoft.CodeAnalysis.Metadata\"/> object is kept alive by the <see cref=\"T:Microsoft.CodeAnalysis.Compilation\"/> that called <see cref=\"M:Microsoft.CodeAnalysis.PortableExecutableReference.GetMetadata\"/>\r\n     and by all compilations created from it via calls to With- factory methods on <see cref=\"T:Microsoft.CodeAnalysis.Compilation\"/>, \r\n     other than <see cref=\"M:Microsoft.CodeAnalysis.Compilation.WithReferences(Microsoft.CodeAnalysis.MetadataReference[])\"/> overloads. A compilation created using \r\n     <see cref=\"M:Microsoft.CodeAnalysis.Compilation.WithReferences(Microsoft.CodeAnalysis.MetadataReference[])\"/> will call to <see cref=\"M:Microsoft.CodeAnalysis.PortableExecutableReference.GetMetadata\"/> again.\r\n     </remarks>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{System.String} : aliases": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.PortableExecutableReference": ""
                },
                "Content": "public new PortableExecutableReference WithAliases(IEnumerable<string> aliases)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.PortableExecutableReference.WithAliases(System.Collections.Generic.IEnumerable{System.String})\">\r\n    <summary>\r\n    Returns an instance of the reference with specified aliases.\r\n    </summary>\r\n    <param name=\"aliases\">The new aliases for the reference.</param>\r\n    <exception cref=\"T:System.ArgumentException\">Alias is invalid for the metadata kind.</exception> \r\n</member>\r\n",
                "StartLine": 78
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{System.String} : aliases": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.PortableExecutableReference": ""
                },
                "Content": "public new PortableExecutableReference WithAliases(IEnumerable<string> aliases)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.PortableExecutableReference.WithAliases(System.Collections.Generic.IEnumerable{System.String})\">\r\n    <summary>\r\n    Returns an instance of the reference with specified aliases.\r\n    </summary>\r\n    <param name=\"aliases\">The new aliases for the reference.</param>\r\n    <exception cref=\"T:System.ArgumentException\">Alias is invalid for the metadata kind.</exception> \r\n</member>\r\n",
                "StartLine": 78
              },
              "Id": "M:Microsoft.CodeAnalysis.PortableExecutableReference.WithAliases(System.Collections.Generic.IEnumerable{System.String})",
              "Parent": "T:Microsoft.CodeAnalysis.PortableExecutableReference",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.PortableExecutableReference.WithAliases(System.Collections.Generic.IEnumerable{System.String})\">\r\n    <summary>\r\n    Returns an instance of the reference with specified aliases.\r\n    </summary>\r\n    <param name=\"aliases\">The new aliases for the reference.</param>\r\n    <exception cref=\"T:System.ArgumentException\">Alias is invalid for the metadata kind.</exception> \r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Collections.Immutable.ImmutableArray{System.String} : aliases": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.PortableExecutableReference": ""
                },
                "Content": "public new PortableExecutableReference WithAliases(ImmutableArray<string> aliases)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.PortableExecutableReference.WithAliases(System.Collections.Immutable.ImmutableArray{System.String})\">\r\n    <summary>\r\n    Returns an instance of the reference with specified aliases.\r\n    </summary>\r\n    <param name=\"aliases\">The new aliases for the reference.</param>\r\n    <exception cref=\"T:System.ArgumentException\">Alias is invalid for the metadata kind.</exception> \r\n</member>\r\n",
                "StartLine": 88
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Collections.Immutable.ImmutableArray{System.String} : aliases": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.PortableExecutableReference": ""
                },
                "Content": "public new PortableExecutableReference WithAliases(ImmutableArray<string> aliases)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.PortableExecutableReference.WithAliases(System.Collections.Immutable.ImmutableArray{System.String})\">\r\n    <summary>\r\n    Returns an instance of the reference with specified aliases.\r\n    </summary>\r\n    <param name=\"aliases\">The new aliases for the reference.</param>\r\n    <exception cref=\"T:System.ArgumentException\">Alias is invalid for the metadata kind.</exception> \r\n</member>\r\n",
                "StartLine": 88
              },
              "Id": "M:Microsoft.CodeAnalysis.PortableExecutableReference.WithAliases(System.Collections.Immutable.ImmutableArray{System.String})",
              "Parent": "T:Microsoft.CodeAnalysis.PortableExecutableReference",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.PortableExecutableReference.WithAliases(System.Collections.Immutable.ImmutableArray{System.String})\">\r\n    <summary>\r\n    Returns an instance of the reference with specified aliases.\r\n    </summary>\r\n    <param name=\"aliases\">The new aliases for the reference.</param>\r\n    <exception cref=\"T:System.ArgumentException\">Alias is invalid for the metadata kind.</exception> \r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Boolean : value": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.PortableExecutableReference": ""
                },
                "Content": "public new PortableExecutableReference WithEmbedInteropTypes(bool value)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.PortableExecutableReference.WithEmbedInteropTypes(System.Boolean)\">\r\n    <summary>\r\n    Returns an instance of the reference with specified interop types embedding.\r\n    </summary>\r\n    <param name=\"value\">The new value for <see cref=\"P:Microsoft.CodeAnalysis.MetadataReferenceProperties.EmbedInteropTypes\"/>.</param>\r\n    <exception cref=\"T:System.ArgumentException\">Interop types can't be embedded from modules.</exception> \r\n</member>\r\n",
                "StartLine": 98
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Boolean : value": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.PortableExecutableReference": ""
                },
                "Content": "public new PortableExecutableReference WithEmbedInteropTypes(bool value)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.PortableExecutableReference.WithEmbedInteropTypes(System.Boolean)\">\r\n    <summary>\r\n    Returns an instance of the reference with specified interop types embedding.\r\n    </summary>\r\n    <param name=\"value\">The new value for <see cref=\"P:Microsoft.CodeAnalysis.MetadataReferenceProperties.EmbedInteropTypes\"/>.</param>\r\n    <exception cref=\"T:System.ArgumentException\">Interop types can't be embedded from modules.</exception> \r\n</member>\r\n",
                "StartLine": 98
              },
              "Id": "M:Microsoft.CodeAnalysis.PortableExecutableReference.WithEmbedInteropTypes(System.Boolean)",
              "Parent": "T:Microsoft.CodeAnalysis.PortableExecutableReference",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.PortableExecutableReference.WithEmbedInteropTypes(System.Boolean)\">\r\n    <summary>\r\n    Returns an instance of the reference with specified interop types embedding.\r\n    </summary>\r\n    <param name=\"value\">The new value for <see cref=\"P:Microsoft.CodeAnalysis.MetadataReferenceProperties.EmbedInteropTypes\"/>.</param>\r\n    <exception cref=\"T:System.ArgumentException\">Interop types can't be embedded from modules.</exception> \r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.MetadataReferenceProperties : properties": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.PortableExecutableReference": ""
                },
                "Content": "public new PortableExecutableReference WithProperties(MetadataReferenceProperties properties)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.PortableExecutableReference.WithProperties(Microsoft.CodeAnalysis.MetadataReferenceProperties)\">\r\n    <summary>\r\n    Returns an instance of the reference with specified properties, or this instance if properties haven't changed.\r\n    </summary>\r\n    <param name=\"properties\">The new properties for the reference.</param>\r\n    <exception cref=\"T:System.ArgumentException\">Specified values not valid for this reference.</exception> \r\n</member>\r\n",
                "StartLine": 108
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.MetadataReferenceProperties : properties": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.PortableExecutableReference": ""
                },
                "Content": "public new PortableExecutableReference WithProperties(MetadataReferenceProperties properties)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.PortableExecutableReference.WithProperties(Microsoft.CodeAnalysis.MetadataReferenceProperties)\">\r\n    <summary>\r\n    Returns an instance of the reference with specified properties, or this instance if properties haven't changed.\r\n    </summary>\r\n    <param name=\"properties\">The new properties for the reference.</param>\r\n    <exception cref=\"T:System.ArgumentException\">Specified values not valid for this reference.</exception> \r\n</member>\r\n",
                "StartLine": 108
              },
              "Id": "M:Microsoft.CodeAnalysis.PortableExecutableReference.WithProperties(Microsoft.CodeAnalysis.MetadataReferenceProperties)",
              "Parent": "T:Microsoft.CodeAnalysis.PortableExecutableReference",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.PortableExecutableReference.WithProperties(Microsoft.CodeAnalysis.MetadataReferenceProperties)\">\r\n    <summary>\r\n    Returns an instance of the reference with specified properties, or this instance if properties haven't changed.\r\n    </summary>\r\n    <param name=\"properties\">The new properties for the reference.</param>\r\n    <exception cref=\"T:System.ArgumentException\">Specified values not valid for this reference.</exception> \r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.MetadataReferenceProperties : properties": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.PortableExecutableReference": ""
                },
                "Content": "protected abstract PortableExecutableReference WithPropertiesImpl(MetadataReferenceProperties properties);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.PortableExecutableReference.WithPropertiesImpl(Microsoft.CodeAnalysis.MetadataReferenceProperties)\">\r\n    <summary>\r\n    Returns an instance of the reference with specified properties.\r\n    </summary>\r\n    <param name=\"properties\">The new properties for the reference.</param>\r\n    <exception cref=\"T:System.NotSupportedException\">Specified values not supported.</exception> \r\n    <remarks>Only invoked if the properties changed.</remarks>\r\n</member>\r\n",
                "StartLine": 129
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.MetadataReferenceProperties : properties": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.PortableExecutableReference": ""
                },
                "Content": "protected abstract PortableExecutableReference WithPropertiesImpl(MetadataReferenceProperties properties);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.PortableExecutableReference.WithPropertiesImpl(Microsoft.CodeAnalysis.MetadataReferenceProperties)\">\r\n    <summary>\r\n    Returns an instance of the reference with specified properties.\r\n    </summary>\r\n    <param name=\"properties\">The new properties for the reference.</param>\r\n    <exception cref=\"T:System.NotSupportedException\">Specified values not supported.</exception> \r\n    <remarks>Only invoked if the properties changed.</remarks>\r\n</member>\r\n",
                "StartLine": 129
              },
              "Id": "M:Microsoft.CodeAnalysis.PortableExecutableReference.WithPropertiesImpl(Microsoft.CodeAnalysis.MetadataReferenceProperties)",
              "Parent": "T:Microsoft.CodeAnalysis.PortableExecutableReference",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.PortableExecutableReference.WithPropertiesImpl(Microsoft.CodeAnalysis.MetadataReferenceProperties)\">\r\n    <summary>\r\n    Returns an instance of the reference with specified properties.\r\n    </summary>\r\n    <param name=\"properties\">The new properties for the reference.</param>\r\n    <exception cref=\"T:System.NotSupportedException\">Specified values not supported.</exception> \r\n    <remarks>Only invoked if the properties changed.</remarks>\r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:System.String",
                "Content": "public override string Display",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.PortableExecutableReference.Display\">\r\n    <summary>\r\n    Display string used in error messages to identity the reference.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 34
              },
              "Syntax": {
                "PropertyType": "T:System.String",
                "Content": "public override string Display",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.PortableExecutableReference.Display\">\r\n    <summary>\r\n    Display string used in error messages to identity the reference.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 34
              },
              "Id": "P:Microsoft.CodeAnalysis.PortableExecutableReference.Display",
              "Parent": "T:Microsoft.CodeAnalysis.PortableExecutableReference",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.PortableExecutableReference.Display\">\r\n    <summary>\r\n    Display string used in error messages to identity the reference.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.String",
                "Content": "public string FilePath",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.PortableExecutableReference.FilePath\">\r\n    <summary>\r\n    Path describing the location of the metadata, or null if the metadata have no location.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 42
              },
              "Syntax": {
                "PropertyType": "T:System.String",
                "Content": "public string FilePath",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.PortableExecutableReference.FilePath\">\r\n    <summary>\r\n    Path describing the location of the metadata, or null if the metadata have no location.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 42
              },
              "Id": "P:Microsoft.CodeAnalysis.PortableExecutableReference.FilePath",
              "Parent": "T:Microsoft.CodeAnalysis.PortableExecutableReference",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.PortableExecutableReference.FilePath\">\r\n    <summary>\r\n    Path describing the location of the metadata, or null if the metadata have no location.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Constructors": [
            {
              "ConstructorSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.DocumentationProvider : initialDocumentation": "",
                  "T:Microsoft.CodeAnalysis.MetadataReferenceProperties : properties": "",
                  "T:System.String : fullPath": ""
                },
                "Content": "protected PortableExecutableReference(MetadataReferenceProperties properties, string fullPath = null, DocumentationProvider initialDocumentation = null): base (properties)",
                "XmlDocumentation": "",
                "StartLine": 21
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.DocumentationProvider : initialDocumentation": "",
                  "T:Microsoft.CodeAnalysis.MetadataReferenceProperties : properties": "",
                  "T:System.String : fullPath": ""
                },
                "Content": "protected PortableExecutableReference(MetadataReferenceProperties properties, string fullPath = null, DocumentationProvider initialDocumentation = null): base (properties)",
                "XmlDocumentation": "",
                "StartLine": 21
              },
              "Id": "M:Microsoft.CodeAnalysis.PortableExecutableReference.#ctor(Microsoft.CodeAnalysis.MetadataReferenceProperties,System.String,Microsoft.CodeAnalysis.DocumentationProvider)",
              "Parent": "T:Microsoft.CodeAnalysis.PortableExecutableReference",
              "XmlDocumentation": ""
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\MetadataReference\\PortableExecutableReference.cs",
          "InheritanceHierarchy": [
            "T:System.Object",
            "T:Microsoft.CodeAnalysis.MetadataReference"
          ],
          "Syntax": {
            "Content": "public abstract class PortableExecutableReference",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.PortableExecutableReference\">\r\n    <summary>\r\n    Reference to metadata stored in the standard ECMA-335 metadata format.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.PortableExecutableReference",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.PortableExecutableReference\">\r\n    <summary>\r\n    Reference to metadata stored in the standard ECMA-335 metadata format.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Constructors": [
            {
              "ConstructorSyntax": {
                "Parameters": {
                  "T:System.Boolean : isPublic": "",
                  "T:System.Func{System.IO.Stream} : dataProvider": "",
                  "T:System.String : resourceName": ""
                },
                "Content": "public ResourceDescription(string resourceName, Func<Stream> dataProvider, bool isPublic): this (resourceName, null, dataProvider, isPublic, isEmbedded: true, checkArgs: true)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ResourceDescription.#ctor(System.String,System.Func{System.IO.Stream},System.Boolean)\">\r\n    <summary>\r\n    Creates a representation of a resource whose contents are to be embedded in the output assembly.\r\n    </summary>\r\n    <param name=\"resourceName\">Resource name.</param>\r\n    <param name=\"dataProvider\">The callers will dispose the result after use.\r\n    This allows the resources to be opened and read one at a time.\r\n    </param>\r\n    <param name=\"isPublic\">True if the resource is public.</param>\r\n    <remarks>\r\n    Returns a stream of the data to embed.\r\n    </remarks> \r\n</member>\r\n",
                "StartLine": 33
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Boolean : isPublic": "",
                  "T:System.Func{System.IO.Stream} : dataProvider": "",
                  "T:System.String : resourceName": ""
                },
                "Content": "public ResourceDescription(string resourceName, Func<Stream> dataProvider, bool isPublic): this (resourceName, null, dataProvider, isPublic, isEmbedded: true, checkArgs: true)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ResourceDescription.#ctor(System.String,System.Func{System.IO.Stream},System.Boolean)\">\r\n    <summary>\r\n    Creates a representation of a resource whose contents are to be embedded in the output assembly.\r\n    </summary>\r\n    <param name=\"resourceName\">Resource name.</param>\r\n    <param name=\"dataProvider\">The callers will dispose the result after use.\r\n    This allows the resources to be opened and read one at a time.\r\n    </param>\r\n    <param name=\"isPublic\">True if the resource is public.</param>\r\n    <remarks>\r\n    Returns a stream of the data to embed.\r\n    </remarks> \r\n</member>\r\n",
                "StartLine": 33
              },
              "Id": "M:Microsoft.CodeAnalysis.ResourceDescription.#ctor(System.String,System.Func{System.IO.Stream},System.Boolean)",
              "Parent": "T:Microsoft.CodeAnalysis.ResourceDescription",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ResourceDescription.#ctor(System.String,System.Func{System.IO.Stream},System.Boolean)\">\r\n    <summary>\r\n    Creates a representation of a resource whose contents are to be embedded in the output assembly.\r\n    </summary>\r\n    <param name=\"resourceName\">Resource name.</param>\r\n    <param name=\"dataProvider\">The callers will dispose the result after use.\r\n    This allows the resources to be opened and read one at a time.\r\n    </param>\r\n    <param name=\"isPublic\">True if the resource is public.</param>\r\n    <remarks>\r\n    Returns a stream of the data to embed.\r\n    </remarks> \r\n</member>\r\n"
            },
            {
              "ConstructorSyntax": {
                "Parameters": {
                  "T:System.Boolean : isPublic": "",
                  "T:System.Func{System.IO.Stream} : dataProvider": "",
                  "T:System.String : fileName": "",
                  "T:System.String : resourceName": ""
                },
                "Content": "public ResourceDescription(string resourceName, string fileName, Func<Stream> dataProvider, bool isPublic): this (resourceName, fileName, dataProvider, isPublic, isEmbedded: false, checkArgs: true)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ResourceDescription.#ctor(System.String,System.String,System.Func{System.IO.Stream},System.Boolean)\">\r\n    <summary>\r\n    Creates a representation of a resource whose file name will be recorded in the assembly.\r\n    </summary>\r\n    <param name=\"resourceName\">Resource name.</param>\r\n    <param name=\"fileName\">File name with an extension to be stored in metadata.</param>\r\n    <param name=\"dataProvider\">The callers will dispose the result after use.\r\n    This allows the resources to be opened and read one at a time.\r\n    </param>\r\n    <param name=\"isPublic\">True if the resource is public.</param>\r\n    <remarks>\r\n    Function returning a stream of the recource content (used to calculate hash).\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 50
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Boolean : isPublic": "",
                  "T:System.Func{System.IO.Stream} : dataProvider": "",
                  "T:System.String : fileName": "",
                  "T:System.String : resourceName": ""
                },
                "Content": "public ResourceDescription(string resourceName, string fileName, Func<Stream> dataProvider, bool isPublic): this (resourceName, fileName, dataProvider, isPublic, isEmbedded: false, checkArgs: true)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ResourceDescription.#ctor(System.String,System.String,System.Func{System.IO.Stream},System.Boolean)\">\r\n    <summary>\r\n    Creates a representation of a resource whose file name will be recorded in the assembly.\r\n    </summary>\r\n    <param name=\"resourceName\">Resource name.</param>\r\n    <param name=\"fileName\">File name with an extension to be stored in metadata.</param>\r\n    <param name=\"dataProvider\">The callers will dispose the result after use.\r\n    This allows the resources to be opened and read one at a time.\r\n    </param>\r\n    <param name=\"isPublic\">True if the resource is public.</param>\r\n    <remarks>\r\n    Function returning a stream of the recource content (used to calculate hash).\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 50
              },
              "Id": "M:Microsoft.CodeAnalysis.ResourceDescription.#ctor(System.String,System.String,System.Func{System.IO.Stream},System.Boolean)",
              "Parent": "T:Microsoft.CodeAnalysis.ResourceDescription",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ResourceDescription.#ctor(System.String,System.String,System.Func{System.IO.Stream},System.Boolean)\">\r\n    <summary>\r\n    Creates a representation of a resource whose file name will be recorded in the assembly.\r\n    </summary>\r\n    <param name=\"resourceName\">Resource name.</param>\r\n    <param name=\"fileName\">File name with an extension to be stored in metadata.</param>\r\n    <param name=\"dataProvider\">The callers will dispose the result after use.\r\n    This allows the resources to be opened and read one at a time.\r\n    </param>\r\n    <param name=\"isPublic\">True if the resource is public.</param>\r\n    <remarks>\r\n    Function returning a stream of the recource content (used to calculate hash).\r\n    </remarks>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\ResourceDescription.cs",
          "InheritanceHierarchy": [
            "T:System.Object"
          ],
          "Syntax": {
            "Content": "public sealed class ResourceDescription",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.ResourceDescription\">\r\n    <summary>\r\n    Representation of a resource whose contents are to be embedded in the output assembly.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.ResourceDescription",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.ResourceDescription\">\r\n    <summary>\r\n    Representation of a resource whose contents are to be embedded in the output assembly.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxNode : statement": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.ControlFlowAnalysis": ""
                },
                "Content": "protected abstract ControlFlowAnalysis AnalyzeControlFlowCore(SyntaxNode statement);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.AnalyzeControlFlowCore(Microsoft.CodeAnalysis.SyntaxNode)\">\r\n    <summary>\r\n    Analyze control-flow within a part of a method body. \r\n    </summary>\r\n    <param name=\"statement\">The statement to be analyzed.</param>\r\n    <returns>An object that can be used to obtain the result of the control flow analysis.</returns>\r\n    <exception cref=\"T:System.ArgumentException\">The span is not with a method\r\n    body.</exception>\r\n    <remarks>\r\n    The statement must be fully inside the same method body.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 632
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxNode : statement": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.ControlFlowAnalysis": ""
                },
                "Content": "protected abstract ControlFlowAnalysis AnalyzeControlFlowCore(SyntaxNode statement);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.AnalyzeControlFlowCore(Microsoft.CodeAnalysis.SyntaxNode)\">\r\n    <summary>\r\n    Analyze control-flow within a part of a method body. \r\n    </summary>\r\n    <param name=\"statement\">The statement to be analyzed.</param>\r\n    <returns>An object that can be used to obtain the result of the control flow analysis.</returns>\r\n    <exception cref=\"T:System.ArgumentException\">The span is not with a method\r\n    body.</exception>\r\n    <remarks>\r\n    The statement must be fully inside the same method body.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 632
              },
              "Id": "M:Microsoft.CodeAnalysis.SemanticModel.AnalyzeControlFlowCore(Microsoft.CodeAnalysis.SyntaxNode)",
              "Parent": "T:Microsoft.CodeAnalysis.SemanticModel",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.AnalyzeControlFlowCore(Microsoft.CodeAnalysis.SyntaxNode)\">\r\n    <summary>\r\n    Analyze control-flow within a part of a method body. \r\n    </summary>\r\n    <param name=\"statement\">The statement to be analyzed.</param>\r\n    <returns>An object that can be used to obtain the result of the control flow analysis.</returns>\r\n    <exception cref=\"T:System.ArgumentException\">The span is not with a method\r\n    body.</exception>\r\n    <remarks>\r\n    The statement must be fully inside the same method body.\r\n    </remarks>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxNode : firstStatement": "",
                  "T:Microsoft.CodeAnalysis.SyntaxNode : lastStatement": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.ControlFlowAnalysis": ""
                },
                "Content": "protected abstract ControlFlowAnalysis AnalyzeControlFlowCore(SyntaxNode firstStatement, SyntaxNode lastStatement);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.AnalyzeControlFlowCore(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)\">\r\n    <summary>\r\n    Analyze control-flow within a part of a method body. \r\n    </summary>\r\n    <param name=\"firstStatement\">The first node to be included within the analysis.</param>\r\n    <param name=\"lastStatement\">The last node to be included within the analysis.</param>\r\n    <returns>An object that can be used to obtain the result of the control flow analysis.</returns>\r\n    <exception cref=\"T:System.ArgumentException\">The span is not with a method\r\n    body.</exception>\r\n    <remarks>\r\n    The first and last nodes must be fully inside the same method body.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 605
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxNode : firstStatement": "",
                  "T:Microsoft.CodeAnalysis.SyntaxNode : lastStatement": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.ControlFlowAnalysis": ""
                },
                "Content": "protected abstract ControlFlowAnalysis AnalyzeControlFlowCore(SyntaxNode firstStatement, SyntaxNode lastStatement);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.AnalyzeControlFlowCore(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)\">\r\n    <summary>\r\n    Analyze control-flow within a part of a method body. \r\n    </summary>\r\n    <param name=\"firstStatement\">The first node to be included within the analysis.</param>\r\n    <param name=\"lastStatement\">The last node to be included within the analysis.</param>\r\n    <returns>An object that can be used to obtain the result of the control flow analysis.</returns>\r\n    <exception cref=\"T:System.ArgumentException\">The span is not with a method\r\n    body.</exception>\r\n    <remarks>\r\n    The first and last nodes must be fully inside the same method body.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 605
              },
              "Id": "M:Microsoft.CodeAnalysis.SemanticModel.AnalyzeControlFlowCore(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)",
              "Parent": "T:Microsoft.CodeAnalysis.SemanticModel",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.AnalyzeControlFlowCore(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)\">\r\n    <summary>\r\n    Analyze control-flow within a part of a method body. \r\n    </summary>\r\n    <param name=\"firstStatement\">The first node to be included within the analysis.</param>\r\n    <param name=\"lastStatement\">The last node to be included within the analysis.</param>\r\n    <returns>An object that can be used to obtain the result of the control flow analysis.</returns>\r\n    <exception cref=\"T:System.ArgumentException\">The span is not with a method\r\n    body.</exception>\r\n    <remarks>\r\n    The first and last nodes must be fully inside the same method body.\r\n    </remarks>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxNode : statementOrExpression": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.DataFlowAnalysis": ""
                },
                "Content": "protected abstract DataFlowAnalysis AnalyzeDataFlowCore(SyntaxNode statementOrExpression);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.AnalyzeDataFlowCore(Microsoft.CodeAnalysis.SyntaxNode)\">\r\n    <summary>\r\n    Analyze data-flow within a part of a method body. \r\n    </summary>\r\n    <param name=\"statementOrExpression\">The statement or expression to be analyzed.</param>\r\n    <returns>An object that can be used to obtain the result of the data flow analysis.</returns>\r\n    <exception cref=\"T:System.ArgumentException\">The statement or expression is not with a method\r\n    body or field or property initializer.</exception>\r\n    <remarks>\r\n    The statement or expression must be fully inside a method body.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 688
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxNode : statementOrExpression": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.DataFlowAnalysis": ""
                },
                "Content": "protected abstract DataFlowAnalysis AnalyzeDataFlowCore(SyntaxNode statementOrExpression);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.AnalyzeDataFlowCore(Microsoft.CodeAnalysis.SyntaxNode)\">\r\n    <summary>\r\n    Analyze data-flow within a part of a method body. \r\n    </summary>\r\n    <param name=\"statementOrExpression\">The statement or expression to be analyzed.</param>\r\n    <returns>An object that can be used to obtain the result of the data flow analysis.</returns>\r\n    <exception cref=\"T:System.ArgumentException\">The statement or expression is not with a method\r\n    body or field or property initializer.</exception>\r\n    <remarks>\r\n    The statement or expression must be fully inside a method body.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 688
              },
              "Id": "M:Microsoft.CodeAnalysis.SemanticModel.AnalyzeDataFlowCore(Microsoft.CodeAnalysis.SyntaxNode)",
              "Parent": "T:Microsoft.CodeAnalysis.SemanticModel",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.AnalyzeDataFlowCore(Microsoft.CodeAnalysis.SyntaxNode)\">\r\n    <summary>\r\n    Analyze data-flow within a part of a method body. \r\n    </summary>\r\n    <param name=\"statementOrExpression\">The statement or expression to be analyzed.</param>\r\n    <returns>An object that can be used to obtain the result of the data flow analysis.</returns>\r\n    <exception cref=\"T:System.ArgumentException\">The statement or expression is not with a method\r\n    body or field or property initializer.</exception>\r\n    <remarks>\r\n    The statement or expression must be fully inside a method body.\r\n    </remarks>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxNode : firstStatement": "",
                  "T:Microsoft.CodeAnalysis.SyntaxNode : lastStatement": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.DataFlowAnalysis": ""
                },
                "Content": "protected abstract DataFlowAnalysis AnalyzeDataFlowCore(SyntaxNode firstStatement, SyntaxNode lastStatement);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.AnalyzeDataFlowCore(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)\">\r\n    <summary>\r\n    Analyze data-flow within a part of a method body. \r\n    </summary>\r\n    <param name=\"firstStatement\">The first node to be included within the analysis.</param>\r\n    <param name=\"lastStatement\">The last node to be included within the analysis.</param>\r\n    <returns>An object that can be used to obtain the result of the data flow analysis.</returns>\r\n    <exception cref=\"T:System.ArgumentException\">The span is not with a method\r\n    body.</exception>\r\n    <remarks>\r\n    The first and last nodes must be fully inside the same method body.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 661
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxNode : firstStatement": "",
                  "T:Microsoft.CodeAnalysis.SyntaxNode : lastStatement": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.DataFlowAnalysis": ""
                },
                "Content": "protected abstract DataFlowAnalysis AnalyzeDataFlowCore(SyntaxNode firstStatement, SyntaxNode lastStatement);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.AnalyzeDataFlowCore(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)\">\r\n    <summary>\r\n    Analyze data-flow within a part of a method body. \r\n    </summary>\r\n    <param name=\"firstStatement\">The first node to be included within the analysis.</param>\r\n    <param name=\"lastStatement\">The last node to be included within the analysis.</param>\r\n    <returns>An object that can be used to obtain the result of the data flow analysis.</returns>\r\n    <exception cref=\"T:System.ArgumentException\">The span is not with a method\r\n    body.</exception>\r\n    <remarks>\r\n    The first and last nodes must be fully inside the same method body.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 661
              },
              "Id": "M:Microsoft.CodeAnalysis.SemanticModel.AnalyzeDataFlowCore(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)",
              "Parent": "T:Microsoft.CodeAnalysis.SemanticModel",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.AnalyzeDataFlowCore(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)\">\r\n    <summary>\r\n    Analyze data-flow within a part of a method body. \r\n    </summary>\r\n    <param name=\"firstStatement\">The first node to be included within the analysis.</param>\r\n    <param name=\"lastStatement\">The last node to be included within the analysis.</param>\r\n    <returns>An object that can be used to obtain the result of the data flow analysis.</returns>\r\n    <exception cref=\"T:System.ArgumentException\">The span is not with a method\r\n    body.</exception>\r\n    <remarks>\r\n    The first and last nodes must be fully inside the same method body.\r\n    </remarks>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxNode : nameSyntax": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.IAliasSymbol": ""
                },
                "Content": "protected abstract IAliasSymbol GetAliasInfoCore(SyntaxNode nameSyntax, CancellationToken cancellationToken = default (CancellationToken));",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.GetAliasInfoCore(Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    If \"nameSyntax\" resolves to an alias name, return the IAliasSymbol corresponding\r\n    to A. Otherwise return null.\r\n    </summary>\r\n    <param name=\"nameSyntax\">Name to get alias info for.</param>\r\n    <param name=\"cancellationToken\">A cancellation token that can be used to cancel the\r\n    process of obtaining the alias information.</param>\r\n</member>\r\n",
                "StartLine": 207
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxNode : nameSyntax": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.IAliasSymbol": ""
                },
                "Content": "protected abstract IAliasSymbol GetAliasInfoCore(SyntaxNode nameSyntax, CancellationToken cancellationToken = default (CancellationToken));",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.GetAliasInfoCore(Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    If \"nameSyntax\" resolves to an alias name, return the IAliasSymbol corresponding\r\n    to A. Otherwise return null.\r\n    </summary>\r\n    <param name=\"nameSyntax\">Name to get alias info for.</param>\r\n    <param name=\"cancellationToken\">A cancellation token that can be used to cancel the\r\n    process of obtaining the alias information.</param>\r\n</member>\r\n",
                "StartLine": 207
              },
              "Id": "M:Microsoft.CodeAnalysis.SemanticModel.GetAliasInfoCore(Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)",
              "Parent": "T:Microsoft.CodeAnalysis.SemanticModel",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.GetAliasInfoCore(Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    If \"nameSyntax\" resolves to an alias name, return the IAliasSymbol corresponding\r\n    to A. Otherwise return null.\r\n    </summary>\r\n    <param name=\"nameSyntax\">Name to get alias info for.</param>\r\n    <param name=\"cancellationToken\">A cancellation token that can be used to cancel the\r\n    process of obtaining the alias information.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxNode : node": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Optional{System.Object}": ""
                },
                "Content": "public Optional<object> GetConstantValue(SyntaxNode node, CancellationToken cancellationToken = default (CancellationToken))",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.GetConstantValue(Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    If the node provided has a constant value an Optional value will be returned with\r\n    HasValue set to true and with Value set to the constant.  If the node does not have an\r\n    constant value, an Optional will be returned with HasValue set to false.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 695
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxNode : node": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Optional{System.Object}": ""
                },
                "Content": "public Optional<object> GetConstantValue(SyntaxNode node, CancellationToken cancellationToken = default (CancellationToken))",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.GetConstantValue(Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    If the node provided has a constant value an Optional value will be returned with\r\n    HasValue set to true and with Value set to the constant.  If the node does not have an\r\n    constant value, an Optional will be returned with HasValue set to false.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 695
              },
              "Id": "M:Microsoft.CodeAnalysis.SemanticModel.GetConstantValue(Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)",
              "Parent": "T:Microsoft.CodeAnalysis.SemanticModel",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.GetConstantValue(Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    If the node provided has a constant value an Optional value will be returned with\r\n    HasValue set to true and with Value set to the constant.  If the node does not have an\r\n    constant value, an Optional will be returned with HasValue set to false.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxNode : node": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Optional{System.Object}": ""
                },
                "Content": "protected abstract Optional<object> GetConstantValueCore(SyntaxNode node, CancellationToken cancellationToken = default (CancellationToken));",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.GetConstantValueCore(Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    If the node provided has a constant value an Optional value will be returned with\r\n    HasValue set to true and with Value set to the constant.  If the node does not have an\r\n    constant value, an Optional will be returned with HasValue set to false.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 705
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxNode : node": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Optional{System.Object}": ""
                },
                "Content": "protected abstract Optional<object> GetConstantValueCore(SyntaxNode node, CancellationToken cancellationToken = default (CancellationToken));",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.GetConstantValueCore(Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    If the node provided has a constant value an Optional value will be returned with\r\n    HasValue set to true and with Value set to the constant.  If the node does not have an\r\n    constant value, an Optional will be returned with HasValue set to false.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 705
              },
              "Id": "M:Microsoft.CodeAnalysis.SemanticModel.GetConstantValueCore(Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)",
              "Parent": "T:Microsoft.CodeAnalysis.SemanticModel",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.GetConstantValueCore(Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    If the node provided has a constant value an Optional value will be returned with\r\n    HasValue set to true and with Value set to the constant.  If the node does not have an\r\n    constant value, an Optional will be returned with HasValue set to false.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Nullable{Microsoft.CodeAnalysis.Text.TextSpan} : span": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostic}": ""
                },
                "Content": "public abstract ImmutableArray<Diagnostic> GetDeclarationDiagnostics(TextSpan? span = null, CancellationToken cancellationToken = default (CancellationToken));",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.GetDeclarationDiagnostics(System.Nullable{Microsoft.CodeAnalysis.Text.TextSpan},System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Get all of the declaration errors within the syntax tree associated with this\r\n    object. Does not get errors involving incorrect syntax, compiling method bodies or initializers.\r\n    </summary>\r\n    <param name=\"span\">Optional span within the syntax tree for which to get diagnostics.\r\n    If no argument is specified, then diagnostics for the entire tree are returned.</param>\r\n    <param name=\"cancellationToken\">A cancellation token that can be used to cancel the\r\n    process of obtaining the diagnostics.</param>\r\n    <remarks>The declaration errors for a syntax tree are cached. The first time this method\r\n    is called, all declarations are analyzed for diagnostics. Calling this a second time\r\n    will return the cached diagnostics.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 305
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Nullable{Microsoft.CodeAnalysis.Text.TextSpan} : span": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostic}": ""
                },
                "Content": "public abstract ImmutableArray<Diagnostic> GetDeclarationDiagnostics(TextSpan? span = null, CancellationToken cancellationToken = default (CancellationToken));",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.GetDeclarationDiagnostics(System.Nullable{Microsoft.CodeAnalysis.Text.TextSpan},System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Get all of the declaration errors within the syntax tree associated with this\r\n    object. Does not get errors involving incorrect syntax, compiling method bodies or initializers.\r\n    </summary>\r\n    <param name=\"span\">Optional span within the syntax tree for which to get diagnostics.\r\n    If no argument is specified, then diagnostics for the entire tree are returned.</param>\r\n    <param name=\"cancellationToken\">A cancellation token that can be used to cancel the\r\n    process of obtaining the diagnostics.</param>\r\n    <remarks>The declaration errors for a syntax tree are cached. The first time this method\r\n    is called, all declarations are analyzed for diagnostics. Calling this a second time\r\n    will return the cached diagnostics.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 305
              },
              "Id": "M:Microsoft.CodeAnalysis.SemanticModel.GetDeclarationDiagnostics(System.Nullable{Microsoft.CodeAnalysis.Text.TextSpan},System.Threading.CancellationToken)",
              "Parent": "T:Microsoft.CodeAnalysis.SemanticModel",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.GetDeclarationDiagnostics(System.Nullable{Microsoft.CodeAnalysis.Text.TextSpan},System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Get all of the declaration errors within the syntax tree associated with this\r\n    object. Does not get errors involving incorrect syntax, compiling method bodies or initializers.\r\n    </summary>\r\n    <param name=\"span\">Optional span within the syntax tree for which to get diagnostics.\r\n    If no argument is specified, then diagnostics for the entire tree are returned.</param>\r\n    <param name=\"cancellationToken\">A cancellation token that can be used to cancel the\r\n    process of obtaining the diagnostics.</param>\r\n    <remarks>The declaration errors for a syntax tree are cached. The first time this method\r\n    is called, all declarations are analyzed for diagnostics. Calling this a second time\r\n    will return the cached diagnostics.\r\n    </remarks>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxNode : declaration": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.ISymbol": ""
                },
                "Content": "protected abstract ISymbol GetDeclaredSymbolCore(SyntaxNode declaration, CancellationToken cancellationToken = default (CancellationToken));",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.GetDeclaredSymbolCore(Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Gets the symbol associated with a declaration syntax node.\r\n    </summary>\r\n    <param name=\"declaration\">A syntax node that is a declaration. This can be any type\r\n    derived from MemberDeclarationSyntax, TypeDeclarationSyntax, EnumDeclarationSyntax,\r\n    NamespaceDeclarationSyntax, ParameterSyntax, TypeParameterSyntax, or the alias part of a\r\n    UsingDirectiveSyntax</param>\r\n    <param name=\"cancellationToken\">The cancellation token.</param>\r\n    <returns>The symbol declared by the node or null if the node is not a declaration.</returns>\r\n</member>\r\n",
                "StartLine": 361
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxNode : declaration": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.ISymbol": ""
                },
                "Content": "protected abstract ISymbol GetDeclaredSymbolCore(SyntaxNode declaration, CancellationToken cancellationToken = default (CancellationToken));",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.GetDeclaredSymbolCore(Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Gets the symbol associated with a declaration syntax node.\r\n    </summary>\r\n    <param name=\"declaration\">A syntax node that is a declaration. This can be any type\r\n    derived from MemberDeclarationSyntax, TypeDeclarationSyntax, EnumDeclarationSyntax,\r\n    NamespaceDeclarationSyntax, ParameterSyntax, TypeParameterSyntax, or the alias part of a\r\n    UsingDirectiveSyntax</param>\r\n    <param name=\"cancellationToken\">The cancellation token.</param>\r\n    <returns>The symbol declared by the node or null if the node is not a declaration.</returns>\r\n</member>\r\n",
                "StartLine": 361
              },
              "Id": "M:Microsoft.CodeAnalysis.SemanticModel.GetDeclaredSymbolCore(Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)",
              "Parent": "T:Microsoft.CodeAnalysis.SemanticModel",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.GetDeclaredSymbolCore(Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Gets the symbol associated with a declaration syntax node.\r\n    </summary>\r\n    <param name=\"declaration\">A syntax node that is a declaration. This can be any type\r\n    derived from MemberDeclarationSyntax, TypeDeclarationSyntax, EnumDeclarationSyntax,\r\n    NamespaceDeclarationSyntax, ParameterSyntax, TypeParameterSyntax, or the alias part of a\r\n    UsingDirectiveSyntax</param>\r\n    <param name=\"cancellationToken\">The cancellation token.</param>\r\n    <returns>The symbol declared by the node or null if the node is not a declaration.</returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxNode : declaration": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ISymbol}": ""
                },
                "Content": "protected abstract ImmutableArray<ISymbol> GetDeclaredSymbolsCore(SyntaxNode declaration, CancellationToken cancellationToken = default (CancellationToken));",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.GetDeclaredSymbolsCore(Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Gets the symbol associated with a declaration syntax node. Unlike <see cref=\"M:Microsoft.CodeAnalysis.SemanticModel.GetDeclaredSymbolForNode(Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)\"/>,\r\n    this method returns all symbols declared by a given declaration syntax node. Specifically, in the case of field declaration syntax nodes,\r\n    which can declare multiple symbols, this method returns all declared symbols.\r\n    </summary>\r\n    <param name=\"declaration\">A syntax node that is a declaration. This can be any type\r\n    derived from MemberDeclarationSyntax, TypeDeclarationSyntax, EnumDeclarationSyntax,\r\n    NamespaceDeclarationSyntax, ParameterSyntax, TypeParameterSyntax, or the alias part of a\r\n    UsingDirectiveSyntax</param>\r\n    <param name=\"cancellationToken\">The cancellation token.</param>\r\n    <returns>The symbols declared by the node.</returns>\r\n</member>\r\n",
                "StartLine": 390
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxNode : declaration": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ISymbol}": ""
                },
                "Content": "protected abstract ImmutableArray<ISymbol> GetDeclaredSymbolsCore(SyntaxNode declaration, CancellationToken cancellationToken = default (CancellationToken));",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.GetDeclaredSymbolsCore(Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Gets the symbol associated with a declaration syntax node. Unlike <see cref=\"M:Microsoft.CodeAnalysis.SemanticModel.GetDeclaredSymbolForNode(Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)\"/>,\r\n    this method returns all symbols declared by a given declaration syntax node. Specifically, in the case of field declaration syntax nodes,\r\n    which can declare multiple symbols, this method returns all declared symbols.\r\n    </summary>\r\n    <param name=\"declaration\">A syntax node that is a declaration. This can be any type\r\n    derived from MemberDeclarationSyntax, TypeDeclarationSyntax, EnumDeclarationSyntax,\r\n    NamespaceDeclarationSyntax, ParameterSyntax, TypeParameterSyntax, or the alias part of a\r\n    UsingDirectiveSyntax</param>\r\n    <param name=\"cancellationToken\">The cancellation token.</param>\r\n    <returns>The symbols declared by the node.</returns>\r\n</member>\r\n",
                "StartLine": 390
              },
              "Id": "M:Microsoft.CodeAnalysis.SemanticModel.GetDeclaredSymbolsCore(Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)",
              "Parent": "T:Microsoft.CodeAnalysis.SemanticModel",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.GetDeclaredSymbolsCore(Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Gets the symbol associated with a declaration syntax node. Unlike <see cref=\"M:Microsoft.CodeAnalysis.SemanticModel.GetDeclaredSymbolForNode(Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)\"/>,\r\n    this method returns all symbols declared by a given declaration syntax node. Specifically, in the case of field declaration syntax nodes,\r\n    which can declare multiple symbols, this method returns all declared symbols.\r\n    </summary>\r\n    <param name=\"declaration\">A syntax node that is a declaration. This can be any type\r\n    derived from MemberDeclarationSyntax, TypeDeclarationSyntax, EnumDeclarationSyntax,\r\n    NamespaceDeclarationSyntax, ParameterSyntax, TypeParameterSyntax, or the alias part of a\r\n    UsingDirectiveSyntax</param>\r\n    <param name=\"cancellationToken\">The cancellation token.</param>\r\n    <returns>The symbols declared by the node.</returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Nullable{Microsoft.CodeAnalysis.Text.TextSpan} : span": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostic}": ""
                },
                "Content": "public abstract ImmutableArray<Diagnostic> GetDiagnostics(TextSpan? span = null, CancellationToken cancellationToken = default (CancellationToken));",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.GetDiagnostics(System.Nullable{Microsoft.CodeAnalysis.Text.TextSpan},System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Get all the errors within the syntax tree associated with this object. Includes errors\r\n    involving compiling method bodies or initializers, in addition to the errors returned by\r\n    GetDeclarationDiagnostics.\r\n    </summary>\r\n    <param name=\"span\">Optional span within the syntax tree for which to get diagnostics.\r\n    If no argument is specified, then diagnostics for the entire tree are returned.</param>\r\n    <param name=\"cancellationToken\">A cancellation token that can be used to cancel the\r\n    process of obtaining the diagnostics.</param>\r\n    <remarks>\r\n    Because this method must semantically bind all method bodies and initializers to check\r\n    for diagnostics, it may take a significant amount of time. Unlike\r\n    GetDeclarationDiagnostics, diagnostics for method bodies and initializers are not\r\n    cached, any semantic information used to obtain the diagnostics is discarded.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 336
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Nullable{Microsoft.CodeAnalysis.Text.TextSpan} : span": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostic}": ""
                },
                "Content": "public abstract ImmutableArray<Diagnostic> GetDiagnostics(TextSpan? span = null, CancellationToken cancellationToken = default (CancellationToken));",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.GetDiagnostics(System.Nullable{Microsoft.CodeAnalysis.Text.TextSpan},System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Get all the errors within the syntax tree associated with this object. Includes errors\r\n    involving compiling method bodies or initializers, in addition to the errors returned by\r\n    GetDeclarationDiagnostics.\r\n    </summary>\r\n    <param name=\"span\">Optional span within the syntax tree for which to get diagnostics.\r\n    If no argument is specified, then diagnostics for the entire tree are returned.</param>\r\n    <param name=\"cancellationToken\">A cancellation token that can be used to cancel the\r\n    process of obtaining the diagnostics.</param>\r\n    <remarks>\r\n    Because this method must semantically bind all method bodies and initializers to check\r\n    for diagnostics, it may take a significant amount of time. Unlike\r\n    GetDeclarationDiagnostics, diagnostics for method bodies and initializers are not\r\n    cached, any semantic information used to obtain the diagnostics is discarded.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 336
              },
              "Id": "M:Microsoft.CodeAnalysis.SemanticModel.GetDiagnostics(System.Nullable{Microsoft.CodeAnalysis.Text.TextSpan},System.Threading.CancellationToken)",
              "Parent": "T:Microsoft.CodeAnalysis.SemanticModel",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.GetDiagnostics(System.Nullable{Microsoft.CodeAnalysis.Text.TextSpan},System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Get all the errors within the syntax tree associated with this object. Includes errors\r\n    involving compiling method bodies or initializers, in addition to the errors returned by\r\n    GetDeclarationDiagnostics.\r\n    </summary>\r\n    <param name=\"span\">Optional span within the syntax tree for which to get diagnostics.\r\n    If no argument is specified, then diagnostics for the entire tree are returned.</param>\r\n    <param name=\"cancellationToken\">A cancellation token that can be used to cancel the\r\n    process of obtaining the diagnostics.</param>\r\n    <remarks>\r\n    Because this method must semantically bind all method bodies and initializers to check\r\n    for diagnostics, it may take a significant amount of time. Unlike\r\n    GetDeclarationDiagnostics, diagnostics for method bodies and initializers are not\r\n    cached, any semantic information used to obtain the diagnostics is discarded.\r\n    </remarks>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Int32 : position": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.ISymbol": ""
                },
                "Content": "public ISymbol GetEnclosingSymbol(int position, CancellationToken cancellationToken = default (CancellationToken))",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.GetEnclosingSymbol(System.Int32,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Given a position in the SyntaxTree for this SemanticModel returns the innermost Symbol\r\n    that the position is considered inside of.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 728
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Int32 : position": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.ISymbol": ""
                },
                "Content": "public ISymbol GetEnclosingSymbol(int position, CancellationToken cancellationToken = default (CancellationToken))",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.GetEnclosingSymbol(System.Int32,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Given a position in the SyntaxTree for this SemanticModel returns the innermost Symbol\r\n    that the position is considered inside of.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 728
              },
              "Id": "M:Microsoft.CodeAnalysis.SemanticModel.GetEnclosingSymbol(System.Int32,System.Threading.CancellationToken)",
              "Parent": "T:Microsoft.CodeAnalysis.SemanticModel",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.GetEnclosingSymbol(System.Int32,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Given a position in the SyntaxTree for this SemanticModel returns the innermost Symbol\r\n    that the position is considered inside of.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Int32 : position": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.ISymbol": ""
                },
                "Content": "protected abstract ISymbol GetEnclosingSymbolCore(int position, CancellationToken cancellationToken = default (CancellationToken));",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.GetEnclosingSymbolCore(System.Int32,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Given a position in the SyntaxTree for this SemanticModel returns the innermost Symbol\r\n    that the position is considered inside of.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 737
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Int32 : position": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.ISymbol": ""
                },
                "Content": "protected abstract ISymbol GetEnclosingSymbolCore(int position, CancellationToken cancellationToken = default (CancellationToken));",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.GetEnclosingSymbolCore(System.Int32,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Given a position in the SyntaxTree for this SemanticModel returns the innermost Symbol\r\n    that the position is considered inside of.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 737
              },
              "Id": "M:Microsoft.CodeAnalysis.SemanticModel.GetEnclosingSymbolCore(System.Int32,System.Threading.CancellationToken)",
              "Parent": "T:Microsoft.CodeAnalysis.SemanticModel",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.GetEnclosingSymbolCore(System.Int32,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Given a position in the SyntaxTree for this SemanticModel returns the innermost Symbol\r\n    that the position is considered inside of.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxNode : node": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ISymbol}": ""
                },
                "Content": "protected abstract ImmutableArray<ISymbol> GetMemberGroupCore(SyntaxNode node, CancellationToken cancellationToken = default (CancellationToken));",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.GetMemberGroupCore(Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    When getting information for a symbol that resolves to a method group or property group,\r\n    from which a method is then chosen; the chosen method or property is present in Symbol;\r\n    all methods in the group that was consulted are placed in this property.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 722
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxNode : node": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ISymbol}": ""
                },
                "Content": "protected abstract ImmutableArray<ISymbol> GetMemberGroupCore(SyntaxNode node, CancellationToken cancellationToken = default (CancellationToken));",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.GetMemberGroupCore(Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    When getting information for a symbol that resolves to a method group or property group,\r\n    from which a method is then chosen; the chosen method or property is present in Symbol;\r\n    all methods in the group that was consulted are placed in this property.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 722
              },
              "Id": "M:Microsoft.CodeAnalysis.SemanticModel.GetMemberGroupCore(Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)",
              "Parent": "T:Microsoft.CodeAnalysis.SemanticModel",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.GetMemberGroupCore(Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    When getting information for a symbol that resolves to a method group or property group,\r\n    from which a method is then chosen; the chosen method or property is present in Symbol;\r\n    all methods in the group that was consulted are placed in this property.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Nullable{Microsoft.CodeAnalysis.Text.TextSpan} : span": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostic}": ""
                },
                "Content": "public abstract ImmutableArray<Diagnostic> GetMethodBodyDiagnostics(TextSpan? span = null, CancellationToken cancellationToken = default (CancellationToken));",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.GetMethodBodyDiagnostics(System.Nullable{Microsoft.CodeAnalysis.Text.TextSpan},System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Get all of the method body and initializer errors within the syntax tree associated with this\r\n    object. Does not get errors involving incorrect syntax or declarations.\r\n    </summary>\r\n    <param name=\"span\">Optional span within the syntax tree for which to get diagnostics.\r\n    If no argument is specified, then diagnostics for the entire tree are returned.</param>\r\n    <param name=\"cancellationToken\">A cancellation token that can be used to cancel the\r\n    process of obtaining the diagnostics.</param>\r\n    <remarks>The method body errors for a syntax tree are not cached. The first time this method\r\n    is called, all method bodies are analyzed for diagnostics. Calling this a second time\r\n    will repeat this work.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 319
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Nullable{Microsoft.CodeAnalysis.Text.TextSpan} : span": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostic}": ""
                },
                "Content": "public abstract ImmutableArray<Diagnostic> GetMethodBodyDiagnostics(TextSpan? span = null, CancellationToken cancellationToken = default (CancellationToken));",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.GetMethodBodyDiagnostics(System.Nullable{Microsoft.CodeAnalysis.Text.TextSpan},System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Get all of the method body and initializer errors within the syntax tree associated with this\r\n    object. Does not get errors involving incorrect syntax or declarations.\r\n    </summary>\r\n    <param name=\"span\">Optional span within the syntax tree for which to get diagnostics.\r\n    If no argument is specified, then diagnostics for the entire tree are returned.</param>\r\n    <param name=\"cancellationToken\">A cancellation token that can be used to cancel the\r\n    process of obtaining the diagnostics.</param>\r\n    <remarks>The method body errors for a syntax tree are not cached. The first time this method\r\n    is called, all method bodies are analyzed for diagnostics. Calling this a second time\r\n    will repeat this work.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 319
              },
              "Id": "M:Microsoft.CodeAnalysis.SemanticModel.GetMethodBodyDiagnostics(System.Nullable{Microsoft.CodeAnalysis.Text.TextSpan},System.Threading.CancellationToken)",
              "Parent": "T:Microsoft.CodeAnalysis.SemanticModel",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.GetMethodBodyDiagnostics(System.Nullable{Microsoft.CodeAnalysis.Text.TextSpan},System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Get all of the method body and initializer errors within the syntax tree associated with this\r\n    object. Does not get errors involving incorrect syntax or declarations.\r\n    </summary>\r\n    <param name=\"span\">Optional span within the syntax tree for which to get diagnostics.\r\n    If no argument is specified, then diagnostics for the entire tree are returned.</param>\r\n    <param name=\"cancellationToken\">A cancellation token that can be used to cancel the\r\n    process of obtaining the diagnostics.</param>\r\n    <remarks>The method body errors for a syntax tree are not cached. The first time this method\r\n    is called, all method bodies are analyzed for diagnostics. Calling this a second time\r\n    will repeat this work.\r\n    </remarks>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxNode : nameSyntax": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.PreprocessingSymbolInfo": ""
                },
                "Content": "public PreprocessingSymbolInfo GetPreprocessingSymbolInfo(SyntaxNode nameSyntax)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.GetPreprocessingSymbolInfo(Microsoft.CodeAnalysis.SyntaxNode)\">\r\n    <summary>\r\n    If <paramref name=\"nameSyntax\"/> is an identifier name syntax node, return the <see cref=\"T:Microsoft.CodeAnalysis.PreprocessingSymbolInfo\"/> corresponding\r\n    to it.\r\n    </summary>\r\n    <param name=\"nameSyntax\">The nameSyntax node to get semantic information for.</param>\r\n</member>\r\n",
                "StartLine": 802
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxNode : nameSyntax": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.PreprocessingSymbolInfo": ""
                },
                "Content": "public PreprocessingSymbolInfo GetPreprocessingSymbolInfo(SyntaxNode nameSyntax)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.GetPreprocessingSymbolInfo(Microsoft.CodeAnalysis.SyntaxNode)\">\r\n    <summary>\r\n    If <paramref name=\"nameSyntax\"/> is an identifier name syntax node, return the <see cref=\"T:Microsoft.CodeAnalysis.PreprocessingSymbolInfo\"/> corresponding\r\n    to it.\r\n    </summary>\r\n    <param name=\"nameSyntax\">The nameSyntax node to get semantic information for.</param>\r\n</member>\r\n",
                "StartLine": 802
              },
              "Id": "M:Microsoft.CodeAnalysis.SemanticModel.GetPreprocessingSymbolInfo(Microsoft.CodeAnalysis.SyntaxNode)",
              "Parent": "T:Microsoft.CodeAnalysis.SemanticModel",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.GetPreprocessingSymbolInfo(Microsoft.CodeAnalysis.SyntaxNode)\">\r\n    <summary>\r\n    If <paramref name=\"nameSyntax\"/> is an identifier name syntax node, return the <see cref=\"T:Microsoft.CodeAnalysis.PreprocessingSymbolInfo\"/> corresponding\r\n    to it.\r\n    </summary>\r\n    <param name=\"nameSyntax\">The nameSyntax node to get semantic information for.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxNode : nameSyntax": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.PreprocessingSymbolInfo": ""
                },
                "Content": "protected abstract PreprocessingSymbolInfo GetPreprocessingSymbolInfoCore(SyntaxNode nameSyntax);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.GetPreprocessingSymbolInfoCore(Microsoft.CodeAnalysis.SyntaxNode)\">\r\n    <summary>\r\n    If <paramref name=\"nameSyntax\"/> is an identifier name syntax node, return the <see cref=\"T:Microsoft.CodeAnalysis.PreprocessingSymbolInfo\"/> corresponding\r\n    to it.\r\n    </summary>\r\n    <param name=\"nameSyntax\">The nameSyntax node to get semantic information for.</param>\r\n</member>\r\n",
                "StartLine": 812
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxNode : nameSyntax": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.PreprocessingSymbolInfo": ""
                },
                "Content": "protected abstract PreprocessingSymbolInfo GetPreprocessingSymbolInfoCore(SyntaxNode nameSyntax);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.GetPreprocessingSymbolInfoCore(Microsoft.CodeAnalysis.SyntaxNode)\">\r\n    <summary>\r\n    If <paramref name=\"nameSyntax\"/> is an identifier name syntax node, return the <see cref=\"T:Microsoft.CodeAnalysis.PreprocessingSymbolInfo\"/> corresponding\r\n    to it.\r\n    </summary>\r\n    <param name=\"nameSyntax\">The nameSyntax node to get semantic information for.</param>\r\n</member>\r\n",
                "StartLine": 812
              },
              "Id": "M:Microsoft.CodeAnalysis.SemanticModel.GetPreprocessingSymbolInfoCore(Microsoft.CodeAnalysis.SyntaxNode)",
              "Parent": "T:Microsoft.CodeAnalysis.SemanticModel",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.GetPreprocessingSymbolInfoCore(Microsoft.CodeAnalysis.SyntaxNode)\">\r\n    <summary>\r\n    If <paramref name=\"nameSyntax\"/> is an identifier name syntax node, return the <see cref=\"T:Microsoft.CodeAnalysis.PreprocessingSymbolInfo\"/> corresponding\r\n    to it.\r\n    </summary>\r\n    <param name=\"nameSyntax\">The nameSyntax node to get semantic information for.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SpeculativeBindingOption : bindingOption": "",
                  "T:Microsoft.CodeAnalysis.SyntaxNode : nameSyntax": "",
                  "T:System.Int32 : position": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.IAliasSymbol": ""
                },
                "Content": "protected abstract IAliasSymbol GetSpeculativeAliasInfoCore(int position, SyntaxNode nameSyntax, SpeculativeBindingOption bindingOption);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.GetSpeculativeAliasInfoCore(System.Int32,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SpeculativeBindingOption)\">\r\n    <summary>\r\n    Binds the name in the context of the specified location and sees if it resolves to an\r\n    alias name. If it does, return the AliasSymbol corresponding to it. Otherwise, return null.\r\n    </summary>\r\n    <param name=\"position\">A character position used to identify a declaration scope and\r\n    accessibility. This character position must be within the FullSpan of the Root syntax\r\n    node in this SemanticModel.\r\n    </param>\r\n    <param name=\"nameSyntax\">A syntax node that represents a name. This syntax\r\n    node need not and typically does not appear in the source code referred to by the\r\n    SemanticModel instance.</param>\r\n    <param name=\"bindingOption\">Indicates whether to binding the name as a full expression,\r\n    or as a type or namespace. If SpeculativeBindingOption.BindAsTypeOrNamespace is supplied, then\r\n    expression should derive from TypeSyntax.</param>\r\n    <remarks>The passed in name is interpreted as a stand-alone name, as if it\r\n    appeared by itself somewhere within the scope that encloses \"position\".</remarks>\r\n</member>\r\n",
                "StartLine": 281
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SpeculativeBindingOption : bindingOption": "",
                  "T:Microsoft.CodeAnalysis.SyntaxNode : nameSyntax": "",
                  "T:System.Int32 : position": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.IAliasSymbol": ""
                },
                "Content": "protected abstract IAliasSymbol GetSpeculativeAliasInfoCore(int position, SyntaxNode nameSyntax, SpeculativeBindingOption bindingOption);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.GetSpeculativeAliasInfoCore(System.Int32,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SpeculativeBindingOption)\">\r\n    <summary>\r\n    Binds the name in the context of the specified location and sees if it resolves to an\r\n    alias name. If it does, return the AliasSymbol corresponding to it. Otherwise, return null.\r\n    </summary>\r\n    <param name=\"position\">A character position used to identify a declaration scope and\r\n    accessibility. This character position must be within the FullSpan of the Root syntax\r\n    node in this SemanticModel.\r\n    </param>\r\n    <param name=\"nameSyntax\">A syntax node that represents a name. This syntax\r\n    node need not and typically does not appear in the source code referred to by the\r\n    SemanticModel instance.</param>\r\n    <param name=\"bindingOption\">Indicates whether to binding the name as a full expression,\r\n    or as a type or namespace. If SpeculativeBindingOption.BindAsTypeOrNamespace is supplied, then\r\n    expression should derive from TypeSyntax.</param>\r\n    <remarks>The passed in name is interpreted as a stand-alone name, as if it\r\n    appeared by itself somewhere within the scope that encloses \"position\".</remarks>\r\n</member>\r\n",
                "StartLine": 281
              },
              "Id": "M:Microsoft.CodeAnalysis.SemanticModel.GetSpeculativeAliasInfoCore(System.Int32,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SpeculativeBindingOption)",
              "Parent": "T:Microsoft.CodeAnalysis.SemanticModel",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.GetSpeculativeAliasInfoCore(System.Int32,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SpeculativeBindingOption)\">\r\n    <summary>\r\n    Binds the name in the context of the specified location and sees if it resolves to an\r\n    alias name. If it does, return the AliasSymbol corresponding to it. Otherwise, return null.\r\n    </summary>\r\n    <param name=\"position\">A character position used to identify a declaration scope and\r\n    accessibility. This character position must be within the FullSpan of the Root syntax\r\n    node in this SemanticModel.\r\n    </param>\r\n    <param name=\"nameSyntax\">A syntax node that represents a name. This syntax\r\n    node need not and typically does not appear in the source code referred to by the\r\n    SemanticModel instance.</param>\r\n    <param name=\"bindingOption\">Indicates whether to binding the name as a full expression,\r\n    or as a type or namespace. If SpeculativeBindingOption.BindAsTypeOrNamespace is supplied, then\r\n    expression should derive from TypeSyntax.</param>\r\n    <remarks>The passed in name is interpreted as a stand-alone name, as if it\r\n    appeared by itself somewhere within the scope that encloses \"position\".</remarks>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SpeculativeBindingOption : bindingOption": "",
                  "T:Microsoft.CodeAnalysis.SyntaxNode : expression": "",
                  "T:System.Int32 : position": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SymbolInfo": ""
                },
                "Content": "protected abstract SymbolInfo GetSpeculativeSymbolInfoCore(int position, SyntaxNode expression, SpeculativeBindingOption bindingOption);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.GetSpeculativeSymbolInfoCore(System.Int32,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SpeculativeBindingOption)\">\r\n    <summary>\r\n    Binds the node in the context of the specified location and get semantic information\r\n    such as type, symbols and diagnostics. This method is used to get semantic information\r\n    about an expression that did not actually appear in the source code.\r\n    </summary>\r\n    <param name=\"position\">A character position used to identify a declaration scope and\r\n    accessibility. This character position must be within the FullSpan of the Root syntax\r\n    node in this SemanticModel.\r\n    </param>\r\n    <param name=\"expression\">A syntax node that represents a parsed expression. This syntax\r\n    node need not and typically does not appear in the source code referred to  SemanticModel\r\n    instance.</param>\r\n    <param name=\"bindingOption\">Indicates whether to binding the expression as a full expressions,\r\n    or as a type or namespace. If SpeculativeBindingOption.BindAsTypeOrNamespace is supplied, then\r\n    expression should derive from TypeSyntax.</param>\r\n    <returns>The semantic information for the topmost node of the expression.</returns>\r\n    <remarks>The passed in expression is interpreted as a stand-alone expression, as if it\r\n    appeared by itself somewhere within the scope that encloses \"position\".</remarks>\r\n</member>\r\n",
                "StartLine": 124
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SpeculativeBindingOption : bindingOption": "",
                  "T:Microsoft.CodeAnalysis.SyntaxNode : expression": "",
                  "T:System.Int32 : position": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SymbolInfo": ""
                },
                "Content": "protected abstract SymbolInfo GetSpeculativeSymbolInfoCore(int position, SyntaxNode expression, SpeculativeBindingOption bindingOption);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.GetSpeculativeSymbolInfoCore(System.Int32,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SpeculativeBindingOption)\">\r\n    <summary>\r\n    Binds the node in the context of the specified location and get semantic information\r\n    such as type, symbols and diagnostics. This method is used to get semantic information\r\n    about an expression that did not actually appear in the source code.\r\n    </summary>\r\n    <param name=\"position\">A character position used to identify a declaration scope and\r\n    accessibility. This character position must be within the FullSpan of the Root syntax\r\n    node in this SemanticModel.\r\n    </param>\r\n    <param name=\"expression\">A syntax node that represents a parsed expression. This syntax\r\n    node need not and typically does not appear in the source code referred to  SemanticModel\r\n    instance.</param>\r\n    <param name=\"bindingOption\">Indicates whether to binding the expression as a full expressions,\r\n    or as a type or namespace. If SpeculativeBindingOption.BindAsTypeOrNamespace is supplied, then\r\n    expression should derive from TypeSyntax.</param>\r\n    <returns>The semantic information for the topmost node of the expression.</returns>\r\n    <remarks>The passed in expression is interpreted as a stand-alone expression, as if it\r\n    appeared by itself somewhere within the scope that encloses \"position\".</remarks>\r\n</member>\r\n",
                "StartLine": 124
              },
              "Id": "M:Microsoft.CodeAnalysis.SemanticModel.GetSpeculativeSymbolInfoCore(System.Int32,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SpeculativeBindingOption)",
              "Parent": "T:Microsoft.CodeAnalysis.SemanticModel",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.GetSpeculativeSymbolInfoCore(System.Int32,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SpeculativeBindingOption)\">\r\n    <summary>\r\n    Binds the node in the context of the specified location and get semantic information\r\n    such as type, symbols and diagnostics. This method is used to get semantic information\r\n    about an expression that did not actually appear in the source code.\r\n    </summary>\r\n    <param name=\"position\">A character position used to identify a declaration scope and\r\n    accessibility. This character position must be within the FullSpan of the Root syntax\r\n    node in this SemanticModel.\r\n    </param>\r\n    <param name=\"expression\">A syntax node that represents a parsed expression. This syntax\r\n    node need not and typically does not appear in the source code referred to  SemanticModel\r\n    instance.</param>\r\n    <param name=\"bindingOption\">Indicates whether to binding the expression as a full expressions,\r\n    or as a type or namespace. If SpeculativeBindingOption.BindAsTypeOrNamespace is supplied, then\r\n    expression should derive from TypeSyntax.</param>\r\n    <returns>The semantic information for the topmost node of the expression.</returns>\r\n    <remarks>The passed in expression is interpreted as a stand-alone expression, as if it\r\n    appeared by itself somewhere within the scope that encloses \"position\".</remarks>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SpeculativeBindingOption : bindingOption": "",
                  "T:Microsoft.CodeAnalysis.SyntaxNode : expression": "",
                  "T:System.Int32 : position": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.TypeInfo": ""
                },
                "Content": "protected abstract TypeInfo GetSpeculativeTypeInfoCore(int position, SyntaxNode expression, SpeculativeBindingOption bindingOption);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.GetSpeculativeTypeInfoCore(System.Int32,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SpeculativeBindingOption)\">\r\n    <summary>\r\n    Binds the node in the context of the specified location and get semantic information\r\n    such as type, symbols and diagnostics. This method is used to get semantic information\r\n    about an expression that did not actually appear in the source code.\r\n    </summary>\r\n    <param name=\"position\">A character position used to identify a declaration scope and\r\n    accessibility. This character position must be within the FullSpan of the Root syntax\r\n    node in this SemanticModel.\r\n    </param>\r\n    <param name=\"expression\">A syntax node that represents a parsed expression. This syntax\r\n    node need not and typically does not appear in the source code referred to  SemanticModel\r\n    instance.</param>\r\n    <param name=\"bindingOption\">Indicates whether to binding the expression as a full expressions,\r\n    or as a type or namespace. If SpeculativeBindingOption.BindAsTypeOrNamespace is supplied, then\r\n    expression should derive from TypeSyntax.</param>\r\n    <returns>The semantic information for the topmost node of the expression.</returns>\r\n    <remarks>The passed in expression is interpreted as a stand-alone expression, as if it\r\n    appeared by itself somewhere within the scope that encloses \"position\".</remarks>\r\n</member>\r\n",
                "StartLine": 167
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SpeculativeBindingOption : bindingOption": "",
                  "T:Microsoft.CodeAnalysis.SyntaxNode : expression": "",
                  "T:System.Int32 : position": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.TypeInfo": ""
                },
                "Content": "protected abstract TypeInfo GetSpeculativeTypeInfoCore(int position, SyntaxNode expression, SpeculativeBindingOption bindingOption);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.GetSpeculativeTypeInfoCore(System.Int32,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SpeculativeBindingOption)\">\r\n    <summary>\r\n    Binds the node in the context of the specified location and get semantic information\r\n    such as type, symbols and diagnostics. This method is used to get semantic information\r\n    about an expression that did not actually appear in the source code.\r\n    </summary>\r\n    <param name=\"position\">A character position used to identify a declaration scope and\r\n    accessibility. This character position must be within the FullSpan of the Root syntax\r\n    node in this SemanticModel.\r\n    </param>\r\n    <param name=\"expression\">A syntax node that represents a parsed expression. This syntax\r\n    node need not and typically does not appear in the source code referred to  SemanticModel\r\n    instance.</param>\r\n    <param name=\"bindingOption\">Indicates whether to binding the expression as a full expressions,\r\n    or as a type or namespace. If SpeculativeBindingOption.BindAsTypeOrNamespace is supplied, then\r\n    expression should derive from TypeSyntax.</param>\r\n    <returns>The semantic information for the topmost node of the expression.</returns>\r\n    <remarks>The passed in expression is interpreted as a stand-alone expression, as if it\r\n    appeared by itself somewhere within the scope that encloses \"position\".</remarks>\r\n</member>\r\n",
                "StartLine": 167
              },
              "Id": "M:Microsoft.CodeAnalysis.SemanticModel.GetSpeculativeTypeInfoCore(System.Int32,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SpeculativeBindingOption)",
              "Parent": "T:Microsoft.CodeAnalysis.SemanticModel",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.GetSpeculativeTypeInfoCore(System.Int32,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SpeculativeBindingOption)\">\r\n    <summary>\r\n    Binds the node in the context of the specified location and get semantic information\r\n    such as type, symbols and diagnostics. This method is used to get semantic information\r\n    about an expression that did not actually appear in the source code.\r\n    </summary>\r\n    <param name=\"position\">A character position used to identify a declaration scope and\r\n    accessibility. This character position must be within the FullSpan of the Root syntax\r\n    node in this SemanticModel.\r\n    </param>\r\n    <param name=\"expression\">A syntax node that represents a parsed expression. This syntax\r\n    node need not and typically does not appear in the source code referred to  SemanticModel\r\n    instance.</param>\r\n    <param name=\"bindingOption\">Indicates whether to binding the expression as a full expressions,\r\n    or as a type or namespace. If SpeculativeBindingOption.BindAsTypeOrNamespace is supplied, then\r\n    expression should derive from TypeSyntax.</param>\r\n    <returns>The semantic information for the topmost node of the expression.</returns>\r\n    <remarks>The passed in expression is interpreted as a stand-alone expression, as if it\r\n    appeared by itself somewhere within the scope that encloses \"position\".</remarks>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxNode : node": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SymbolInfo": ""
                },
                "Content": "protected abstract SymbolInfo GetSymbolInfoCore(SyntaxNode node, CancellationToken cancellationToken = default (CancellationToken));",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.GetSymbolInfoCore(Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Gets symbol information about a syntax node.\r\n    </summary>\r\n    <param name=\"node\">The syntax node to get semantic information for.</param>\r\n    <param name=\"cancellationToken\">A cancellation token that can be used to cancel the\r\n    process of obtaining the semantic info.</param>\r\n</member>\r\n",
                "StartLine": 81
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxNode : node": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SymbolInfo": ""
                },
                "Content": "protected abstract SymbolInfo GetSymbolInfoCore(SyntaxNode node, CancellationToken cancellationToken = default (CancellationToken));",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.GetSymbolInfoCore(Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Gets symbol information about a syntax node.\r\n    </summary>\r\n    <param name=\"node\">The syntax node to get semantic information for.</param>\r\n    <param name=\"cancellationToken\">A cancellation token that can be used to cancel the\r\n    process of obtaining the semantic info.</param>\r\n</member>\r\n",
                "StartLine": 81
              },
              "Id": "M:Microsoft.CodeAnalysis.SemanticModel.GetSymbolInfoCore(Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)",
              "Parent": "T:Microsoft.CodeAnalysis.SemanticModel",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.GetSymbolInfoCore(Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Gets symbol information about a syntax node.\r\n    </summary>\r\n    <param name=\"node\">The syntax node to get semantic information for.</param>\r\n    <param name=\"cancellationToken\">A cancellation token that can be used to cancel the\r\n    process of obtaining the semantic info.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Nullable{Microsoft.CodeAnalysis.Text.TextSpan} : span": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostic}": ""
                },
                "Content": "public abstract ImmutableArray<Diagnostic> GetSyntaxDiagnostics(TextSpan? span = null, CancellationToken cancellationToken = default (CancellationToken));",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.GetSyntaxDiagnostics(System.Nullable{Microsoft.CodeAnalysis.Text.TextSpan},System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Get all of the syntax errors within the syntax tree associated with this\r\n    object. Does not get errors involving declarations or compiling method bodies or initializers.\r\n    </summary>\r\n    <param name=\"span\">Optional span within the syntax tree for which to get diagnostics.\r\n    If no argument is specified, then diagnostics for the entire tree are returned.</param>\r\n    <param name=\"cancellationToken\">A cancellation token that can be used to cancel the\r\n    process of obtaining the diagnostics.</param>\r\n</member>\r\n",
                "StartLine": 291
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Nullable{Microsoft.CodeAnalysis.Text.TextSpan} : span": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostic}": ""
                },
                "Content": "public abstract ImmutableArray<Diagnostic> GetSyntaxDiagnostics(TextSpan? span = null, CancellationToken cancellationToken = default (CancellationToken));",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.GetSyntaxDiagnostics(System.Nullable{Microsoft.CodeAnalysis.Text.TextSpan},System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Get all of the syntax errors within the syntax tree associated with this\r\n    object. Does not get errors involving declarations or compiling method bodies or initializers.\r\n    </summary>\r\n    <param name=\"span\">Optional span within the syntax tree for which to get diagnostics.\r\n    If no argument is specified, then diagnostics for the entire tree are returned.</param>\r\n    <param name=\"cancellationToken\">A cancellation token that can be used to cancel the\r\n    process of obtaining the diagnostics.</param>\r\n</member>\r\n",
                "StartLine": 291
              },
              "Id": "M:Microsoft.CodeAnalysis.SemanticModel.GetSyntaxDiagnostics(System.Nullable{Microsoft.CodeAnalysis.Text.TextSpan},System.Threading.CancellationToken)",
              "Parent": "T:Microsoft.CodeAnalysis.SemanticModel",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.GetSyntaxDiagnostics(System.Nullable{Microsoft.CodeAnalysis.Text.TextSpan},System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Get all of the syntax errors within the syntax tree associated with this\r\n    object. Does not get errors involving declarations or compiling method bodies or initializers.\r\n    </summary>\r\n    <param name=\"span\">Optional span within the syntax tree for which to get diagnostics.\r\n    If no argument is specified, then diagnostics for the entire tree are returned.</param>\r\n    <param name=\"cancellationToken\">A cancellation token that can be used to cancel the\r\n    process of obtaining the diagnostics.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxNode : node": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.TypeInfo": ""
                },
                "Content": "protected abstract TypeInfo GetTypeInfoCore(SyntaxNode node, CancellationToken cancellationToken = default (CancellationToken));",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.GetTypeInfoCore(Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Gets type information about a syntax node.\r\n    </summary>\r\n    <param name=\"node\">The syntax node to get semantic information for.</param>\r\n    <param name=\"cancellationToken\">A cancellation token that can be used to cancel the\r\n    process of obtaining the semantic info.</param>\r\n</member>\r\n",
                "StartLine": 186
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxNode : node": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.TypeInfo": ""
                },
                "Content": "protected abstract TypeInfo GetTypeInfoCore(SyntaxNode node, CancellationToken cancellationToken = default (CancellationToken));",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.GetTypeInfoCore(Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Gets type information about a syntax node.\r\n    </summary>\r\n    <param name=\"node\">The syntax node to get semantic information for.</param>\r\n    <param name=\"cancellationToken\">A cancellation token that can be used to cancel the\r\n    process of obtaining the semantic info.</param>\r\n</member>\r\n",
                "StartLine": 186
              },
              "Id": "M:Microsoft.CodeAnalysis.SemanticModel.GetTypeInfoCore(Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)",
              "Parent": "T:Microsoft.CodeAnalysis.SemanticModel",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.GetTypeInfoCore(Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Gets type information about a syntax node.\r\n    </summary>\r\n    <param name=\"node\">The syntax node to get semantic information for.</param>\r\n    <param name=\"cancellationToken\">A cancellation token that can be used to cancel the\r\n    process of obtaining the semantic info.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.ISymbol : symbol": "",
                  "T:System.Int32 : position": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool IsAccessible(int position, ISymbol symbol)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.IsAccessible(System.Int32,Microsoft.CodeAnalysis.ISymbol)\">\r\n    <summary>\r\n    Determines if the symbol is accessible from the specified location. \r\n    </summary>\r\n    <param name=\"position\">A character position used to identify a declaration scope and\r\n    accessibility. This character position must be within the FullSpan of the Root syntax\r\n    node in this SemanticModel.\r\n    </param>\r\n    <param name=\"symbol\">The symbol that we are checking to see if it accessible.</param>\r\n    <returns>\r\n    True if \"symbol is accessible, false otherwise.</returns>\r\n    <remarks>\r\n    This method only checks accessibility from the point of view of the accessibility\r\n    modifiers on symbol and its containing types. Even if true is returned, the given symbol\r\n    may not be able to be referenced for other reasons, such as name hiding.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 754
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.ISymbol : symbol": "",
                  "T:System.Int32 : position": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool IsAccessible(int position, ISymbol symbol)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.IsAccessible(System.Int32,Microsoft.CodeAnalysis.ISymbol)\">\r\n    <summary>\r\n    Determines if the symbol is accessible from the specified location. \r\n    </summary>\r\n    <param name=\"position\">A character position used to identify a declaration scope and\r\n    accessibility. This character position must be within the FullSpan of the Root syntax\r\n    node in this SemanticModel.\r\n    </param>\r\n    <param name=\"symbol\">The symbol that we are checking to see if it accessible.</param>\r\n    <returns>\r\n    True if \"symbol is accessible, false otherwise.</returns>\r\n    <remarks>\r\n    This method only checks accessibility from the point of view of the accessibility\r\n    modifiers on symbol and its containing types. Even if true is returned, the given symbol\r\n    may not be able to be referenced for other reasons, such as name hiding.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 754
              },
              "Id": "M:Microsoft.CodeAnalysis.SemanticModel.IsAccessible(System.Int32,Microsoft.CodeAnalysis.ISymbol)",
              "Parent": "T:Microsoft.CodeAnalysis.SemanticModel",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.IsAccessible(System.Int32,Microsoft.CodeAnalysis.ISymbol)\">\r\n    <summary>\r\n    Determines if the symbol is accessible from the specified location. \r\n    </summary>\r\n    <param name=\"position\">A character position used to identify a declaration scope and\r\n    accessibility. This character position must be within the FullSpan of the Root syntax\r\n    node in this SemanticModel.\r\n    </param>\r\n    <param name=\"symbol\">The symbol that we are checking to see if it accessible.</param>\r\n    <returns>\r\n    True if \"symbol is accessible, false otherwise.</returns>\r\n    <remarks>\r\n    This method only checks accessibility from the point of view of the accessibility\r\n    modifiers on symbol and its containing types. Even if true is returned, the given symbol\r\n    may not be able to be referenced for other reasons, such as name hiding.\r\n    </remarks>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.ISymbol : symbol": "",
                  "T:System.Int32 : position": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "protected abstract bool IsAccessibleCore(int position, ISymbol symbol);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.IsAccessibleCore(System.Int32,Microsoft.CodeAnalysis.ISymbol)\">\r\n    <summary>\r\n    Determines if the symbol is accessible from the specified location. \r\n    </summary>\r\n    <param name=\"position\">A character position used to identify a declaration scope and\r\n    accessibility. This character position must be within the FullSpan of the Root syntax\r\n    node in this SemanticModel.\r\n    </param>\r\n    <param name=\"symbol\">The symbol that we are checking to see if it accessible.</param>\r\n    <returns>\r\n    True if \"symbol is accessible, false otherwise.</returns>\r\n    <remarks>\r\n    This method only checks accessibility from the point of view of the accessibility\r\n    modifiers on symbol and its containing types. Even if true is returned, the given symbol\r\n    may not be able to be referenced for other reasons, such as name hiding.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 774
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.ISymbol : symbol": "",
                  "T:System.Int32 : position": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "protected abstract bool IsAccessibleCore(int position, ISymbol symbol);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.IsAccessibleCore(System.Int32,Microsoft.CodeAnalysis.ISymbol)\">\r\n    <summary>\r\n    Determines if the symbol is accessible from the specified location. \r\n    </summary>\r\n    <param name=\"position\">A character position used to identify a declaration scope and\r\n    accessibility. This character position must be within the FullSpan of the Root syntax\r\n    node in this SemanticModel.\r\n    </param>\r\n    <param name=\"symbol\">The symbol that we are checking to see if it accessible.</param>\r\n    <returns>\r\n    True if \"symbol is accessible, false otherwise.</returns>\r\n    <remarks>\r\n    This method only checks accessibility from the point of view of the accessibility\r\n    modifiers on symbol and its containing types. Even if true is returned, the given symbol\r\n    may not be able to be referenced for other reasons, such as name hiding.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 774
              },
              "Id": "M:Microsoft.CodeAnalysis.SemanticModel.IsAccessibleCore(System.Int32,Microsoft.CodeAnalysis.ISymbol)",
              "Parent": "T:Microsoft.CodeAnalysis.SemanticModel",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.IsAccessibleCore(System.Int32,Microsoft.CodeAnalysis.ISymbol)\">\r\n    <summary>\r\n    Determines if the symbol is accessible from the specified location. \r\n    </summary>\r\n    <param name=\"position\">A character position used to identify a declaration scope and\r\n    accessibility. This character position must be within the FullSpan of the Root syntax\r\n    node in this SemanticModel.\r\n    </param>\r\n    <param name=\"symbol\">The symbol that we are checking to see if it accessible.</param>\r\n    <returns>\r\n    True if \"symbol is accessible, false otherwise.</returns>\r\n    <remarks>\r\n    This method only checks accessibility from the point of view of the accessibility\r\n    modifiers on symbol and its containing types. Even if true is returned, the given symbol\r\n    may not be able to be referenced for other reasons, such as name hiding.\r\n    </remarks>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.IEventSymbol : eventSymbol": "",
                  "T:System.Int32 : position": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool IsEventUsableAsField(int position, IEventSymbol eventSymbol)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.IsEventUsableAsField(System.Int32,Microsoft.CodeAnalysis.IEventSymbol)\">\r\n    <summary>\r\n    Field-like events can be used as fields in types that can access private\r\n    members of the declaring type of the event.\r\n    </summary>\r\n    <remarks>\r\n    Always false for VB events.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 783
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.IEventSymbol : eventSymbol": "",
                  "T:System.Int32 : position": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool IsEventUsableAsField(int position, IEventSymbol eventSymbol)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.IsEventUsableAsField(System.Int32,Microsoft.CodeAnalysis.IEventSymbol)\">\r\n    <summary>\r\n    Field-like events can be used as fields in types that can access private\r\n    members of the declaring type of the event.\r\n    </summary>\r\n    <remarks>\r\n    Always false for VB events.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 783
              },
              "Id": "M:Microsoft.CodeAnalysis.SemanticModel.IsEventUsableAsField(System.Int32,Microsoft.CodeAnalysis.IEventSymbol)",
              "Parent": "T:Microsoft.CodeAnalysis.SemanticModel",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.IsEventUsableAsField(System.Int32,Microsoft.CodeAnalysis.IEventSymbol)\">\r\n    <summary>\r\n    Field-like events can be used as fields in types that can access private\r\n    members of the declaring type of the event.\r\n    </summary>\r\n    <remarks>\r\n    Always false for VB events.\r\n    </remarks>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.IEventSymbol : eventSymbol": "",
                  "T:System.Int32 : position": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "protected abstract bool IsEventUsableAsFieldCore(int position, IEventSymbol eventSymbol);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.IsEventUsableAsFieldCore(System.Int32,Microsoft.CodeAnalysis.IEventSymbol)\">\r\n    <summary>\r\n    Field-like events can be used as fields in types that can access private\r\n    members of the declaring type of the event.\r\n    </summary>\r\n    <remarks>\r\n    Always false for VB events.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 795
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.IEventSymbol : eventSymbol": "",
                  "T:System.Int32 : position": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "protected abstract bool IsEventUsableAsFieldCore(int position, IEventSymbol eventSymbol);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.IsEventUsableAsFieldCore(System.Int32,Microsoft.CodeAnalysis.IEventSymbol)\">\r\n    <summary>\r\n    Field-like events can be used as fields in types that can access private\r\n    members of the declaring type of the event.\r\n    </summary>\r\n    <remarks>\r\n    Always false for VB events.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 795
              },
              "Id": "M:Microsoft.CodeAnalysis.SemanticModel.IsEventUsableAsFieldCore(System.Int32,Microsoft.CodeAnalysis.IEventSymbol)",
              "Parent": "T:Microsoft.CodeAnalysis.SemanticModel",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.IsEventUsableAsFieldCore(System.Int32,Microsoft.CodeAnalysis.IEventSymbol)\">\r\n    <summary>\r\n    Field-like events can be used as fields in types that can access private\r\n    members of the declaring type of the event.\r\n    </summary>\r\n    <remarks>\r\n    Always false for VB events.\r\n    </remarks>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Int32 : position": "",
                  "T:System.String : name": ""
                },
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ISymbol}": ""
                },
                "Content": "public ImmutableArray<ISymbol> LookupBaseMembers(int position, string name = null)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.LookupBaseMembers(System.Int32,System.String)\">\r\n    <summary>\r\n    Gets the available base type members in the context of the specified location.  Akin to\r\n    calling <see cref=\"M:Microsoft.CodeAnalysis.SemanticModel.LookupSymbols(System.Int32,Microsoft.CodeAnalysis.INamespaceOrTypeSymbol,System.String,System.Boolean)\"/> with the container set to the immediate base type of\r\n    the type in which <paramref name=\"position\"/> occurs.  However, the accessibility rules\r\n    are different: protected members of the base type will be visible.\r\n    \r\n    Consider the following example:\r\n    \r\n      public class Base\r\n      {\r\n          protected void M() { }\r\n      }\r\n      \r\n      public class Derived : Base\r\n      {\r\n          void Test(Base b)\r\n          {\r\n              b.M(); // Error - cannot access protected member.\r\n              base.M();\r\n          }\r\n      }\r\n    \r\n    Protected members of an instance of another type are only accessible if the instance is known\r\n    to be \"this\" instance (as indicated by the \"base\" keyword).\r\n    </summary>\r\n    <param name=\"position\">The character position for determining the enclosing declaration scope and\r\n    accessibility.</param>\r\n    <param name=\"name\">The name of the symbol to find. If null is specified then symbols\r\n    with any names are returned.</param>\r\n    <returns>A list of symbols that were found. If no symbols were found, an empty list is returned.</returns>\r\n    <remarks>\r\n    The \"position\" is used to determine what variables are visible and accessible.\r\n    \r\n    Non-reduced extension methods are considered, but reduced extension methods are not.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 466
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Int32 : position": "",
                  "T:System.String : name": ""
                },
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ISymbol}": ""
                },
                "Content": "public ImmutableArray<ISymbol> LookupBaseMembers(int position, string name = null)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.LookupBaseMembers(System.Int32,System.String)\">\r\n    <summary>\r\n    Gets the available base type members in the context of the specified location.  Akin to\r\n    calling <see cref=\"M:Microsoft.CodeAnalysis.SemanticModel.LookupSymbols(System.Int32,Microsoft.CodeAnalysis.INamespaceOrTypeSymbol,System.String,System.Boolean)\"/> with the container set to the immediate base type of\r\n    the type in which <paramref name=\"position\"/> occurs.  However, the accessibility rules\r\n    are different: protected members of the base type will be visible.\r\n    \r\n    Consider the following example:\r\n    \r\n      public class Base\r\n      {\r\n          protected void M() { }\r\n      }\r\n      \r\n      public class Derived : Base\r\n      {\r\n          void Test(Base b)\r\n          {\r\n              b.M(); // Error - cannot access protected member.\r\n              base.M();\r\n          }\r\n      }\r\n    \r\n    Protected members of an instance of another type are only accessible if the instance is known\r\n    to be \"this\" instance (as indicated by the \"base\" keyword).\r\n    </summary>\r\n    <param name=\"position\">The character position for determining the enclosing declaration scope and\r\n    accessibility.</param>\r\n    <param name=\"name\">The name of the symbol to find. If null is specified then symbols\r\n    with any names are returned.</param>\r\n    <returns>A list of symbols that were found. If no symbols were found, an empty list is returned.</returns>\r\n    <remarks>\r\n    The \"position\" is used to determine what variables are visible and accessible.\r\n    \r\n    Non-reduced extension methods are considered, but reduced extension methods are not.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 466
              },
              "Id": "M:Microsoft.CodeAnalysis.SemanticModel.LookupBaseMembers(System.Int32,System.String)",
              "Parent": "T:Microsoft.CodeAnalysis.SemanticModel",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.LookupBaseMembers(System.Int32,System.String)\">\r\n    <summary>\r\n    Gets the available base type members in the context of the specified location.  Akin to\r\n    calling <see cref=\"M:Microsoft.CodeAnalysis.SemanticModel.LookupSymbols(System.Int32,Microsoft.CodeAnalysis.INamespaceOrTypeSymbol,System.String,System.Boolean)\"/> with the container set to the immediate base type of\r\n    the type in which <paramref name=\"position\"/> occurs.  However, the accessibility rules\r\n    are different: protected members of the base type will be visible.\r\n    \r\n    Consider the following example:\r\n    \r\n      public class Base\r\n      {\r\n          protected void M() { }\r\n      }\r\n      \r\n      public class Derived : Base\r\n      {\r\n          void Test(Base b)\r\n          {\r\n              b.M(); // Error - cannot access protected member.\r\n              base.M();\r\n          }\r\n      }\r\n    \r\n    Protected members of an instance of another type are only accessible if the instance is known\r\n    to be \"this\" instance (as indicated by the \"base\" keyword).\r\n    </summary>\r\n    <param name=\"position\">The character position for determining the enclosing declaration scope and\r\n    accessibility.</param>\r\n    <param name=\"name\">The name of the symbol to find. If null is specified then symbols\r\n    with any names are returned.</param>\r\n    <returns>A list of symbols that were found. If no symbols were found, an empty list is returned.</returns>\r\n    <remarks>\r\n    The \"position\" is used to determine what variables are visible and accessible.\r\n    \r\n    Non-reduced extension methods are considered, but reduced extension methods are not.\r\n    </remarks>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Int32 : position": "",
                  "T:System.String : name": ""
                },
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ISymbol}": ""
                },
                "Content": "protected abstract ImmutableArray<ISymbol> LookupBaseMembersCore(int position, string name);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.LookupBaseMembersCore(System.Int32,System.String)\">\r\n    <summary>\r\n    Backing implementation of <see cref=\"M:Microsoft.CodeAnalysis.SemanticModel.LookupBaseMembers(System.Int32,System.String)\"/>.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 476
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Int32 : position": "",
                  "T:System.String : name": ""
                },
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ISymbol}": ""
                },
                "Content": "protected abstract ImmutableArray<ISymbol> LookupBaseMembersCore(int position, string name);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.LookupBaseMembersCore(System.Int32,System.String)\">\r\n    <summary>\r\n    Backing implementation of <see cref=\"M:Microsoft.CodeAnalysis.SemanticModel.LookupBaseMembers(System.Int32,System.String)\"/>.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 476
              },
              "Id": "M:Microsoft.CodeAnalysis.SemanticModel.LookupBaseMembersCore(System.Int32,System.String)",
              "Parent": "T:Microsoft.CodeAnalysis.SemanticModel",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.LookupBaseMembersCore(System.Int32,System.String)\">\r\n    <summary>\r\n    Backing implementation of <see cref=\"M:Microsoft.CodeAnalysis.SemanticModel.LookupBaseMembers(System.Int32,System.String)\"/>.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Int32 : position": "",
                  "T:System.String : name": ""
                },
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ISymbol}": ""
                },
                "Content": "public ImmutableArray<ISymbol> LookupLabels(int position, string name = null)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.LookupLabels(System.Int32,System.String)\">\r\n    <summary>\r\n    Gets the available named label symbols in the context of the specified location and optional container.\r\n    Only members that are accessible and visible from the given location are returned.\r\n    </summary>\r\n    <param name=\"position\">The character position for determining the enclosing declaration scope and\r\n    accessibility.</param>\r\n    <param name=\"name\">The name of the symbol to find. If null is specified then symbols\r\n    with any names are returned.</param>\r\n    <returns>A list of symbols that were found. If no symbols were found, an empty list is returned.</returns>\r\n    <remarks>\r\n    The \"position\" is used to determine what variables are visible and accessible. Even if \"container\" is\r\n    specified, the \"position\" location is significant for determining which members of \"containing\" are\r\n    accessible. \r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 564
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Int32 : position": "",
                  "T:System.String : name": ""
                },
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ISymbol}": ""
                },
                "Content": "public ImmutableArray<ISymbol> LookupLabels(int position, string name = null)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.LookupLabels(System.Int32,System.String)\">\r\n    <summary>\r\n    Gets the available named label symbols in the context of the specified location and optional container.\r\n    Only members that are accessible and visible from the given location are returned.\r\n    </summary>\r\n    <param name=\"position\">The character position for determining the enclosing declaration scope and\r\n    accessibility.</param>\r\n    <param name=\"name\">The name of the symbol to find. If null is specified then symbols\r\n    with any names are returned.</param>\r\n    <returns>A list of symbols that were found. If no symbols were found, an empty list is returned.</returns>\r\n    <remarks>\r\n    The \"position\" is used to determine what variables are visible and accessible. Even if \"container\" is\r\n    specified, the \"position\" location is significant for determining which members of \"containing\" are\r\n    accessible. \r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 564
              },
              "Id": "M:Microsoft.CodeAnalysis.SemanticModel.LookupLabels(System.Int32,System.String)",
              "Parent": "T:Microsoft.CodeAnalysis.SemanticModel",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.LookupLabels(System.Int32,System.String)\">\r\n    <summary>\r\n    Gets the available named label symbols in the context of the specified location and optional container.\r\n    Only members that are accessible and visible from the given location are returned.\r\n    </summary>\r\n    <param name=\"position\">The character position for determining the enclosing declaration scope and\r\n    accessibility.</param>\r\n    <param name=\"name\">The name of the symbol to find. If null is specified then symbols\r\n    with any names are returned.</param>\r\n    <returns>A list of symbols that were found. If no symbols were found, an empty list is returned.</returns>\r\n    <remarks>\r\n    The \"position\" is used to determine what variables are visible and accessible. Even if \"container\" is\r\n    specified, the \"position\" location is significant for determining which members of \"containing\" are\r\n    accessible. \r\n    </remarks>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Int32 : position": "",
                  "T:System.String : name": ""
                },
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ISymbol}": ""
                },
                "Content": "protected abstract ImmutableArray<ISymbol> LookupLabelsCore(int position, string name);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.LookupLabelsCore(System.Int32,System.String)\">\r\n    <summary>\r\n    Backing implementation of <see cref=\"M:Microsoft.CodeAnalysis.SemanticModel.LookupLabels(System.Int32,System.String)\"/>.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 574
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Int32 : position": "",
                  "T:System.String : name": ""
                },
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ISymbol}": ""
                },
                "Content": "protected abstract ImmutableArray<ISymbol> LookupLabelsCore(int position, string name);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.LookupLabelsCore(System.Int32,System.String)\">\r\n    <summary>\r\n    Backing implementation of <see cref=\"M:Microsoft.CodeAnalysis.SemanticModel.LookupLabels(System.Int32,System.String)\"/>.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 574
              },
              "Id": "M:Microsoft.CodeAnalysis.SemanticModel.LookupLabelsCore(System.Int32,System.String)",
              "Parent": "T:Microsoft.CodeAnalysis.SemanticModel",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.LookupLabelsCore(System.Int32,System.String)\">\r\n    <summary>\r\n    Backing implementation of <see cref=\"M:Microsoft.CodeAnalysis.SemanticModel.LookupLabels(System.Int32,System.String)\"/>.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.INamespaceOrTypeSymbol : container": "",
                  "T:System.Int32 : position": "",
                  "T:System.String : name": ""
                },
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ISymbol}": ""
                },
                "Content": "public ImmutableArray<ISymbol> LookupNamespacesAndTypes(int position, INamespaceOrTypeSymbol container = null, string name = null)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.LookupNamespacesAndTypes(System.Int32,Microsoft.CodeAnalysis.INamespaceOrTypeSymbol,System.String)\">\r\n    <summary>\r\n    Gets the available named namespace and type symbols in the context of the specified location and optional container.\r\n    Only members that are accessible and visible from the given location are returned.\r\n    </summary>\r\n    <param name=\"position\">The character position for determining the enclosing declaration scope and\r\n    accessibility.</param>\r\n    <param name=\"container\">The container to search for symbols within. If null then the enclosing declaration\r\n    scope around position is used.</param>\r\n    <param name=\"name\">The name of the symbol to find. If null is specified then symbols\r\n    with any names are returned.</param>\r\n    <returns>A list of symbols that were found. If no symbols were found, an empty list is returned.</returns>\r\n    <remarks>\r\n    The \"position\" is used to determine what variables are visible and accessible. Even if \"container\" is\r\n    specified, the \"position\" location is significant for determining which members of \"containing\" are\r\n    accessible. \r\n    \r\n    Does not return INamespaceOrTypeSymbol, because there could be aliases.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 534
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.INamespaceOrTypeSymbol : container": "",
                  "T:System.Int32 : position": "",
                  "T:System.String : name": ""
                },
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ISymbol}": ""
                },
                "Content": "public ImmutableArray<ISymbol> LookupNamespacesAndTypes(int position, INamespaceOrTypeSymbol container = null, string name = null)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.LookupNamespacesAndTypes(System.Int32,Microsoft.CodeAnalysis.INamespaceOrTypeSymbol,System.String)\">\r\n    <summary>\r\n    Gets the available named namespace and type symbols in the context of the specified location and optional container.\r\n    Only members that are accessible and visible from the given location are returned.\r\n    </summary>\r\n    <param name=\"position\">The character position for determining the enclosing declaration scope and\r\n    accessibility.</param>\r\n    <param name=\"container\">The container to search for symbols within. If null then the enclosing declaration\r\n    scope around position is used.</param>\r\n    <param name=\"name\">The name of the symbol to find. If null is specified then symbols\r\n    with any names are returned.</param>\r\n    <returns>A list of symbols that were found. If no symbols were found, an empty list is returned.</returns>\r\n    <remarks>\r\n    The \"position\" is used to determine what variables are visible and accessible. Even if \"container\" is\r\n    specified, the \"position\" location is significant for determining which members of \"containing\" are\r\n    accessible. \r\n    \r\n    Does not return INamespaceOrTypeSymbol, because there could be aliases.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 534
              },
              "Id": "M:Microsoft.CodeAnalysis.SemanticModel.LookupNamespacesAndTypes(System.Int32,Microsoft.CodeAnalysis.INamespaceOrTypeSymbol,System.String)",
              "Parent": "T:Microsoft.CodeAnalysis.SemanticModel",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.LookupNamespacesAndTypes(System.Int32,Microsoft.CodeAnalysis.INamespaceOrTypeSymbol,System.String)\">\r\n    <summary>\r\n    Gets the available named namespace and type symbols in the context of the specified location and optional container.\r\n    Only members that are accessible and visible from the given location are returned.\r\n    </summary>\r\n    <param name=\"position\">The character position for determining the enclosing declaration scope and\r\n    accessibility.</param>\r\n    <param name=\"container\">The container to search for symbols within. If null then the enclosing declaration\r\n    scope around position is used.</param>\r\n    <param name=\"name\">The name of the symbol to find. If null is specified then symbols\r\n    with any names are returned.</param>\r\n    <returns>A list of symbols that were found. If no symbols were found, an empty list is returned.</returns>\r\n    <remarks>\r\n    The \"position\" is used to determine what variables are visible and accessible. Even if \"container\" is\r\n    specified, the \"position\" location is significant for determining which members of \"containing\" are\r\n    accessible. \r\n    \r\n    Does not return INamespaceOrTypeSymbol, because there could be aliases.\r\n    </remarks>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.INamespaceOrTypeSymbol : container": "",
                  "T:System.Int32 : position": "",
                  "T:System.String : name": ""
                },
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ISymbol}": ""
                },
                "Content": "protected abstract ImmutableArray<ISymbol> LookupNamespacesAndTypesCore(int position, INamespaceOrTypeSymbol container, string name);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.LookupNamespacesAndTypesCore(System.Int32,Microsoft.CodeAnalysis.INamespaceOrTypeSymbol,System.String)\">\r\n    <summary>\r\n    Backing implementation of <see cref=\"M:Microsoft.CodeAnalysis.SemanticModel.LookupNamespacesAndTypes(System.Int32,Microsoft.CodeAnalysis.INamespaceOrTypeSymbol,System.String)\"/>.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 545
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.INamespaceOrTypeSymbol : container": "",
                  "T:System.Int32 : position": "",
                  "T:System.String : name": ""
                },
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ISymbol}": ""
                },
                "Content": "protected abstract ImmutableArray<ISymbol> LookupNamespacesAndTypesCore(int position, INamespaceOrTypeSymbol container, string name);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.LookupNamespacesAndTypesCore(System.Int32,Microsoft.CodeAnalysis.INamespaceOrTypeSymbol,System.String)\">\r\n    <summary>\r\n    Backing implementation of <see cref=\"M:Microsoft.CodeAnalysis.SemanticModel.LookupNamespacesAndTypes(System.Int32,Microsoft.CodeAnalysis.INamespaceOrTypeSymbol,System.String)\"/>.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 545
              },
              "Id": "M:Microsoft.CodeAnalysis.SemanticModel.LookupNamespacesAndTypesCore(System.Int32,Microsoft.CodeAnalysis.INamespaceOrTypeSymbol,System.String)",
              "Parent": "T:Microsoft.CodeAnalysis.SemanticModel",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.LookupNamespacesAndTypesCore(System.Int32,Microsoft.CodeAnalysis.INamespaceOrTypeSymbol,System.String)\">\r\n    <summary>\r\n    Backing implementation of <see cref=\"M:Microsoft.CodeAnalysis.SemanticModel.LookupNamespacesAndTypes(System.Int32,Microsoft.CodeAnalysis.INamespaceOrTypeSymbol,System.String)\"/>.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.INamespaceOrTypeSymbol : container": "",
                  "T:System.Int32 : position": "",
                  "T:System.String : name": ""
                },
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ISymbol}": ""
                },
                "Content": "public ImmutableArray<ISymbol> LookupStaticMembers(int position, INamespaceOrTypeSymbol container = null, string name = null)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.LookupStaticMembers(System.Int32,Microsoft.CodeAnalysis.INamespaceOrTypeSymbol,System.String)\">\r\n    <summary>\r\n    Gets the available named static member symbols in the context of the specified location and optional container.\r\n    Only members that are accessible and visible from the given location are returned.\r\n    \r\n    Non-reduced extension methods are considered, since they are static methods.\r\n    </summary>\r\n    <param name=\"position\">The character position for determining the enclosing declaration scope and\r\n    accessibility.</param>\r\n    <param name=\"container\">The container to search for symbols within. If null then the enclosing declaration\r\n    scope around position is used.</param>\r\n    <param name=\"name\">The name of the symbol to find. If null is specified then symbols\r\n    with any names are returned.</param>\r\n    <returns>A list of symbols that were found. If no symbols were found, an empty list is returned.</returns>\r\n    <remarks>\r\n    The \"position\" is used to determine what variables are visible and accessible. Even if \"container\" is\r\n    specified, the \"position\" location is significant for determining which members of \"containing\" are\r\n    accessible. \r\n    \r\n    Essentially the same as filtering instance members out of the results of an analogous <see cref=\"M:Microsoft.CodeAnalysis.SemanticModel.LookupSymbols(System.Int32,Microsoft.CodeAnalysis.INamespaceOrTypeSymbol,System.String,System.Boolean)\"/> call.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 500
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.INamespaceOrTypeSymbol : container": "",
                  "T:System.Int32 : position": "",
                  "T:System.String : name": ""
                },
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ISymbol}": ""
                },
                "Content": "public ImmutableArray<ISymbol> LookupStaticMembers(int position, INamespaceOrTypeSymbol container = null, string name = null)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.LookupStaticMembers(System.Int32,Microsoft.CodeAnalysis.INamespaceOrTypeSymbol,System.String)\">\r\n    <summary>\r\n    Gets the available named static member symbols in the context of the specified location and optional container.\r\n    Only members that are accessible and visible from the given location are returned.\r\n    \r\n    Non-reduced extension methods are considered, since they are static methods.\r\n    </summary>\r\n    <param name=\"position\">The character position for determining the enclosing declaration scope and\r\n    accessibility.</param>\r\n    <param name=\"container\">The container to search for symbols within. If null then the enclosing declaration\r\n    scope around position is used.</param>\r\n    <param name=\"name\">The name of the symbol to find. If null is specified then symbols\r\n    with any names are returned.</param>\r\n    <returns>A list of symbols that were found. If no symbols were found, an empty list is returned.</returns>\r\n    <remarks>\r\n    The \"position\" is used to determine what variables are visible and accessible. Even if \"container\" is\r\n    specified, the \"position\" location is significant for determining which members of \"containing\" are\r\n    accessible. \r\n    \r\n    Essentially the same as filtering instance members out of the results of an analogous <see cref=\"M:Microsoft.CodeAnalysis.SemanticModel.LookupSymbols(System.Int32,Microsoft.CodeAnalysis.INamespaceOrTypeSymbol,System.String,System.Boolean)\"/> call.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 500
              },
              "Id": "M:Microsoft.CodeAnalysis.SemanticModel.LookupStaticMembers(System.Int32,Microsoft.CodeAnalysis.INamespaceOrTypeSymbol,System.String)",
              "Parent": "T:Microsoft.CodeAnalysis.SemanticModel",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.LookupStaticMembers(System.Int32,Microsoft.CodeAnalysis.INamespaceOrTypeSymbol,System.String)\">\r\n    <summary>\r\n    Gets the available named static member symbols in the context of the specified location and optional container.\r\n    Only members that are accessible and visible from the given location are returned.\r\n    \r\n    Non-reduced extension methods are considered, since they are static methods.\r\n    </summary>\r\n    <param name=\"position\">The character position for determining the enclosing declaration scope and\r\n    accessibility.</param>\r\n    <param name=\"container\">The container to search for symbols within. If null then the enclosing declaration\r\n    scope around position is used.</param>\r\n    <param name=\"name\">The name of the symbol to find. If null is specified then symbols\r\n    with any names are returned.</param>\r\n    <returns>A list of symbols that were found. If no symbols were found, an empty list is returned.</returns>\r\n    <remarks>\r\n    The \"position\" is used to determine what variables are visible and accessible. Even if \"container\" is\r\n    specified, the \"position\" location is significant for determining which members of \"containing\" are\r\n    accessible. \r\n    \r\n    Essentially the same as filtering instance members out of the results of an analogous <see cref=\"M:Microsoft.CodeAnalysis.SemanticModel.LookupSymbols(System.Int32,Microsoft.CodeAnalysis.INamespaceOrTypeSymbol,System.String,System.Boolean)\"/> call.\r\n    </remarks>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.INamespaceOrTypeSymbol : container": "",
                  "T:System.Int32 : position": "",
                  "T:System.String : name": ""
                },
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ISymbol}": ""
                },
                "Content": "protected abstract ImmutableArray<ISymbol> LookupStaticMembersCore(int position, INamespaceOrTypeSymbol container, string name);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.LookupStaticMembersCore(System.Int32,Microsoft.CodeAnalysis.INamespaceOrTypeSymbol,System.String)\">\r\n    <summary>\r\n    Backing implementation of <see cref=\"M:Microsoft.CodeAnalysis.SemanticModel.LookupStaticMembers(System.Int32,Microsoft.CodeAnalysis.INamespaceOrTypeSymbol,System.String)\"/>.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 511
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.INamespaceOrTypeSymbol : container": "",
                  "T:System.Int32 : position": "",
                  "T:System.String : name": ""
                },
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ISymbol}": ""
                },
                "Content": "protected abstract ImmutableArray<ISymbol> LookupStaticMembersCore(int position, INamespaceOrTypeSymbol container, string name);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.LookupStaticMembersCore(System.Int32,Microsoft.CodeAnalysis.INamespaceOrTypeSymbol,System.String)\">\r\n    <summary>\r\n    Backing implementation of <see cref=\"M:Microsoft.CodeAnalysis.SemanticModel.LookupStaticMembers(System.Int32,Microsoft.CodeAnalysis.INamespaceOrTypeSymbol,System.String)\"/>.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 511
              },
              "Id": "M:Microsoft.CodeAnalysis.SemanticModel.LookupStaticMembersCore(System.Int32,Microsoft.CodeAnalysis.INamespaceOrTypeSymbol,System.String)",
              "Parent": "T:Microsoft.CodeAnalysis.SemanticModel",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.LookupStaticMembersCore(System.Int32,Microsoft.CodeAnalysis.INamespaceOrTypeSymbol,System.String)\">\r\n    <summary>\r\n    Backing implementation of <see cref=\"M:Microsoft.CodeAnalysis.SemanticModel.LookupStaticMembers(System.Int32,Microsoft.CodeAnalysis.INamespaceOrTypeSymbol,System.String)\"/>.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.INamespaceOrTypeSymbol : container": "",
                  "T:System.Boolean : includeReducedExtensionMethods": "",
                  "T:System.Int32 : position": "",
                  "T:System.String : name": ""
                },
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ISymbol}": ""
                },
                "Content": "public ImmutableArray<ISymbol> LookupSymbols(int position, INamespaceOrTypeSymbol container = null, string name = null, bool includeReducedExtensionMethods = false)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.LookupSymbols(System.Int32,Microsoft.CodeAnalysis.INamespaceOrTypeSymbol,System.String,System.Boolean)\">\r\n    <summary>\r\n    Gets the available named symbols in the context of the specified location and optional container. Only\r\n    symbols that are accessible and visible from the given location are returned.\r\n    </summary>\r\n    <param name=\"position\">The character position for determining the enclosing declaration scope and\r\n    accessibility.</param>\r\n    <param name=\"container\">The container to search for symbols within. If null then the enclosing declaration\r\n    scope around position is used.</param>\r\n    <param name=\"name\">The name of the symbol to find. If null is specified then symbols\r\n    with any names are returned.</param>\r\n    <param name=\"includeReducedExtensionMethods\">Consider (reduced) extension methods.</param>\r\n    <returns>A list of symbols that were found. If no symbols were found, an empty list is returned.</returns>\r\n    <remarks>\r\n    The \"position\" is used to determine what variables are visible and accessible. Even if \"container\" is\r\n    specified, the \"position\" location is significant for determining which members of \"containing\" are\r\n    accessible. \r\n    \r\n    Labels are not considered (see <see cref=\"M:Microsoft.CodeAnalysis.SemanticModel.LookupLabels(System.Int32,System.String)\"/>).\r\n    \r\n    Non-reduced extension methods are considered regardless of the value of <paramref name=\"includeReducedExtensionMethods\"/>.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 413
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.INamespaceOrTypeSymbol : container": "",
                  "T:System.Boolean : includeReducedExtensionMethods": "",
                  "T:System.Int32 : position": "",
                  "T:System.String : name": ""
                },
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ISymbol}": ""
                },
                "Content": "public ImmutableArray<ISymbol> LookupSymbols(int position, INamespaceOrTypeSymbol container = null, string name = null, bool includeReducedExtensionMethods = false)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.LookupSymbols(System.Int32,Microsoft.CodeAnalysis.INamespaceOrTypeSymbol,System.String,System.Boolean)\">\r\n    <summary>\r\n    Gets the available named symbols in the context of the specified location and optional container. Only\r\n    symbols that are accessible and visible from the given location are returned.\r\n    </summary>\r\n    <param name=\"position\">The character position for determining the enclosing declaration scope and\r\n    accessibility.</param>\r\n    <param name=\"container\">The container to search for symbols within. If null then the enclosing declaration\r\n    scope around position is used.</param>\r\n    <param name=\"name\">The name of the symbol to find. If null is specified then symbols\r\n    with any names are returned.</param>\r\n    <param name=\"includeReducedExtensionMethods\">Consider (reduced) extension methods.</param>\r\n    <returns>A list of symbols that were found. If no symbols were found, an empty list is returned.</returns>\r\n    <remarks>\r\n    The \"position\" is used to determine what variables are visible and accessible. Even if \"container\" is\r\n    specified, the \"position\" location is significant for determining which members of \"containing\" are\r\n    accessible. \r\n    \r\n    Labels are not considered (see <see cref=\"M:Microsoft.CodeAnalysis.SemanticModel.LookupLabels(System.Int32,System.String)\"/>).\r\n    \r\n    Non-reduced extension methods are considered regardless of the value of <paramref name=\"includeReducedExtensionMethods\"/>.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 413
              },
              "Id": "M:Microsoft.CodeAnalysis.SemanticModel.LookupSymbols(System.Int32,Microsoft.CodeAnalysis.INamespaceOrTypeSymbol,System.String,System.Boolean)",
              "Parent": "T:Microsoft.CodeAnalysis.SemanticModel",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.LookupSymbols(System.Int32,Microsoft.CodeAnalysis.INamespaceOrTypeSymbol,System.String,System.Boolean)\">\r\n    <summary>\r\n    Gets the available named symbols in the context of the specified location and optional container. Only\r\n    symbols that are accessible and visible from the given location are returned.\r\n    </summary>\r\n    <param name=\"position\">The character position for determining the enclosing declaration scope and\r\n    accessibility.</param>\r\n    <param name=\"container\">The container to search for symbols within. If null then the enclosing declaration\r\n    scope around position is used.</param>\r\n    <param name=\"name\">The name of the symbol to find. If null is specified then symbols\r\n    with any names are returned.</param>\r\n    <param name=\"includeReducedExtensionMethods\">Consider (reduced) extension methods.</param>\r\n    <returns>A list of symbols that were found. If no symbols were found, an empty list is returned.</returns>\r\n    <remarks>\r\n    The \"position\" is used to determine what variables are visible and accessible. Even if \"container\" is\r\n    specified, the \"position\" location is significant for determining which members of \"containing\" are\r\n    accessible. \r\n    \r\n    Labels are not considered (see <see cref=\"M:Microsoft.CodeAnalysis.SemanticModel.LookupLabels(System.Int32,System.String)\"/>).\r\n    \r\n    Non-reduced extension methods are considered regardless of the value of <paramref name=\"includeReducedExtensionMethods\"/>.\r\n    </remarks>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.INamespaceOrTypeSymbol : container": "",
                  "T:System.Boolean : includeReducedExtensionMethods": "",
                  "T:System.Int32 : position": "",
                  "T:System.String : name": ""
                },
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ISymbol}": ""
                },
                "Content": "protected abstract ImmutableArray<ISymbol> LookupSymbolsCore(int position, INamespaceOrTypeSymbol container, string name, bool includeReducedExtensionMethods);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.LookupSymbolsCore(System.Int32,Microsoft.CodeAnalysis.INamespaceOrTypeSymbol,System.String,System.Boolean)\">\r\n    <summary>\r\n    Backing implementation of <see cref=\"M:Microsoft.CodeAnalysis.SemanticModel.LookupSymbols(System.Int32,Microsoft.CodeAnalysis.INamespaceOrTypeSymbol,System.String,System.Boolean)\"/>.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 425
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.INamespaceOrTypeSymbol : container": "",
                  "T:System.Boolean : includeReducedExtensionMethods": "",
                  "T:System.Int32 : position": "",
                  "T:System.String : name": ""
                },
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ISymbol}": ""
                },
                "Content": "protected abstract ImmutableArray<ISymbol> LookupSymbolsCore(int position, INamespaceOrTypeSymbol container, string name, bool includeReducedExtensionMethods);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.LookupSymbolsCore(System.Int32,Microsoft.CodeAnalysis.INamespaceOrTypeSymbol,System.String,System.Boolean)\">\r\n    <summary>\r\n    Backing implementation of <see cref=\"M:Microsoft.CodeAnalysis.SemanticModel.LookupSymbols(System.Int32,Microsoft.CodeAnalysis.INamespaceOrTypeSymbol,System.String,System.Boolean)\"/>.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 425
              },
              "Id": "M:Microsoft.CodeAnalysis.SemanticModel.LookupSymbolsCore(System.Int32,Microsoft.CodeAnalysis.INamespaceOrTypeSymbol,System.String,System.Boolean)",
              "Parent": "T:Microsoft.CodeAnalysis.SemanticModel",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SemanticModel.LookupSymbolsCore(System.Int32,Microsoft.CodeAnalysis.INamespaceOrTypeSymbol,System.String,System.Boolean)\">\r\n    <summary>\r\n    Backing implementation of <see cref=\"M:Microsoft.CodeAnalysis.SemanticModel.LookupSymbols(System.Int32,Microsoft.CodeAnalysis.INamespaceOrTypeSymbol,System.String,System.Boolean)\"/>.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Compilation",
                "Content": "public Compilation Compilation",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SemanticModel.Compilation\">\r\n    <summary>\r\n    The compilation this model was obtained from.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 41
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Compilation",
                "Content": "public Compilation Compilation",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SemanticModel.Compilation\">\r\n    <summary>\r\n    The compilation this model was obtained from.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 41
              },
              "Id": "P:Microsoft.CodeAnalysis.SemanticModel.Compilation",
              "Parent": "T:Microsoft.CodeAnalysis.SemanticModel",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SemanticModel.Compilation\">\r\n    <summary>\r\n    The compilation this model was obtained from.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Compilation",
                "Content": "protected abstract Compilation CompilationCore",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SemanticModel.CompilationCore\">\r\n    <summary>\r\n    The compilation this model was obtained from.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 49
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Compilation",
                "Content": "protected abstract Compilation CompilationCore",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SemanticModel.CompilationCore\">\r\n    <summary>\r\n    The compilation this model was obtained from.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 49
              },
              "Id": "P:Microsoft.CodeAnalysis.SemanticModel.CompilationCore",
              "Parent": "T:Microsoft.CodeAnalysis.SemanticModel",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SemanticModel.CompilationCore\">\r\n    <summary>\r\n    The compilation this model was obtained from.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public abstract bool IsSpeculativeSemanticModel",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SemanticModel.IsSpeculativeSemanticModel\">\r\n    <summary>\r\n    Returns true if this is a speculative semantic model created with any of the TryGetSpeculativeSemanticModel methods.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 212
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public abstract bool IsSpeculativeSemanticModel",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SemanticModel.IsSpeculativeSemanticModel\">\r\n    <summary>\r\n    Returns true if this is a speculative semantic model created with any of the TryGetSpeculativeSemanticModel methods.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 212
              },
              "Id": "P:Microsoft.CodeAnalysis.SemanticModel.IsSpeculativeSemanticModel",
              "Parent": "T:Microsoft.CodeAnalysis.SemanticModel",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SemanticModel.IsSpeculativeSemanticModel\">\r\n    <summary>\r\n    Returns true if this is a speculative semantic model created with any of the TryGetSpeculativeSemanticModel methods.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.String",
                "Content": "public abstract string Language",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SemanticModel.Language\">\r\n    <summary>\r\n    Gets the source language (\"C#\" or \"Visual Basic\").\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 36
              },
              "Syntax": {
                "PropertyType": "T:System.String",
                "Content": "public abstract string Language",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SemanticModel.Language\">\r\n    <summary>\r\n    Gets the source language (\"C#\" or \"Visual Basic\").\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 36
              },
              "Id": "P:Microsoft.CodeAnalysis.SemanticModel.Language",
              "Parent": "T:Microsoft.CodeAnalysis.SemanticModel",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SemanticModel.Language\">\r\n    <summary>\r\n    Gets the source language (\"C#\" or \"Visual Basic\").\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Int32",
                "Content": "public abstract int OriginalPositionForSpeculation",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SemanticModel.OriginalPositionForSpeculation\">\r\n    <summary>\r\n    If this is a speculative semantic model, returns the original position at which the speculative model was created.\r\n    Otherwise, returns 0.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 221
              },
              "Syntax": {
                "PropertyType": "T:System.Int32",
                "Content": "public abstract int OriginalPositionForSpeculation",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SemanticModel.OriginalPositionForSpeculation\">\r\n    <summary>\r\n    If this is a speculative semantic model, returns the original position at which the speculative model was created.\r\n    Otherwise, returns 0.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 221
              },
              "Id": "P:Microsoft.CodeAnalysis.SemanticModel.OriginalPositionForSpeculation",
              "Parent": "T:Microsoft.CodeAnalysis.SemanticModel",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SemanticModel.OriginalPositionForSpeculation\">\r\n    <summary>\r\n    If this is a speculative semantic model, returns the original position at which the speculative model was created.\r\n    Otherwise, returns 0.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SemanticModel",
                "Content": "public SemanticModel ParentModel",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SemanticModel.ParentModel\">\r\n    <summary>\r\n    If this is a speculative semantic model, then returns its parent semantic model.\r\n    Otherwise, returns null.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 230
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SemanticModel",
                "Content": "public SemanticModel ParentModel",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SemanticModel.ParentModel\">\r\n    <summary>\r\n    If this is a speculative semantic model, then returns its parent semantic model.\r\n    Otherwise, returns null.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 230
              },
              "Id": "P:Microsoft.CodeAnalysis.SemanticModel.ParentModel",
              "Parent": "T:Microsoft.CodeAnalysis.SemanticModel",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SemanticModel.ParentModel\">\r\n    <summary>\r\n    If this is a speculative semantic model, then returns its parent semantic model.\r\n    Otherwise, returns null.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SemanticModel",
                "Content": "protected abstract SemanticModel ParentModelCore",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SemanticModel.ParentModelCore\">\r\n    <summary>\r\n    If this is a speculative semantic model, then returns its parent semantic model.\r\n    Otherwise, returns null.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 239
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SemanticModel",
                "Content": "protected abstract SemanticModel ParentModelCore",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SemanticModel.ParentModelCore\">\r\n    <summary>\r\n    If this is a speculative semantic model, then returns its parent semantic model.\r\n    Otherwise, returns null.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 239
              },
              "Id": "P:Microsoft.CodeAnalysis.SemanticModel.ParentModelCore",
              "Parent": "T:Microsoft.CodeAnalysis.SemanticModel",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SemanticModel.ParentModelCore\">\r\n    <summary>\r\n    If this is a speculative semantic model, then returns its parent semantic model.\r\n    Otherwise, returns null.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SyntaxTree",
                "Content": "public SyntaxTree SyntaxTree",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SemanticModel.SyntaxTree\">\r\n    <summary>\r\n    The syntax tree this model was obtained from.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 54
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SyntaxTree",
                "Content": "public SyntaxTree SyntaxTree",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SemanticModel.SyntaxTree\">\r\n    <summary>\r\n    The syntax tree this model was obtained from.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 54
              },
              "Id": "P:Microsoft.CodeAnalysis.SemanticModel.SyntaxTree",
              "Parent": "T:Microsoft.CodeAnalysis.SemanticModel",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SemanticModel.SyntaxTree\">\r\n    <summary>\r\n    The syntax tree this model was obtained from.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SyntaxTree",
                "Content": "protected abstract SyntaxTree SyntaxTreeCore",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SemanticModel.SyntaxTreeCore\">\r\n    <summary>\r\n    The syntax tree this model was obtained from.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 62
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SyntaxTree",
                "Content": "protected abstract SyntaxTree SyntaxTreeCore",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SemanticModel.SyntaxTreeCore\">\r\n    <summary>\r\n    The syntax tree this model was obtained from.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 62
              },
              "Id": "P:Microsoft.CodeAnalysis.SemanticModel.SyntaxTreeCore",
              "Parent": "T:Microsoft.CodeAnalysis.SemanticModel",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SemanticModel.SyntaxTreeCore\">\r\n    <summary>\r\n    The syntax tree this model was obtained from.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Compilation\\SemanticModel.cs",
          "InheritanceHierarchy": [
            "T:System.Object"
          ],
          "Syntax": {
            "Content": "public abstract class SemanticModel",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.SemanticModel\">\r\n    <summary>\r\n    Allows asking semantic questions about a tree of syntax nodes in a Compilation. Typically,\r\n    an instance is obtained by a call to GetBinding on a Compilation or Compilation.\r\n    </summary>\r\n    <remarks>\r\n    <para>An instance of SemanticModel caches local symbols and semantic information. Thus, it\r\n    is much more efficient to use a single instance of SemanticModel when asking multiple\r\n    questions about a syntax tree, because information from the first question may be reused.\r\n    This also means that holding onto an instance of SemanticModel for a long time may keep a\r\n    significant amount of memory from being garbage collected.\r\n    </para>\r\n    <para>\r\n    When an answer is a named symbol that is reachable by traversing from the root of the symbol\r\n    table, (that is, from an AssemblySymbol of the Compilation), that symbol will be returned\r\n    (i.e. the returned value will be reference-equal to one reachable from the root of the\r\n    symbol table). Symbols representing entities without names (e.g. array-of-int) may or may\r\n    not exhibit reference equality. However, some named symbols (such as local variables) are\r\n    not reachable from the root. These symbols are visible as answers to semantic questions.\r\n    When the same SemanticModel object is used, the answers exhibit reference-equality.\r\n    </para>\r\n    </remarks>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.SemanticModel",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.SemanticModel\">\r\n    <summary>\r\n    Allows asking semantic questions about a tree of syntax nodes in a Compilation. Typically,\r\n    an instance is obtained by a call to GetBinding on a Compilation or Compilation.\r\n    </summary>\r\n    <remarks>\r\n    <para>An instance of SemanticModel caches local symbols and semantic information. Thus, it\r\n    is much more efficient to use a single instance of SemanticModel when asking multiple\r\n    questions about a syntax tree, because information from the first question may be reused.\r\n    This also means that holding onto an instance of SemanticModel for a long time may keep a\r\n    significant amount of memory from being garbage collected.\r\n    </para>\r\n    <para>\r\n    When an answer is a named symbol that is reachable by traversing from the root of the symbol\r\n    table, (that is, from an AssemblySymbol of the Compilation), that symbol will be returned\r\n    (i.e. the returned value will be reference-equal to one reachable from the root of the\r\n    symbol table). Symbols representing entities without names (e.g. array-of-int) may or may\r\n    not exhibit reference equality. However, some named symbols (such as local variables) are\r\n    not reachable from the root. These symbols are visible as answers to semantic questions.\r\n    When the same SemanticModel object is used, the answers exhibit reference-equality.\r\n    </para>\r\n    </remarks>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Object : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public abstract override bool Equals(object other);",
                "XmlDocumentation": "",
                "StartLine": 16
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Object : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public abstract override bool Equals(object other);",
                "XmlDocumentation": "",
                "StartLine": 16
              },
              "Id": "M:Microsoft.CodeAnalysis.SourceReferenceResolver.Equals(System.Object)",
              "Parent": "T:Microsoft.CodeAnalysis.SourceReferenceResolver",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public abstract override int GetHashCode();",
                "XmlDocumentation": "",
                "StartLine": 17
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public abstract override int GetHashCode();",
                "XmlDocumentation": "",
                "StartLine": 17
              },
              "Id": "M:Microsoft.CodeAnalysis.SourceReferenceResolver.GetHashCode",
              "Parent": "T:Microsoft.CodeAnalysis.SourceReferenceResolver",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.String : baseFilePath": "",
                  "T:System.String : path": ""
                },
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public abstract string NormalizePath(string path, string baseFilePath);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SourceReferenceResolver.NormalizePath(System.String,System.String)\">\r\n    <summary>\r\n    Normalizes specified source path with respect to base file path.\r\n    </summary>\r\n    <param name=\"path\">The source path to normalize. May be absolute or relative.</param>\r\n    <param name=\"baseFilePath\">Path of the source file that contains the <paramref name=\"path\"/> (may also be relative), or null if not available.</param>\r\n    <returns>Normalized path, or null if <paramref name=\"path\"/> can't be normalized. The resulting path doesn't need to exist.</returns>\r\n</member>\r\n",
                "StartLine": 25
              },
              "Syntax": {
                "Parameters": {
                  "T:System.String : baseFilePath": "",
                  "T:System.String : path": ""
                },
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public abstract string NormalizePath(string path, string baseFilePath);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SourceReferenceResolver.NormalizePath(System.String,System.String)\">\r\n    <summary>\r\n    Normalizes specified source path with respect to base file path.\r\n    </summary>\r\n    <param name=\"path\">The source path to normalize. May be absolute or relative.</param>\r\n    <param name=\"baseFilePath\">Path of the source file that contains the <paramref name=\"path\"/> (may also be relative), or null if not available.</param>\r\n    <returns>Normalized path, or null if <paramref name=\"path\"/> can't be normalized. The resulting path doesn't need to exist.</returns>\r\n</member>\r\n",
                "StartLine": 25
              },
              "Id": "M:Microsoft.CodeAnalysis.SourceReferenceResolver.NormalizePath(System.String,System.String)",
              "Parent": "T:Microsoft.CodeAnalysis.SourceReferenceResolver",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SourceReferenceResolver.NormalizePath(System.String,System.String)\">\r\n    <summary>\r\n    Normalizes specified source path with respect to base file path.\r\n    </summary>\r\n    <param name=\"path\">The source path to normalize. May be absolute or relative.</param>\r\n    <param name=\"baseFilePath\">Path of the source file that contains the <paramref name=\"path\"/> (may also be relative), or null if not available.</param>\r\n    <returns>Normalized path, or null if <paramref name=\"path\"/> can't be normalized. The resulting path doesn't need to exist.</returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.String : resolvedPath": ""
                },
                "Returns": {
                  "T:System.IO.Stream": ""
                },
                "Content": "public abstract Stream OpenRead(string resolvedPath);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SourceReferenceResolver.OpenRead(System.String)\">\r\n    <summary>\r\n    Opens a <see cref=\"T:System.IO.Stream\"/> that allows reading the content of the specified file.\r\n    </summary>\r\n    <param name=\"resolvedPath\">Path returned by <see cref=\"M:Microsoft.CodeAnalysis.SourceReferenceResolver.ResolveReference(System.String,System.String)\"/>.</param>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"resolvedPath\"/> is null.</exception>\r\n    <exception cref=\"T:System.ArgumentException\"><paramref name=\"resolvedPath\"/> is not a valid absolute path.</exception>\r\n    <exception cref=\"T:System.IO.IOException\">Error reading file <paramref name=\"resolvedPath\"/>. See <see cref=\"P:System.Exception.InnerException\"/> for details.</exception>\r\n</member>\r\n",
                "StartLine": 42
              },
              "Syntax": {
                "Parameters": {
                  "T:System.String : resolvedPath": ""
                },
                "Returns": {
                  "T:System.IO.Stream": ""
                },
                "Content": "public abstract Stream OpenRead(string resolvedPath);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SourceReferenceResolver.OpenRead(System.String)\">\r\n    <summary>\r\n    Opens a <see cref=\"T:System.IO.Stream\"/> that allows reading the content of the specified file.\r\n    </summary>\r\n    <param name=\"resolvedPath\">Path returned by <see cref=\"M:Microsoft.CodeAnalysis.SourceReferenceResolver.ResolveReference(System.String,System.String)\"/>.</param>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"resolvedPath\"/> is null.</exception>\r\n    <exception cref=\"T:System.ArgumentException\"><paramref name=\"resolvedPath\"/> is not a valid absolute path.</exception>\r\n    <exception cref=\"T:System.IO.IOException\">Error reading file <paramref name=\"resolvedPath\"/>. See <see cref=\"P:System.Exception.InnerException\"/> for details.</exception>\r\n</member>\r\n",
                "StartLine": 42
              },
              "Id": "M:Microsoft.CodeAnalysis.SourceReferenceResolver.OpenRead(System.String)",
              "Parent": "T:Microsoft.CodeAnalysis.SourceReferenceResolver",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SourceReferenceResolver.OpenRead(System.String)\">\r\n    <summary>\r\n    Opens a <see cref=\"T:System.IO.Stream\"/> that allows reading the content of the specified file.\r\n    </summary>\r\n    <param name=\"resolvedPath\">Path returned by <see cref=\"M:Microsoft.CodeAnalysis.SourceReferenceResolver.ResolveReference(System.String,System.String)\"/>.</param>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"resolvedPath\"/> is null.</exception>\r\n    <exception cref=\"T:System.ArgumentException\"><paramref name=\"resolvedPath\"/> is not a valid absolute path.</exception>\r\n    <exception cref=\"T:System.IO.IOException\">Error reading file <paramref name=\"resolvedPath\"/>. See <see cref=\"P:System.Exception.InnerException\"/> for details.</exception>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.String : baseFilePath": "",
                  "T:System.String : path": ""
                },
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public abstract string ResolveReference(string path, string baseFilePath);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SourceReferenceResolver.ResolveReference(System.String,System.String)\">\r\n    <summary>\r\n    Resolves specified path with respect to base file path.\r\n    </summary>\r\n    <param name=\"path\">The path to resolve. May be absolute or relative.</param>\r\n    <param name=\"baseFilePath\">Path of the source file that contains the <paramref name=\"path\"/> (may also be relative), or null if not available.</param>\r\n    <returns>Normalized path, or null if the file can't be resolved.</returns>\r\n</member>\r\n",
                "StartLine": 33
              },
              "Syntax": {
                "Parameters": {
                  "T:System.String : baseFilePath": "",
                  "T:System.String : path": ""
                },
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public abstract string ResolveReference(string path, string baseFilePath);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SourceReferenceResolver.ResolveReference(System.String,System.String)\">\r\n    <summary>\r\n    Resolves specified path with respect to base file path.\r\n    </summary>\r\n    <param name=\"path\">The path to resolve. May be absolute or relative.</param>\r\n    <param name=\"baseFilePath\">Path of the source file that contains the <paramref name=\"path\"/> (may also be relative), or null if not available.</param>\r\n    <returns>Normalized path, or null if the file can't be resolved.</returns>\r\n</member>\r\n",
                "StartLine": 33
              },
              "Id": "M:Microsoft.CodeAnalysis.SourceReferenceResolver.ResolveReference(System.String,System.String)",
              "Parent": "T:Microsoft.CodeAnalysis.SourceReferenceResolver",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SourceReferenceResolver.ResolveReference(System.String,System.String)\">\r\n    <summary>\r\n    Resolves specified path with respect to base file path.\r\n    </summary>\r\n    <param name=\"path\">The path to resolve. May be absolute or relative.</param>\r\n    <param name=\"baseFilePath\">Path of the source file that contains the <paramref name=\"path\"/> (may also be relative), or null if not available.</param>\r\n    <returns>Normalized path, or null if the file can't be resolved.</returns>\r\n</member>\r\n"
            }
          ],
          "Constructors": [
            {
              "ConstructorSyntax": {
                "Parameters": {},
                "Content": "protected SourceReferenceResolver()",
                "XmlDocumentation": "",
                "StartLine": 12
              },
              "Syntax": {
                "Parameters": {},
                "Content": "protected SourceReferenceResolver()",
                "XmlDocumentation": "",
                "StartLine": 12
              },
              "Id": "M:Microsoft.CodeAnalysis.SourceReferenceResolver.#ctor",
              "Parent": "T:Microsoft.CodeAnalysis.SourceReferenceResolver",
              "XmlDocumentation": ""
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Compilation\\SourceReferenceResolver.cs",
          "InheritanceHierarchy": [
            "T:System.Object"
          ],
          "Syntax": {
            "Content": "public abstract class SourceReferenceResolver",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.SourceReferenceResolver\">\r\n    <summary>\r\n    Resolves references to source documents specified in the source.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.SourceReferenceResolver",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.SourceReferenceResolver\">\r\n    <summary>\r\n    Resolves references to source documents specified in the source.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Object : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public abstract override bool Equals(object other);",
                "XmlDocumentation": "",
                "StartLine": 15
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Object : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public abstract override bool Equals(object other);",
                "XmlDocumentation": "",
                "StartLine": 15
              },
              "Id": "M:Microsoft.CodeAnalysis.StrongNameProvider.Equals(System.Object)",
              "Parent": "T:Microsoft.CodeAnalysis.StrongNameProvider",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public abstract override int GetHashCode();",
                "XmlDocumentation": "",
                "StartLine": 16
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public abstract override int GetHashCode();",
                "XmlDocumentation": "",
                "StartLine": 16
              },
              "Id": "M:Microsoft.CodeAnalysis.StrongNameProvider.GetHashCode",
              "Parent": "T:Microsoft.CodeAnalysis.StrongNameProvider",
              "XmlDocumentation": ""
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\StrongNameProvider.cs",
          "InheritanceHierarchy": [
            "T:System.Object"
          ],
          "Syntax": {
            "Content": "public abstract class StrongNameProvider",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.StrongNameProvider\">\r\n    <summary>\r\n    Provides strong name and signs source assemblies.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.StrongNameProvider",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.StrongNameProvider\">\r\n    <summary>\r\n    Provides strong name and signs source assemblies.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.SymbolDisplayPart} : parts": ""
                },
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public static string ToDisplayString(this ImmutableArray<SymbolDisplayPart> parts)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SymbolDisplayExtensions.ToDisplayString(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.SymbolDisplayPart})\">\r\n    <summary>\r\n    Converts an immutable array of <see cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayPart\"/>s to a string.\r\n    </summary>\r\n    <param name=\"parts\">The array of parts.</param>\r\n    <returns>The concatenation of the parts into a single string.</returns>\r\n</member>\r\n",
                "StartLine": 18
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.SymbolDisplayPart} : parts": ""
                },
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public static string ToDisplayString(this ImmutableArray<SymbolDisplayPart> parts)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SymbolDisplayExtensions.ToDisplayString(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.SymbolDisplayPart})\">\r\n    <summary>\r\n    Converts an immutable array of <see cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayPart\"/>s to a string.\r\n    </summary>\r\n    <param name=\"parts\">The array of parts.</param>\r\n    <returns>The concatenation of the parts into a single string.</returns>\r\n</member>\r\n",
                "StartLine": 18
              },
              "Id": "M:Microsoft.CodeAnalysis.SymbolDisplayExtensions.ToDisplayString(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.SymbolDisplayPart})",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolDisplayExtensions",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SymbolDisplayExtensions.ToDisplayString(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.SymbolDisplayPart})\">\r\n    <summary>\r\n    Converts an immutable array of <see cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayPart\"/>s to a string.\r\n    </summary>\r\n    <param name=\"parts\">The array of parts.</param>\r\n    <returns>The concatenation of the parts into a single string.</returns>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\SymbolDisplay\\SymbolDisplayExtensions.cs",
          "InheritanceHierarchy": [
            "T:System.Object"
          ],
          "Syntax": {
            "Content": "public static class SymbolDisplayExtensions",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.SymbolDisplayExtensions\">\r\n    <summary>\r\n    Exposes extension methods for displaying symbol descriptions.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.SymbolDisplayExtensions",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.SymbolDisplayExtensions\">\r\n    <summary>\r\n    Exposes extension methods for displaying symbol descriptions.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SymbolDisplayGenericsOptions : options": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SymbolDisplayFormat": ""
                },
                "Content": "public SymbolDisplayFormat AddGenericsOptions(SymbolDisplayGenericsOptions options)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SymbolDisplayFormat.AddGenericsOptions(Microsoft.CodeAnalysis.SymbolDisplayGenericsOptions)\">\r\n    <summary>\r\n    Creates a copy of the SymbolDisplayFormat but with an additional set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayGenericsOptions\"/>.\r\n    </summary>\r\n    <param name=\"options\">\r\n    An object specifying additional parameters for how generic symbols will be formatted.\r\n    </param>\r\n    <returns>A duplicate of the SymbolDisplayFormat, with an additional set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayGenericsOptions\"/>.</returns>\r\n</member>\r\n",
                "StartLine": 468
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SymbolDisplayGenericsOptions : options": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SymbolDisplayFormat": ""
                },
                "Content": "public SymbolDisplayFormat AddGenericsOptions(SymbolDisplayGenericsOptions options)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SymbolDisplayFormat.AddGenericsOptions(Microsoft.CodeAnalysis.SymbolDisplayGenericsOptions)\">\r\n    <summary>\r\n    Creates a copy of the SymbolDisplayFormat but with an additional set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayGenericsOptions\"/>.\r\n    </summary>\r\n    <param name=\"options\">\r\n    An object specifying additional parameters for how generic symbols will be formatted.\r\n    </param>\r\n    <returns>A duplicate of the SymbolDisplayFormat, with an additional set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayGenericsOptions\"/>.</returns>\r\n</member>\r\n",
                "StartLine": 468
              },
              "Id": "M:Microsoft.CodeAnalysis.SymbolDisplayFormat.AddGenericsOptions(Microsoft.CodeAnalysis.SymbolDisplayGenericsOptions)",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolDisplayFormat",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SymbolDisplayFormat.AddGenericsOptions(Microsoft.CodeAnalysis.SymbolDisplayGenericsOptions)\">\r\n    <summary>\r\n    Creates a copy of the SymbolDisplayFormat but with an additional set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayGenericsOptions\"/>.\r\n    </summary>\r\n    <param name=\"options\">\r\n    An object specifying additional parameters for how generic symbols will be formatted.\r\n    </param>\r\n    <returns>A duplicate of the SymbolDisplayFormat, with an additional set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayGenericsOptions\"/>.</returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SymbolDisplayKindOptions : options": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SymbolDisplayFormat": ""
                },
                "Content": "public SymbolDisplayFormat AddKindOptions(SymbolDisplayKindOptions options)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SymbolDisplayFormat.AddKindOptions(Microsoft.CodeAnalysis.SymbolDisplayKindOptions)\">\r\n    <summary>\r\n    Creates a copy of the SymbolDisplayFormat but with an additional set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayKindOptions\"/>.\r\n    </summary>\r\n    <param name=\"options\">\r\n    An object specifying additional parameters with which symbols belonging to kind keywords should be formatted.\r\n    </param>\r\n    <returns>\r\n    A duplicate of the SymbolDisplayFormat, with an additional set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayKindOptions\"/>.\r\n    </returns>\r\n</member>\r\n",
                "StartLine": 558
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SymbolDisplayKindOptions : options": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SymbolDisplayFormat": ""
                },
                "Content": "public SymbolDisplayFormat AddKindOptions(SymbolDisplayKindOptions options)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SymbolDisplayFormat.AddKindOptions(Microsoft.CodeAnalysis.SymbolDisplayKindOptions)\">\r\n    <summary>\r\n    Creates a copy of the SymbolDisplayFormat but with an additional set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayKindOptions\"/>.\r\n    </summary>\r\n    <param name=\"options\">\r\n    An object specifying additional parameters with which symbols belonging to kind keywords should be formatted.\r\n    </param>\r\n    <returns>\r\n    A duplicate of the SymbolDisplayFormat, with an additional set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayKindOptions\"/>.\r\n    </returns>\r\n</member>\r\n",
                "StartLine": 558
              },
              "Id": "M:Microsoft.CodeAnalysis.SymbolDisplayFormat.AddKindOptions(Microsoft.CodeAnalysis.SymbolDisplayKindOptions)",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolDisplayFormat",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SymbolDisplayFormat.AddKindOptions(Microsoft.CodeAnalysis.SymbolDisplayKindOptions)\">\r\n    <summary>\r\n    Creates a copy of the SymbolDisplayFormat but with an additional set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayKindOptions\"/>.\r\n    </summary>\r\n    <param name=\"options\">\r\n    An object specifying additional parameters with which symbols belonging to kind keywords should be formatted.\r\n    </param>\r\n    <returns>\r\n    A duplicate of the SymbolDisplayFormat, with an additional set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayKindOptions\"/>.\r\n    </returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SymbolDisplayLocalOptions : options": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SymbolDisplayFormat": ""
                },
                "Content": "public SymbolDisplayFormat AddLocalOptions(SymbolDisplayLocalOptions options)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SymbolDisplayFormat.AddLocalOptions(Microsoft.CodeAnalysis.SymbolDisplayLocalOptions)\">\r\n    <summary>\r\n    Creates a copy of the SymbolDisplayFormat but with an additional set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayParameterOptions\"/>.\r\n    </summary>\r\n    <param name=\"options\">\r\n    An object specifying additional parameters on how symbols belonging to locals should be formatted.\r\n    </param>\r\n    <returns>\r\n    A duplicate of the SymbolDisplayFormat, with an additional set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayParameterOptions\"/>.\r\n    </returns>\r\n</member>\r\n",
                "StartLine": 683
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SymbolDisplayLocalOptions : options": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SymbolDisplayFormat": ""
                },
                "Content": "public SymbolDisplayFormat AddLocalOptions(SymbolDisplayLocalOptions options)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SymbolDisplayFormat.AddLocalOptions(Microsoft.CodeAnalysis.SymbolDisplayLocalOptions)\">\r\n    <summary>\r\n    Creates a copy of the SymbolDisplayFormat but with an additional set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayParameterOptions\"/>.\r\n    </summary>\r\n    <param name=\"options\">\r\n    An object specifying additional parameters on how symbols belonging to locals should be formatted.\r\n    </param>\r\n    <returns>\r\n    A duplicate of the SymbolDisplayFormat, with an additional set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayParameterOptions\"/>.\r\n    </returns>\r\n</member>\r\n",
                "StartLine": 683
              },
              "Id": "M:Microsoft.CodeAnalysis.SymbolDisplayFormat.AddLocalOptions(Microsoft.CodeAnalysis.SymbolDisplayLocalOptions)",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolDisplayFormat",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SymbolDisplayFormat.AddLocalOptions(Microsoft.CodeAnalysis.SymbolDisplayLocalOptions)\">\r\n    <summary>\r\n    Creates a copy of the SymbolDisplayFormat but with an additional set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayParameterOptions\"/>.\r\n    </summary>\r\n    <param name=\"options\">\r\n    An object specifying additional parameters on how symbols belonging to locals should be formatted.\r\n    </param>\r\n    <returns>\r\n    A duplicate of the SymbolDisplayFormat, with an additional set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayParameterOptions\"/>.\r\n    </returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SymbolDisplayMemberOptions : options": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SymbolDisplayFormat": ""
                },
                "Content": "public SymbolDisplayFormat AddMemberOptions(SymbolDisplayMemberOptions options)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SymbolDisplayFormat.AddMemberOptions(Microsoft.CodeAnalysis.SymbolDisplayMemberOptions)\">\r\n    <summary>\r\n    Creates a copy of the SymbolDisplayFormat but with an additional set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayMemberOptions\"/>.\r\n    </summary>\r\n    <param name=\"options\">\r\n    An object specifying additional parameters for how members will be formatted.\r\n    </param>\r\n    <returns>\r\n    A duplicate of the SymbolDisplayFormat, with an additional set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayMemberOptions\"/>.\r\n    </returns>\r\n</member>\r\n",
                "StartLine": 505
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SymbolDisplayMemberOptions : options": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SymbolDisplayFormat": ""
                },
                "Content": "public SymbolDisplayFormat AddMemberOptions(SymbolDisplayMemberOptions options)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SymbolDisplayFormat.AddMemberOptions(Microsoft.CodeAnalysis.SymbolDisplayMemberOptions)\">\r\n    <summary>\r\n    Creates a copy of the SymbolDisplayFormat but with an additional set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayMemberOptions\"/>.\r\n    </summary>\r\n    <param name=\"options\">\r\n    An object specifying additional parameters for how members will be formatted.\r\n    </param>\r\n    <returns>\r\n    A duplicate of the SymbolDisplayFormat, with an additional set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayMemberOptions\"/>.\r\n    </returns>\r\n</member>\r\n",
                "StartLine": 505
              },
              "Id": "M:Microsoft.CodeAnalysis.SymbolDisplayFormat.AddMemberOptions(Microsoft.CodeAnalysis.SymbolDisplayMemberOptions)",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolDisplayFormat",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SymbolDisplayFormat.AddMemberOptions(Microsoft.CodeAnalysis.SymbolDisplayMemberOptions)\">\r\n    <summary>\r\n    Creates a copy of the SymbolDisplayFormat but with an additional set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayMemberOptions\"/>.\r\n    </summary>\r\n    <param name=\"options\">\r\n    An object specifying additional parameters for how members will be formatted.\r\n    </param>\r\n    <returns>\r\n    A duplicate of the SymbolDisplayFormat, with an additional set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayMemberOptions\"/>.\r\n    </returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SymbolDisplayMiscellaneousOptions : options": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SymbolDisplayFormat": ""
                },
                "Content": "public SymbolDisplayFormat AddMiscellaneousOptions(SymbolDisplayMiscellaneousOptions options)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SymbolDisplayFormat.AddMiscellaneousOptions(Microsoft.CodeAnalysis.SymbolDisplayMiscellaneousOptions)\">\r\n    <summary>\r\n    Creates a copy of the SymbolDisplayFormat but with an additional set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayMiscellaneousOptions\"/>.\r\n    </summary>\r\n    <param name=\"options\">\r\n    An object specifying additional parameters for how miscellaneous symbols will be formatted.\r\n    </param>\r\n    <returns>A duplicate of the SymbolDisplayFormat, with an additional set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayMiscellaneousOptions\"/>.</returns>\r\n</member>\r\n",
                "StartLine": 433
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SymbolDisplayMiscellaneousOptions : options": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SymbolDisplayFormat": ""
                },
                "Content": "public SymbolDisplayFormat AddMiscellaneousOptions(SymbolDisplayMiscellaneousOptions options)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SymbolDisplayFormat.AddMiscellaneousOptions(Microsoft.CodeAnalysis.SymbolDisplayMiscellaneousOptions)\">\r\n    <summary>\r\n    Creates a copy of the SymbolDisplayFormat but with an additional set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayMiscellaneousOptions\"/>.\r\n    </summary>\r\n    <param name=\"options\">\r\n    An object specifying additional parameters for how miscellaneous symbols will be formatted.\r\n    </param>\r\n    <returns>A duplicate of the SymbolDisplayFormat, with an additional set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayMiscellaneousOptions\"/>.</returns>\r\n</member>\r\n",
                "StartLine": 433
              },
              "Id": "M:Microsoft.CodeAnalysis.SymbolDisplayFormat.AddMiscellaneousOptions(Microsoft.CodeAnalysis.SymbolDisplayMiscellaneousOptions)",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolDisplayFormat",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SymbolDisplayFormat.AddMiscellaneousOptions(Microsoft.CodeAnalysis.SymbolDisplayMiscellaneousOptions)\">\r\n    <summary>\r\n    Creates a copy of the SymbolDisplayFormat but with an additional set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayMiscellaneousOptions\"/>.\r\n    </summary>\r\n    <param name=\"options\">\r\n    An object specifying additional parameters for how miscellaneous symbols will be formatted.\r\n    </param>\r\n    <returns>A duplicate of the SymbolDisplayFormat, with an additional set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayMiscellaneousOptions\"/>.</returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SymbolDisplayParameterOptions : options": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SymbolDisplayFormat": ""
                },
                "Content": "public SymbolDisplayFormat AddParameterOptions(SymbolDisplayParameterOptions options)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SymbolDisplayFormat.AddParameterOptions(Microsoft.CodeAnalysis.SymbolDisplayParameterOptions)\">\r\n    <summary>\r\n    Creates a copy of the SymbolDisplayFormat but with an additional set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayParameterOptions\"/>.\r\n    </summary>\r\n    <param name=\"options\">\r\n    An object specifying additional parameters on how parameters should be formatted.\r\n    </param>\r\n    <returns>\r\n    A duplicate of the SymbolDisplayFormat, with an additional set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayParameterOptions\"/>.\r\n    </returns>\r\n</member>\r\n",
                "StartLine": 609
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SymbolDisplayParameterOptions : options": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SymbolDisplayFormat": ""
                },
                "Content": "public SymbolDisplayFormat AddParameterOptions(SymbolDisplayParameterOptions options)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SymbolDisplayFormat.AddParameterOptions(Microsoft.CodeAnalysis.SymbolDisplayParameterOptions)\">\r\n    <summary>\r\n    Creates a copy of the SymbolDisplayFormat but with an additional set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayParameterOptions\"/>.\r\n    </summary>\r\n    <param name=\"options\">\r\n    An object specifying additional parameters on how parameters should be formatted.\r\n    </param>\r\n    <returns>\r\n    A duplicate of the SymbolDisplayFormat, with an additional set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayParameterOptions\"/>.\r\n    </returns>\r\n</member>\r\n",
                "StartLine": 609
              },
              "Id": "M:Microsoft.CodeAnalysis.SymbolDisplayFormat.AddParameterOptions(Microsoft.CodeAnalysis.SymbolDisplayParameterOptions)",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolDisplayFormat",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SymbolDisplayFormat.AddParameterOptions(Microsoft.CodeAnalysis.SymbolDisplayParameterOptions)\">\r\n    <summary>\r\n    Creates a copy of the SymbolDisplayFormat but with an additional set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayParameterOptions\"/>.\r\n    </summary>\r\n    <param name=\"options\">\r\n    An object specifying additional parameters on how parameters should be formatted.\r\n    </param>\r\n    <returns>\r\n    A duplicate of the SymbolDisplayFormat, with an additional set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayParameterOptions\"/>.\r\n    </returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SymbolDisplayKindOptions : options": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SymbolDisplayFormat": ""
                },
                "Content": "public SymbolDisplayFormat RemoveKindOptions(SymbolDisplayKindOptions options)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SymbolDisplayFormat.RemoveKindOptions(Microsoft.CodeAnalysis.SymbolDisplayKindOptions)\">\r\n    <summary>\r\n    Creates a copy of the SymbolDisplayFormat but with a set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayKindOptions\"/> stripped away from the original object.\r\n    </summary>\r\n    <param name=\"options\">\r\n    The settings that determine other characteristics of how symbols are displayed.\r\n    </param>\r\n    <returns>\r\n    A duplicate of the SymbolDisplayFormat, with a set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayKindOptions\"/> stripped away from the original object.\r\n    </returns>\r\n</member>\r\n",
                "StartLine": 572
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SymbolDisplayKindOptions : options": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SymbolDisplayFormat": ""
                },
                "Content": "public SymbolDisplayFormat RemoveKindOptions(SymbolDisplayKindOptions options)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SymbolDisplayFormat.RemoveKindOptions(Microsoft.CodeAnalysis.SymbolDisplayKindOptions)\">\r\n    <summary>\r\n    Creates a copy of the SymbolDisplayFormat but with a set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayKindOptions\"/> stripped away from the original object.\r\n    </summary>\r\n    <param name=\"options\">\r\n    The settings that determine other characteristics of how symbols are displayed.\r\n    </param>\r\n    <returns>\r\n    A duplicate of the SymbolDisplayFormat, with a set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayKindOptions\"/> stripped away from the original object.\r\n    </returns>\r\n</member>\r\n",
                "StartLine": 572
              },
              "Id": "M:Microsoft.CodeAnalysis.SymbolDisplayFormat.RemoveKindOptions(Microsoft.CodeAnalysis.SymbolDisplayKindOptions)",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolDisplayFormat",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SymbolDisplayFormat.RemoveKindOptions(Microsoft.CodeAnalysis.SymbolDisplayKindOptions)\">\r\n    <summary>\r\n    Creates a copy of the SymbolDisplayFormat but with a set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayKindOptions\"/> stripped away from the original object.\r\n    </summary>\r\n    <param name=\"options\">\r\n    The settings that determine other characteristics of how symbols are displayed.\r\n    </param>\r\n    <returns>\r\n    A duplicate of the SymbolDisplayFormat, with a set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayKindOptions\"/> stripped away from the original object.\r\n    </returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SymbolDisplayMemberOptions : options": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SymbolDisplayFormat": ""
                },
                "Content": "public SymbolDisplayFormat RemoveMemberOptions(SymbolDisplayMemberOptions options)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SymbolDisplayFormat.RemoveMemberOptions(Microsoft.CodeAnalysis.SymbolDisplayMemberOptions)\">\r\n    <summary>\r\n    Creates a copy of the SymbolDisplayFormat but with a set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayMemberOptions\"/> stripped away from the original object.\r\n    </summary>\r\n    <param name=\"options\">\r\n    An object specifying which parameters should not be applied to how members will be formatted.\r\n    </param>\r\n    <returns>\r\n    A duplicate of the SymbolDisplayFormat, with a set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayMemberOptions\"/> stripped away from the original object.\r\n    </returns>\r\n</member>\r\n",
                "StartLine": 519
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SymbolDisplayMemberOptions : options": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SymbolDisplayFormat": ""
                },
                "Content": "public SymbolDisplayFormat RemoveMemberOptions(SymbolDisplayMemberOptions options)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SymbolDisplayFormat.RemoveMemberOptions(Microsoft.CodeAnalysis.SymbolDisplayMemberOptions)\">\r\n    <summary>\r\n    Creates a copy of the SymbolDisplayFormat but with a set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayMemberOptions\"/> stripped away from the original object.\r\n    </summary>\r\n    <param name=\"options\">\r\n    An object specifying which parameters should not be applied to how members will be formatted.\r\n    </param>\r\n    <returns>\r\n    A duplicate of the SymbolDisplayFormat, with a set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayMemberOptions\"/> stripped away from the original object.\r\n    </returns>\r\n</member>\r\n",
                "StartLine": 519
              },
              "Id": "M:Microsoft.CodeAnalysis.SymbolDisplayFormat.RemoveMemberOptions(Microsoft.CodeAnalysis.SymbolDisplayMemberOptions)",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolDisplayFormat",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SymbolDisplayFormat.RemoveMemberOptions(Microsoft.CodeAnalysis.SymbolDisplayMemberOptions)\">\r\n    <summary>\r\n    Creates a copy of the SymbolDisplayFormat but with a set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayMemberOptions\"/> stripped away from the original object.\r\n    </summary>\r\n    <param name=\"options\">\r\n    An object specifying which parameters should not be applied to how members will be formatted.\r\n    </param>\r\n    <returns>\r\n    A duplicate of the SymbolDisplayFormat, with a set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayMemberOptions\"/> stripped away from the original object.\r\n    </returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SymbolDisplayParameterOptions : options": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SymbolDisplayFormat": ""
                },
                "Content": "public SymbolDisplayFormat RemoveParameterOptions(SymbolDisplayParameterOptions options)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SymbolDisplayFormat.RemoveParameterOptions(Microsoft.CodeAnalysis.SymbolDisplayParameterOptions)\">\r\n    <summary>\r\n    Creates a copy of the SymbolDisplayFormat but with a set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayParameterOptions\"/> stripped away from the original object.\r\n    </summary>\r\n    <param name=\"options\">\r\n    An object specifying parameters that should not be applied when formatting parameters.\r\n    </param>\r\n    <returns>\r\n    A duplicate of the SymbolDisplayFormat, with a set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayParameterOptions\"/> stripped away from the original object.\r\n    </returns>\r\n</member>\r\n",
                "StartLine": 623
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SymbolDisplayParameterOptions : options": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SymbolDisplayFormat": ""
                },
                "Content": "public SymbolDisplayFormat RemoveParameterOptions(SymbolDisplayParameterOptions options)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SymbolDisplayFormat.RemoveParameterOptions(Microsoft.CodeAnalysis.SymbolDisplayParameterOptions)\">\r\n    <summary>\r\n    Creates a copy of the SymbolDisplayFormat but with a set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayParameterOptions\"/> stripped away from the original object.\r\n    </summary>\r\n    <param name=\"options\">\r\n    An object specifying parameters that should not be applied when formatting parameters.\r\n    </param>\r\n    <returns>\r\n    A duplicate of the SymbolDisplayFormat, with a set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayParameterOptions\"/> stripped away from the original object.\r\n    </returns>\r\n</member>\r\n",
                "StartLine": 623
              },
              "Id": "M:Microsoft.CodeAnalysis.SymbolDisplayFormat.RemoveParameterOptions(Microsoft.CodeAnalysis.SymbolDisplayParameterOptions)",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolDisplayFormat",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SymbolDisplayFormat.RemoveParameterOptions(Microsoft.CodeAnalysis.SymbolDisplayParameterOptions)\">\r\n    <summary>\r\n    Creates a copy of the SymbolDisplayFormat but with a set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayParameterOptions\"/> stripped away from the original object.\r\n    </summary>\r\n    <param name=\"options\">\r\n    An object specifying parameters that should not be applied when formatting parameters.\r\n    </param>\r\n    <returns>\r\n    A duplicate of the SymbolDisplayFormat, with a set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayParameterOptions\"/> stripped away from the original object.\r\n    </returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SymbolDisplayGenericsOptions : options": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SymbolDisplayFormat": ""
                },
                "Content": "public SymbolDisplayFormat WithGenericsOptions(SymbolDisplayGenericsOptions options)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SymbolDisplayFormat.WithGenericsOptions(Microsoft.CodeAnalysis.SymbolDisplayGenericsOptions)\">\r\n    <summary>\r\n    Creates a copy of the SymbolDisplayFormat but with replaced set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayGenericsOptions\"/>.\r\n    </summary>\r\n    <param name=\"options\">\r\n    An object specifying how generic symbols will be formatted.\r\n    </param>\r\n    <returns>A duplicate of the SymbolDisplayFormat, with a replaced set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayGenericsOptions\"/>.</returns>\r\n</member>\r\n",
                "StartLine": 445
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SymbolDisplayGenericsOptions : options": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SymbolDisplayFormat": ""
                },
                "Content": "public SymbolDisplayFormat WithGenericsOptions(SymbolDisplayGenericsOptions options)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SymbolDisplayFormat.WithGenericsOptions(Microsoft.CodeAnalysis.SymbolDisplayGenericsOptions)\">\r\n    <summary>\r\n    Creates a copy of the SymbolDisplayFormat but with replaced set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayGenericsOptions\"/>.\r\n    </summary>\r\n    <param name=\"options\">\r\n    An object specifying how generic symbols will be formatted.\r\n    </param>\r\n    <returns>A duplicate of the SymbolDisplayFormat, with a replaced set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayGenericsOptions\"/>.</returns>\r\n</member>\r\n",
                "StartLine": 445
              },
              "Id": "M:Microsoft.CodeAnalysis.SymbolDisplayFormat.WithGenericsOptions(Microsoft.CodeAnalysis.SymbolDisplayGenericsOptions)",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolDisplayFormat",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SymbolDisplayFormat.WithGenericsOptions(Microsoft.CodeAnalysis.SymbolDisplayGenericsOptions)\">\r\n    <summary>\r\n    Creates a copy of the SymbolDisplayFormat but with replaced set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayGenericsOptions\"/>.\r\n    </summary>\r\n    <param name=\"options\">\r\n    An object specifying how generic symbols will be formatted.\r\n    </param>\r\n    <returns>A duplicate of the SymbolDisplayFormat, with a replaced set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayGenericsOptions\"/>.</returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SymbolDisplayGlobalNamespaceStyle : style": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SymbolDisplayFormat": ""
                },
                "Content": "public SymbolDisplayFormat WithGlobalNamespaceStyle(SymbolDisplayGlobalNamespaceStyle style)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SymbolDisplayFormat.WithGlobalNamespaceStyle(Microsoft.CodeAnalysis.SymbolDisplayGlobalNamespaceStyle)\">\r\n    <summary>\r\n    Creates a copy of the SymbolDisplayFormat but with replaced <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayGlobalNamespaceStyle\"/>.\r\n    </summary>\r\n    <param name=\"style\">\r\n    An object specifying paramers on how namespace symbols should be formatted.\r\n    </param>\r\n    <returns>A duplicate of the SymbolDisplayFormat, with a replaced set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayGlobalNamespaceStyle\"/>.</returns>\r\n</member>\r\n",
                "StartLine": 635
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SymbolDisplayGlobalNamespaceStyle : style": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SymbolDisplayFormat": ""
                },
                "Content": "public SymbolDisplayFormat WithGlobalNamespaceStyle(SymbolDisplayGlobalNamespaceStyle style)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SymbolDisplayFormat.WithGlobalNamespaceStyle(Microsoft.CodeAnalysis.SymbolDisplayGlobalNamespaceStyle)\">\r\n    <summary>\r\n    Creates a copy of the SymbolDisplayFormat but with replaced <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayGlobalNamespaceStyle\"/>.\r\n    </summary>\r\n    <param name=\"style\">\r\n    An object specifying paramers on how namespace symbols should be formatted.\r\n    </param>\r\n    <returns>A duplicate of the SymbolDisplayFormat, with a replaced set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayGlobalNamespaceStyle\"/>.</returns>\r\n</member>\r\n",
                "StartLine": 635
              },
              "Id": "M:Microsoft.CodeAnalysis.SymbolDisplayFormat.WithGlobalNamespaceStyle(Microsoft.CodeAnalysis.SymbolDisplayGlobalNamespaceStyle)",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolDisplayFormat",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SymbolDisplayFormat.WithGlobalNamespaceStyle(Microsoft.CodeAnalysis.SymbolDisplayGlobalNamespaceStyle)\">\r\n    <summary>\r\n    Creates a copy of the SymbolDisplayFormat but with replaced <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayGlobalNamespaceStyle\"/>.\r\n    </summary>\r\n    <param name=\"style\">\r\n    An object specifying paramers on how namespace symbols should be formatted.\r\n    </param>\r\n    <returns>A duplicate of the SymbolDisplayFormat, with a replaced set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayGlobalNamespaceStyle\"/>.</returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SymbolDisplayKindOptions : options": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SymbolDisplayFormat": ""
                },
                "Content": "public SymbolDisplayFormat WithKindOptions(SymbolDisplayKindOptions options)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SymbolDisplayFormat.WithKindOptions(Microsoft.CodeAnalysis.SymbolDisplayKindOptions)\">\r\n    <summary>\r\n    Creates a copy of the SymbolDisplayFormat but with replaced set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayKindOptions\"/>.\r\n    </summary>\r\n    <param name=\"options\">\r\n    An object specifying parameters with which symbols belonging to kind keywords should be formatted.\r\n    </param>\r\n    <returns>\r\n    A duplicate of the SymbolDisplayFormat, with a replaced set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayKindOptions\"/>.\r\n    </returns>\r\n</member>\r\n",
                "StartLine": 533
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SymbolDisplayKindOptions : options": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SymbolDisplayFormat": ""
                },
                "Content": "public SymbolDisplayFormat WithKindOptions(SymbolDisplayKindOptions options)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SymbolDisplayFormat.WithKindOptions(Microsoft.CodeAnalysis.SymbolDisplayKindOptions)\">\r\n    <summary>\r\n    Creates a copy of the SymbolDisplayFormat but with replaced set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayKindOptions\"/>.\r\n    </summary>\r\n    <param name=\"options\">\r\n    An object specifying parameters with which symbols belonging to kind keywords should be formatted.\r\n    </param>\r\n    <returns>\r\n    A duplicate of the SymbolDisplayFormat, with a replaced set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayKindOptions\"/>.\r\n    </returns>\r\n</member>\r\n",
                "StartLine": 533
              },
              "Id": "M:Microsoft.CodeAnalysis.SymbolDisplayFormat.WithKindOptions(Microsoft.CodeAnalysis.SymbolDisplayKindOptions)",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolDisplayFormat",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SymbolDisplayFormat.WithKindOptions(Microsoft.CodeAnalysis.SymbolDisplayKindOptions)\">\r\n    <summary>\r\n    Creates a copy of the SymbolDisplayFormat but with replaced set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayKindOptions\"/>.\r\n    </summary>\r\n    <param name=\"options\">\r\n    An object specifying parameters with which symbols belonging to kind keywords should be formatted.\r\n    </param>\r\n    <returns>\r\n    A duplicate of the SymbolDisplayFormat, with a replaced set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayKindOptions\"/>.\r\n    </returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SymbolDisplayLocalOptions : options": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SymbolDisplayFormat": ""
                },
                "Content": "public SymbolDisplayFormat WithLocalOptions(SymbolDisplayLocalOptions options)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SymbolDisplayFormat.WithLocalOptions(Microsoft.CodeAnalysis.SymbolDisplayLocalOptions)\">\r\n    <summary>\r\n    Creates a copy of the SymbolDisplayFormat but with replaced set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayLocalOptions\"/>.\r\n    </summary>\r\n    <param name=\"options\">\r\n    An object specifying parameters on how symbols belonging to locals should be formatted.\r\n    </param>\r\n    <returns>A duplicate of the SymbolDisplayFormat, with a replaced set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayLocalOptions\"/>.</returns>\r\n</member>\r\n",
                "StartLine": 658
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SymbolDisplayLocalOptions : options": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SymbolDisplayFormat": ""
                },
                "Content": "public SymbolDisplayFormat WithLocalOptions(SymbolDisplayLocalOptions options)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SymbolDisplayFormat.WithLocalOptions(Microsoft.CodeAnalysis.SymbolDisplayLocalOptions)\">\r\n    <summary>\r\n    Creates a copy of the SymbolDisplayFormat but with replaced set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayLocalOptions\"/>.\r\n    </summary>\r\n    <param name=\"options\">\r\n    An object specifying parameters on how symbols belonging to locals should be formatted.\r\n    </param>\r\n    <returns>A duplicate of the SymbolDisplayFormat, with a replaced set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayLocalOptions\"/>.</returns>\r\n</member>\r\n",
                "StartLine": 658
              },
              "Id": "M:Microsoft.CodeAnalysis.SymbolDisplayFormat.WithLocalOptions(Microsoft.CodeAnalysis.SymbolDisplayLocalOptions)",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolDisplayFormat",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SymbolDisplayFormat.WithLocalOptions(Microsoft.CodeAnalysis.SymbolDisplayLocalOptions)\">\r\n    <summary>\r\n    Creates a copy of the SymbolDisplayFormat but with replaced set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayLocalOptions\"/>.\r\n    </summary>\r\n    <param name=\"options\">\r\n    An object specifying parameters on how symbols belonging to locals should be formatted.\r\n    </param>\r\n    <returns>A duplicate of the SymbolDisplayFormat, with a replaced set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayLocalOptions\"/>.</returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SymbolDisplayMemberOptions : options": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SymbolDisplayFormat": ""
                },
                "Content": "public SymbolDisplayFormat WithMemberOptions(SymbolDisplayMemberOptions options)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SymbolDisplayFormat.WithMemberOptions(Microsoft.CodeAnalysis.SymbolDisplayMemberOptions)\">\r\n    <summary>\r\n    Creates a copy of the SymbolDisplayFormat but with replaced set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayMemberOptions\"/>.\r\n    </summary>\r\n    <param name=\"options\">\r\n    An object specifying how members will be formatted.\r\n    </param>\r\n    <returns>A duplicate of the SymbolDisplayFormat, with a replaced set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayMemberOptions\"/>.</returns>\r\n</member>\r\n",
                "StartLine": 480
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SymbolDisplayMemberOptions : options": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SymbolDisplayFormat": ""
                },
                "Content": "public SymbolDisplayFormat WithMemberOptions(SymbolDisplayMemberOptions options)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SymbolDisplayFormat.WithMemberOptions(Microsoft.CodeAnalysis.SymbolDisplayMemberOptions)\">\r\n    <summary>\r\n    Creates a copy of the SymbolDisplayFormat but with replaced set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayMemberOptions\"/>.\r\n    </summary>\r\n    <param name=\"options\">\r\n    An object specifying how members will be formatted.\r\n    </param>\r\n    <returns>A duplicate of the SymbolDisplayFormat, with a replaced set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayMemberOptions\"/>.</returns>\r\n</member>\r\n",
                "StartLine": 480
              },
              "Id": "M:Microsoft.CodeAnalysis.SymbolDisplayFormat.WithMemberOptions(Microsoft.CodeAnalysis.SymbolDisplayMemberOptions)",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolDisplayFormat",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SymbolDisplayFormat.WithMemberOptions(Microsoft.CodeAnalysis.SymbolDisplayMemberOptions)\">\r\n    <summary>\r\n    Creates a copy of the SymbolDisplayFormat but with replaced set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayMemberOptions\"/>.\r\n    </summary>\r\n    <param name=\"options\">\r\n    An object specifying how members will be formatted.\r\n    </param>\r\n    <returns>A duplicate of the SymbolDisplayFormat, with a replaced set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayMemberOptions\"/>.</returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SymbolDisplayMiscellaneousOptions : options": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SymbolDisplayFormat": ""
                },
                "Content": "public SymbolDisplayFormat WithMiscellaneousOptions(SymbolDisplayMiscellaneousOptions options)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SymbolDisplayFormat.WithMiscellaneousOptions(Microsoft.CodeAnalysis.SymbolDisplayMiscellaneousOptions)\">\r\n    <summary>\r\n    Creates a copy of the SymbolDisplayFormat but with replaced set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayMiscellaneousOptions\"/>.\r\n    </summary>\r\n    <param name=\"options\">\r\n    An object representing how miscellaneous symbols will be formatted.\r\n    </param>\r\n    <returns>A duplicate of the SymbolDisplayFormat, with a replaced set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayMiscellaneousOptions\"/>.</returns>\r\n</member>\r\n",
                "StartLine": 409
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SymbolDisplayMiscellaneousOptions : options": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SymbolDisplayFormat": ""
                },
                "Content": "public SymbolDisplayFormat WithMiscellaneousOptions(SymbolDisplayMiscellaneousOptions options)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SymbolDisplayFormat.WithMiscellaneousOptions(Microsoft.CodeAnalysis.SymbolDisplayMiscellaneousOptions)\">\r\n    <summary>\r\n    Creates a copy of the SymbolDisplayFormat but with replaced set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayMiscellaneousOptions\"/>.\r\n    </summary>\r\n    <param name=\"options\">\r\n    An object representing how miscellaneous symbols will be formatted.\r\n    </param>\r\n    <returns>A duplicate of the SymbolDisplayFormat, with a replaced set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayMiscellaneousOptions\"/>.</returns>\r\n</member>\r\n",
                "StartLine": 409
              },
              "Id": "M:Microsoft.CodeAnalysis.SymbolDisplayFormat.WithMiscellaneousOptions(Microsoft.CodeAnalysis.SymbolDisplayMiscellaneousOptions)",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolDisplayFormat",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SymbolDisplayFormat.WithMiscellaneousOptions(Microsoft.CodeAnalysis.SymbolDisplayMiscellaneousOptions)\">\r\n    <summary>\r\n    Creates a copy of the SymbolDisplayFormat but with replaced set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayMiscellaneousOptions\"/>.\r\n    </summary>\r\n    <param name=\"options\">\r\n    An object representing how miscellaneous symbols will be formatted.\r\n    </param>\r\n    <returns>A duplicate of the SymbolDisplayFormat, with a replaced set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayMiscellaneousOptions\"/>.</returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SymbolDisplayParameterOptions : options": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SymbolDisplayFormat": ""
                },
                "Content": "public SymbolDisplayFormat WithParameterOptions(SymbolDisplayParameterOptions options)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SymbolDisplayFormat.WithParameterOptions(Microsoft.CodeAnalysis.SymbolDisplayParameterOptions)\">\r\n    <summary>\r\n    Creates a copy of the SymbolDisplayFormat but with replaced set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayParameterOptions\"/>.\r\n    </summary>\r\n    <param name=\"options\">\r\n    An object specifying how parameters should be formatted.\r\n    </param>\r\n    <returns>A duplicate of the SymbolDisplayFormat, with a replaced set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayParameterOptions\"/>.</returns>\r\n</member>\r\n",
                "StartLine": 584
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SymbolDisplayParameterOptions : options": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SymbolDisplayFormat": ""
                },
                "Content": "public SymbolDisplayFormat WithParameterOptions(SymbolDisplayParameterOptions options)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SymbolDisplayFormat.WithParameterOptions(Microsoft.CodeAnalysis.SymbolDisplayParameterOptions)\">\r\n    <summary>\r\n    Creates a copy of the SymbolDisplayFormat but with replaced set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayParameterOptions\"/>.\r\n    </summary>\r\n    <param name=\"options\">\r\n    An object specifying how parameters should be formatted.\r\n    </param>\r\n    <returns>A duplicate of the SymbolDisplayFormat, with a replaced set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayParameterOptions\"/>.</returns>\r\n</member>\r\n",
                "StartLine": 584
              },
              "Id": "M:Microsoft.CodeAnalysis.SymbolDisplayFormat.WithParameterOptions(Microsoft.CodeAnalysis.SymbolDisplayParameterOptions)",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolDisplayFormat",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SymbolDisplayFormat.WithParameterOptions(Microsoft.CodeAnalysis.SymbolDisplayParameterOptions)\">\r\n    <summary>\r\n    Creates a copy of the SymbolDisplayFormat but with replaced set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayParameterOptions\"/>.\r\n    </summary>\r\n    <param name=\"options\">\r\n    An object specifying how parameters should be formatted.\r\n    </param>\r\n    <returns>A duplicate of the SymbolDisplayFormat, with a replaced set of <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayParameterOptions\"/>.</returns>\r\n</member>\r\n"
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "CSharpErrorMessageFormat",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.SymbolDisplayFormat.CSharpErrorMessageFormat\">\r\n    <summary>\r\n    Formats a symbol description as in a C# compiler error message.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 12
              },
              "Id": "F:Microsoft.CodeAnalysis.SymbolDisplayFormat.CSharpErrorMessageFormat",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolDisplayFormat",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.SymbolDisplayFormat.CSharpErrorMessageFormat\">\r\n    <summary>\r\n    Formats a symbol description as in a C# compiler error message.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "CSharpShortErrorMessageFormat",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.SymbolDisplayFormat.CSharpShortErrorMessageFormat\">\r\n    <summary>\r\n    Formats a symbol description as in a C# compiler short error message.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 36
              },
              "Id": "F:Microsoft.CodeAnalysis.SymbolDisplayFormat.CSharpShortErrorMessageFormat",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolDisplayFormat",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.SymbolDisplayFormat.CSharpShortErrorMessageFormat\">\r\n    <summary>\r\n    Formats a symbol description as in a C# compiler short error message.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "FullyQualifiedFormat",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.SymbolDisplayFormat.FullyQualifiedFormat\">\r\n    <summary>\r\n    Formats the names of all types and namespaces in a fully qualified style (including the global alias).\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 124
              },
              "Id": "F:Microsoft.CodeAnalysis.SymbolDisplayFormat.FullyQualifiedFormat",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolDisplayFormat",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.SymbolDisplayFormat.FullyQualifiedFormat\">\r\n    <summary>\r\n    Formats the names of all types and namespaces in a fully qualified style (including the global alias).\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "MinimallyQualifiedFormat",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.SymbolDisplayFormat.MinimallyQualifiedFormat\">\r\n    <summary>\r\n    Formats a symbol description in a form that suits <see cref=\"M:Microsoft.CodeAnalysis.ISymbol.ToMinimalDisplayString(Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.SymbolDisplayFormat)\"/>.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 136
              },
              "Id": "F:Microsoft.CodeAnalysis.SymbolDisplayFormat.MinimallyQualifiedFormat",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolDisplayFormat",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.SymbolDisplayFormat.MinimallyQualifiedFormat\">\r\n    <summary>\r\n    Formats a symbol description in a form that suits <see cref=\"M:Microsoft.CodeAnalysis.ISymbol.ToMinimalDisplayString(Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.SymbolDisplayFormat)\"/>.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "VisualBasicErrorMessageFormat",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.SymbolDisplayFormat.VisualBasicErrorMessageFormat\">\r\n    <summary>\r\n    Formats a symbol description as in a Visual Basic compiler error message.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 60
              },
              "Id": "F:Microsoft.CodeAnalysis.SymbolDisplayFormat.VisualBasicErrorMessageFormat",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolDisplayFormat",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.SymbolDisplayFormat.VisualBasicErrorMessageFormat\">\r\n    <summary>\r\n    Formats a symbol description as in a Visual Basic compiler error message.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "VisualBasicShortErrorMessageFormat",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.SymbolDisplayFormat.VisualBasicShortErrorMessageFormat\">\r\n    <summary>\r\n    Formats a symbol description as in a Visual Basic compiler short error message.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 92
              },
              "Id": "F:Microsoft.CodeAnalysis.SymbolDisplayFormat.VisualBasicShortErrorMessageFormat",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolDisplayFormat",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.SymbolDisplayFormat.VisualBasicShortErrorMessageFormat\">\r\n    <summary>\r\n    Formats a symbol description as in a Visual Basic compiler short error message.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SymbolDisplayDelegateStyle",
                "Content": "public SymbolDisplayDelegateStyle DelegateStyle",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SymbolDisplayFormat.DelegateStyle\">\r\n    <summary>\r\n    Determines how delegates are displayed (e.g. name vs full signature).\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 273
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SymbolDisplayDelegateStyle",
                "Content": "public SymbolDisplayDelegateStyle DelegateStyle",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SymbolDisplayFormat.DelegateStyle\">\r\n    <summary>\r\n    Determines how delegates are displayed (e.g. name vs full signature).\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 273
              },
              "Id": "P:Microsoft.CodeAnalysis.SymbolDisplayFormat.DelegateStyle",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolDisplayFormat",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SymbolDisplayFormat.DelegateStyle\">\r\n    <summary>\r\n    Determines how delegates are displayed (e.g. name vs full signature).\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SymbolDisplayExtensionMethodStyle",
                "Content": "public SymbolDisplayExtensionMethodStyle ExtensionMethodStyle",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SymbolDisplayFormat.ExtensionMethodStyle\">\r\n    <summary>\r\n    Determines how extension methods are displayed.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 278
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SymbolDisplayExtensionMethodStyle",
                "Content": "public SymbolDisplayExtensionMethodStyle ExtensionMethodStyle",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SymbolDisplayFormat.ExtensionMethodStyle\">\r\n    <summary>\r\n    Determines how extension methods are displayed.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 278
              },
              "Id": "P:Microsoft.CodeAnalysis.SymbolDisplayFormat.ExtensionMethodStyle",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolDisplayFormat",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SymbolDisplayFormat.ExtensionMethodStyle\">\r\n    <summary>\r\n    Determines how extension methods are displayed.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SymbolDisplayGenericsOptions",
                "Content": "public SymbolDisplayGenericsOptions GenericsOptions",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SymbolDisplayFormat.GenericsOptions\">\r\n    <summary>\r\n    Determines how generics (on types and methods) should be described (i.e. the level of detail).\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 258
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SymbolDisplayGenericsOptions",
                "Content": "public SymbolDisplayGenericsOptions GenericsOptions",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SymbolDisplayFormat.GenericsOptions\">\r\n    <summary>\r\n    Determines how generics (on types and methods) should be described (i.e. the level of detail).\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 258
              },
              "Id": "P:Microsoft.CodeAnalysis.SymbolDisplayFormat.GenericsOptions",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolDisplayFormat",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SymbolDisplayFormat.GenericsOptions\">\r\n    <summary>\r\n    Determines how generics (on types and methods) should be described (i.e. the level of detail).\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SymbolDisplayGlobalNamespaceStyle",
                "Content": "public SymbolDisplayGlobalNamespaceStyle GlobalNamespaceStyle",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SymbolDisplayFormat.GlobalNamespaceStyle\">\r\n    <summary>\r\n    Determines how the global namespace is displayed.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 248
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SymbolDisplayGlobalNamespaceStyle",
                "Content": "public SymbolDisplayGlobalNamespaceStyle GlobalNamespaceStyle",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SymbolDisplayFormat.GlobalNamespaceStyle\">\r\n    <summary>\r\n    Determines how the global namespace is displayed.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 248
              },
              "Id": "P:Microsoft.CodeAnalysis.SymbolDisplayFormat.GlobalNamespaceStyle",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolDisplayFormat",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SymbolDisplayFormat.GlobalNamespaceStyle\">\r\n    <summary>\r\n    Determines how the global namespace is displayed.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SymbolDisplayKindOptions",
                "Content": "public SymbolDisplayKindOptions KindOptions",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SymbolDisplayFormat.KindOptions\">\r\n    <summary>\r\n    Determines which kind keywords should be included when displaying symbols.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 294
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SymbolDisplayKindOptions",
                "Content": "public SymbolDisplayKindOptions KindOptions",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SymbolDisplayFormat.KindOptions\">\r\n    <summary>\r\n    Determines which kind keywords should be included when displaying symbols.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 294
              },
              "Id": "P:Microsoft.CodeAnalysis.SymbolDisplayFormat.KindOptions",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolDisplayFormat",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SymbolDisplayFormat.KindOptions\">\r\n    <summary>\r\n    Determines which kind keywords should be included when displaying symbols.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SymbolDisplayLocalOptions",
                "Content": "public SymbolDisplayLocalOptions LocalOptions",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SymbolDisplayFormat.LocalOptions\">\r\n    <summary>\r\n    Determines how local variables are displayed.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 289
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SymbolDisplayLocalOptions",
                "Content": "public SymbolDisplayLocalOptions LocalOptions",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SymbolDisplayFormat.LocalOptions\">\r\n    <summary>\r\n    Determines how local variables are displayed.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 289
              },
              "Id": "P:Microsoft.CodeAnalysis.SymbolDisplayFormat.LocalOptions",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolDisplayFormat",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SymbolDisplayFormat.LocalOptions\">\r\n    <summary>\r\n    Determines how local variables are displayed.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SymbolDisplayMemberOptions",
                "Content": "public SymbolDisplayMemberOptions MemberOptions",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SymbolDisplayFormat.MemberOptions\">\r\n    <summary>\r\n    Determines how fields, properties, events, and methods are displayed.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 263
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SymbolDisplayMemberOptions",
                "Content": "public SymbolDisplayMemberOptions MemberOptions",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SymbolDisplayFormat.MemberOptions\">\r\n    <summary>\r\n    Determines how fields, properties, events, and methods are displayed.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 263
              },
              "Id": "P:Microsoft.CodeAnalysis.SymbolDisplayFormat.MemberOptions",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolDisplayFormat",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SymbolDisplayFormat.MemberOptions\">\r\n    <summary>\r\n    Determines how fields, properties, events, and methods are displayed.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SymbolDisplayMiscellaneousOptions",
                "Content": "public SymbolDisplayMiscellaneousOptions MiscellaneousOptions",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SymbolDisplayFormat.MiscellaneousOptions\">\r\n    <summary>\r\n    Determines other characteristics of how symbols are displayed.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 299
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SymbolDisplayMiscellaneousOptions",
                "Content": "public SymbolDisplayMiscellaneousOptions MiscellaneousOptions",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SymbolDisplayFormat.MiscellaneousOptions\">\r\n    <summary>\r\n    Determines other characteristics of how symbols are displayed.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 299
              },
              "Id": "P:Microsoft.CodeAnalysis.SymbolDisplayFormat.MiscellaneousOptions",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolDisplayFormat",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SymbolDisplayFormat.MiscellaneousOptions\">\r\n    <summary>\r\n    Determines other characteristics of how symbols are displayed.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SymbolDisplayParameterOptions",
                "Content": "public SymbolDisplayParameterOptions ParameterOptions",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SymbolDisplayFormat.ParameterOptions\">\r\n    <summary>\r\n    Determines how parameters (of methods, properties/indexers, and delegates) are displayed.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 268
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SymbolDisplayParameterOptions",
                "Content": "public SymbolDisplayParameterOptions ParameterOptions",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SymbolDisplayFormat.ParameterOptions\">\r\n    <summary>\r\n    Determines how parameters (of methods, properties/indexers, and delegates) are displayed.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 268
              },
              "Id": "P:Microsoft.CodeAnalysis.SymbolDisplayFormat.ParameterOptions",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolDisplayFormat",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SymbolDisplayFormat.ParameterOptions\">\r\n    <summary>\r\n    Determines how parameters (of methods, properties/indexers, and delegates) are displayed.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SymbolDisplayPropertyStyle",
                "Content": "public SymbolDisplayPropertyStyle PropertyStyle",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SymbolDisplayFormat.PropertyStyle\">\r\n    <summary>\r\n    Determines how properties are displayed. \r\n    For example, \"Prop\" vs \"Prop { get; set; }\" in C# or \"Prop\" vs. \"ReadOnly Prop\" in Visual Basic.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 284
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SymbolDisplayPropertyStyle",
                "Content": "public SymbolDisplayPropertyStyle PropertyStyle",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SymbolDisplayFormat.PropertyStyle\">\r\n    <summary>\r\n    Determines how properties are displayed. \r\n    For example, \"Prop\" vs \"Prop { get; set; }\" in C# or \"Prop\" vs. \"ReadOnly Prop\" in Visual Basic.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 284
              },
              "Id": "P:Microsoft.CodeAnalysis.SymbolDisplayFormat.PropertyStyle",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolDisplayFormat",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SymbolDisplayFormat.PropertyStyle\">\r\n    <summary>\r\n    Determines how properties are displayed. \r\n    For example, \"Prop\" vs \"Prop { get; set; }\" in C# or \"Prop\" vs. \"ReadOnly Prop\" in Visual Basic.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SymbolDisplayTypeQualificationStyle",
                "Content": "public SymbolDisplayTypeQualificationStyle TypeQualificationStyle",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SymbolDisplayFormat.TypeQualificationStyle\">\r\n    <summary>\r\n    Determines how types are qualified (e.g. Nested vs Containing.Nested vs Namespace.Containing.Nested).\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 253
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SymbolDisplayTypeQualificationStyle",
                "Content": "public SymbolDisplayTypeQualificationStyle TypeQualificationStyle",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SymbolDisplayFormat.TypeQualificationStyle\">\r\n    <summary>\r\n    Determines how types are qualified (e.g. Nested vs Containing.Nested vs Namespace.Containing.Nested).\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 253
              },
              "Id": "P:Microsoft.CodeAnalysis.SymbolDisplayFormat.TypeQualificationStyle",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolDisplayFormat",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SymbolDisplayFormat.TypeQualificationStyle\">\r\n    <summary>\r\n    Determines how types are qualified (e.g. Nested vs Containing.Nested vs Namespace.Containing.Nested).\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Constructors": [
            {
              "ConstructorSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SymbolDisplayDelegateStyle : delegateStyle": "",
                  "T:Microsoft.CodeAnalysis.SymbolDisplayExtensionMethodStyle : extensionMethodStyle": "",
                  "T:Microsoft.CodeAnalysis.SymbolDisplayGenericsOptions : genericsOptions": "",
                  "T:Microsoft.CodeAnalysis.SymbolDisplayGlobalNamespaceStyle : globalNamespaceStyle": "",
                  "T:Microsoft.CodeAnalysis.SymbolDisplayKindOptions : kindOptions": "",
                  "T:Microsoft.CodeAnalysis.SymbolDisplayLocalOptions : localOptions": "",
                  "T:Microsoft.CodeAnalysis.SymbolDisplayMemberOptions : memberOptions": "",
                  "T:Microsoft.CodeAnalysis.SymbolDisplayMiscellaneousOptions : miscellaneousOptions": "",
                  "T:Microsoft.CodeAnalysis.SymbolDisplayParameterOptions : parameterOptions": "",
                  "T:Microsoft.CodeAnalysis.SymbolDisplayPropertyStyle : propertyStyle": "",
                  "T:Microsoft.CodeAnalysis.SymbolDisplayTypeQualificationStyle : typeQualificationStyle": ""
                },
                "Content": "public SymbolDisplayFormat(SymbolDisplayGlobalNamespaceStyle globalNamespaceStyle = default (SymbolDisplayGlobalNamespaceStyle), SymbolDisplayTypeQualificationStyle typeQualificationStyle = default (SymbolDisplayTypeQualificationStyle), SymbolDisplayGenericsOptions genericsOptions = default (SymbolDisplayGenericsOptions), SymbolDisplayMemberOptions memberOptions = default (SymbolDisplayMemberOptions), SymbolDisplayDelegateStyle delegateStyle = default (SymbolDisplayDelegateStyle), SymbolDisplayExtensionMethodStyle extensionMethodStyle = default (SymbolDisplayExtensionMethodStyle), SymbolDisplayParameterOptions parameterOptions = default (SymbolDisplayParameterOptions), SymbolDisplayPropertyStyle propertyStyle = default (SymbolDisplayPropertyStyle), SymbolDisplayLocalOptions localOptions = default (SymbolDisplayLocalOptions), SymbolDisplayKindOptions kindOptions = default (SymbolDisplayKindOptions), SymbolDisplayMiscellaneousOptions miscellaneousOptions = default (SymbolDisplayMiscellaneousOptions)): this (default (SymbolDisplayCompilerInternalOptions), globalNamespaceStyle, typeQualificationStyle, genericsOptions, memberOptions, parameterOptions, delegateStyle, extensionMethodStyle, propertyStyle, localOptions, kindOptions, miscellaneousOptions)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SymbolDisplayFormat.#ctor(Microsoft.CodeAnalysis.SymbolDisplayGlobalNamespaceStyle,Microsoft.CodeAnalysis.SymbolDisplayTypeQualificationStyle,Microsoft.CodeAnalysis.SymbolDisplayGenericsOptions,Microsoft.CodeAnalysis.SymbolDisplayMemberOptions,Microsoft.CodeAnalysis.SymbolDisplayDelegateStyle,Microsoft.CodeAnalysis.SymbolDisplayExtensionMethodStyle,Microsoft.CodeAnalysis.SymbolDisplayParameterOptions,Microsoft.CodeAnalysis.SymbolDisplayPropertyStyle,Microsoft.CodeAnalysis.SymbolDisplayLocalOptions,Microsoft.CodeAnalysis.SymbolDisplayKindOptions,Microsoft.CodeAnalysis.SymbolDisplayMiscellaneousOptions)\">\r\n    <summary>\r\n    Constructs a new instance of <see cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayFormat\"/> accepting a variety of optional parameters.\r\n    </summary>\r\n    <param name=\"globalNamespaceStyle\">\r\n    The settings that determine how the global namespace is displayed.\r\n    </param>\r\n    <param name=\"typeQualificationStyle\">\r\n    The settings that determine how types are qualified (e.g. Nested vs Containing.Nested vs Namespace.Containing.Nested).\r\n    </param>\r\n    <param name=\"genericsOptions\">\r\n    The settings that determine how generics (on types and methods) should be described (i.e. the level of detail).\r\n    </param>\r\n    <param name=\"memberOptions\">\r\n    The settings that determine how fields, properties, events, and methods are displayed.\r\n    </param>\r\n    <param name=\"delegateStyle\">\r\n    The settings that determine how delegates are displayed (e.g. name vs full signature).\r\n    </param>\r\n    <param name=\"extensionMethodStyle\">\r\n    The settings that determine how extension methods are displayed.\r\n    </param>\r\n    <param name=\"parameterOptions\">\r\n    The settings that determine how parameters (of methods, properties/indexers, and delegates) are displayed.\r\n    </param>\r\n    <param name=\"propertyStyle\">\r\n    The settings that determine how properties are displayed. \r\n    For eaxmple, \"Prop\" vs \"Prop { get; set; }\" in C# or \"Prop\" vs. \"ReadOnly Prop\" in Visual Basic.\r\n    </param>\r\n    <param name=\"localOptions\">\r\n    The settings that determine how local variables are displayed.\r\n    </param>\r\n    <param name=\"kindOptions\">\r\n    The settings that determine which kind keywords should be included when displaying symbols.\r\n    </param>\r\n    <param name=\"miscellaneousOptions\">\r\n    The settings that determine other characteristics of how symbols are displayed.\r\n    </param>\r\n</member>\r\n",
                "StartLine": 343
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SymbolDisplayDelegateStyle : delegateStyle": "",
                  "T:Microsoft.CodeAnalysis.SymbolDisplayExtensionMethodStyle : extensionMethodStyle": "",
                  "T:Microsoft.CodeAnalysis.SymbolDisplayGenericsOptions : genericsOptions": "",
                  "T:Microsoft.CodeAnalysis.SymbolDisplayGlobalNamespaceStyle : globalNamespaceStyle": "",
                  "T:Microsoft.CodeAnalysis.SymbolDisplayKindOptions : kindOptions": "",
                  "T:Microsoft.CodeAnalysis.SymbolDisplayLocalOptions : localOptions": "",
                  "T:Microsoft.CodeAnalysis.SymbolDisplayMemberOptions : memberOptions": "",
                  "T:Microsoft.CodeAnalysis.SymbolDisplayMiscellaneousOptions : miscellaneousOptions": "",
                  "T:Microsoft.CodeAnalysis.SymbolDisplayParameterOptions : parameterOptions": "",
                  "T:Microsoft.CodeAnalysis.SymbolDisplayPropertyStyle : propertyStyle": "",
                  "T:Microsoft.CodeAnalysis.SymbolDisplayTypeQualificationStyle : typeQualificationStyle": ""
                },
                "Content": "public SymbolDisplayFormat(SymbolDisplayGlobalNamespaceStyle globalNamespaceStyle = default (SymbolDisplayGlobalNamespaceStyle), SymbolDisplayTypeQualificationStyle typeQualificationStyle = default (SymbolDisplayTypeQualificationStyle), SymbolDisplayGenericsOptions genericsOptions = default (SymbolDisplayGenericsOptions), SymbolDisplayMemberOptions memberOptions = default (SymbolDisplayMemberOptions), SymbolDisplayDelegateStyle delegateStyle = default (SymbolDisplayDelegateStyle), SymbolDisplayExtensionMethodStyle extensionMethodStyle = default (SymbolDisplayExtensionMethodStyle), SymbolDisplayParameterOptions parameterOptions = default (SymbolDisplayParameterOptions), SymbolDisplayPropertyStyle propertyStyle = default (SymbolDisplayPropertyStyle), SymbolDisplayLocalOptions localOptions = default (SymbolDisplayLocalOptions), SymbolDisplayKindOptions kindOptions = default (SymbolDisplayKindOptions), SymbolDisplayMiscellaneousOptions miscellaneousOptions = default (SymbolDisplayMiscellaneousOptions)): this (default (SymbolDisplayCompilerInternalOptions), globalNamespaceStyle, typeQualificationStyle, genericsOptions, memberOptions, parameterOptions, delegateStyle, extensionMethodStyle, propertyStyle, localOptions, kindOptions, miscellaneousOptions)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SymbolDisplayFormat.#ctor(Microsoft.CodeAnalysis.SymbolDisplayGlobalNamespaceStyle,Microsoft.CodeAnalysis.SymbolDisplayTypeQualificationStyle,Microsoft.CodeAnalysis.SymbolDisplayGenericsOptions,Microsoft.CodeAnalysis.SymbolDisplayMemberOptions,Microsoft.CodeAnalysis.SymbolDisplayDelegateStyle,Microsoft.CodeAnalysis.SymbolDisplayExtensionMethodStyle,Microsoft.CodeAnalysis.SymbolDisplayParameterOptions,Microsoft.CodeAnalysis.SymbolDisplayPropertyStyle,Microsoft.CodeAnalysis.SymbolDisplayLocalOptions,Microsoft.CodeAnalysis.SymbolDisplayKindOptions,Microsoft.CodeAnalysis.SymbolDisplayMiscellaneousOptions)\">\r\n    <summary>\r\n    Constructs a new instance of <see cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayFormat\"/> accepting a variety of optional parameters.\r\n    </summary>\r\n    <param name=\"globalNamespaceStyle\">\r\n    The settings that determine how the global namespace is displayed.\r\n    </param>\r\n    <param name=\"typeQualificationStyle\">\r\n    The settings that determine how types are qualified (e.g. Nested vs Containing.Nested vs Namespace.Containing.Nested).\r\n    </param>\r\n    <param name=\"genericsOptions\">\r\n    The settings that determine how generics (on types and methods) should be described (i.e. the level of detail).\r\n    </param>\r\n    <param name=\"memberOptions\">\r\n    The settings that determine how fields, properties, events, and methods are displayed.\r\n    </param>\r\n    <param name=\"delegateStyle\">\r\n    The settings that determine how delegates are displayed (e.g. name vs full signature).\r\n    </param>\r\n    <param name=\"extensionMethodStyle\">\r\n    The settings that determine how extension methods are displayed.\r\n    </param>\r\n    <param name=\"parameterOptions\">\r\n    The settings that determine how parameters (of methods, properties/indexers, and delegates) are displayed.\r\n    </param>\r\n    <param name=\"propertyStyle\">\r\n    The settings that determine how properties are displayed. \r\n    For eaxmple, \"Prop\" vs \"Prop { get; set; }\" in C# or \"Prop\" vs. \"ReadOnly Prop\" in Visual Basic.\r\n    </param>\r\n    <param name=\"localOptions\">\r\n    The settings that determine how local variables are displayed.\r\n    </param>\r\n    <param name=\"kindOptions\">\r\n    The settings that determine which kind keywords should be included when displaying symbols.\r\n    </param>\r\n    <param name=\"miscellaneousOptions\">\r\n    The settings that determine other characteristics of how symbols are displayed.\r\n    </param>\r\n</member>\r\n",
                "StartLine": 343
              },
              "Id": "M:Microsoft.CodeAnalysis.SymbolDisplayFormat.#ctor(Microsoft.CodeAnalysis.SymbolDisplayGlobalNamespaceStyle,Microsoft.CodeAnalysis.SymbolDisplayTypeQualificationStyle,Microsoft.CodeAnalysis.SymbolDisplayGenericsOptions,Microsoft.CodeAnalysis.SymbolDisplayMemberOptions,Microsoft.CodeAnalysis.SymbolDisplayDelegateStyle,Microsoft.CodeAnalysis.SymbolDisplayExtensionMethodStyle,Microsoft.CodeAnalysis.SymbolDisplayParameterOptions,Microsoft.CodeAnalysis.SymbolDisplayPropertyStyle,Microsoft.CodeAnalysis.SymbolDisplayLocalOptions,Microsoft.CodeAnalysis.SymbolDisplayKindOptions,Microsoft.CodeAnalysis.SymbolDisplayMiscellaneousOptions)",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolDisplayFormat",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SymbolDisplayFormat.#ctor(Microsoft.CodeAnalysis.SymbolDisplayGlobalNamespaceStyle,Microsoft.CodeAnalysis.SymbolDisplayTypeQualificationStyle,Microsoft.CodeAnalysis.SymbolDisplayGenericsOptions,Microsoft.CodeAnalysis.SymbolDisplayMemberOptions,Microsoft.CodeAnalysis.SymbolDisplayDelegateStyle,Microsoft.CodeAnalysis.SymbolDisplayExtensionMethodStyle,Microsoft.CodeAnalysis.SymbolDisplayParameterOptions,Microsoft.CodeAnalysis.SymbolDisplayPropertyStyle,Microsoft.CodeAnalysis.SymbolDisplayLocalOptions,Microsoft.CodeAnalysis.SymbolDisplayKindOptions,Microsoft.CodeAnalysis.SymbolDisplayMiscellaneousOptions)\">\r\n    <summary>\r\n    Constructs a new instance of <see cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayFormat\"/> accepting a variety of optional parameters.\r\n    </summary>\r\n    <param name=\"globalNamespaceStyle\">\r\n    The settings that determine how the global namespace is displayed.\r\n    </param>\r\n    <param name=\"typeQualificationStyle\">\r\n    The settings that determine how types are qualified (e.g. Nested vs Containing.Nested vs Namespace.Containing.Nested).\r\n    </param>\r\n    <param name=\"genericsOptions\">\r\n    The settings that determine how generics (on types and methods) should be described (i.e. the level of detail).\r\n    </param>\r\n    <param name=\"memberOptions\">\r\n    The settings that determine how fields, properties, events, and methods are displayed.\r\n    </param>\r\n    <param name=\"delegateStyle\">\r\n    The settings that determine how delegates are displayed (e.g. name vs full signature).\r\n    </param>\r\n    <param name=\"extensionMethodStyle\">\r\n    The settings that determine how extension methods are displayed.\r\n    </param>\r\n    <param name=\"parameterOptions\">\r\n    The settings that determine how parameters (of methods, properties/indexers, and delegates) are displayed.\r\n    </param>\r\n    <param name=\"propertyStyle\">\r\n    The settings that determine how properties are displayed. \r\n    For eaxmple, \"Prop\" vs \"Prop { get; set; }\" in C# or \"Prop\" vs. \"ReadOnly Prop\" in Visual Basic.\r\n    </param>\r\n    <param name=\"localOptions\">\r\n    The settings that determine how local variables are displayed.\r\n    </param>\r\n    <param name=\"kindOptions\">\r\n    The settings that determine which kind keywords should be included when displaying symbols.\r\n    </param>\r\n    <param name=\"miscellaneousOptions\">\r\n    The settings that determine other characteristics of how symbols are displayed.\r\n    </param>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\SymbolDisplay\\SymbolDisplayFormat.cs",
          "InheritanceHierarchy": [
            "T:System.Object"
          ],
          "Syntax": {
            "Content": "public class SymbolDisplayFormat",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.SymbolDisplayFormat\">\r\n    <summary>\r\n    Describes the formatting rules that should be used when displaying symbols.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.SymbolDisplayFormat",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.SymbolDisplayFormat\">\r\n    <summary>\r\n    Describes the formatting rules that should be used when displaying symbols.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.ISymbol : symbol": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public virtual void DefaultVisit(ISymbol symbol)",
                "XmlDocumentation": "",
                "StartLine": 14
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.ISymbol : symbol": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public virtual void DefaultVisit(ISymbol symbol)",
                "XmlDocumentation": "",
                "StartLine": 14
              },
              "Id": "M:Microsoft.CodeAnalysis.SymbolVisitor.DefaultVisit(Microsoft.CodeAnalysis.ISymbol)",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolVisitor",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.ISymbol : symbol": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public virtual void Visit(ISymbol symbol)",
                "XmlDocumentation": "",
                "StartLine": 6
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.ISymbol : symbol": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public virtual void Visit(ISymbol symbol)",
                "XmlDocumentation": "",
                "StartLine": 6
              },
              "Id": "M:Microsoft.CodeAnalysis.SymbolVisitor.Visit(Microsoft.CodeAnalysis.ISymbol)",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolVisitor",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.IAliasSymbol : symbol": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public virtual void VisitAlias(IAliasSymbol symbol)",
                "XmlDocumentation": "",
                "StartLine": 18
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.IAliasSymbol : symbol": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public virtual void VisitAlias(IAliasSymbol symbol)",
                "XmlDocumentation": "",
                "StartLine": 18
              },
              "Id": "M:Microsoft.CodeAnalysis.SymbolVisitor.VisitAlias(Microsoft.CodeAnalysis.IAliasSymbol)",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolVisitor",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.IArrayTypeSymbol : symbol": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public virtual void VisitArrayType(IArrayTypeSymbol symbol)",
                "XmlDocumentation": "",
                "StartLine": 23
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.IArrayTypeSymbol : symbol": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public virtual void VisitArrayType(IArrayTypeSymbol symbol)",
                "XmlDocumentation": "",
                "StartLine": 23
              },
              "Id": "M:Microsoft.CodeAnalysis.SymbolVisitor.VisitArrayType(Microsoft.CodeAnalysis.IArrayTypeSymbol)",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolVisitor",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.IAssemblySymbol : symbol": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public virtual void VisitAssembly(IAssemblySymbol symbol)",
                "XmlDocumentation": "",
                "StartLine": 28
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.IAssemblySymbol : symbol": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public virtual void VisitAssembly(IAssemblySymbol symbol)",
                "XmlDocumentation": "",
                "StartLine": 28
              },
              "Id": "M:Microsoft.CodeAnalysis.SymbolVisitor.VisitAssembly(Microsoft.CodeAnalysis.IAssemblySymbol)",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolVisitor",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.IDynamicTypeSymbol : symbol": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public virtual void VisitDynamicType(IDynamicTypeSymbol symbol)",
                "XmlDocumentation": "",
                "StartLine": 33
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.IDynamicTypeSymbol : symbol": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public virtual void VisitDynamicType(IDynamicTypeSymbol symbol)",
                "XmlDocumentation": "",
                "StartLine": 33
              },
              "Id": "M:Microsoft.CodeAnalysis.SymbolVisitor.VisitDynamicType(Microsoft.CodeAnalysis.IDynamicTypeSymbol)",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolVisitor",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.IEventSymbol : symbol": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public virtual void VisitEvent(IEventSymbol symbol)",
                "XmlDocumentation": "",
                "StartLine": 38
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.IEventSymbol : symbol": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public virtual void VisitEvent(IEventSymbol symbol)",
                "XmlDocumentation": "",
                "StartLine": 38
              },
              "Id": "M:Microsoft.CodeAnalysis.SymbolVisitor.VisitEvent(Microsoft.CodeAnalysis.IEventSymbol)",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolVisitor",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.IFieldSymbol : symbol": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public virtual void VisitField(IFieldSymbol symbol)",
                "XmlDocumentation": "",
                "StartLine": 43
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.IFieldSymbol : symbol": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public virtual void VisitField(IFieldSymbol symbol)",
                "XmlDocumentation": "",
                "StartLine": 43
              },
              "Id": "M:Microsoft.CodeAnalysis.SymbolVisitor.VisitField(Microsoft.CodeAnalysis.IFieldSymbol)",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolVisitor",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.ILabelSymbol : symbol": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public virtual void VisitLabel(ILabelSymbol symbol)",
                "XmlDocumentation": "",
                "StartLine": 48
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.ILabelSymbol : symbol": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public virtual void VisitLabel(ILabelSymbol symbol)",
                "XmlDocumentation": "",
                "StartLine": 48
              },
              "Id": "M:Microsoft.CodeAnalysis.SymbolVisitor.VisitLabel(Microsoft.CodeAnalysis.ILabelSymbol)",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolVisitor",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.ILocalSymbol : symbol": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public virtual void VisitLocal(ILocalSymbol symbol)",
                "XmlDocumentation": "",
                "StartLine": 53
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.ILocalSymbol : symbol": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public virtual void VisitLocal(ILocalSymbol symbol)",
                "XmlDocumentation": "",
                "StartLine": 53
              },
              "Id": "M:Microsoft.CodeAnalysis.SymbolVisitor.VisitLocal(Microsoft.CodeAnalysis.ILocalSymbol)",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolVisitor",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.IMethodSymbol : symbol": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public virtual void VisitMethod(IMethodSymbol symbol)",
                "XmlDocumentation": "",
                "StartLine": 58
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.IMethodSymbol : symbol": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public virtual void VisitMethod(IMethodSymbol symbol)",
                "XmlDocumentation": "",
                "StartLine": 58
              },
              "Id": "M:Microsoft.CodeAnalysis.SymbolVisitor.VisitMethod(Microsoft.CodeAnalysis.IMethodSymbol)",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolVisitor",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.IModuleSymbol : symbol": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public virtual void VisitModule(IModuleSymbol symbol)",
                "XmlDocumentation": "",
                "StartLine": 63
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.IModuleSymbol : symbol": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public virtual void VisitModule(IModuleSymbol symbol)",
                "XmlDocumentation": "",
                "StartLine": 63
              },
              "Id": "M:Microsoft.CodeAnalysis.SymbolVisitor.VisitModule(Microsoft.CodeAnalysis.IModuleSymbol)",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolVisitor",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.INamedTypeSymbol : symbol": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public virtual void VisitNamedType(INamedTypeSymbol symbol)",
                "XmlDocumentation": "",
                "StartLine": 68
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.INamedTypeSymbol : symbol": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public virtual void VisitNamedType(INamedTypeSymbol symbol)",
                "XmlDocumentation": "",
                "StartLine": 68
              },
              "Id": "M:Microsoft.CodeAnalysis.SymbolVisitor.VisitNamedType(Microsoft.CodeAnalysis.INamedTypeSymbol)",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolVisitor",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.INamespaceSymbol : symbol": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public virtual void VisitNamespace(INamespaceSymbol symbol)",
                "XmlDocumentation": "",
                "StartLine": 73
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.INamespaceSymbol : symbol": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public virtual void VisitNamespace(INamespaceSymbol symbol)",
                "XmlDocumentation": "",
                "StartLine": 73
              },
              "Id": "M:Microsoft.CodeAnalysis.SymbolVisitor.VisitNamespace(Microsoft.CodeAnalysis.INamespaceSymbol)",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolVisitor",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.IParameterSymbol : symbol": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public virtual void VisitParameter(IParameterSymbol symbol)",
                "XmlDocumentation": "",
                "StartLine": 78
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.IParameterSymbol : symbol": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public virtual void VisitParameter(IParameterSymbol symbol)",
                "XmlDocumentation": "",
                "StartLine": 78
              },
              "Id": "M:Microsoft.CodeAnalysis.SymbolVisitor.VisitParameter(Microsoft.CodeAnalysis.IParameterSymbol)",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolVisitor",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.IPointerTypeSymbol : symbol": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public virtual void VisitPointerType(IPointerTypeSymbol symbol)",
                "XmlDocumentation": "",
                "StartLine": 83
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.IPointerTypeSymbol : symbol": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public virtual void VisitPointerType(IPointerTypeSymbol symbol)",
                "XmlDocumentation": "",
                "StartLine": 83
              },
              "Id": "M:Microsoft.CodeAnalysis.SymbolVisitor.VisitPointerType(Microsoft.CodeAnalysis.IPointerTypeSymbol)",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolVisitor",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.IPropertySymbol : symbol": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public virtual void VisitProperty(IPropertySymbol symbol)",
                "XmlDocumentation": "",
                "StartLine": 88
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.IPropertySymbol : symbol": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public virtual void VisitProperty(IPropertySymbol symbol)",
                "XmlDocumentation": "",
                "StartLine": 88
              },
              "Id": "M:Microsoft.CodeAnalysis.SymbolVisitor.VisitProperty(Microsoft.CodeAnalysis.IPropertySymbol)",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolVisitor",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.IRangeVariableSymbol : symbol": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public virtual void VisitRangeVariable(IRangeVariableSymbol symbol)",
                "XmlDocumentation": "",
                "StartLine": 93
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.IRangeVariableSymbol : symbol": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public virtual void VisitRangeVariable(IRangeVariableSymbol symbol)",
                "XmlDocumentation": "",
                "StartLine": 93
              },
              "Id": "M:Microsoft.CodeAnalysis.SymbolVisitor.VisitRangeVariable(Microsoft.CodeAnalysis.IRangeVariableSymbol)",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolVisitor",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.ITypeParameterSymbol : symbol": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public virtual void VisitTypeParameter(ITypeParameterSymbol symbol)",
                "XmlDocumentation": "",
                "StartLine": 98
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.ITypeParameterSymbol : symbol": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public virtual void VisitTypeParameter(ITypeParameterSymbol symbol)",
                "XmlDocumentation": "",
                "StartLine": 98
              },
              "Id": "M:Microsoft.CodeAnalysis.SymbolVisitor.VisitTypeParameter(Microsoft.CodeAnalysis.ITypeParameterSymbol)",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolVisitor",
              "XmlDocumentation": ""
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Symbols\\SymbolVisitor.cs",
          "InheritanceHierarchy": [
            "T:System.Object"
          ],
          "Syntax": {
            "Content": "public abstract class SymbolVisitor",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.CodeAnalysis.SymbolVisitor",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.ISymbol : symbol": ""
                },
                "Returns": {
                  "!:TResult": ""
                },
                "Content": "public virtual TResult DefaultVisit(ISymbol symbol)",
                "XmlDocumentation": "",
                "StartLine": 13
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.ISymbol : symbol": ""
                },
                "Returns": {
                  "!:TResult": ""
                },
                "Content": "public virtual TResult DefaultVisit(ISymbol symbol)",
                "XmlDocumentation": "",
                "StartLine": 13
              },
              "Id": "M:Microsoft.CodeAnalysis.SymbolVisitor`1.DefaultVisit(Microsoft.CodeAnalysis.ISymbol)",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolVisitor`1",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.ISymbol : symbol": ""
                },
                "Returns": {
                  "!:TResult": ""
                },
                "Content": "public virtual TResult Visit(ISymbol symbol)",
                "XmlDocumentation": "",
                "StartLine": 6
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.ISymbol : symbol": ""
                },
                "Returns": {
                  "!:TResult": ""
                },
                "Content": "public virtual TResult Visit(ISymbol symbol)",
                "XmlDocumentation": "",
                "StartLine": 6
              },
              "Id": "M:Microsoft.CodeAnalysis.SymbolVisitor`1.Visit(Microsoft.CodeAnalysis.ISymbol)",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolVisitor`1",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.IAliasSymbol : symbol": ""
                },
                "Returns": {
                  "!:TResult": ""
                },
                "Content": "public virtual TResult VisitAlias(IAliasSymbol symbol)",
                "XmlDocumentation": "",
                "StartLine": 18
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.IAliasSymbol : symbol": ""
                },
                "Returns": {
                  "!:TResult": ""
                },
                "Content": "public virtual TResult VisitAlias(IAliasSymbol symbol)",
                "XmlDocumentation": "",
                "StartLine": 18
              },
              "Id": "M:Microsoft.CodeAnalysis.SymbolVisitor`1.VisitAlias(Microsoft.CodeAnalysis.IAliasSymbol)",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolVisitor`1",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.IArrayTypeSymbol : symbol": ""
                },
                "Returns": {
                  "!:TResult": ""
                },
                "Content": "public virtual TResult VisitArrayType(IArrayTypeSymbol symbol)",
                "XmlDocumentation": "",
                "StartLine": 23
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.IArrayTypeSymbol : symbol": ""
                },
                "Returns": {
                  "!:TResult": ""
                },
                "Content": "public virtual TResult VisitArrayType(IArrayTypeSymbol symbol)",
                "XmlDocumentation": "",
                "StartLine": 23
              },
              "Id": "M:Microsoft.CodeAnalysis.SymbolVisitor`1.VisitArrayType(Microsoft.CodeAnalysis.IArrayTypeSymbol)",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolVisitor`1",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.IAssemblySymbol : symbol": ""
                },
                "Returns": {
                  "!:TResult": ""
                },
                "Content": "public virtual TResult VisitAssembly(IAssemblySymbol symbol)",
                "XmlDocumentation": "",
                "StartLine": 28
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.IAssemblySymbol : symbol": ""
                },
                "Returns": {
                  "!:TResult": ""
                },
                "Content": "public virtual TResult VisitAssembly(IAssemblySymbol symbol)",
                "XmlDocumentation": "",
                "StartLine": 28
              },
              "Id": "M:Microsoft.CodeAnalysis.SymbolVisitor`1.VisitAssembly(Microsoft.CodeAnalysis.IAssemblySymbol)",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolVisitor`1",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.IDynamicTypeSymbol : symbol": ""
                },
                "Returns": {
                  "!:TResult": ""
                },
                "Content": "public virtual TResult VisitDynamicType(IDynamicTypeSymbol symbol)",
                "XmlDocumentation": "",
                "StartLine": 33
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.IDynamicTypeSymbol : symbol": ""
                },
                "Returns": {
                  "!:TResult": ""
                },
                "Content": "public virtual TResult VisitDynamicType(IDynamicTypeSymbol symbol)",
                "XmlDocumentation": "",
                "StartLine": 33
              },
              "Id": "M:Microsoft.CodeAnalysis.SymbolVisitor`1.VisitDynamicType(Microsoft.CodeAnalysis.IDynamicTypeSymbol)",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolVisitor`1",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.IEventSymbol : symbol": ""
                },
                "Returns": {
                  "!:TResult": ""
                },
                "Content": "public virtual TResult VisitEvent(IEventSymbol symbol)",
                "XmlDocumentation": "",
                "StartLine": 38
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.IEventSymbol : symbol": ""
                },
                "Returns": {
                  "!:TResult": ""
                },
                "Content": "public virtual TResult VisitEvent(IEventSymbol symbol)",
                "XmlDocumentation": "",
                "StartLine": 38
              },
              "Id": "M:Microsoft.CodeAnalysis.SymbolVisitor`1.VisitEvent(Microsoft.CodeAnalysis.IEventSymbol)",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolVisitor`1",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.IFieldSymbol : symbol": ""
                },
                "Returns": {
                  "!:TResult": ""
                },
                "Content": "public virtual TResult VisitField(IFieldSymbol symbol)",
                "XmlDocumentation": "",
                "StartLine": 43
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.IFieldSymbol : symbol": ""
                },
                "Returns": {
                  "!:TResult": ""
                },
                "Content": "public virtual TResult VisitField(IFieldSymbol symbol)",
                "XmlDocumentation": "",
                "StartLine": 43
              },
              "Id": "M:Microsoft.CodeAnalysis.SymbolVisitor`1.VisitField(Microsoft.CodeAnalysis.IFieldSymbol)",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolVisitor`1",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.ILabelSymbol : symbol": ""
                },
                "Returns": {
                  "!:TResult": ""
                },
                "Content": "public virtual TResult VisitLabel(ILabelSymbol symbol)",
                "XmlDocumentation": "",
                "StartLine": 48
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.ILabelSymbol : symbol": ""
                },
                "Returns": {
                  "!:TResult": ""
                },
                "Content": "public virtual TResult VisitLabel(ILabelSymbol symbol)",
                "XmlDocumentation": "",
                "StartLine": 48
              },
              "Id": "M:Microsoft.CodeAnalysis.SymbolVisitor`1.VisitLabel(Microsoft.CodeAnalysis.ILabelSymbol)",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolVisitor`1",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.ILocalSymbol : symbol": ""
                },
                "Returns": {
                  "!:TResult": ""
                },
                "Content": "public virtual TResult VisitLocal(ILocalSymbol symbol)",
                "XmlDocumentation": "",
                "StartLine": 53
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.ILocalSymbol : symbol": ""
                },
                "Returns": {
                  "!:TResult": ""
                },
                "Content": "public virtual TResult VisitLocal(ILocalSymbol symbol)",
                "XmlDocumentation": "",
                "StartLine": 53
              },
              "Id": "M:Microsoft.CodeAnalysis.SymbolVisitor`1.VisitLocal(Microsoft.CodeAnalysis.ILocalSymbol)",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolVisitor`1",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.IMethodSymbol : symbol": ""
                },
                "Returns": {
                  "!:TResult": ""
                },
                "Content": "public virtual TResult VisitMethod(IMethodSymbol symbol)",
                "XmlDocumentation": "",
                "StartLine": 58
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.IMethodSymbol : symbol": ""
                },
                "Returns": {
                  "!:TResult": ""
                },
                "Content": "public virtual TResult VisitMethod(IMethodSymbol symbol)",
                "XmlDocumentation": "",
                "StartLine": 58
              },
              "Id": "M:Microsoft.CodeAnalysis.SymbolVisitor`1.VisitMethod(Microsoft.CodeAnalysis.IMethodSymbol)",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolVisitor`1",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.IModuleSymbol : symbol": ""
                },
                "Returns": {
                  "!:TResult": ""
                },
                "Content": "public virtual TResult VisitModule(IModuleSymbol symbol)",
                "XmlDocumentation": "",
                "StartLine": 63
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.IModuleSymbol : symbol": ""
                },
                "Returns": {
                  "!:TResult": ""
                },
                "Content": "public virtual TResult VisitModule(IModuleSymbol symbol)",
                "XmlDocumentation": "",
                "StartLine": 63
              },
              "Id": "M:Microsoft.CodeAnalysis.SymbolVisitor`1.VisitModule(Microsoft.CodeAnalysis.IModuleSymbol)",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolVisitor`1",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.INamedTypeSymbol : symbol": ""
                },
                "Returns": {
                  "!:TResult": ""
                },
                "Content": "public virtual TResult VisitNamedType(INamedTypeSymbol symbol)",
                "XmlDocumentation": "",
                "StartLine": 68
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.INamedTypeSymbol : symbol": ""
                },
                "Returns": {
                  "!:TResult": ""
                },
                "Content": "public virtual TResult VisitNamedType(INamedTypeSymbol symbol)",
                "XmlDocumentation": "",
                "StartLine": 68
              },
              "Id": "M:Microsoft.CodeAnalysis.SymbolVisitor`1.VisitNamedType(Microsoft.CodeAnalysis.INamedTypeSymbol)",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolVisitor`1",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.INamespaceSymbol : symbol": ""
                },
                "Returns": {
                  "!:TResult": ""
                },
                "Content": "public virtual TResult VisitNamespace(INamespaceSymbol symbol)",
                "XmlDocumentation": "",
                "StartLine": 73
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.INamespaceSymbol : symbol": ""
                },
                "Returns": {
                  "!:TResult": ""
                },
                "Content": "public virtual TResult VisitNamespace(INamespaceSymbol symbol)",
                "XmlDocumentation": "",
                "StartLine": 73
              },
              "Id": "M:Microsoft.CodeAnalysis.SymbolVisitor`1.VisitNamespace(Microsoft.CodeAnalysis.INamespaceSymbol)",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolVisitor`1",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.IParameterSymbol : symbol": ""
                },
                "Returns": {
                  "!:TResult": ""
                },
                "Content": "public virtual TResult VisitParameter(IParameterSymbol symbol)",
                "XmlDocumentation": "",
                "StartLine": 78
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.IParameterSymbol : symbol": ""
                },
                "Returns": {
                  "!:TResult": ""
                },
                "Content": "public virtual TResult VisitParameter(IParameterSymbol symbol)",
                "XmlDocumentation": "",
                "StartLine": 78
              },
              "Id": "M:Microsoft.CodeAnalysis.SymbolVisitor`1.VisitParameter(Microsoft.CodeAnalysis.IParameterSymbol)",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolVisitor`1",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.IPointerTypeSymbol : symbol": ""
                },
                "Returns": {
                  "!:TResult": ""
                },
                "Content": "public virtual TResult VisitPointerType(IPointerTypeSymbol symbol)",
                "XmlDocumentation": "",
                "StartLine": 83
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.IPointerTypeSymbol : symbol": ""
                },
                "Returns": {
                  "!:TResult": ""
                },
                "Content": "public virtual TResult VisitPointerType(IPointerTypeSymbol symbol)",
                "XmlDocumentation": "",
                "StartLine": 83
              },
              "Id": "M:Microsoft.CodeAnalysis.SymbolVisitor`1.VisitPointerType(Microsoft.CodeAnalysis.IPointerTypeSymbol)",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolVisitor`1",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.IPropertySymbol : symbol": ""
                },
                "Returns": {
                  "!:TResult": ""
                },
                "Content": "public virtual TResult VisitProperty(IPropertySymbol symbol)",
                "XmlDocumentation": "",
                "StartLine": 88
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.IPropertySymbol : symbol": ""
                },
                "Returns": {
                  "!:TResult": ""
                },
                "Content": "public virtual TResult VisitProperty(IPropertySymbol symbol)",
                "XmlDocumentation": "",
                "StartLine": 88
              },
              "Id": "M:Microsoft.CodeAnalysis.SymbolVisitor`1.VisitProperty(Microsoft.CodeAnalysis.IPropertySymbol)",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolVisitor`1",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.IRangeVariableSymbol : symbol": ""
                },
                "Returns": {
                  "!:TResult": ""
                },
                "Content": "public virtual TResult VisitRangeVariable(IRangeVariableSymbol symbol)",
                "XmlDocumentation": "",
                "StartLine": 93
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.IRangeVariableSymbol : symbol": ""
                },
                "Returns": {
                  "!:TResult": ""
                },
                "Content": "public virtual TResult VisitRangeVariable(IRangeVariableSymbol symbol)",
                "XmlDocumentation": "",
                "StartLine": 93
              },
              "Id": "M:Microsoft.CodeAnalysis.SymbolVisitor`1.VisitRangeVariable(Microsoft.CodeAnalysis.IRangeVariableSymbol)",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolVisitor`1",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.ITypeParameterSymbol : symbol": ""
                },
                "Returns": {
                  "!:TResult": ""
                },
                "Content": "public virtual TResult VisitTypeParameter(ITypeParameterSymbol symbol)",
                "XmlDocumentation": "",
                "StartLine": 98
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.ITypeParameterSymbol : symbol": ""
                },
                "Returns": {
                  "!:TResult": ""
                },
                "Content": "public virtual TResult VisitTypeParameter(ITypeParameterSymbol symbol)",
                "XmlDocumentation": "",
                "StartLine": 98
              },
              "Id": "M:Microsoft.CodeAnalysis.SymbolVisitor`1.VisitTypeParameter(Microsoft.CodeAnalysis.ITypeParameterSymbol)",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolVisitor`1",
              "XmlDocumentation": ""
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Symbols\\SymbolVisitor`1.cs",
          "InheritanceHierarchy": [
            "T:System.Object"
          ],
          "Syntax": {
            "Content": "public abstract class SymbolVisitor<TResult>",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.CodeAnalysis.SymbolVisitor`1",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxAnnotation : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool Equals(SyntaxAnnotation other)",
                "XmlDocumentation": "",
                "StartLine": 71
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxAnnotation : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool Equals(SyntaxAnnotation other)",
                "XmlDocumentation": "",
                "StartLine": 71
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxAnnotation.Equals(Microsoft.CodeAnalysis.SyntaxAnnotation)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxAnnotation",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Object : obj": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public override bool Equals(object obj)",
                "XmlDocumentation": "",
                "StartLine": 106
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Object : obj": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public override bool Equals(object obj)",
                "XmlDocumentation": "",
                "StartLine": 106
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxAnnotation.Equals(System.Object)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxAnnotation",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public override int GetHashCode()",
                "XmlDocumentation": "",
                "StartLine": 111
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public override int GetHashCode()",
                "XmlDocumentation": "",
                "StartLine": 111
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxAnnotation.GetHashCode",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxAnnotation",
              "XmlDocumentation": ""
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "ElasticAnnotation",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.SyntaxAnnotation.ElasticAnnotation\">\r\n    <summary>\r\n    A predefined syntax annotation that indicates whether the syntax element has elastic trivia.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 20
              },
              "Id": "F:Microsoft.CodeAnalysis.SyntaxAnnotation.ElasticAnnotation",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxAnnotation",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.SyntaxAnnotation.ElasticAnnotation\">\r\n    <summary>\r\n    A predefined syntax annotation that indicates whether the syntax element has elastic trivia.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:System.String",
                "Content": "public string Data",
                "XmlDocumentation": "",
                "StartLine": 28
              },
              "Syntax": {
                "PropertyType": "T:System.String",
                "Content": "public string Data",
                "XmlDocumentation": "",
                "StartLine": 28
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxAnnotation.Data",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxAnnotation",
              "XmlDocumentation": ""
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.String",
                "Content": "public string Kind",
                "XmlDocumentation": "",
                "StartLine": 27
              },
              "Syntax": {
                "PropertyType": "T:System.String",
                "Content": "public string Kind",
                "XmlDocumentation": "",
                "StartLine": 27
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxAnnotation.Kind",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxAnnotation",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "ConstructorSyntax": {
                "Parameters": {},
                "Content": "public SyntaxAnnotation()",
                "XmlDocumentation": "",
                "StartLine": 30
              },
              "Syntax": {
                "Parameters": {},
                "Content": "public SyntaxAnnotation()",
                "XmlDocumentation": "",
                "StartLine": 30
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxAnnotation.#ctor",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxAnnotation",
              "XmlDocumentation": ""
            },
            {
              "ConstructorSyntax": {
                "Parameters": {
                  "T:System.String : kind": ""
                },
                "Content": "public SyntaxAnnotation(string kind): this ()",
                "XmlDocumentation": "",
                "StartLine": 35
              },
              "Syntax": {
                "Parameters": {
                  "T:System.String : kind": ""
                },
                "Content": "public SyntaxAnnotation(string kind): this ()",
                "XmlDocumentation": "",
                "StartLine": 35
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxAnnotation.#ctor(System.String)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxAnnotation",
              "XmlDocumentation": ""
            },
            {
              "ConstructorSyntax": {
                "Parameters": {
                  "T:System.String : data": "",
                  "T:System.String : kind": ""
                },
                "Content": "public SyntaxAnnotation(string kind, string data): this (kind)",
                "XmlDocumentation": "",
                "StartLine": 41
              },
              "Syntax": {
                "Parameters": {
                  "T:System.String : data": "",
                  "T:System.String : kind": ""
                },
                "Content": "public SyntaxAnnotation(string kind, string data): this (kind)",
                "XmlDocumentation": "",
                "StartLine": 41
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxAnnotation.#ctor(System.String,System.String)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxAnnotation",
              "XmlDocumentation": ""
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Syntax\\SyntaxAnnotation.cs",
          "InheritanceHierarchy": [
            "T:System.Object"
          ],
          "Syntax": {
            "Content": "public sealed class SyntaxAnnotation",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.SyntaxAnnotation\">\r\n    <summary>\r\n    A SynatxAnnotation is used to annotate syntax elements with additional information. \r\n    \r\n    Since syntax elements are immutable, annotating them requires creating new instances of them\r\n    with the annotations attached.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.SyntaxAnnotation",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.SyntaxAnnotation\">\r\n    <summary>\r\n    A SynatxAnnotation is used to annotate syntax elements with additional information. \r\n    \r\n    Since syntax elements are immutable, annotating them requires creating new instances of them\r\n    with the annotations attached.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Boolean : ascendOutOfTrivia": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}": ""
                },
                "Content": "public IEnumerable<SyntaxNode> Ancestors(bool ascendOutOfTrivia = true)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.Ancestors(System.Boolean)\">\r\n    <summary>\r\n    Gets a list of ancestor nodes\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 685
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Boolean : ascendOutOfTrivia": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}": ""
                },
                "Content": "public IEnumerable<SyntaxNode> Ancestors(bool ascendOutOfTrivia = true)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.Ancestors(System.Boolean)\">\r\n    <summary>\r\n    Gets a list of ancestor nodes\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 685
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNode.Ancestors(System.Boolean)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.Ancestors(System.Boolean)\">\r\n    <summary>\r\n    Gets a list of ancestor nodes\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Boolean : ascendOutOfTrivia": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}": ""
                },
                "Content": "public IEnumerable<SyntaxNode> AncestorsAndSelf(bool ascendOutOfTrivia = true)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.AncestorsAndSelf(System.Boolean)\">\r\n    <summary>\r\n    Gets a list of ancestor nodes (including this node) \r\n    </summary>\r\n</member>\r\n",
                "StartLine": 695
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Boolean : ascendOutOfTrivia": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}": ""
                },
                "Content": "public IEnumerable<SyntaxNode> AncestorsAndSelf(bool ascendOutOfTrivia = true)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.AncestorsAndSelf(System.Boolean)\">\r\n    <summary>\r\n    Gets a list of ancestor nodes (including this node) \r\n    </summary>\r\n</member>\r\n",
                "StartLine": 695
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNode.AncestorsAndSelf(System.Boolean)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.AncestorsAndSelf(System.Boolean)\">\r\n    <summary>\r\n    Gets a list of ancestor nodes (including this node) \r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}": ""
                },
                "Content": "public IEnumerable<SyntaxNode> ChildNodes()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.ChildNodes\">\r\n    <summary>\r\n    Gets a list of the child nodes in prefix document order.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 671
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}": ""
                },
                "Content": "public IEnumerable<SyntaxNode> ChildNodes()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.ChildNodes\">\r\n    <summary>\r\n    Gets a list of the child nodes in prefix document order.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 671
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNode.ChildNodes",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.ChildNodes\">\r\n    <summary>\r\n    Gets a list of the child nodes in prefix document order.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.ChildSyntaxList": ""
                },
                "Content": "public ChildSyntaxList ChildNodesAndTokens()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.ChildNodesAndTokens\">\r\n    <summary>\r\n    The list of child nodes and tokens of this node, where each element is a SyntaxNodeOrToken instance.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 655
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.ChildSyntaxList": ""
                },
                "Content": "public ChildSyntaxList ChildNodesAndTokens()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.ChildNodesAndTokens\">\r\n    <summary>\r\n    The list of child nodes and tokens of this node, where each element is a SyntaxNodeOrToken instance.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 655
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNode.ChildNodesAndTokens",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.ChildNodesAndTokens\">\r\n    <summary>\r\n    The list of child nodes and tokens of this node, where each element is a SyntaxNodeOrToken instance.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Int32 : position": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken": ""
                },
                "Content": "public abstract SyntaxNodeOrToken ChildThatContainsPosition(int position);",
                "XmlDocumentation": "",
                "StartLine": 660
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Int32 : position": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken": ""
                },
                "Content": "public abstract SyntaxNodeOrToken ChildThatContainsPosition(int position);",
                "XmlDocumentation": "",
                "StartLine": 660
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNode.ChildThatContainsPosition(System.Int32)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken}": ""
                },
                "Content": "public IEnumerable<SyntaxToken> ChildTokens()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.ChildTokens\">\r\n    <summary>\r\n    Gets a list of the direct child tokens of this node.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 897
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken}": ""
                },
                "Content": "public IEnumerable<SyntaxToken> ChildTokens()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.ChildTokens\">\r\n    <summary>\r\n    Gets a list of the direct child tokens of this node.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 897
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNode.ChildTokens",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.ChildTokens\">\r\n    <summary>\r\n    Gets a list of the direct child tokens of this node.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxNode : node": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool Contains(SyntaxNode node)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.Contains(Microsoft.CodeAnalysis.SyntaxNode)\">\r\n    <summary>\r\n    Determines if the specified node is a descendant of this node.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 477
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxNode : node": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool Contains(SyntaxNode node)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.Contains(Microsoft.CodeAnalysis.SyntaxNode)\">\r\n    <summary>\r\n    Determines if the specified node is a descendant of this node.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 477
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNode.Contains(Microsoft.CodeAnalysis.SyntaxNode)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.Contains(Microsoft.CodeAnalysis.SyntaxNode)\">\r\n    <summary>\r\n    Determines if the specified node is a descendant of this node.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "!:T : node": ""
                },
                "Returns": {
                  "!:T": ""
                },
                "Content": "public T CopyAnnotationsTo<T>(T node)where T : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.CopyAnnotationsTo``1(``0)\">\r\n    <summary>\r\n    Copies all SyntaxAnnotations, if any, from this SyntaxNode instance and attaches them to a new instance based on <paramref name=\"node\" />.\r\n    </summary>\r\n    <remarks>\r\n    <para>\r\n    If no annotations are copied, just returns <paramref name=\"node\" />.\r\n    </para>\r\n    <para>\r\n    It can also be used manually to preserve annotations in a more complex tree\r\n    modification, even if the type of a node changes.\r\n    </para>\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 1141
              },
              "Syntax": {
                "Parameters": {
                  "!:T : node": ""
                },
                "Returns": {
                  "!:T": ""
                },
                "Content": "public T CopyAnnotationsTo<T>(T node)where T : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.CopyAnnotationsTo``1(``0)\">\r\n    <summary>\r\n    Copies all SyntaxAnnotations, if any, from this SyntaxNode instance and attaches them to a new instance based on <paramref name=\"node\" />.\r\n    </summary>\r\n    <remarks>\r\n    <para>\r\n    If no annotations are copied, just returns <paramref name=\"node\" />.\r\n    </para>\r\n    <para>\r\n    It can also be used manually to preserve annotations in a more complex tree\r\n    modification, even if the type of a node changes.\r\n    </para>\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 1141
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNode.CopyAnnotationsTo``1(``0)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.CopyAnnotationsTo``1(``0)\">\r\n    <summary>\r\n    Copies all SyntaxAnnotations, if any, from this SyntaxNode instance and attaches them to a new instance based on <paramref name=\"node\" />.\r\n    </summary>\r\n    <remarks>\r\n    <para>\r\n    If no annotations are copied, just returns <paramref name=\"node\" />.\r\n    </para>\r\n    <para>\r\n    It can also be used manually to preserve annotations in a more complex tree\r\n    modification, even if the type of a node changes.\r\n    </para>\r\n    </remarks>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.TextSpan : span": "",
                  "T:System.Boolean : descendIntoTrivia": "",
                  "T:System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean} : descendIntoChildren": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}": ""
                },
                "Content": "public IEnumerable<SyntaxNode> DescendantNodes(TextSpan span, Func<SyntaxNode, bool> descendIntoChildren = null, bool descendIntoTrivia = false)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.DescendantNodes(Microsoft.CodeAnalysis.Text.TextSpan,System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean},System.Boolean)\">\r\n    <summary>\r\n    Gets a list of descendant nodes in prefix document order.\r\n    </summary>\r\n    <param name=\"span\">The span the node's full span must intersect.</param>\r\n    <param name=\"descendIntoChildren\">An optional function that determines if the search descends into the argument node's children.</param>\r\n    <param name=\"descendIntoTrivia\">Determines if nodes that are part of structured trivia are included in the list.</param>\r\n</member>\r\n",
                "StartLine": 752
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.TextSpan : span": "",
                  "T:System.Boolean : descendIntoTrivia": "",
                  "T:System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean} : descendIntoChildren": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}": ""
                },
                "Content": "public IEnumerable<SyntaxNode> DescendantNodes(TextSpan span, Func<SyntaxNode, bool> descendIntoChildren = null, bool descendIntoTrivia = false)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.DescendantNodes(Microsoft.CodeAnalysis.Text.TextSpan,System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean},System.Boolean)\">\r\n    <summary>\r\n    Gets a list of descendant nodes in prefix document order.\r\n    </summary>\r\n    <param name=\"span\">The span the node's full span must intersect.</param>\r\n    <param name=\"descendIntoChildren\">An optional function that determines if the search descends into the argument node's children.</param>\r\n    <param name=\"descendIntoTrivia\">Determines if nodes that are part of structured trivia are included in the list.</param>\r\n</member>\r\n",
                "StartLine": 752
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNode.DescendantNodes(Microsoft.CodeAnalysis.Text.TextSpan,System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean},System.Boolean)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.DescendantNodes(Microsoft.CodeAnalysis.Text.TextSpan,System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean},System.Boolean)\">\r\n    <summary>\r\n    Gets a list of descendant nodes in prefix document order.\r\n    </summary>\r\n    <param name=\"span\">The span the node's full span must intersect.</param>\r\n    <param name=\"descendIntoChildren\">An optional function that determines if the search descends into the argument node's children.</param>\r\n    <param name=\"descendIntoTrivia\">Determines if nodes that are part of structured trivia are included in the list.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Boolean : descendIntoTrivia": "",
                  "T:System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean} : descendIntoChildren": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}": ""
                },
                "Content": "public IEnumerable<SyntaxNode> DescendantNodes(Func<SyntaxNode, bool> descendIntoChildren = null, bool descendIntoTrivia = false)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.DescendantNodes(System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean},System.Boolean)\">\r\n    <summary>\r\n    Gets a list of descendant nodes in prefix document order.\r\n    </summary>\r\n    <param name=\"descendIntoChildren\">An optional function that determines if the search descends into the argument node's children.</param>\r\n    <param name=\"descendIntoTrivia\">Determines if nodes that are part of structured trivia are included in the list.</param>\r\n</member>\r\n",
                "StartLine": 741
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Boolean : descendIntoTrivia": "",
                  "T:System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean} : descendIntoChildren": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}": ""
                },
                "Content": "public IEnumerable<SyntaxNode> DescendantNodes(Func<SyntaxNode, bool> descendIntoChildren = null, bool descendIntoTrivia = false)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.DescendantNodes(System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean},System.Boolean)\">\r\n    <summary>\r\n    Gets a list of descendant nodes in prefix document order.\r\n    </summary>\r\n    <param name=\"descendIntoChildren\">An optional function that determines if the search descends into the argument node's children.</param>\r\n    <param name=\"descendIntoTrivia\">Determines if nodes that are part of structured trivia are included in the list.</param>\r\n</member>\r\n",
                "StartLine": 741
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNode.DescendantNodes(System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean},System.Boolean)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.DescendantNodes(System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean},System.Boolean)\">\r\n    <summary>\r\n    Gets a list of descendant nodes in prefix document order.\r\n    </summary>\r\n    <param name=\"descendIntoChildren\">An optional function that determines if the search descends into the argument node's children.</param>\r\n    <param name=\"descendIntoTrivia\">Determines if nodes that are part of structured trivia are included in the list.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.TextSpan : span": "",
                  "T:System.Boolean : descendIntoTrivia": "",
                  "T:System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean} : descendIntoChildren": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}": ""
                },
                "Content": "public IEnumerable<SyntaxNode> DescendantNodesAndSelf(TextSpan span, Func<SyntaxNode, bool> descendIntoChildren = null, bool descendIntoTrivia = false)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.DescendantNodesAndSelf(Microsoft.CodeAnalysis.Text.TextSpan,System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean},System.Boolean)\">\r\n    <summary>\r\n    Gets a list of descendant nodes (including this node) in prefix document order.\r\n    </summary>\r\n    <param name=\"span\">The span the node's full span must intersect.</param>\r\n    <param name=\"descendIntoChildren\">An optional function that determines if the search descends into the argument node's children.</param>\r\n    <param name=\"descendIntoTrivia\">Determines if nodes that are part of structured trivia are included in the list.</param>\r\n</member>\r\n",
                "StartLine": 773
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.TextSpan : span": "",
                  "T:System.Boolean : descendIntoTrivia": "",
                  "T:System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean} : descendIntoChildren": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}": ""
                },
                "Content": "public IEnumerable<SyntaxNode> DescendantNodesAndSelf(TextSpan span, Func<SyntaxNode, bool> descendIntoChildren = null, bool descendIntoTrivia = false)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.DescendantNodesAndSelf(Microsoft.CodeAnalysis.Text.TextSpan,System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean},System.Boolean)\">\r\n    <summary>\r\n    Gets a list of descendant nodes (including this node) in prefix document order.\r\n    </summary>\r\n    <param name=\"span\">The span the node's full span must intersect.</param>\r\n    <param name=\"descendIntoChildren\">An optional function that determines if the search descends into the argument node's children.</param>\r\n    <param name=\"descendIntoTrivia\">Determines if nodes that are part of structured trivia are included in the list.</param>\r\n</member>\r\n",
                "StartLine": 773
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNode.DescendantNodesAndSelf(Microsoft.CodeAnalysis.Text.TextSpan,System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean},System.Boolean)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.DescendantNodesAndSelf(Microsoft.CodeAnalysis.Text.TextSpan,System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean},System.Boolean)\">\r\n    <summary>\r\n    Gets a list of descendant nodes (including this node) in prefix document order.\r\n    </summary>\r\n    <param name=\"span\">The span the node's full span must intersect.</param>\r\n    <param name=\"descendIntoChildren\">An optional function that determines if the search descends into the argument node's children.</param>\r\n    <param name=\"descendIntoTrivia\">Determines if nodes that are part of structured trivia are included in the list.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Boolean : descendIntoTrivia": "",
                  "T:System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean} : descendIntoChildren": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}": ""
                },
                "Content": "public IEnumerable<SyntaxNode> DescendantNodesAndSelf(Func<SyntaxNode, bool> descendIntoChildren = null, bool descendIntoTrivia = false)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.DescendantNodesAndSelf(System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean},System.Boolean)\">\r\n    <summary>\r\n    Gets a list of descendant nodes (including this node) in prefix document order.\r\n    </summary>\r\n    <param name=\"descendIntoChildren\">An optional function that determines if the search descends into the argument node's children.</param>\r\n    <param name=\"descendIntoTrivia\">Determines if nodes that are part of structured trivia are included in the list.</param>\r\n</member>\r\n",
                "StartLine": 762
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Boolean : descendIntoTrivia": "",
                  "T:System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean} : descendIntoChildren": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}": ""
                },
                "Content": "public IEnumerable<SyntaxNode> DescendantNodesAndSelf(Func<SyntaxNode, bool> descendIntoChildren = null, bool descendIntoTrivia = false)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.DescendantNodesAndSelf(System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean},System.Boolean)\">\r\n    <summary>\r\n    Gets a list of descendant nodes (including this node) in prefix document order.\r\n    </summary>\r\n    <param name=\"descendIntoChildren\">An optional function that determines if the search descends into the argument node's children.</param>\r\n    <param name=\"descendIntoTrivia\">Determines if nodes that are part of structured trivia are included in the list.</param>\r\n</member>\r\n",
                "StartLine": 762
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNode.DescendantNodesAndSelf(System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean},System.Boolean)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.DescendantNodesAndSelf(System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean},System.Boolean)\">\r\n    <summary>\r\n    Gets a list of descendant nodes (including this node) in prefix document order.\r\n    </summary>\r\n    <param name=\"descendIntoChildren\">An optional function that determines if the search descends into the argument node's children.</param>\r\n    <param name=\"descendIntoTrivia\">Determines if nodes that are part of structured trivia are included in the list.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.TextSpan : span": "",
                  "T:System.Boolean : descendIntoTrivia": "",
                  "T:System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean} : descendIntoChildren": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNodeOrToken}": ""
                },
                "Content": "public IEnumerable<SyntaxNodeOrToken> DescendantNodesAndTokens(TextSpan span, Func<SyntaxNode, bool> descendIntoChildren = null, bool descendIntoTrivia = false)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.DescendantNodesAndTokens(Microsoft.CodeAnalysis.Text.TextSpan,System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean},System.Boolean)\">\r\n    <summary>\r\n    Gets a list of the descendant nodes and tokens in prefix document order.\r\n    </summary>\r\n    <param name=\"span\">The span the node's full span must intersect.</param>\r\n    <param name=\"descendIntoChildren\">An optional function that determines if the search descends into the argument node's children.</param>\r\n    <param name=\"descendIntoTrivia\">Determines if nodes that are part of structured trivia are included in the list.</param>\r\n</member>\r\n",
                "StartLine": 794
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.TextSpan : span": "",
                  "T:System.Boolean : descendIntoTrivia": "",
                  "T:System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean} : descendIntoChildren": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNodeOrToken}": ""
                },
                "Content": "public IEnumerable<SyntaxNodeOrToken> DescendantNodesAndTokens(TextSpan span, Func<SyntaxNode, bool> descendIntoChildren = null, bool descendIntoTrivia = false)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.DescendantNodesAndTokens(Microsoft.CodeAnalysis.Text.TextSpan,System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean},System.Boolean)\">\r\n    <summary>\r\n    Gets a list of the descendant nodes and tokens in prefix document order.\r\n    </summary>\r\n    <param name=\"span\">The span the node's full span must intersect.</param>\r\n    <param name=\"descendIntoChildren\">An optional function that determines if the search descends into the argument node's children.</param>\r\n    <param name=\"descendIntoTrivia\">Determines if nodes that are part of structured trivia are included in the list.</param>\r\n</member>\r\n",
                "StartLine": 794
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNode.DescendantNodesAndTokens(Microsoft.CodeAnalysis.Text.TextSpan,System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean},System.Boolean)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.DescendantNodesAndTokens(Microsoft.CodeAnalysis.Text.TextSpan,System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean},System.Boolean)\">\r\n    <summary>\r\n    Gets a list of the descendant nodes and tokens in prefix document order.\r\n    </summary>\r\n    <param name=\"span\">The span the node's full span must intersect.</param>\r\n    <param name=\"descendIntoChildren\">An optional function that determines if the search descends into the argument node's children.</param>\r\n    <param name=\"descendIntoTrivia\">Determines if nodes that are part of structured trivia are included in the list.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Boolean : descendIntoTrivia": "",
                  "T:System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean} : descendIntoChildren": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNodeOrToken}": ""
                },
                "Content": "public IEnumerable<SyntaxNodeOrToken> DescendantNodesAndTokens(Func<SyntaxNode, bool> descendIntoChildren = null, bool descendIntoTrivia = false)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.DescendantNodesAndTokens(System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean},System.Boolean)\">\r\n    <summary>\r\n    Gets a list of descendant nodes and tokens in prefix document order.\r\n    </summary>\r\n    <param name=\"descendIntoChildren\">An optional function that determines if the search descends into the argument node's children.</param>\r\n    <param name=\"descendIntoTrivia\">Determines if nodes that are part of structured trivia are included in the list.</param>\r\n</member>\r\n",
                "StartLine": 783
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Boolean : descendIntoTrivia": "",
                  "T:System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean} : descendIntoChildren": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNodeOrToken}": ""
                },
                "Content": "public IEnumerable<SyntaxNodeOrToken> DescendantNodesAndTokens(Func<SyntaxNode, bool> descendIntoChildren = null, bool descendIntoTrivia = false)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.DescendantNodesAndTokens(System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean},System.Boolean)\">\r\n    <summary>\r\n    Gets a list of descendant nodes and tokens in prefix document order.\r\n    </summary>\r\n    <param name=\"descendIntoChildren\">An optional function that determines if the search descends into the argument node's children.</param>\r\n    <param name=\"descendIntoTrivia\">Determines if nodes that are part of structured trivia are included in the list.</param>\r\n</member>\r\n",
                "StartLine": 783
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNode.DescendantNodesAndTokens(System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean},System.Boolean)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.DescendantNodesAndTokens(System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean},System.Boolean)\">\r\n    <summary>\r\n    Gets a list of descendant nodes and tokens in prefix document order.\r\n    </summary>\r\n    <param name=\"descendIntoChildren\">An optional function that determines if the search descends into the argument node's children.</param>\r\n    <param name=\"descendIntoTrivia\">Determines if nodes that are part of structured trivia are included in the list.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.TextSpan : span": "",
                  "T:System.Boolean : descendIntoTrivia": "",
                  "T:System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean} : descendIntoChildren": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNodeOrToken}": ""
                },
                "Content": "public IEnumerable<SyntaxNodeOrToken> DescendantNodesAndTokensAndSelf(TextSpan span, Func<SyntaxNode, bool> descendIntoChildren = null, bool descendIntoTrivia = false)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.DescendantNodesAndTokensAndSelf(Microsoft.CodeAnalysis.Text.TextSpan,System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean},System.Boolean)\">\r\n    <summary>\r\n    Gets a list of the descendant nodes and tokens (including this node) in prefix document order.\r\n    </summary>\r\n    <param name=\"span\">The span the node's full span must intersect.</param>\r\n    <param name=\"descendIntoChildren\">An optional function that determines if the search descends into the argument node's children.</param>\r\n    <param name=\"descendIntoTrivia\">Determines if nodes that are part of structured trivia are included in the list.</param>\r\n</member>\r\n",
                "StartLine": 815
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.TextSpan : span": "",
                  "T:System.Boolean : descendIntoTrivia": "",
                  "T:System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean} : descendIntoChildren": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNodeOrToken}": ""
                },
                "Content": "public IEnumerable<SyntaxNodeOrToken> DescendantNodesAndTokensAndSelf(TextSpan span, Func<SyntaxNode, bool> descendIntoChildren = null, bool descendIntoTrivia = false)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.DescendantNodesAndTokensAndSelf(Microsoft.CodeAnalysis.Text.TextSpan,System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean},System.Boolean)\">\r\n    <summary>\r\n    Gets a list of the descendant nodes and tokens (including this node) in prefix document order.\r\n    </summary>\r\n    <param name=\"span\">The span the node's full span must intersect.</param>\r\n    <param name=\"descendIntoChildren\">An optional function that determines if the search descends into the argument node's children.</param>\r\n    <param name=\"descendIntoTrivia\">Determines if nodes that are part of structured trivia are included in the list.</param>\r\n</member>\r\n",
                "StartLine": 815
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNode.DescendantNodesAndTokensAndSelf(Microsoft.CodeAnalysis.Text.TextSpan,System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean},System.Boolean)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.DescendantNodesAndTokensAndSelf(Microsoft.CodeAnalysis.Text.TextSpan,System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean},System.Boolean)\">\r\n    <summary>\r\n    Gets a list of the descendant nodes and tokens (including this node) in prefix document order.\r\n    </summary>\r\n    <param name=\"span\">The span the node's full span must intersect.</param>\r\n    <param name=\"descendIntoChildren\">An optional function that determines if the search descends into the argument node's children.</param>\r\n    <param name=\"descendIntoTrivia\">Determines if nodes that are part of structured trivia are included in the list.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Boolean : descendIntoTrivia": "",
                  "T:System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean} : descendIntoChildren": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNodeOrToken}": ""
                },
                "Content": "public IEnumerable<SyntaxNodeOrToken> DescendantNodesAndTokensAndSelf(Func<SyntaxNode, bool> descendIntoChildren = null, bool descendIntoTrivia = false)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.DescendantNodesAndTokensAndSelf(System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean},System.Boolean)\">\r\n    <summary>\r\n    Gets a list of descendant nodes and tokens (including this node) in prefix document order.\r\n    </summary>\r\n    <param name=\"descendIntoChildren\">An optional function that determines if the search descends into the argument node's children.</param>\r\n    <param name=\"descendIntoTrivia\">Determines if nodes that are part of structured trivia are included in the list.</param>\r\n</member>\r\n",
                "StartLine": 804
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Boolean : descendIntoTrivia": "",
                  "T:System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean} : descendIntoChildren": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNodeOrToken}": ""
                },
                "Content": "public IEnumerable<SyntaxNodeOrToken> DescendantNodesAndTokensAndSelf(Func<SyntaxNode, bool> descendIntoChildren = null, bool descendIntoTrivia = false)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.DescendantNodesAndTokensAndSelf(System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean},System.Boolean)\">\r\n    <summary>\r\n    Gets a list of descendant nodes and tokens (including this node) in prefix document order.\r\n    </summary>\r\n    <param name=\"descendIntoChildren\">An optional function that determines if the search descends into the argument node's children.</param>\r\n    <param name=\"descendIntoTrivia\">Determines if nodes that are part of structured trivia are included in the list.</param>\r\n</member>\r\n",
                "StartLine": 804
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNode.DescendantNodesAndTokensAndSelf(System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean},System.Boolean)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.DescendantNodesAndTokensAndSelf(System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean},System.Boolean)\">\r\n    <summary>\r\n    Gets a list of descendant nodes and tokens (including this node) in prefix document order.\r\n    </summary>\r\n    <param name=\"descendIntoChildren\">An optional function that determines if the search descends into the argument node's children.</param>\r\n    <param name=\"descendIntoTrivia\">Determines if nodes that are part of structured trivia are included in the list.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.TextSpan : span": "",
                  "T:System.Boolean : descendIntoTrivia": "",
                  "T:System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean} : descendIntoChildren": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken}": ""
                },
                "Content": "public IEnumerable<SyntaxToken> DescendantTokens(TextSpan span, Func<SyntaxNode, bool> descendIntoChildren = null, bool descendIntoTrivia = false)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.DescendantTokens(Microsoft.CodeAnalysis.Text.TextSpan,System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean},System.Boolean)\">\r\n    <summary>\r\n    Gets a list of all the tokens in the full span of this node.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 919
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.TextSpan : span": "",
                  "T:System.Boolean : descendIntoTrivia": "",
                  "T:System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean} : descendIntoChildren": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken}": ""
                },
                "Content": "public IEnumerable<SyntaxToken> DescendantTokens(TextSpan span, Func<SyntaxNode, bool> descendIntoChildren = null, bool descendIntoTrivia = false)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.DescendantTokens(Microsoft.CodeAnalysis.Text.TextSpan,System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean},System.Boolean)\">\r\n    <summary>\r\n    Gets a list of all the tokens in the full span of this node.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 919
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNode.DescendantTokens(Microsoft.CodeAnalysis.Text.TextSpan,System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean},System.Boolean)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.DescendantTokens(Microsoft.CodeAnalysis.Text.TextSpan,System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean},System.Boolean)\">\r\n    <summary>\r\n    Gets a list of all the tokens in the full span of this node.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Boolean : descendIntoTrivia": "",
                  "T:System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean} : descendIntoChildren": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken}": ""
                },
                "Content": "public IEnumerable<SyntaxToken> DescendantTokens(Func<SyntaxNode, bool> descendIntoChildren = null, bool descendIntoTrivia = false)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.DescendantTokens(System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean},System.Boolean)\">\r\n    <summary>\r\n    Gets a list of all the tokens in the span of this node.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 911
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Boolean : descendIntoTrivia": "",
                  "T:System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean} : descendIntoChildren": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken}": ""
                },
                "Content": "public IEnumerable<SyntaxToken> DescendantTokens(Func<SyntaxNode, bool> descendIntoChildren = null, bool descendIntoTrivia = false)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.DescendantTokens(System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean},System.Boolean)\">\r\n    <summary>\r\n    Gets a list of all the tokens in the span of this node.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 911
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNode.DescendantTokens(System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean},System.Boolean)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.DescendantTokens(System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean},System.Boolean)\">\r\n    <summary>\r\n    Gets a list of all the tokens in the span of this node.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.TextSpan : span": "",
                  "T:System.Boolean : descendIntoTrivia": "",
                  "T:System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean} : descendIntoChildren": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia}": ""
                },
                "Content": "public IEnumerable<SyntaxTrivia> DescendantTrivia(TextSpan span, Func<SyntaxNode, bool> descendIntoChildren = null, bool descendIntoTrivia = false)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.DescendantTrivia(Microsoft.CodeAnalysis.Text.TextSpan,System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean},System.Boolean)\">\r\n    <summary>\r\n    Get a list of all the trivia associated with the descendant nodes and tokens.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 969
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.TextSpan : span": "",
                  "T:System.Boolean : descendIntoTrivia": "",
                  "T:System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean} : descendIntoChildren": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia}": ""
                },
                "Content": "public IEnumerable<SyntaxTrivia> DescendantTrivia(TextSpan span, Func<SyntaxNode, bool> descendIntoChildren = null, bool descendIntoTrivia = false)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.DescendantTrivia(Microsoft.CodeAnalysis.Text.TextSpan,System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean},System.Boolean)\">\r\n    <summary>\r\n    Get a list of all the trivia associated with the descendant nodes and tokens.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 969
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNode.DescendantTrivia(Microsoft.CodeAnalysis.Text.TextSpan,System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean},System.Boolean)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.DescendantTrivia(Microsoft.CodeAnalysis.Text.TextSpan,System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean},System.Boolean)\">\r\n    <summary>\r\n    Get a list of all the trivia associated with the descendant nodes and tokens.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Boolean : descendIntoTrivia": "",
                  "T:System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean} : descendIntoChildren": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia}": ""
                },
                "Content": "public IEnumerable<SyntaxTrivia> DescendantTrivia(Func<SyntaxNode, bool> descendIntoChildren = null, bool descendIntoTrivia = false)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.DescendantTrivia(System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean},System.Boolean)\">\r\n    <summary>\r\n    Get a list of all the trivia associated with the descendant nodes and tokens.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 961
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Boolean : descendIntoTrivia": "",
                  "T:System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean} : descendIntoChildren": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia}": ""
                },
                "Content": "public IEnumerable<SyntaxTrivia> DescendantTrivia(Func<SyntaxNode, bool> descendIntoChildren = null, bool descendIntoTrivia = false)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.DescendantTrivia(System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean},System.Boolean)\">\r\n    <summary>\r\n    Get a list of all the trivia associated with the descendant nodes and tokens.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 961
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNode.DescendantTrivia(System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean},System.Boolean)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.DescendantTrivia(System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Boolean},System.Boolean)\">\r\n    <summary>\r\n    Get a list of all the trivia associated with the descendant nodes and tokens.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxNode : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "protected abstract bool EquivalentToCore(SyntaxNode other);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.EquivalentToCore(Microsoft.CodeAnalysis.SyntaxNode)\">\r\n    <summary>\r\n    Determine if this node is structurally equivalent to another.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 1179
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxNode : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "protected abstract bool EquivalentToCore(SyntaxNode other);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.EquivalentToCore(Microsoft.CodeAnalysis.SyntaxNode)\">\r\n    <summary>\r\n    Determine if this node is structurally equivalent to another.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 1179
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNode.EquivalentToCore(Microsoft.CodeAnalysis.SyntaxNode)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.EquivalentToCore(Microsoft.CodeAnalysis.SyntaxNode)\">\r\n    <summary>\r\n    Determine if this node is structurally equivalent to another.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.TextSpan : span": "",
                  "T:System.Boolean : findInsideTrivia": "",
                  "T:System.Boolean : getInnermostNodeForTie": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxNode": ""
                },
                "Content": "public SyntaxNode FindNode(TextSpan span, bool findInsideTrivia = false, bool getInnermostNodeForTie = false)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.FindNode(Microsoft.CodeAnalysis.Text.TextSpan,System.Boolean,System.Boolean)\">\r\n    <summary>\r\n    Finds the node with the smallest <see cref=\"P:Microsoft.CodeAnalysis.SyntaxNode.FullSpan\"/> that contains <paramref name=\"span\"/>.\r\n    <paramref name=\"getInnermostNodeForTie\"/> is used to determine the behavior in case of a tie (i.e. a node having the same span as its parent).\r\n    If <paramref name=\"getInnermostNodeForTie\"/> is true, then it returns lowest descending node encompassing the given <paramref name=\"span\"/>.\r\n    Otherwise, it returns the outermost node encompassing the given <paramref name=\"span\"/>.\r\n    </summary>\r\n    <remarks>\r\n    TODO: This should probably be reimplemented with <see cref=\"M:Microsoft.CodeAnalysis.SyntaxNode.ChildThatContainsPosition(System.Int32)\"/>\r\n    </remarks>\r\n    <exception cref=\"T:System.ArgumentOutOfRangeException\">This exception is thrown if <see cref=\"P:Microsoft.CodeAnalysis.SyntaxNode.FullSpan\"/> doesn't contain the given span.</exception>\r\n</member>\r\n",
                "StartLine": 830
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.TextSpan : span": "",
                  "T:System.Boolean : findInsideTrivia": "",
                  "T:System.Boolean : getInnermostNodeForTie": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxNode": ""
                },
                "Content": "public SyntaxNode FindNode(TextSpan span, bool findInsideTrivia = false, bool getInnermostNodeForTie = false)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.FindNode(Microsoft.CodeAnalysis.Text.TextSpan,System.Boolean,System.Boolean)\">\r\n    <summary>\r\n    Finds the node with the smallest <see cref=\"P:Microsoft.CodeAnalysis.SyntaxNode.FullSpan\"/> that contains <paramref name=\"span\"/>.\r\n    <paramref name=\"getInnermostNodeForTie\"/> is used to determine the behavior in case of a tie (i.e. a node having the same span as its parent).\r\n    If <paramref name=\"getInnermostNodeForTie\"/> is true, then it returns lowest descending node encompassing the given <paramref name=\"span\"/>.\r\n    Otherwise, it returns the outermost node encompassing the given <paramref name=\"span\"/>.\r\n    </summary>\r\n    <remarks>\r\n    TODO: This should probably be reimplemented with <see cref=\"M:Microsoft.CodeAnalysis.SyntaxNode.ChildThatContainsPosition(System.Int32)\"/>\r\n    </remarks>\r\n    <exception cref=\"T:System.ArgumentOutOfRangeException\">This exception is thrown if <see cref=\"P:Microsoft.CodeAnalysis.SyntaxNode.FullSpan\"/> doesn't contain the given span.</exception>\r\n</member>\r\n",
                "StartLine": 830
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNode.FindNode(Microsoft.CodeAnalysis.Text.TextSpan,System.Boolean,System.Boolean)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.FindNode(Microsoft.CodeAnalysis.Text.TextSpan,System.Boolean,System.Boolean)\">\r\n    <summary>\r\n    Finds the node with the smallest <see cref=\"P:Microsoft.CodeAnalysis.SyntaxNode.FullSpan\"/> that contains <paramref name=\"span\"/>.\r\n    <paramref name=\"getInnermostNodeForTie\"/> is used to determine the behavior in case of a tie (i.e. a node having the same span as its parent).\r\n    If <paramref name=\"getInnermostNodeForTie\"/> is true, then it returns lowest descending node encompassing the given <paramref name=\"span\"/>.\r\n    Otherwise, it returns the outermost node encompassing the given <paramref name=\"span\"/>.\r\n    </summary>\r\n    <remarks>\r\n    TODO: This should probably be reimplemented with <see cref=\"M:Microsoft.CodeAnalysis.SyntaxNode.ChildThatContainsPosition(System.Int32)\"/>\r\n    </remarks>\r\n    <exception cref=\"T:System.ArgumentOutOfRangeException\">This exception is thrown if <see cref=\"P:Microsoft.CodeAnalysis.SyntaxNode.FullSpan\"/> doesn't contain the given span.</exception>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Boolean : findInsideTrivia": "",
                  "T:System.Int32 : position": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxToken": ""
                },
                "Content": "public SyntaxToken FindToken(int position, bool findInsideTrivia = false)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.FindToken(System.Int32,System.Boolean)\">\r\n    <summary>\r\n    Finds a descendant token of this node whose span includes the supplied position. \r\n    </summary>\r\n    <param name=\"position\">The character position of the token relative to the beginning of the file.</param>\r\n    <param name=\"findInsideTrivia\">\r\n    True to return tokens that are part of trivia. If false finds the token whose full span (including trivia)\r\n    includes the position.\r\n    </param>\r\n</member>\r\n",
                "StartLine": 871
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Boolean : findInsideTrivia": "",
                  "T:System.Int32 : position": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxToken": ""
                },
                "Content": "public SyntaxToken FindToken(int position, bool findInsideTrivia = false)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.FindToken(System.Int32,System.Boolean)\">\r\n    <summary>\r\n    Finds a descendant token of this node whose span includes the supplied position. \r\n    </summary>\r\n    <param name=\"position\">The character position of the token relative to the beginning of the file.</param>\r\n    <param name=\"findInsideTrivia\">\r\n    True to return tokens that are part of trivia. If false finds the token whose full span (including trivia)\r\n    includes the position.\r\n    </param>\r\n</member>\r\n",
                "StartLine": 871
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNode.FindToken(System.Int32,System.Boolean)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.FindToken(System.Int32,System.Boolean)\">\r\n    <summary>\r\n    Finds a descendant token of this node whose span includes the supplied position. \r\n    </summary>\r\n    <param name=\"position\">The character position of the token relative to the beginning of the file.</param>\r\n    <param name=\"findInsideTrivia\">\r\n    True to return tokens that are part of trivia. If false finds the token whose full span (including trivia)\r\n    includes the position.\r\n    </param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Boolean : findInsideTrivia": "",
                  "T:System.Int32 : position": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxToken": ""
                },
                "Content": "protected abstract SyntaxToken FindTokenCore(int position, bool findInsideTrivia);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.FindTokenCore(System.Int32,System.Boolean)\">\r\n    <summary>\r\n    Finds a descendant token of this node whose span includes the supplied position. \r\n    </summary>\r\n    <param name=\"position\">The character position of the token relative to the beginning of the file.</param>\r\n    <param name=\"findInsideTrivia\">\r\n    True to return tokens that are part of trivia.\r\n    If false finds the token whose full span (including trivia) includes the position.\r\n    </param>\r\n</member>\r\n",
                "StartLine": 1195
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Boolean : findInsideTrivia": "",
                  "T:System.Int32 : position": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxToken": ""
                },
                "Content": "protected abstract SyntaxToken FindTokenCore(int position, bool findInsideTrivia);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.FindTokenCore(System.Int32,System.Boolean)\">\r\n    <summary>\r\n    Finds a descendant token of this node whose span includes the supplied position. \r\n    </summary>\r\n    <param name=\"position\">The character position of the token relative to the beginning of the file.</param>\r\n    <param name=\"findInsideTrivia\">\r\n    True to return tokens that are part of trivia.\r\n    If false finds the token whose full span (including trivia) includes the position.\r\n    </param>\r\n</member>\r\n",
                "StartLine": 1195
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNode.FindTokenCore(System.Int32,System.Boolean)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.FindTokenCore(System.Int32,System.Boolean)\">\r\n    <summary>\r\n    Finds a descendant token of this node whose span includes the supplied position. \r\n    </summary>\r\n    <param name=\"position\">The character position of the token relative to the beginning of the file.</param>\r\n    <param name=\"findInsideTrivia\">\r\n    True to return tokens that are part of trivia.\r\n    If false finds the token whose full span (including trivia) includes the position.\r\n    </param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Func{Microsoft.CodeAnalysis.SyntaxTrivia,System.Boolean} : stepInto": "",
                  "T:System.Int32 : position": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxToken": ""
                },
                "Content": "protected abstract SyntaxToken FindTokenCore(int position, Func<SyntaxTrivia, bool> stepInto);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.FindTokenCore(System.Int32,System.Func{Microsoft.CodeAnalysis.SyntaxTrivia,System.Boolean})\">\r\n    <summary>\r\n    Finds a descendant token of this node whose span includes the supplied position. \r\n    </summary>\r\n    <param name=\"position\">The character position of the token relative to the beginning of the file.</param>\r\n    <param name=\"stepInto\">\r\n    Applied on every structured trivia. Return false if the tokens included in the trivia should be skipped. \r\n    Pass null to skip all structured trivia.\r\n    </param>\r\n</member>\r\n",
                "StartLine": 1205
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Func{Microsoft.CodeAnalysis.SyntaxTrivia,System.Boolean} : stepInto": "",
                  "T:System.Int32 : position": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxToken": ""
                },
                "Content": "protected abstract SyntaxToken FindTokenCore(int position, Func<SyntaxTrivia, bool> stepInto);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.FindTokenCore(System.Int32,System.Func{Microsoft.CodeAnalysis.SyntaxTrivia,System.Boolean})\">\r\n    <summary>\r\n    Finds a descendant token of this node whose span includes the supplied position. \r\n    </summary>\r\n    <param name=\"position\">The character position of the token relative to the beginning of the file.</param>\r\n    <param name=\"stepInto\">\r\n    Applied on every structured trivia. Return false if the tokens included in the trivia should be skipped. \r\n    Pass null to skip all structured trivia.\r\n    </param>\r\n</member>\r\n",
                "StartLine": 1205
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNode.FindTokenCore(System.Int32,System.Func{Microsoft.CodeAnalysis.SyntaxTrivia,System.Boolean})",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.FindTokenCore(System.Int32,System.Func{Microsoft.CodeAnalysis.SyntaxTrivia,System.Boolean})\">\r\n    <summary>\r\n    Finds a descendant token of this node whose span includes the supplied position. \r\n    </summary>\r\n    <param name=\"position\">The character position of the token relative to the beginning of the file.</param>\r\n    <param name=\"stepInto\">\r\n    Applied on every structured trivia. Return false if the tokens included in the trivia should be skipped. \r\n    Pass null to skip all structured trivia.\r\n    </param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Boolean : findInsideTrivia": "",
                  "T:System.Int32 : position": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTrivia": ""
                },
                "Content": "public SyntaxTrivia FindTrivia(int position, bool findInsideTrivia = false)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.FindTrivia(System.Int32,System.Boolean)\">\r\n    <summary>\r\n    Finds a descendant trivia of this node whose span includes the supplied position.\r\n    </summary>\r\n    <param name=\"position\">The character position of the trivia relative to the beginning of the file.</param>\r\n    <param name=\"findInsideTrivia\">\r\n    True to return tokens that are part of trivia. If false finds the token whose full span (including trivia)\r\n    includes the position.\r\n    </param>\r\n</member>\r\n",
                "StartLine": 953
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Boolean : findInsideTrivia": "",
                  "T:System.Int32 : position": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTrivia": ""
                },
                "Content": "public SyntaxTrivia FindTrivia(int position, bool findInsideTrivia = false)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.FindTrivia(System.Int32,System.Boolean)\">\r\n    <summary>\r\n    Finds a descendant trivia of this node whose span includes the supplied position.\r\n    </summary>\r\n    <param name=\"position\">The character position of the trivia relative to the beginning of the file.</param>\r\n    <param name=\"findInsideTrivia\">\r\n    True to return tokens that are part of trivia. If false finds the token whose full span (including trivia)\r\n    includes the position.\r\n    </param>\r\n</member>\r\n",
                "StartLine": 953
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNode.FindTrivia(System.Int32,System.Boolean)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.FindTrivia(System.Int32,System.Boolean)\">\r\n    <summary>\r\n    Finds a descendant trivia of this node whose span includes the supplied position.\r\n    </summary>\r\n    <param name=\"position\">The character position of the trivia relative to the beginning of the file.</param>\r\n    <param name=\"findInsideTrivia\">\r\n    True to return tokens that are part of trivia. If false finds the token whose full span (including trivia)\r\n    includes the position.\r\n    </param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Boolean : findInsideTrivia": "",
                  "T:System.Int32 : position": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTrivia": ""
                },
                "Content": "protected abstract SyntaxTrivia FindTriviaCore(int position, bool findInsideTrivia);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.FindTriviaCore(System.Int32,System.Boolean)\">\r\n    <summary>\r\n    Finds a descendant trivia of this node whose span includes the supplied position.\r\n    </summary>\r\n    <param name=\"position\">The character position of the trivia relative to the beginning of the file.</param>\r\n    <param name=\"findInsideTrivia\">Whether to search inside structured trivia.</param>\r\n</member>\r\n",
                "StartLine": 1212
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Boolean : findInsideTrivia": "",
                  "T:System.Int32 : position": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTrivia": ""
                },
                "Content": "protected abstract SyntaxTrivia FindTriviaCore(int position, bool findInsideTrivia);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.FindTriviaCore(System.Int32,System.Boolean)\">\r\n    <summary>\r\n    Finds a descendant trivia of this node whose span includes the supplied position.\r\n    </summary>\r\n    <param name=\"position\">The character position of the trivia relative to the beginning of the file.</param>\r\n    <param name=\"findInsideTrivia\">Whether to search inside structured trivia.</param>\r\n</member>\r\n",
                "StartLine": 1212
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNode.FindTriviaCore(System.Int32,System.Boolean)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.FindTriviaCore(System.Int32,System.Boolean)\">\r\n    <summary>\r\n    Finds a descendant trivia of this node whose span includes the supplied position.\r\n    </summary>\r\n    <param name=\"position\">The character position of the trivia relative to the beginning of the file.</param>\r\n    <param name=\"findInsideTrivia\">Whether to search inside structured trivia.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Boolean : ascendOutOfTrivia": "",
                  "T:System.Func{``0,System.Boolean} : predicate": ""
                },
                "Returns": {
                  "!:TNode": ""
                },
                "Content": "public TNode FirstAncestorOrSelf<TNode>(Func<TNode, bool> predicate = null, bool ascendOutOfTrivia = true)where TNode : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.FirstAncestorOrSelf``1(System.Func{``0,System.Boolean},System.Boolean)\">\r\n    <summary>\r\n    Gets the first node of type TNode that matches the predicate.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 721
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Boolean : ascendOutOfTrivia": "",
                  "T:System.Func{``0,System.Boolean} : predicate": ""
                },
                "Returns": {
                  "!:TNode": ""
                },
                "Content": "public TNode FirstAncestorOrSelf<TNode>(Func<TNode, bool> predicate = null, bool ascendOutOfTrivia = true)where TNode : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.FirstAncestorOrSelf``1(System.Func{``0,System.Boolean},System.Boolean)\">\r\n    <summary>\r\n    Gets the first node of type TNode that matches the predicate.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 721
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNode.FirstAncestorOrSelf``1(System.Func{``0,System.Boolean},System.Boolean)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.FirstAncestorOrSelf``1(System.Func{``0,System.Boolean},System.Boolean)\">\r\n    <summary>\r\n    Gets the first node of type TNode that matches the predicate.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxAnnotation : syntaxAnnotation": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}": ""
                },
                "Content": "public IEnumerable<SyntaxNode> GetAnnotatedNodes(SyntaxAnnotation syntaxAnnotation)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.GetAnnotatedNodes(Microsoft.CodeAnalysis.SyntaxAnnotation)\">\r\n    <summary>\r\n    Gets all nodes with the specified annotation.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 1061
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxAnnotation : syntaxAnnotation": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}": ""
                },
                "Content": "public IEnumerable<SyntaxNode> GetAnnotatedNodes(SyntaxAnnotation syntaxAnnotation)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.GetAnnotatedNodes(Microsoft.CodeAnalysis.SyntaxAnnotation)\">\r\n    <summary>\r\n    Gets all nodes with the specified annotation.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 1061
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNode.GetAnnotatedNodes(Microsoft.CodeAnalysis.SyntaxAnnotation)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.GetAnnotatedNodes(Microsoft.CodeAnalysis.SyntaxAnnotation)\">\r\n    <summary>\r\n    Gets all nodes with the specified annotation.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.String : annotationKind": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}": ""
                },
                "Content": "public IEnumerable<SyntaxNode> GetAnnotatedNodes(string annotationKind)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.GetAnnotatedNodes(System.String)\">\r\n    <summary>\r\n    Gets all nodes with the specified annotation kind.\r\n    </summary>\r\n    <param name=\"annotationKind\"></param>\r\n    <returns></returns>\r\n</member>\r\n",
                "StartLine": 1071
              },
              "Syntax": {
                "Parameters": {
                  "T:System.String : annotationKind": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode}": ""
                },
                "Content": "public IEnumerable<SyntaxNode> GetAnnotatedNodes(string annotationKind)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.GetAnnotatedNodes(System.String)\">\r\n    <summary>\r\n    Gets all nodes with the specified annotation kind.\r\n    </summary>\r\n    <param name=\"annotationKind\"></param>\r\n    <returns></returns>\r\n</member>\r\n",
                "StartLine": 1071
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNode.GetAnnotatedNodes(System.String)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.GetAnnotatedNodes(System.String)\">\r\n    <summary>\r\n    Gets all nodes with the specified annotation kind.\r\n    </summary>\r\n    <param name=\"annotationKind\"></param>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxAnnotation : annotation": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNodeOrToken}": ""
                },
                "Content": "public IEnumerable<SyntaxNodeOrToken> GetAnnotatedNodesAndTokens(SyntaxAnnotation annotation)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.GetAnnotatedNodesAndTokens(Microsoft.CodeAnalysis.SyntaxAnnotation)\">\r\n    <summary>\r\n    Gets all nodes and tokens with the specified annotation.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 1052
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxAnnotation : annotation": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNodeOrToken}": ""
                },
                "Content": "public IEnumerable<SyntaxNodeOrToken> GetAnnotatedNodesAndTokens(SyntaxAnnotation annotation)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.GetAnnotatedNodesAndTokens(Microsoft.CodeAnalysis.SyntaxAnnotation)\">\r\n    <summary>\r\n    Gets all nodes and tokens with the specified annotation.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 1052
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNode.GetAnnotatedNodesAndTokens(Microsoft.CodeAnalysis.SyntaxAnnotation)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.GetAnnotatedNodesAndTokens(Microsoft.CodeAnalysis.SyntaxAnnotation)\">\r\n    <summary>\r\n    Gets all nodes and tokens with the specified annotation.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.String : annotationKind": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNodeOrToken}": ""
                },
                "Content": "public IEnumerable<SyntaxNodeOrToken> GetAnnotatedNodesAndTokens(string annotationKind)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.GetAnnotatedNodesAndTokens(System.String)\">\r\n    <summary>\r\n    Gets all nodes and tokens with an annotation of the specified annotation kind.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 1034
              },
              "Syntax": {
                "Parameters": {
                  "T:System.String : annotationKind": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNodeOrToken}": ""
                },
                "Content": "public IEnumerable<SyntaxNodeOrToken> GetAnnotatedNodesAndTokens(string annotationKind)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.GetAnnotatedNodesAndTokens(System.String)\">\r\n    <summary>\r\n    Gets all nodes and tokens with an annotation of the specified annotation kind.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 1034
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNode.GetAnnotatedNodesAndTokens(System.String)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.GetAnnotatedNodesAndTokens(System.String)\">\r\n    <summary>\r\n    Gets all nodes and tokens with an annotation of the specified annotation kind.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Array : annotationKinds": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNodeOrToken}": ""
                },
                "Content": "public IEnumerable<SyntaxNodeOrToken> GetAnnotatedNodesAndTokens(params string[] annotationKinds)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.GetAnnotatedNodesAndTokens(System.String[])\">\r\n    <summary>\r\n    Gets all nodes and tokens with an annotation of the specified annotation kinds.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 1043
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Array : annotationKinds": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNodeOrToken}": ""
                },
                "Content": "public IEnumerable<SyntaxNodeOrToken> GetAnnotatedNodesAndTokens(params string[] annotationKinds)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.GetAnnotatedNodesAndTokens(System.String[])\">\r\n    <summary>\r\n    Gets all nodes and tokens with an annotation of the specified annotation kinds.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 1043
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNode.GetAnnotatedNodesAndTokens(System.String[])",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.GetAnnotatedNodesAndTokens(System.String[])\">\r\n    <summary>\r\n    Gets all nodes and tokens with an annotation of the specified annotation kinds.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxAnnotation : syntaxAnnotation": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken}": ""
                },
                "Content": "public IEnumerable<SyntaxToken> GetAnnotatedTokens(SyntaxAnnotation syntaxAnnotation)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.GetAnnotatedTokens(Microsoft.CodeAnalysis.SyntaxAnnotation)\">\r\n    <summary>\r\n    Gets all tokens with the specified annotation.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 1079
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxAnnotation : syntaxAnnotation": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken}": ""
                },
                "Content": "public IEnumerable<SyntaxToken> GetAnnotatedTokens(SyntaxAnnotation syntaxAnnotation)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.GetAnnotatedTokens(Microsoft.CodeAnalysis.SyntaxAnnotation)\">\r\n    <summary>\r\n    Gets all tokens with the specified annotation.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 1079
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNode.GetAnnotatedTokens(Microsoft.CodeAnalysis.SyntaxAnnotation)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.GetAnnotatedTokens(Microsoft.CodeAnalysis.SyntaxAnnotation)\">\r\n    <summary>\r\n    Gets all tokens with the specified annotation.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.String : annotationKind": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken}": ""
                },
                "Content": "public IEnumerable<SyntaxToken> GetAnnotatedTokens(string annotationKind)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.GetAnnotatedTokens(System.String)\">\r\n    <summary>\r\n    Gets all tokens with the specified annotation kind.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 1087
              },
              "Syntax": {
                "Parameters": {
                  "T:System.String : annotationKind": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken}": ""
                },
                "Content": "public IEnumerable<SyntaxToken> GetAnnotatedTokens(string annotationKind)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.GetAnnotatedTokens(System.String)\">\r\n    <summary>\r\n    Gets all tokens with the specified annotation kind.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 1087
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNode.GetAnnotatedTokens(System.String)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.GetAnnotatedTokens(System.String)\">\r\n    <summary>\r\n    Gets all tokens with the specified annotation kind.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxAnnotation : annotation": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia}": ""
                },
                "Content": "public IEnumerable<SyntaxTrivia> GetAnnotatedTrivia(SyntaxAnnotation annotation)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.GetAnnotatedTrivia(Microsoft.CodeAnalysis.SyntaxAnnotation)\">\r\n    <summary>\r\n    Gets all trivia with the specified annotation.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 1113
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxAnnotation : annotation": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia}": ""
                },
                "Content": "public IEnumerable<SyntaxTrivia> GetAnnotatedTrivia(SyntaxAnnotation annotation)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.GetAnnotatedTrivia(Microsoft.CodeAnalysis.SyntaxAnnotation)\">\r\n    <summary>\r\n    Gets all trivia with the specified annotation.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 1113
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNode.GetAnnotatedTrivia(Microsoft.CodeAnalysis.SyntaxAnnotation)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.GetAnnotatedTrivia(Microsoft.CodeAnalysis.SyntaxAnnotation)\">\r\n    <summary>\r\n    Gets all trivia with the specified annotation.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.String : annotationKind": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia}": ""
                },
                "Content": "public IEnumerable<SyntaxTrivia> GetAnnotatedTrivia(string annotationKind)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.GetAnnotatedTrivia(System.String)\">\r\n    <summary>\r\n    Gets all trivia with an annotation of the specified annotation kind.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 1095
              },
              "Syntax": {
                "Parameters": {
                  "T:System.String : annotationKind": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia}": ""
                },
                "Content": "public IEnumerable<SyntaxTrivia> GetAnnotatedTrivia(string annotationKind)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.GetAnnotatedTrivia(System.String)\">\r\n    <summary>\r\n    Gets all trivia with an annotation of the specified annotation kind.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 1095
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNode.GetAnnotatedTrivia(System.String)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.GetAnnotatedTrivia(System.String)\">\r\n    <summary>\r\n    Gets all trivia with an annotation of the specified annotation kind.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Array : annotationKinds": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia}": ""
                },
                "Content": "public IEnumerable<SyntaxTrivia> GetAnnotatedTrivia(params string[] annotationKinds)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.GetAnnotatedTrivia(System.String[])\">\r\n    <summary>\r\n    Gets all trivia with an annotation of the specified annotation kinds.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 1104
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Array : annotationKinds": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia}": ""
                },
                "Content": "public IEnumerable<SyntaxTrivia> GetAnnotatedTrivia(params string[] annotationKinds)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.GetAnnotatedTrivia(System.String[])\">\r\n    <summary>\r\n    Gets all trivia with an annotation of the specified annotation kinds.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 1104
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNode.GetAnnotatedTrivia(System.String[])",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.GetAnnotatedTrivia(System.String[])\">\r\n    <summary>\r\n    Gets all trivia with an annotation of the specified annotation kinds.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{System.String} : annotationKinds": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation}": ""
                },
                "Content": "public IEnumerable<SyntaxAnnotation> GetAnnotations(IEnumerable<string> annotationKinds)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.GetAnnotations(System.Collections.Generic.IEnumerable{System.String})\">\r\n    <summary>\r\n    Gets all the annotations with the specified annotation kinds. \r\n    </summary>\r\n</member>\r\n",
                "StartLine": 1021
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{System.String} : annotationKinds": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation}": ""
                },
                "Content": "public IEnumerable<SyntaxAnnotation> GetAnnotations(IEnumerable<string> annotationKinds)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.GetAnnotations(System.Collections.Generic.IEnumerable{System.String})\">\r\n    <summary>\r\n    Gets all the annotations with the specified annotation kinds. \r\n    </summary>\r\n</member>\r\n",
                "StartLine": 1021
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNode.GetAnnotations(System.Collections.Generic.IEnumerable{System.String})",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.GetAnnotations(System.Collections.Generic.IEnumerable{System.String})\">\r\n    <summary>\r\n    Gets all the annotations with the specified annotation kinds. \r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.String : annotationKind": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation}": ""
                },
                "Content": "public IEnumerable<SyntaxAnnotation> GetAnnotations(string annotationKind)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.GetAnnotations(System.String)\">\r\n    <summary>\r\n    Gets all the annotations with the specified annotation kind. \r\n    </summary>\r\n</member>\r\n",
                "StartLine": 1013
              },
              "Syntax": {
                "Parameters": {
                  "T:System.String : annotationKind": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation}": ""
                },
                "Content": "public IEnumerable<SyntaxAnnotation> GetAnnotations(string annotationKind)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.GetAnnotations(System.String)\">\r\n    <summary>\r\n    Gets all the annotations with the specified annotation kind. \r\n    </summary>\r\n</member>\r\n",
                "StartLine": 1013
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNode.GetAnnotations(System.String)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.GetAnnotations(System.String)\">\r\n    <summary>\r\n    Gets all the annotations with the specified annotation kind. \r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Diagnostic}": ""
                },
                "Content": "public IEnumerable<Diagnostic> GetDiagnostics()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.GetDiagnostics\">\r\n    <summary>\r\n    Gets a list of all the diagnostics in the sub tree that has this node as its root.\r\n    This method does not filter diagnostics based on #pragmas and compiler options\r\n    like nowarn, warnaserror etc.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 598
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Diagnostic}": ""
                },
                "Content": "public IEnumerable<Diagnostic> GetDiagnostics()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.GetDiagnostics\">\r\n    <summary>\r\n    Gets a list of all the diagnostics in the sub tree that has this node as its root.\r\n    This method does not filter diagnostics based on #pragmas and compiler options\r\n    like nowarn, warnaserror etc.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 598
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNode.GetDiagnostics",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.GetDiagnostics\">\r\n    <summary>\r\n    Gets a list of all the diagnostics in the sub tree that has this node as its root.\r\n    This method does not filter diagnostics based on #pragmas and compiler options\r\n    like nowarn, warnaserror etc.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Boolean : includeDirectives": "",
                  "T:System.Boolean : includeDocumentationComments": "",
                  "T:System.Boolean : includeSkipped": "",
                  "T:System.Boolean : includeZeroWidth": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxToken": ""
                },
                "Content": "public SyntaxToken GetFirstToken(bool includeZeroWidth = false, bool includeSkipped = false, bool includeDirectives = false, bool includeDocumentationComments = false)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.GetFirstToken(System.Boolean,System.Boolean,System.Boolean,System.Boolean)\">\r\n    <summary>\r\n    Gets the first token of the tree rooted by this node. Skips zero-width tokens.\r\n    </summary>\r\n    <returns>The first token or <c>default(SyntaxToken)</c> if it doesn't exist.</returns>\r\n</member>\r\n",
                "StartLine": 880
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Boolean : includeDirectives": "",
                  "T:System.Boolean : includeDocumentationComments": "",
                  "T:System.Boolean : includeSkipped": "",
                  "T:System.Boolean : includeZeroWidth": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxToken": ""
                },
                "Content": "public SyntaxToken GetFirstToken(bool includeZeroWidth = false, bool includeSkipped = false, bool includeDirectives = false, bool includeDocumentationComments = false)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.GetFirstToken(System.Boolean,System.Boolean,System.Boolean,System.Boolean)\">\r\n    <summary>\r\n    Gets the first token of the tree rooted by this node. Skips zero-width tokens.\r\n    </summary>\r\n    <returns>The first token or <c>default(SyntaxToken)</c> if it doesn't exist.</returns>\r\n</member>\r\n",
                "StartLine": 880
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNode.GetFirstToken(System.Boolean,System.Boolean,System.Boolean,System.Boolean)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.GetFirstToken(System.Boolean,System.Boolean,System.Boolean,System.Boolean)\">\r\n    <summary>\r\n    Gets the first token of the tree rooted by this node. Skips zero-width tokens.\r\n    </summary>\r\n    <returns>The first token or <c>default(SyntaxToken)</c> if it doesn't exist.</returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Boolean : includeDirectives": "",
                  "T:System.Boolean : includeDocumentationComments": "",
                  "T:System.Boolean : includeSkipped": "",
                  "T:System.Boolean : includeZeroWidth": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxToken": ""
                },
                "Content": "public SyntaxToken GetLastToken(bool includeZeroWidth = false, bool includeSkipped = false, bool includeDirectives = false, bool includeDocumentationComments = false)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.GetLastToken(System.Boolean,System.Boolean,System.Boolean,System.Boolean)\">\r\n    <summary>\r\n    Gets the last token of the tree rooted by this node. Skips zero-width tokens.\r\n    </summary>\r\n    <returns>The last token or <c>default(SyntaxToken)</c> if it doesn't exist.</returns>\r\n</member>\r\n",
                "StartLine": 889
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Boolean : includeDirectives": "",
                  "T:System.Boolean : includeDocumentationComments": "",
                  "T:System.Boolean : includeSkipped": "",
                  "T:System.Boolean : includeZeroWidth": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxToken": ""
                },
                "Content": "public SyntaxToken GetLastToken(bool includeZeroWidth = false, bool includeSkipped = false, bool includeDirectives = false, bool includeDocumentationComments = false)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.GetLastToken(System.Boolean,System.Boolean,System.Boolean,System.Boolean)\">\r\n    <summary>\r\n    Gets the last token of the tree rooted by this node. Skips zero-width tokens.\r\n    </summary>\r\n    <returns>The last token or <c>default(SyntaxToken)</c> if it doesn't exist.</returns>\r\n</member>\r\n",
                "StartLine": 889
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNode.GetLastToken(System.Boolean,System.Boolean,System.Boolean,System.Boolean)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.GetLastToken(System.Boolean,System.Boolean,System.Boolean,System.Boolean)\">\r\n    <summary>\r\n    Gets the last token of the tree rooted by this node. Skips zero-width tokens.\r\n    </summary>\r\n    <returns>The last token or <c>default(SyntaxToken)</c> if it doesn't exist.</returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTriviaList": ""
                },
                "Content": "public SyntaxTriviaList GetLeadingTrivia()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.GetLeadingTrivia\">\r\n    <summary>\r\n    The list of trivia that appears before this node in the source code and are attached to a token that is a\r\n    descendant of this node.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 931
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTriviaList": ""
                },
                "Content": "public SyntaxTriviaList GetLeadingTrivia()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.GetLeadingTrivia\">\r\n    <summary>\r\n    The list of trivia that appears before this node in the source code and are attached to a token that is a\r\n    descendant of this node.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 931
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNode.GetLeadingTrivia",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.GetLeadingTrivia\">\r\n    <summary>\r\n    The list of trivia that appears before this node in the source code and are attached to a token that is a\r\n    descendant of this node.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Location": ""
                },
                "Content": "public Location GetLocation()",
                "XmlDocumentation": "",
                "StartLine": 588
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Location": ""
                },
                "Content": "public Location GetLocation()",
                "XmlDocumentation": "",
                "StartLine": 588
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNode.GetLocation",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "!:T : field": "",
                  "T:System.Int32 : slot": ""
                },
                "Returns": {
                  "!:T": ""
                },
                "Content": "protected T GetRed<T>(ref T field, int slot)where T : SyntaxNode",
                "XmlDocumentation": "",
                "StartLine": 225
              },
              "Syntax": {
                "Parameters": {
                  "!:T : field": "",
                  "T:System.Int32 : slot": ""
                },
                "Returns": {
                  "!:T": ""
                },
                "Content": "protected T GetRed<T>(ref T field, int slot)where T : SyntaxNode",
                "XmlDocumentation": "",
                "StartLine": 225
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNode.GetRed``1(``0@,System.Int32)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "!:T : field": ""
                },
                "Returns": {
                  "!:T": ""
                },
                "Content": "protected T GetRedAtZero<T>(ref T field)where T : SyntaxNode",
                "XmlDocumentation": "",
                "StartLine": 243
              },
              "Syntax": {
                "Parameters": {
                  "!:T : field": ""
                },
                "Returns": {
                  "!:T": ""
                },
                "Content": "protected T GetRedAtZero<T>(ref T field)where T : SyntaxNode",
                "XmlDocumentation": "",
                "StartLine": 243
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNode.GetRedAtZero``1(``0@)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxReference": ""
                },
                "Content": "public SyntaxReference GetReference()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.GetReference\">\r\n    <summary>\r\n    Gets an SyntaxReference for this syntax node. CommonSyntaxReferences can be used to\r\n    regain access to a syntax node without keeping the entire tree and source text in\r\n    memory.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 608
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxReference": ""
                },
                "Content": "public SyntaxReference GetReference()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.GetReference\">\r\n    <summary>\r\n    Gets an SyntaxReference for this syntax node. CommonSyntaxReferences can be used to\r\n    regain access to a syntax node without keeping the entire tree and source text in\r\n    memory.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 608
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNode.GetReference",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.GetReference\">\r\n    <summary>\r\n    Gets an SyntaxReference for this syntax node. CommonSyntaxReferences can be used to\r\n    regain access to a syntax node without keeping the entire tree and source text in\r\n    memory.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.SourceHashAlgorithm : checksumAlgorithm": "",
                  "T:System.Text.Encoding : encoding": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Text.SourceText": ""
                },
                "Content": "public SourceText GetText(Encoding encoding = null, SourceHashAlgorithm checksumAlgorithm = SourceHashAlgorithm.Sha1)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.GetText(System.Text.Encoding,Microsoft.CodeAnalysis.Text.SourceHashAlgorithm)\">\r\n    <summary>\r\n    Gets the full text of this node as an new <see cref=\"T:Microsoft.CodeAnalysis.Text.SourceText\"/> instance.\r\n    </summary>\r\n    <param name=\"encoding\">\r\n    Encoding of the file that the text was read from or is going to be saved to.\r\n    <c>null</c> if the encoding is unspecified.\r\n    If the encoding is not specified the <see cref=\"T:Microsoft.CodeAnalysis.Text.SourceText\"/> isn't debuggable.\r\n    If an encoding-less <see cref=\"T:Microsoft.CodeAnalysis.Text.SourceText\"/> is written to a file a <see cref=\"P:System.Text.Encoding.UTF8\"/> shall be used as a default.\r\n    </param>\r\n    <param name=\"checksumAlgorithm\">\r\n    Hash algorithm to use to calculate checksum of the text that's saved to PDB.\r\n    </param>\r\n    <exception cref=\"T:System.ArgumentException\"><paramref name=\"checksumAlgorithm\"/> is not supported.</exception>\r\n</member>\r\n",
                "StartLine": 376
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.SourceHashAlgorithm : checksumAlgorithm": "",
                  "T:System.Text.Encoding : encoding": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Text.SourceText": ""
                },
                "Content": "public SourceText GetText(Encoding encoding = null, SourceHashAlgorithm checksumAlgorithm = SourceHashAlgorithm.Sha1)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.GetText(System.Text.Encoding,Microsoft.CodeAnalysis.Text.SourceHashAlgorithm)\">\r\n    <summary>\r\n    Gets the full text of this node as an new <see cref=\"T:Microsoft.CodeAnalysis.Text.SourceText\"/> instance.\r\n    </summary>\r\n    <param name=\"encoding\">\r\n    Encoding of the file that the text was read from or is going to be saved to.\r\n    <c>null</c> if the encoding is unspecified.\r\n    If the encoding is not specified the <see cref=\"T:Microsoft.CodeAnalysis.Text.SourceText\"/> isn't debuggable.\r\n    If an encoding-less <see cref=\"T:Microsoft.CodeAnalysis.Text.SourceText\"/> is written to a file a <see cref=\"P:System.Text.Encoding.UTF8\"/> shall be used as a default.\r\n    </param>\r\n    <param name=\"checksumAlgorithm\">\r\n    Hash algorithm to use to calculate checksum of the text that's saved to PDB.\r\n    </param>\r\n    <exception cref=\"T:System.ArgumentException\"><paramref name=\"checksumAlgorithm\"/> is not supported.</exception>\r\n</member>\r\n",
                "StartLine": 376
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNode.GetText(System.Text.Encoding,Microsoft.CodeAnalysis.Text.SourceHashAlgorithm)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.GetText(System.Text.Encoding,Microsoft.CodeAnalysis.Text.SourceHashAlgorithm)\">\r\n    <summary>\r\n    Gets the full text of this node as an new <see cref=\"T:Microsoft.CodeAnalysis.Text.SourceText\"/> instance.\r\n    </summary>\r\n    <param name=\"encoding\">\r\n    Encoding of the file that the text was read from or is going to be saved to.\r\n    <c>null</c> if the encoding is unspecified.\r\n    If the encoding is not specified the <see cref=\"T:Microsoft.CodeAnalysis.Text.SourceText\"/> isn't debuggable.\r\n    If an encoding-less <see cref=\"T:Microsoft.CodeAnalysis.Text.SourceText\"/> is written to a file a <see cref=\"P:System.Text.Encoding.UTF8\"/> shall be used as a default.\r\n    </param>\r\n    <param name=\"checksumAlgorithm\">\r\n    Hash algorithm to use to calculate checksum of the text that's saved to PDB.\r\n    </param>\r\n    <exception cref=\"T:System.ArgumentException\"><paramref name=\"checksumAlgorithm\"/> is not supported.</exception>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTriviaList": ""
                },
                "Content": "public SyntaxTriviaList GetTrailingTrivia()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.GetTrailingTrivia\">\r\n    <summary>\r\n    The list of trivia that appears after this node in the source code and are attached to a token that is a\r\n    descendant of this node.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 940
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTriviaList": ""
                },
                "Content": "public SyntaxTriviaList GetTrailingTrivia()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.GetTrailingTrivia\">\r\n    <summary>\r\n    The list of trivia that appears after this node in the source code and are attached to a token that is a\r\n    descendant of this node.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 940
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNode.GetTrailingTrivia",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.GetTrailingTrivia\">\r\n    <summary>\r\n    The list of trivia that appears after this node in the source code and are attached to a token that is a\r\n    descendant of this node.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxAnnotation : annotation": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool HasAnnotation(SyntaxAnnotation annotation)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.HasAnnotation(Microsoft.CodeAnalysis.SyntaxAnnotation)\">\r\n    <summary>\r\n    Determines whether this node has the specific annotation.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 1005
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxAnnotation : annotation": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool HasAnnotation(SyntaxAnnotation annotation)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.HasAnnotation(Microsoft.CodeAnalysis.SyntaxAnnotation)\">\r\n    <summary>\r\n    Determines whether this node has the specific annotation.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 1005
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNode.HasAnnotation(Microsoft.CodeAnalysis.SyntaxAnnotation)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.HasAnnotation(Microsoft.CodeAnalysis.SyntaxAnnotation)\">\r\n    <summary>\r\n    Determines whether this node has the specific annotation.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{System.String} : annotationKinds": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool HasAnnotations(IEnumerable<string> annotationKinds)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.HasAnnotations(System.Collections.Generic.IEnumerable{System.String})\">\r\n    <summary>\r\n    Determines whether this node has any annotations with any of the specific annotation kinds.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 997
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{System.String} : annotationKinds": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool HasAnnotations(IEnumerable<string> annotationKinds)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.HasAnnotations(System.Collections.Generic.IEnumerable{System.String})\">\r\n    <summary>\r\n    Determines whether this node has any annotations with any of the specific annotation kinds.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 997
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNode.HasAnnotations(System.Collections.Generic.IEnumerable{System.String})",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.HasAnnotations(System.Collections.Generic.IEnumerable{System.String})\">\r\n    <summary>\r\n    Determines whether this node has any annotations with any of the specific annotation kinds.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.String : annotationKind": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool HasAnnotations(string annotationKind)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.HasAnnotations(System.String)\">\r\n    <summary>\r\n    Determines whether this node has any annotations with the specific annotation kind.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 989
              },
              "Syntax": {
                "Parameters": {
                  "T:System.String : annotationKind": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool HasAnnotations(string annotationKind)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.HasAnnotations(System.String)\">\r\n    <summary>\r\n    Determines whether this node has any annotations with the specific annotation kind.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 989
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNode.HasAnnotations(System.String)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.HasAnnotations(System.String)\">\r\n    <summary>\r\n    Determines whether this node has any annotations with the specific annotation kind.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxNode : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool IsEquivalentTo(SyntaxNode other)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.IsEquivalentTo(Microsoft.CodeAnalysis.SyntaxNode)\">\r\n    <summary>\r\n    Determine whether this node is structurally equivalent to another.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 386
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxNode : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool IsEquivalentTo(SyntaxNode other)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.IsEquivalentTo(Microsoft.CodeAnalysis.SyntaxNode)\">\r\n    <summary>\r\n    Determine whether this node is structurally equivalent to another.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 386
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNode.IsEquivalentTo(Microsoft.CodeAnalysis.SyntaxNode)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.IsEquivalentTo(Microsoft.CodeAnalysis.SyntaxNode)\">\r\n    <summary>\r\n    Determine whether this node is structurally equivalent to another.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxNode : node": "",
                  "T:System.Boolean : topLevel": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool IsEquivalentTo(SyntaxNode node, bool topLevel = false)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.IsEquivalentTo(Microsoft.CodeAnalysis.SyntaxNode,System.Boolean)\">\r\n    <summary>\r\n    Determines if two nodes are the same, disregarding trivia differences.\r\n    </summary>\r\n    <param name=\"node\">The node to compare against.</param>\r\n    <param name=\"topLevel\"> If true then the nodes are equivalent if the contained nodes and\r\n    tokens declaring metadata visible symbolic information are equivalent, ignoring any\r\n    differences of nodes inside method bodies or initializer expressions, otherwise all\r\n    nodes and tokens must be equivalent. \r\n    </param>\r\n</member>\r\n",
                "StartLine": 1167
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxNode : node": "",
                  "T:System.Boolean : topLevel": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool IsEquivalentTo(SyntaxNode node, bool topLevel = false)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.IsEquivalentTo(Microsoft.CodeAnalysis.SyntaxNode,System.Boolean)\">\r\n    <summary>\r\n    Determines if two nodes are the same, disregarding trivia differences.\r\n    </summary>\r\n    <param name=\"node\">The node to compare against.</param>\r\n    <param name=\"topLevel\"> If true then the nodes are equivalent if the contained nodes and\r\n    tokens declaring metadata visible symbolic information are equivalent, ignoring any\r\n    differences of nodes inside method bodies or initializer expressions, otherwise all\r\n    nodes and tokens must be equivalent. \r\n    </param>\r\n</member>\r\n",
                "StartLine": 1167
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNode.IsEquivalentTo(Microsoft.CodeAnalysis.SyntaxNode,System.Boolean)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.IsEquivalentTo(Microsoft.CodeAnalysis.SyntaxNode,System.Boolean)\">\r\n    <summary>\r\n    Determines if two nodes are the same, disregarding trivia differences.\r\n    </summary>\r\n    <param name=\"node\">The node to compare against.</param>\r\n    <param name=\"topLevel\"> If true then the nodes are equivalent if the contained nodes and\r\n    tokens declaring metadata visible symbolic information are equivalent, ignoring any\r\n    differences of nodes inside method bodies or initializer expressions, otherwise all\r\n    nodes and tokens must be equivalent. \r\n    </param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxNode : node": "",
                  "T:System.Boolean : topLevel": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "protected abstract bool IsEquivalentToCore(SyntaxNode node, bool topLevel = false);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.IsEquivalentToCore(Microsoft.CodeAnalysis.SyntaxNode,System.Boolean)\">\r\n    <summary>\r\n    Determines if two nodes are the same, disregarding trivia differences.\r\n    </summary>\r\n    <param name=\"node\">The node to compare against.</param>\r\n    <param name=\"topLevel\"> If true then the nodes are equivalent if the contained nodes and\r\n    tokens declaring metadata visible symbolic information are equivalent, ignoring any\r\n    differences of nodes inside method bodies or initializer expressions, otherwise all\r\n    nodes and tokens must be equivalent. \r\n    </param>\r\n</member>\r\n",
                "StartLine": 1251
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxNode : node": "",
                  "T:System.Boolean : topLevel": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "protected abstract bool IsEquivalentToCore(SyntaxNode node, bool topLevel = false);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.IsEquivalentToCore(Microsoft.CodeAnalysis.SyntaxNode,System.Boolean)\">\r\n    <summary>\r\n    Determines if two nodes are the same, disregarding trivia differences.\r\n    </summary>\r\n    <param name=\"node\">The node to compare against.</param>\r\n    <param name=\"topLevel\"> If true then the nodes are equivalent if the contained nodes and\r\n    tokens declaring metadata visible symbolic information are equivalent, ignoring any\r\n    differences of nodes inside method bodies or initializer expressions, otherwise all\r\n    nodes and tokens must be equivalent. \r\n    </param>\r\n</member>\r\n",
                "StartLine": 1251
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNode.IsEquivalentToCore(Microsoft.CodeAnalysis.SyntaxNode,System.Boolean)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.IsEquivalentToCore(Microsoft.CodeAnalysis.SyntaxNode,System.Boolean)\">\r\n    <summary>\r\n    Determines if two nodes are the same, disregarding trivia differences.\r\n    </summary>\r\n    <param name=\"node\">The node to compare against.</param>\r\n    <param name=\"topLevel\"> If true then the nodes are equivalent if the contained nodes and\r\n    tokens declaring metadata visible symbolic information are equivalent, ignoring any\r\n    differences of nodes inside method bodies or initializer expressions, otherwise all\r\n    nodes and tokens must be equivalent. \r\n    </param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool IsPartOfStructuredTrivia()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.IsPartOfStructuredTrivia\">\r\n    <summary>\r\n    Determines whether this node is a descendant of a structured trivia.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 408
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool IsPartOfStructuredTrivia()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.IsPartOfStructuredTrivia\">\r\n    <summary>\r\n    Determines whether this node is a descendant of a structured trivia.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 408
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNode.IsPartOfStructuredTrivia",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.IsPartOfStructuredTrivia\">\r\n    <summary>\r\n    Determines whether this node is a descendant of a structured trivia.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.IO.Stream : stream": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public abstract void SerializeTo(Stream stream, CancellationToken cancellationToken = default (CancellationToken));",
                "XmlDocumentation": "",
                "StartLine": 1172
              },
              "Syntax": {
                "Parameters": {
                  "T:System.IO.Stream : stream": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public abstract void SerializeTo(Stream stream, CancellationToken cancellationToken = default (CancellationToken));",
                "XmlDocumentation": "",
                "StartLine": 1172
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNode.SerializeTo(System.IO.Stream,System.Threading.CancellationToken)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public abstract string ToFullString();",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.ToFullString\">\r\n    <summary>\r\n    Returns full string representation of this node including its leading and trailing trivia.\r\n    </summary>\r\n    <returns>The full string representation of this node including its leading and trailing trivia.</returns>\r\n    <remarks>The length of the returned string is always the same as FullSpan.Length</remarks>\r\n</member>\r\n",
                "StartLine": 356
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public abstract string ToFullString();",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.ToFullString\">\r\n    <summary>\r\n    Returns full string representation of this node including its leading and trailing trivia.\r\n    </summary>\r\n    <returns>The full string representation of this node including its leading and trailing trivia.</returns>\r\n    <remarks>The length of the returned string is always the same as FullSpan.Length</remarks>\r\n</member>\r\n",
                "StartLine": 356
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNode.ToFullString",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.ToFullString\">\r\n    <summary>\r\n    Returns full string representation of this node including its leading and trailing trivia.\r\n    </summary>\r\n    <returns>The full string representation of this node including its leading and trailing trivia.</returns>\r\n    <remarks>The length of the returned string is always the same as FullSpan.Length</remarks>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public abstract override string ToString();",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.ToString\">\r\n    <summary>\r\n    Returns the string representation of this node, not including its leading and trailing trivia.\r\n    </summary>\r\n    <returns>The string representation of this node, not including its leading and trailing trivia.</returns>\r\n    <remarks>The length of the returned string is always the same as Span.Length</remarks>\r\n</member>\r\n",
                "StartLine": 349
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public abstract override string ToString();",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.ToString\">\r\n    <summary>\r\n    Returns the string representation of this node, not including its leading and trailing trivia.\r\n    </summary>\r\n    <returns>The string representation of this node, not including its leading and trailing trivia.</returns>\r\n    <remarks>The length of the returned string is always the same as Span.Length</remarks>\r\n</member>\r\n",
                "StartLine": 349
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNode.ToString",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.ToString\">\r\n    <summary>\r\n    Returns the string representation of this node, not including its leading and trailing trivia.\r\n    </summary>\r\n    <returns>The string representation of this node, not including its leading and trailing trivia.</returns>\r\n    <remarks>The length of the returned string is always the same as Span.Length</remarks>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.IO.TextWriter : writer": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public abstract void WriteTo(TextWriter writer);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.WriteTo(System.IO.TextWriter)\">\r\n    <summary>\r\n    Writes the full text of this node to the specified <see cref=\"T:System.IO.TextWriter\"/>.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 361
              },
              "Syntax": {
                "Parameters": {
                  "T:System.IO.TextWriter : writer": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public abstract void WriteTo(TextWriter writer);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.WriteTo(System.IO.TextWriter)\">\r\n    <summary>\r\n    Writes the full text of this node to the specified <see cref=\"T:System.IO.TextWriter\"/>.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 361
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNode.WriteTo(System.IO.TextWriter)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNode.WriteTo(System.IO.TextWriter)\">\r\n    <summary>\r\n    Writes the full text of this node to the specified <see cref=\"T:System.IO.TextWriter\"/>.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool ContainsAnnotations",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNode.ContainsAnnotations\">\r\n    <summary>\r\n    Determines whether this node or any sub node, token or trivia has annotations.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 981
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool ContainsAnnotations",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNode.ContainsAnnotations\">\r\n    <summary>\r\n    Determines whether this node or any sub node, token or trivia has annotations.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 981
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxNode.ContainsAnnotations",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNode.ContainsAnnotations\">\r\n    <summary>\r\n    Determines whether this node or any sub node, token or trivia has annotations.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool ContainsDiagnostics",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNode.ContainsDiagnostics\">\r\n    <summary>\r\n    Determines whether this node or any of its descendant nodes, tokens or trivia have any diagnostics on them. \r\n    </summary>\r\n</member>\r\n",
                "StartLine": 466
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool ContainsDiagnostics",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNode.ContainsDiagnostics\">\r\n    <summary>\r\n    Determines whether this node or any of its descendant nodes, tokens or trivia have any diagnostics on them. \r\n    </summary>\r\n</member>\r\n",
                "StartLine": 466
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxNode.ContainsDiagnostics",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNode.ContainsDiagnostics\">\r\n    <summary>\r\n    Determines whether this node or any of its descendant nodes, tokens or trivia have any diagnostics on them. \r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool ContainsDirectives",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNode.ContainsDirectives\">\r\n    <summary>\r\n    Determines whether this node has any descendant preprocessor directives.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 455
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool ContainsDirectives",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNode.ContainsDirectives\">\r\n    <summary>\r\n    Determines whether this node has any descendant preprocessor directives.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 455
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxNode.ContainsDirectives",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNode.ContainsDirectives\">\r\n    <summary>\r\n    Determines whether this node has any descendant preprocessor directives.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool ContainsSkippedText",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNode.ContainsSkippedText\">\r\n    <summary>\r\n    Determines whether this node has any descendant skipped text.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 444
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool ContainsSkippedText",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNode.ContainsSkippedText\">\r\n    <summary>\r\n    Determines whether this node has any descendant skipped text.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 444
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxNode.ContainsSkippedText",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNode.ContainsSkippedText\">\r\n    <summary>\r\n    Determines whether this node has any descendant skipped text.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Text.TextSpan",
                "Content": "public TextSpan FullSpan",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNode.FullSpan\">\r\n    <summary>\r\n    The absolute span of this node in characters, including its leading and trailing trivia.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 108
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Text.TextSpan",
                "Content": "public TextSpan FullSpan",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNode.FullSpan\">\r\n    <summary>\r\n    The absolute span of this node in characters, including its leading and trailing trivia.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 108
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxNode.FullSpan",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNode.FullSpan\">\r\n    <summary>\r\n    The absolute span of this node in characters, including its leading and trailing trivia.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool HasLeadingTrivia",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNode.HasLeadingTrivia\">\r\n    <summary>\r\n    Determines whether this node has any leading trivia.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 511
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool HasLeadingTrivia",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNode.HasLeadingTrivia\">\r\n    <summary>\r\n    Determines whether this node has any leading trivia.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 511
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxNode.HasLeadingTrivia",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNode.HasLeadingTrivia\">\r\n    <summary>\r\n    Determines whether this node has any leading trivia.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool HasStructuredTrivia",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNode.HasStructuredTrivia\">\r\n    <summary>\r\n    Determines whether a descendant trivia of this node is structured.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 433
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool HasStructuredTrivia",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNode.HasStructuredTrivia\">\r\n    <summary>\r\n    Determines whether a descendant trivia of this node is structured.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 433
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxNode.HasStructuredTrivia",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNode.HasStructuredTrivia\">\r\n    <summary>\r\n    Determines whether a descendant trivia of this node is structured.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool HasTrailingTrivia",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNode.HasTrailingTrivia\">\r\n    <summary>\r\n    Determines whether this node has any trailing trivia.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 522
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool HasTrailingTrivia",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNode.HasTrailingTrivia\">\r\n    <summary>\r\n    Determines whether this node has any trailing trivia.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 522
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxNode.HasTrailingTrivia",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNode.HasTrailingTrivia\">\r\n    <summary>\r\n    Determines whether this node has any trailing trivia.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool IsMissing",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNode.IsMissing\">\r\n    <summary>\r\n    Determines whether the node represents a language construct that was actually parsed\r\n    from the source code. Missing nodes are generated by the parser in error scenarios to\r\n    represent constructs that should have been present in the source code in order to\r\n    compile successfully but were actually missing.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 397
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool IsMissing",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNode.IsMissing\">\r\n    <summary>\r\n    Determines whether the node represents a language construct that was actually parsed\r\n    from the source code. Missing nodes are generated by the parser in error scenarios to\r\n    represent constructs that should have been present in the source code in order to\r\n    compile successfully but were actually missing.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 397
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxNode.IsMissing",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNode.IsMissing\">\r\n    <summary>\r\n    Determines whether the node represents a language construct that was actually parsed\r\n    from the source code. Missing nodes are generated by the parser in error scenarios to\r\n    represent constructs that should have been present in the source code in order to\r\n    compile successfully but were actually missing.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool IsStructuredTrivia",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNode.IsStructuredTrivia\">\r\n    <summary>\r\n    Determines whether this node represents a structured trivia.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 422
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool IsStructuredTrivia",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNode.IsStructuredTrivia\">\r\n    <summary>\r\n    Determines whether this node represents a structured trivia.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 422
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxNode.IsStructuredTrivia",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNode.IsStructuredTrivia\">\r\n    <summary>\r\n    Determines whether this node represents a structured trivia.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.String",
                "Content": "protected abstract string KindText",
                "XmlDocumentation": "",
                "StartLine": 63
              },
              "Syntax": {
                "PropertyType": "T:System.String",
                "Content": "protected abstract string KindText",
                "XmlDocumentation": "",
                "StartLine": 63
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxNode.KindText",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": ""
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.String",
                "Content": "public abstract string Language",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNode.Language\">\r\n    <summary>\r\n    The language name that this node is syntax of.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 68
              },
              "Syntax": {
                "PropertyType": "T:System.String",
                "Content": "public abstract string Language",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNode.Language\">\r\n    <summary>\r\n    The language name that this node is syntax of.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 68
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxNode.Language",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNode.Language\">\r\n    <summary>\r\n    The language name that this node is syntax of.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SyntaxNode",
                "Content": "public SyntaxNode Parent",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNode.Parent\">\r\n    <summary>\r\n    The node that contains this node in its <see cref=\"M:Microsoft.CodeAnalysis.SyntaxNode.ChildNodes\"/> collection.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 628
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SyntaxNode",
                "Content": "public SyntaxNode Parent",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNode.Parent\">\r\n    <summary>\r\n    The node that contains this node in its <see cref=\"M:Microsoft.CodeAnalysis.SyntaxNode.ChildNodes\"/> collection.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 628
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxNode.Parent",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNode.Parent\">\r\n    <summary>\r\n    The node that contains this node in its <see cref=\"M:Microsoft.CodeAnalysis.SyntaxNode.ChildNodes\"/> collection.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SyntaxTrivia",
                "Content": "public virtual SyntaxTrivia ParentTrivia",
                "XmlDocumentation": "",
                "StartLine": 636
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SyntaxTrivia",
                "Content": "public virtual SyntaxTrivia ParentTrivia",
                "XmlDocumentation": "",
                "StartLine": 636
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxNode.ParentTrivia",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": ""
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Int32",
                "Content": "public int RawKind",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNode.RawKind\">\r\n    <summary>\r\n    An integer representing the language specific kind of this node.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 58
              },
              "Syntax": {
                "PropertyType": "T:System.Int32",
                "Content": "public int RawKind",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNode.RawKind\">\r\n    <summary>\r\n    An integer representing the language specific kind of this node.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 58
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxNode.RawKind",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNode.RawKind\">\r\n    <summary>\r\n    An integer representing the language specific kind of this node.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Text.TextSpan",
                "Content": "public TextSpan Span",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNode.Span\">\r\n    <summary>\r\n    The absolute span of this node in characters, not including its leading and trailing trivia.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 127
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Text.TextSpan",
                "Content": "public TextSpan Span",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNode.Span\">\r\n    <summary>\r\n    The absolute span of this node in characters, not including its leading and trailing trivia.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 127
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxNode.Span",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNode.Span\">\r\n    <summary>\r\n    The absolute span of this node in characters, not including its leading and trailing trivia.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Int32",
                "Content": "public int SpanStart",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNode.SpanStart\">\r\n    <summary>\r\n    Same as accessing <see cref=\"P:Microsoft.CodeAnalysis.Text.TextSpan.Start\"/> on <see cref=\"P:Microsoft.CodeAnalysis.SyntaxNode.Span\"/>.\r\n    </summary>\r\n    <remarks>\r\n    Slight performance improvement.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 154
              },
              "Syntax": {
                "PropertyType": "T:System.Int32",
                "Content": "public int SpanStart",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNode.SpanStart\">\r\n    <summary>\r\n    Same as accessing <see cref=\"P:Microsoft.CodeAnalysis.Text.TextSpan.Start\"/> on <see cref=\"P:Microsoft.CodeAnalysis.SyntaxNode.Span\"/>.\r\n    </summary>\r\n    <remarks>\r\n    Slight performance improvement.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 154
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxNode.SpanStart",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNode.SpanStart\">\r\n    <summary>\r\n    Same as accessing <see cref=\"P:Microsoft.CodeAnalysis.Text.TextSpan.Start\"/> on <see cref=\"P:Microsoft.CodeAnalysis.SyntaxNode.Span\"/>.\r\n    </summary>\r\n    <remarks>\r\n    Slight performance improvement.\r\n    </remarks>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SyntaxTree",
                "Content": "public SyntaxTree SyntaxTree",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNode.SyntaxTree\">\r\n    <summary>\r\n    Returns SyntaxTree that owns the node or null if node does not belong to a\r\n    SyntaxTree\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 89
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SyntaxTree",
                "Content": "public SyntaxTree SyntaxTree",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNode.SyntaxTree\">\r\n    <summary>\r\n    Returns SyntaxTree that owns the node or null if node does not belong to a\r\n    SyntaxTree\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 89
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxNode.SyntaxTree",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNode.SyntaxTree\">\r\n    <summary>\r\n    Returns SyntaxTree that owns the node or null if node does not belong to a\r\n    SyntaxTree\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SyntaxTree",
                "Content": "protected abstract SyntaxTree SyntaxTreeCore",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNode.SyntaxTreeCore\">\r\n    <summary>\r\n    Returns SyntaxTree that owns the node or null if node does not belong to a\r\n    SyntaxTree\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 1185
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SyntaxTree",
                "Content": "protected abstract SyntaxTree SyntaxTreeCore",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNode.SyntaxTreeCore\">\r\n    <summary>\r\n    Returns SyntaxTree that owns the node or null if node does not belong to a\r\n    SyntaxTree\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 1185
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxNode.SyntaxTreeCore",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNode",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNode.SyntaxTreeCore\">\r\n    <summary>\r\n    Returns SyntaxTree that owns the node or null if node does not belong to a\r\n    SyntaxTree\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Syntax\\SyntaxNode.cs",
          "InheritanceHierarchy": [
            "T:System.Object"
          ],
          "Syntax": {
            "Content": "public abstract partial class SyntaxNode\r\n\r\n#endregion",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.SyntaxNode\">\r\n    <summary>\r\n    Represents a non-terminal node in the syntax tree. This is the language agnostic equivalent of <see\r\n    cref=\"T:Microsoft.CodeAnalysis.CSharp.SyntaxNode\"/> and <see cref=\"T:Microsoft.CodeAnalysis.VisualBasic.SyntaxNode\"/>.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.SyntaxNode",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.SyntaxNode\">\r\n    <summary>\r\n    Represents a non-terminal node in the syntax tree. This is the language agnostic equivalent of <see\r\n    cref=\"T:Microsoft.CodeAnalysis.CSharp.SyntaxNode\"/> and <see cref=\"T:Microsoft.CodeAnalysis.VisualBasic.SyntaxNode\"/>.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "!:TNode : node": "",
                  "T:Microsoft.CodeAnalysis.SyntaxNode : root": ""
                },
                "Returns": {
                  "!:TNode": ""
                },
                "Content": "public static TNode GetCurrentNode<TNode>(this SyntaxNode root, TNode node)where TNode : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.GetCurrentNode``1(Microsoft.CodeAnalysis.SyntaxNode,``0)\">\r\n    <summary>\r\n    Gets the node within the subtree corresponding to the original tracked node.\r\n    Use TrackNodes to start tracking nodes.\r\n    </summary>\r\n    <param name=\"root\">The root of the subtree containing the current node corresponding to the original tracked node.</param>\r\n    <param name=\"node\">The node instance originally tracked.</param>\r\n</member>\r\n",
                "StartLine": 88
              },
              "Syntax": {
                "Parameters": {
                  "!:TNode : node": "",
                  "T:Microsoft.CodeAnalysis.SyntaxNode : root": ""
                },
                "Returns": {
                  "!:TNode": ""
                },
                "Content": "public static TNode GetCurrentNode<TNode>(this SyntaxNode root, TNode node)where TNode : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.GetCurrentNode``1(Microsoft.CodeAnalysis.SyntaxNode,``0)\">\r\n    <summary>\r\n    Gets the node within the subtree corresponding to the original tracked node.\r\n    Use TrackNodes to start tracking nodes.\r\n    </summary>\r\n    <param name=\"root\">The root of the subtree containing the current node corresponding to the original tracked node.</param>\r\n    <param name=\"node\">The node instance originally tracked.</param>\r\n</member>\r\n",
                "StartLine": 88
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.GetCurrentNode``1(Microsoft.CodeAnalysis.SyntaxNode,``0)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeExtensions",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.GetCurrentNode``1(Microsoft.CodeAnalysis.SyntaxNode,``0)\">\r\n    <summary>\r\n    Gets the node within the subtree corresponding to the original tracked node.\r\n    Use TrackNodes to start tracking nodes.\r\n    </summary>\r\n    <param name=\"root\">The root of the subtree containing the current node corresponding to the original tracked node.</param>\r\n    <param name=\"node\">The node instance originally tracked.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "!:TNode : node": "",
                  "T:Microsoft.CodeAnalysis.SyntaxNode : root": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{``0}": ""
                },
                "Content": "public static IEnumerable<TNode> GetCurrentNodes<TNode>(this SyntaxNode root, TNode node)where TNode : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.GetCurrentNodes``1(Microsoft.CodeAnalysis.SyntaxNode,``0)\">\r\n    <summary>\r\n    Gets the nodes within the subtree corresponding to the original tracked node.\r\n    Use TrackNodes to start tracking nodes.\r\n    </summary>\r\n    <param name=\"root\">The root of the subtree containing the current node corresponding to the original tracked node.</param>\r\n    <param name=\"node\">The node instance originally tracked.</param>\r\n</member>\r\n",
                "StartLine": 71
              },
              "Syntax": {
                "Parameters": {
                  "!:TNode : node": "",
                  "T:Microsoft.CodeAnalysis.SyntaxNode : root": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{``0}": ""
                },
                "Content": "public static IEnumerable<TNode> GetCurrentNodes<TNode>(this SyntaxNode root, TNode node)where TNode : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.GetCurrentNodes``1(Microsoft.CodeAnalysis.SyntaxNode,``0)\">\r\n    <summary>\r\n    Gets the nodes within the subtree corresponding to the original tracked node.\r\n    Use TrackNodes to start tracking nodes.\r\n    </summary>\r\n    <param name=\"root\">The root of the subtree containing the current node corresponding to the original tracked node.</param>\r\n    <param name=\"node\">The node instance originally tracked.</param>\r\n</member>\r\n",
                "StartLine": 71
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.GetCurrentNodes``1(Microsoft.CodeAnalysis.SyntaxNode,``0)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeExtensions",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.GetCurrentNodes``1(Microsoft.CodeAnalysis.SyntaxNode,``0)\">\r\n    <summary>\r\n    Gets the nodes within the subtree corresponding to the original tracked node.\r\n    Use TrackNodes to start tracking nodes.\r\n    </summary>\r\n    <param name=\"root\">The root of the subtree containing the current node corresponding to the original tracked node.</param>\r\n    <param name=\"node\">The node instance originally tracked.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxNode : root": "",
                  "T:System.Collections.Generic.IEnumerable{``0} : nodes": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{``0}": ""
                },
                "Content": "public static IEnumerable<TNode> GetCurrentNodes<TNode>(this SyntaxNode root, IEnumerable<TNode> nodes)where TNode : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.GetCurrentNodes``1(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{``0})\">\r\n    <summary>\r\n    Gets the nodes within the subtree corresponding to the original tracked nodes.\r\n    Use TrackNodes to start tracking nodes.\r\n    </summary>\r\n    <param name=\"root\">The root of the subtree containing the current nodes corresponding to the original tracked nodes.</param>\r\n    <param name=\"nodes\">One or more node instances originally tracked.</param>\r\n</member>\r\n",
                "StartLine": 100
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxNode : root": "",
                  "T:System.Collections.Generic.IEnumerable{``0} : nodes": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{``0}": ""
                },
                "Content": "public static IEnumerable<TNode> GetCurrentNodes<TNode>(this SyntaxNode root, IEnumerable<TNode> nodes)where TNode : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.GetCurrentNodes``1(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{``0})\">\r\n    <summary>\r\n    Gets the nodes within the subtree corresponding to the original tracked nodes.\r\n    Use TrackNodes to start tracking nodes.\r\n    </summary>\r\n    <param name=\"root\">The root of the subtree containing the current nodes corresponding to the original tracked nodes.</param>\r\n    <param name=\"nodes\">One or more node instances originally tracked.</param>\r\n</member>\r\n",
                "StartLine": 100
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.GetCurrentNodes``1(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{``0})",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeExtensions",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.GetCurrentNodes``1(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{``0})\">\r\n    <summary>\r\n    Gets the nodes within the subtree corresponding to the original tracked nodes.\r\n    Use TrackNodes to start tracking nodes.\r\n    </summary>\r\n    <param name=\"root\">The root of the subtree containing the current nodes corresponding to the original tracked nodes.</param>\r\n    <param name=\"nodes\">One or more node instances originally tracked.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "!:TRoot : root": "",
                  "T:Microsoft.CodeAnalysis.SyntaxNode : nodeInList": "",
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode} : newNodes": ""
                },
                "Returns": {
                  "!:TRoot": ""
                },
                "Content": "public static TRoot InsertNodesAfter<TRoot>(this TRoot root, SyntaxNode nodeInList, IEnumerable<SyntaxNode> newNodes)where TRoot : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.InsertNodesAfter``1(``0,Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})\">\r\n    <summary>\r\n    Creates a new tree of nodes with new nodes inserted after the specified node.\r\n    </summary>\r\n    <typeparam name=\"TRoot\">The type of the root node.</typeparam>\r\n    <param name=\"root\">The root of the tree of nodes.</param>\r\n    <param name=\"nodeInList\">The node to insert after; a descendant of the root node an element of a list member.</param>\r\n    <param name=\"newNodes\">A sequence of nodes to insert into the tree immediately after the specified node.</param>\r\n</member>\r\n",
                "StartLine": 106
              },
              "Syntax": {
                "Parameters": {
                  "!:TRoot : root": "",
                  "T:Microsoft.CodeAnalysis.SyntaxNode : nodeInList": "",
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode} : newNodes": ""
                },
                "Returns": {
                  "!:TRoot": ""
                },
                "Content": "public static TRoot InsertNodesAfter<TRoot>(this TRoot root, SyntaxNode nodeInList, IEnumerable<SyntaxNode> newNodes)where TRoot : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.InsertNodesAfter``1(``0,Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})\">\r\n    <summary>\r\n    Creates a new tree of nodes with new nodes inserted after the specified node.\r\n    </summary>\r\n    <typeparam name=\"TRoot\">The type of the root node.</typeparam>\r\n    <param name=\"root\">The root of the tree of nodes.</param>\r\n    <param name=\"nodeInList\">The node to insert after; a descendant of the root node an element of a list member.</param>\r\n    <param name=\"newNodes\">A sequence of nodes to insert into the tree immediately after the specified node.</param>\r\n</member>\r\n",
                "StartLine": 106
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.InsertNodesAfter``1(``0,Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeExtensions",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.InsertNodesAfter``1(``0,Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})\">\r\n    <summary>\r\n    Creates a new tree of nodes with new nodes inserted after the specified node.\r\n    </summary>\r\n    <typeparam name=\"TRoot\">The type of the root node.</typeparam>\r\n    <param name=\"root\">The root of the tree of nodes.</param>\r\n    <param name=\"nodeInList\">The node to insert after; a descendant of the root node an element of a list member.</param>\r\n    <param name=\"newNodes\">A sequence of nodes to insert into the tree immediately after the specified node.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "!:TRoot : root": "",
                  "T:Microsoft.CodeAnalysis.SyntaxNode : nodeInList": "",
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode} : newNodes": ""
                },
                "Returns": {
                  "!:TRoot": ""
                },
                "Content": "public static TRoot InsertNodesBefore<TRoot>(this TRoot root, SyntaxNode nodeInList, IEnumerable<SyntaxNode> newNodes)where TRoot : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.InsertNodesBefore``1(``0,Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})\">\r\n    <summary>\r\n    Creates a new tree of nodes with new nodes inserted before the specified node.\r\n    </summary>\r\n    <typeparam name=\"TRoot\">The type of the root node.</typeparam>\r\n    <param name=\"root\">The root of the tree of nodes.</param>\r\n    <param name=\"nodeInList\">The node to insert before; a descendant of the root node an element of a list member.</param>\r\n    <param name=\"newNodes\">A sequence of nodes to insert into the tree immediately before the specified node.</param>\r\n</member>\r\n",
                "StartLine": 93
              },
              "Syntax": {
                "Parameters": {
                  "!:TRoot : root": "",
                  "T:Microsoft.CodeAnalysis.SyntaxNode : nodeInList": "",
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode} : newNodes": ""
                },
                "Returns": {
                  "!:TRoot": ""
                },
                "Content": "public static TRoot InsertNodesBefore<TRoot>(this TRoot root, SyntaxNode nodeInList, IEnumerable<SyntaxNode> newNodes)where TRoot : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.InsertNodesBefore``1(``0,Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})\">\r\n    <summary>\r\n    Creates a new tree of nodes with new nodes inserted before the specified node.\r\n    </summary>\r\n    <typeparam name=\"TRoot\">The type of the root node.</typeparam>\r\n    <param name=\"root\">The root of the tree of nodes.</param>\r\n    <param name=\"nodeInList\">The node to insert before; a descendant of the root node an element of a list member.</param>\r\n    <param name=\"newNodes\">A sequence of nodes to insert into the tree immediately before the specified node.</param>\r\n</member>\r\n",
                "StartLine": 93
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.InsertNodesBefore``1(``0,Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeExtensions",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.InsertNodesBefore``1(``0,Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})\">\r\n    <summary>\r\n    Creates a new tree of nodes with new nodes inserted before the specified node.\r\n    </summary>\r\n    <typeparam name=\"TRoot\">The type of the root node.</typeparam>\r\n    <param name=\"root\">The root of the tree of nodes.</param>\r\n    <param name=\"nodeInList\">The node to insert before; a descendant of the root node an element of a list member.</param>\r\n    <param name=\"newNodes\">A sequence of nodes to insert into the tree immediately before the specified node.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "!:TRoot : root": "",
                  "T:Microsoft.CodeAnalysis.SyntaxToken : tokenInList": "",
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken} : newTokens": ""
                },
                "Returns": {
                  "!:TRoot": ""
                },
                "Content": "public static TRoot InsertTokensAfter<TRoot>(this TRoot root, SyntaxToken tokenInList, IEnumerable<SyntaxToken> newTokens)where TRoot : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.InsertTokensAfter``1(``0,Microsoft.CodeAnalysis.SyntaxToken,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken})\">\r\n    <summary>\r\n    Creates a new tree of nodes with new tokens inserted after the specified token.\r\n    </summary>\r\n    <typeparam name=\"TRoot\">The type of the root node.</typeparam>\r\n    <param name=\"root\">The root of the tree of nodes.</param>\r\n    <param name=\"tokenInList\">The token to insert after; a descendant of the root node and an element of a list member.</param>\r\n    <param name=\"newTokens\">A sequence of tokens to insert into the tree immediately after the specified token.</param>\r\n</member>\r\n",
                "StartLine": 145
              },
              "Syntax": {
                "Parameters": {
                  "!:TRoot : root": "",
                  "T:Microsoft.CodeAnalysis.SyntaxToken : tokenInList": "",
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken} : newTokens": ""
                },
                "Returns": {
                  "!:TRoot": ""
                },
                "Content": "public static TRoot InsertTokensAfter<TRoot>(this TRoot root, SyntaxToken tokenInList, IEnumerable<SyntaxToken> newTokens)where TRoot : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.InsertTokensAfter``1(``0,Microsoft.CodeAnalysis.SyntaxToken,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken})\">\r\n    <summary>\r\n    Creates a new tree of nodes with new tokens inserted after the specified token.\r\n    </summary>\r\n    <typeparam name=\"TRoot\">The type of the root node.</typeparam>\r\n    <param name=\"root\">The root of the tree of nodes.</param>\r\n    <param name=\"tokenInList\">The token to insert after; a descendant of the root node and an element of a list member.</param>\r\n    <param name=\"newTokens\">A sequence of tokens to insert into the tree immediately after the specified token.</param>\r\n</member>\r\n",
                "StartLine": 145
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.InsertTokensAfter``1(``0,Microsoft.CodeAnalysis.SyntaxToken,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken})",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeExtensions",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.InsertTokensAfter``1(``0,Microsoft.CodeAnalysis.SyntaxToken,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken})\">\r\n    <summary>\r\n    Creates a new tree of nodes with new tokens inserted after the specified token.\r\n    </summary>\r\n    <typeparam name=\"TRoot\">The type of the root node.</typeparam>\r\n    <param name=\"root\">The root of the tree of nodes.</param>\r\n    <param name=\"tokenInList\">The token to insert after; a descendant of the root node and an element of a list member.</param>\r\n    <param name=\"newTokens\">A sequence of tokens to insert into the tree immediately after the specified token.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "!:TRoot : root": "",
                  "T:Microsoft.CodeAnalysis.SyntaxToken : tokenInList": "",
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken} : newTokens": ""
                },
                "Returns": {
                  "!:TRoot": ""
                },
                "Content": "public static TRoot InsertTokensBefore<TRoot>(this TRoot root, SyntaxToken tokenInList, IEnumerable<SyntaxToken> newTokens)where TRoot : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.InsertTokensBefore``1(``0,Microsoft.CodeAnalysis.SyntaxToken,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken})\">\r\n    <summary>\r\n    Creates a new tree of nodes with new tokens inserted before the specified token.\r\n    </summary>\r\n    <typeparam name=\"TRoot\">The type of the root node.</typeparam>\r\n    <param name=\"root\">The root of the tree of nodes.</param>\r\n    <param name=\"tokenInList\">The token to insert before; a descendant of the root node and an element of a list member.</param>\r\n    <param name=\"newTokens\">A sequence of tokens to insert into the tree immediately before the specified token.</param>\r\n</member>\r\n",
                "StartLine": 132
              },
              "Syntax": {
                "Parameters": {
                  "!:TRoot : root": "",
                  "T:Microsoft.CodeAnalysis.SyntaxToken : tokenInList": "",
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken} : newTokens": ""
                },
                "Returns": {
                  "!:TRoot": ""
                },
                "Content": "public static TRoot InsertTokensBefore<TRoot>(this TRoot root, SyntaxToken tokenInList, IEnumerable<SyntaxToken> newTokens)where TRoot : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.InsertTokensBefore``1(``0,Microsoft.CodeAnalysis.SyntaxToken,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken})\">\r\n    <summary>\r\n    Creates a new tree of nodes with new tokens inserted before the specified token.\r\n    </summary>\r\n    <typeparam name=\"TRoot\">The type of the root node.</typeparam>\r\n    <param name=\"root\">The root of the tree of nodes.</param>\r\n    <param name=\"tokenInList\">The token to insert before; a descendant of the root node and an element of a list member.</param>\r\n    <param name=\"newTokens\">A sequence of tokens to insert into the tree immediately before the specified token.</param>\r\n</member>\r\n",
                "StartLine": 132
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.InsertTokensBefore``1(``0,Microsoft.CodeAnalysis.SyntaxToken,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken})",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeExtensions",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.InsertTokensBefore``1(``0,Microsoft.CodeAnalysis.SyntaxToken,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken})\">\r\n    <summary>\r\n    Creates a new tree of nodes with new tokens inserted before the specified token.\r\n    </summary>\r\n    <typeparam name=\"TRoot\">The type of the root node.</typeparam>\r\n    <param name=\"root\">The root of the tree of nodes.</param>\r\n    <param name=\"tokenInList\">The token to insert before; a descendant of the root node and an element of a list member.</param>\r\n    <param name=\"newTokens\">A sequence of tokens to insert into the tree immediately before the specified token.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "!:TRoot : root": "",
                  "T:Microsoft.CodeAnalysis.SyntaxTrivia : trivia": "",
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia} : newTrivia": ""
                },
                "Returns": {
                  "!:TRoot": ""
                },
                "Content": "public static TRoot InsertTriviaAfter<TRoot>(this TRoot root, SyntaxTrivia trivia, IEnumerable<SyntaxTrivia> newTrivia)where TRoot : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.InsertTriviaAfter``1(``0,Microsoft.CodeAnalysis.SyntaxTrivia,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})\">\r\n    <summary>\r\n    Creates a new tree of nodes with new trivia inserted after the specified trivia.\r\n    </summary>\r\n    <typeparam name=\"TRoot\">The type of the root node.</typeparam>\r\n    <param name=\"root\">The root of the tree of nodes.</param>\r\n    <param name=\"trivia\">The trivia to insert after; a descendant of the root node.</param>\r\n    <param name=\"newTrivia\">A sequence of trivia to insert into the tree immediately after the specified trivia.</param>\r\n</member>\r\n",
                "StartLine": 184
              },
              "Syntax": {
                "Parameters": {
                  "!:TRoot : root": "",
                  "T:Microsoft.CodeAnalysis.SyntaxTrivia : trivia": "",
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia} : newTrivia": ""
                },
                "Returns": {
                  "!:TRoot": ""
                },
                "Content": "public static TRoot InsertTriviaAfter<TRoot>(this TRoot root, SyntaxTrivia trivia, IEnumerable<SyntaxTrivia> newTrivia)where TRoot : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.InsertTriviaAfter``1(``0,Microsoft.CodeAnalysis.SyntaxTrivia,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})\">\r\n    <summary>\r\n    Creates a new tree of nodes with new trivia inserted after the specified trivia.\r\n    </summary>\r\n    <typeparam name=\"TRoot\">The type of the root node.</typeparam>\r\n    <param name=\"root\">The root of the tree of nodes.</param>\r\n    <param name=\"trivia\">The trivia to insert after; a descendant of the root node.</param>\r\n    <param name=\"newTrivia\">A sequence of trivia to insert into the tree immediately after the specified trivia.</param>\r\n</member>\r\n",
                "StartLine": 184
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.InsertTriviaAfter``1(``0,Microsoft.CodeAnalysis.SyntaxTrivia,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeExtensions",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.InsertTriviaAfter``1(``0,Microsoft.CodeAnalysis.SyntaxTrivia,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})\">\r\n    <summary>\r\n    Creates a new tree of nodes with new trivia inserted after the specified trivia.\r\n    </summary>\r\n    <typeparam name=\"TRoot\">The type of the root node.</typeparam>\r\n    <param name=\"root\">The root of the tree of nodes.</param>\r\n    <param name=\"trivia\">The trivia to insert after; a descendant of the root node.</param>\r\n    <param name=\"newTrivia\">A sequence of trivia to insert into the tree immediately after the specified trivia.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "!:TRoot : root": "",
                  "T:Microsoft.CodeAnalysis.SyntaxTrivia : trivia": "",
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia} : newTrivia": ""
                },
                "Returns": {
                  "!:TRoot": ""
                },
                "Content": "public static TRoot InsertTriviaBefore<TRoot>(this TRoot root, SyntaxTrivia trivia, IEnumerable<SyntaxTrivia> newTrivia)where TRoot : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.InsertTriviaBefore``1(``0,Microsoft.CodeAnalysis.SyntaxTrivia,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})\">\r\n    <summary>\r\n    Creates a new tree of nodes with new trivia inserted before the specified trivia.\r\n    </summary>\r\n    <typeparam name=\"TRoot\">The type of the root node.</typeparam>\r\n    <param name=\"root\">The root of the tree of nodes.</param>\r\n    <param name=\"trivia\">The trivia to insert before; a descendant of the root node.</param>\r\n    <param name=\"newTrivia\">A sequence of trivia to insert into the tree immediately before the specified trivia.</param>\r\n</member>\r\n",
                "StartLine": 171
              },
              "Syntax": {
                "Parameters": {
                  "!:TRoot : root": "",
                  "T:Microsoft.CodeAnalysis.SyntaxTrivia : trivia": "",
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia} : newTrivia": ""
                },
                "Returns": {
                  "!:TRoot": ""
                },
                "Content": "public static TRoot InsertTriviaBefore<TRoot>(this TRoot root, SyntaxTrivia trivia, IEnumerable<SyntaxTrivia> newTrivia)where TRoot : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.InsertTriviaBefore``1(``0,Microsoft.CodeAnalysis.SyntaxTrivia,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})\">\r\n    <summary>\r\n    Creates a new tree of nodes with new trivia inserted before the specified trivia.\r\n    </summary>\r\n    <typeparam name=\"TRoot\">The type of the root node.</typeparam>\r\n    <param name=\"root\">The root of the tree of nodes.</param>\r\n    <param name=\"trivia\">The trivia to insert before; a descendant of the root node.</param>\r\n    <param name=\"newTrivia\">A sequence of trivia to insert into the tree immediately before the specified trivia.</param>\r\n</member>\r\n",
                "StartLine": 171
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.InsertTriviaBefore``1(``0,Microsoft.CodeAnalysis.SyntaxTrivia,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeExtensions",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.InsertTriviaBefore``1(``0,Microsoft.CodeAnalysis.SyntaxTrivia,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})\">\r\n    <summary>\r\n    Creates a new tree of nodes with new trivia inserted before the specified trivia.\r\n    </summary>\r\n    <typeparam name=\"TRoot\">The type of the root node.</typeparam>\r\n    <param name=\"root\">The root of the tree of nodes.</param>\r\n    <param name=\"trivia\">The trivia to insert before; a descendant of the root node.</param>\r\n    <param name=\"newTrivia\">A sequence of trivia to insert into the tree immediately before the specified trivia.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "!:TNode : node": "",
                  "T:System.Boolean : elasticTrivia": "",
                  "T:System.String : indentation": ""
                },
                "Returns": {
                  "!:TNode": ""
                },
                "Content": "public static TNode NormalizeWhitespace<TNode>(this TNode node, string indentation = DefaultIndentation, bool elasticTrivia = false)where TNode : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.NormalizeWhitespace``1(``0,System.String,System.Boolean)\">\r\n    <summary>\r\n    Creates a new syntax node with all whitespace and end of line trivia replaced with\r\n    regularly formatted trivia.\r\n    </summary>\r\n    <typeparam name=\"TNode\">The type of the node.</typeparam>\r\n    <param name=\"node\">The node to format.</param>\r\n    <param name=\"indentation\">An optional sequence of whitespace characters that defines a\r\n    single level of indentation.</param>\r\n    <param name=\"elasticTrivia\">If true the replaced trivia is elastic trivia.</param>\r\n</member>\r\n",
                "StartLine": 289
              },
              "Syntax": {
                "Parameters": {
                  "!:TNode : node": "",
                  "T:System.Boolean : elasticTrivia": "",
                  "T:System.String : indentation": ""
                },
                "Returns": {
                  "!:TNode": ""
                },
                "Content": "public static TNode NormalizeWhitespace<TNode>(this TNode node, string indentation = DefaultIndentation, bool elasticTrivia = false)where TNode : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.NormalizeWhitespace``1(``0,System.String,System.Boolean)\">\r\n    <summary>\r\n    Creates a new syntax node with all whitespace and end of line trivia replaced with\r\n    regularly formatted trivia.\r\n    </summary>\r\n    <typeparam name=\"TNode\">The type of the node.</typeparam>\r\n    <param name=\"node\">The node to format.</param>\r\n    <param name=\"indentation\">An optional sequence of whitespace characters that defines a\r\n    single level of indentation.</param>\r\n    <param name=\"elasticTrivia\">If true the replaced trivia is elastic trivia.</param>\r\n</member>\r\n",
                "StartLine": 289
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.NormalizeWhitespace``1(``0,System.String,System.Boolean)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeExtensions",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.NormalizeWhitespace``1(``0,System.String,System.Boolean)\">\r\n    <summary>\r\n    Creates a new syntax node with all whitespace and end of line trivia replaced with\r\n    regularly formatted trivia.\r\n    </summary>\r\n    <typeparam name=\"TNode\">The type of the node.</typeparam>\r\n    <param name=\"node\">The node to format.</param>\r\n    <param name=\"indentation\">An optional sequence of whitespace characters that defines a\r\n    single level of indentation.</param>\r\n    <param name=\"elasticTrivia\">If true the replaced trivia is elastic trivia.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "!:TRoot : root": "",
                  "T:Microsoft.CodeAnalysis.SyntaxNode : node": "",
                  "T:Microsoft.CodeAnalysis.SyntaxRemoveOptions : options": ""
                },
                "Returns": {
                  "!:TRoot": ""
                },
                "Content": "public static TRoot RemoveNode<TRoot>(this TRoot root, SyntaxNode node, SyntaxRemoveOptions options)where TRoot : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.RemoveNode``1(``0,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxRemoveOptions)\">\r\n    <summary>\r\n    Creates a new tree of nodes with the specified node removed.\r\n    </summary>\r\n    <typeparam name=\"TRoot\">The type of the root node.</typeparam>\r\n    <param name=\"root\">The root node from which to remove a descendant node from.</param>\r\n    <param name=\"node\">The node to remove.</param>\r\n    <param name=\"options\">Options that determine how the node's trivia is treated.</param>\r\n</member>\r\n",
                "StartLine": 254
              },
              "Syntax": {
                "Parameters": {
                  "!:TRoot : root": "",
                  "T:Microsoft.CodeAnalysis.SyntaxNode : node": "",
                  "T:Microsoft.CodeAnalysis.SyntaxRemoveOptions : options": ""
                },
                "Returns": {
                  "!:TRoot": ""
                },
                "Content": "public static TRoot RemoveNode<TRoot>(this TRoot root, SyntaxNode node, SyntaxRemoveOptions options)where TRoot : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.RemoveNode``1(``0,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxRemoveOptions)\">\r\n    <summary>\r\n    Creates a new tree of nodes with the specified node removed.\r\n    </summary>\r\n    <typeparam name=\"TRoot\">The type of the root node.</typeparam>\r\n    <param name=\"root\">The root node from which to remove a descendant node from.</param>\r\n    <param name=\"node\">The node to remove.</param>\r\n    <param name=\"options\">Options that determine how the node's trivia is treated.</param>\r\n</member>\r\n",
                "StartLine": 254
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.RemoveNode``1(``0,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxRemoveOptions)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeExtensions",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.RemoveNode``1(``0,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxRemoveOptions)\">\r\n    <summary>\r\n    Creates a new tree of nodes with the specified node removed.\r\n    </summary>\r\n    <typeparam name=\"TRoot\">The type of the root node.</typeparam>\r\n    <param name=\"root\">The root node from which to remove a descendant node from.</param>\r\n    <param name=\"node\">The node to remove.</param>\r\n    <param name=\"options\">Options that determine how the node's trivia is treated.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "!:TRoot : root": "",
                  "T:Microsoft.CodeAnalysis.SyntaxRemoveOptions : options": "",
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode} : nodes": ""
                },
                "Returns": {
                  "!:TRoot": ""
                },
                "Content": "public static TRoot RemoveNodes<TRoot>(this TRoot root, IEnumerable<SyntaxNode> nodes, SyntaxRemoveOptions options)where TRoot : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.RemoveNodes``1(``0,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},Microsoft.CodeAnalysis.SyntaxRemoveOptions)\">\r\n    <summary>\r\n    Creates a new tree of nodes with the specified nodes removed.\r\n    </summary>\r\n    <typeparam name=\"TRoot\">The type of the root node.</typeparam>\r\n    <param name=\"root\">The root node from which to remove a descendant node from.</param>\r\n    <param name=\"nodes\">The nodes to remove.</param>\r\n    <param name=\"options\">Options that determine how the nodes' trivia is treated.</param>\r\n</member>\r\n",
                "StartLine": 269
              },
              "Syntax": {
                "Parameters": {
                  "!:TRoot : root": "",
                  "T:Microsoft.CodeAnalysis.SyntaxRemoveOptions : options": "",
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode} : nodes": ""
                },
                "Returns": {
                  "!:TRoot": ""
                },
                "Content": "public static TRoot RemoveNodes<TRoot>(this TRoot root, IEnumerable<SyntaxNode> nodes, SyntaxRemoveOptions options)where TRoot : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.RemoveNodes``1(``0,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},Microsoft.CodeAnalysis.SyntaxRemoveOptions)\">\r\n    <summary>\r\n    Creates a new tree of nodes with the specified nodes removed.\r\n    </summary>\r\n    <typeparam name=\"TRoot\">The type of the root node.</typeparam>\r\n    <param name=\"root\">The root node from which to remove a descendant node from.</param>\r\n    <param name=\"nodes\">The nodes to remove.</param>\r\n    <param name=\"options\">Options that determine how the nodes' trivia is treated.</param>\r\n</member>\r\n",
                "StartLine": 269
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.RemoveNodes``1(``0,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},Microsoft.CodeAnalysis.SyntaxRemoveOptions)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeExtensions",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.RemoveNodes``1(``0,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},Microsoft.CodeAnalysis.SyntaxRemoveOptions)\">\r\n    <summary>\r\n    Creates a new tree of nodes with the specified nodes removed.\r\n    </summary>\r\n    <typeparam name=\"TRoot\">The type of the root node.</typeparam>\r\n    <param name=\"root\">The root node from which to remove a descendant node from.</param>\r\n    <param name=\"nodes\">The nodes to remove.</param>\r\n    <param name=\"options\">Options that determine how the nodes' trivia is treated.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "!:TRoot : root": "",
                  "T:Microsoft.CodeAnalysis.SyntaxNode : newNode": "",
                  "T:Microsoft.CodeAnalysis.SyntaxNode : oldNode": ""
                },
                "Returns": {
                  "!:TRoot": ""
                },
                "Content": "public static TRoot ReplaceNode<TRoot>(this TRoot root, SyntaxNode oldNode, SyntaxNode newNode)where TRoot : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceNode``1(``0,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)\">\r\n    <summary>\r\n    Creates a new tree of nodes with the specified old node replaced with a new node.\r\n    </summary>\r\n    <typeparam name=\"TRoot\">The type of the root node.</typeparam>\r\n    <param name=\"root\">The root node of the tree of nodes.</param>\r\n    <param name=\"oldNode\">The node to be replaced; a descendant of the root node.</param>\r\n    <param name=\"newNode\">The new node to use in the new tree in place of the old node.</param>\r\n</member>\r\n",
                "StartLine": 67
              },
              "Syntax": {
                "Parameters": {
                  "!:TRoot : root": "",
                  "T:Microsoft.CodeAnalysis.SyntaxNode : newNode": "",
                  "T:Microsoft.CodeAnalysis.SyntaxNode : oldNode": ""
                },
                "Returns": {
                  "!:TRoot": ""
                },
                "Content": "public static TRoot ReplaceNode<TRoot>(this TRoot root, SyntaxNode oldNode, SyntaxNode newNode)where TRoot : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceNode``1(``0,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)\">\r\n    <summary>\r\n    Creates a new tree of nodes with the specified old node replaced with a new node.\r\n    </summary>\r\n    <typeparam name=\"TRoot\">The type of the root node.</typeparam>\r\n    <param name=\"root\">The root node of the tree of nodes.</param>\r\n    <param name=\"oldNode\">The node to be replaced; a descendant of the root node.</param>\r\n    <param name=\"newNode\">The new node to use in the new tree in place of the old node.</param>\r\n</member>\r\n",
                "StartLine": 67
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceNode``1(``0,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeExtensions",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceNode``1(``0,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode)\">\r\n    <summary>\r\n    Creates a new tree of nodes with the specified old node replaced with a new node.\r\n    </summary>\r\n    <typeparam name=\"TRoot\">The type of the root node.</typeparam>\r\n    <param name=\"root\">The root node of the tree of nodes.</param>\r\n    <param name=\"oldNode\">The node to be replaced; a descendant of the root node.</param>\r\n    <param name=\"newNode\">The new node to use in the new tree in place of the old node.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "!:TRoot : root": "",
                  "T:Microsoft.CodeAnalysis.SyntaxNode : oldNode": "",
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode} : newNodes": ""
                },
                "Returns": {
                  "!:TRoot": ""
                },
                "Content": "public static TRoot ReplaceNode<TRoot>(this TRoot root, SyntaxNode oldNode, IEnumerable<SyntaxNode> newNodes)where TRoot : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceNode``1(``0,Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})\">\r\n    <summary>\r\n    Creates a new tree of nodes with specified old node replaced with a new nodes.\r\n    </summary>\r\n    <typeparam name=\"TRoot\">The type of the root node.</typeparam>\r\n    <param name=\"root\">The root of the tree of nodes.</param>\r\n    <param name=\"oldNode\">The node to be replaced; a descendant of the root node and an element of a list member.</param>\r\n    <param name=\"newNodes\">A sequence of nodes to use in the tree in place of the old node.</param>\r\n</member>\r\n",
                "StartLine": 80
              },
              "Syntax": {
                "Parameters": {
                  "!:TRoot : root": "",
                  "T:Microsoft.CodeAnalysis.SyntaxNode : oldNode": "",
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode} : newNodes": ""
                },
                "Returns": {
                  "!:TRoot": ""
                },
                "Content": "public static TRoot ReplaceNode<TRoot>(this TRoot root, SyntaxNode oldNode, IEnumerable<SyntaxNode> newNodes)where TRoot : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceNode``1(``0,Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})\">\r\n    <summary>\r\n    Creates a new tree of nodes with specified old node replaced with a new nodes.\r\n    </summary>\r\n    <typeparam name=\"TRoot\">The type of the root node.</typeparam>\r\n    <param name=\"root\">The root of the tree of nodes.</param>\r\n    <param name=\"oldNode\">The node to be replaced; a descendant of the root node and an element of a list member.</param>\r\n    <param name=\"newNodes\">A sequence of nodes to use in the tree in place of the old node.</param>\r\n</member>\r\n",
                "StartLine": 80
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceNode``1(``0,Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeExtensions",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceNode``1(``0,Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})\">\r\n    <summary>\r\n    Creates a new tree of nodes with specified old node replaced with a new nodes.\r\n    </summary>\r\n    <typeparam name=\"TRoot\">The type of the root node.</typeparam>\r\n    <param name=\"root\">The root of the tree of nodes.</param>\r\n    <param name=\"oldNode\">The node to be replaced; a descendant of the root node and an element of a list member.</param>\r\n    <param name=\"newNodes\">A sequence of nodes to use in the tree in place of the old node.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "!:TRoot : root": "",
                  "T:System.Collections.Generic.IEnumerable{``1} : nodes": "",
                  "T:System.Func{``1,``1,Microsoft.CodeAnalysis.SyntaxNode} : computeReplacementNode": ""
                },
                "Returns": {
                  "!:TRoot": ""
                },
                "Content": "public static TRoot ReplaceNodes<TRoot, TNode>(this TRoot root, IEnumerable<TNode> nodes, Func<TNode, TNode, SyntaxNode> computeReplacementNode)where TRoot : SyntaxNode where TNode : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceNodes``2(``0,System.Collections.Generic.IEnumerable{``1},System.Func{``1,``1,Microsoft.CodeAnalysis.SyntaxNode})\">\r\n    <summary>\r\n    Creates a new tree of nodes with the specified old node replaced with a new node.\r\n    </summary>\r\n    <typeparam name=\"TRoot\">The type of the root node.</typeparam>\r\n    <typeparam name=\"TNode\">The type of the nodes being replaced.</typeparam>\r\n    <param name=\"root\">The root node of the tree of nodes.</param>\r\n    <param name=\"nodes\">The nodes to be replaced; descendants of the root node.</param>\r\n    <param name=\"computeReplacementNode\">A function that computes a replacement node for the\r\n    argument nodes. The first argument is the original node. The second argument is the same\r\n    node potentially rewritten with replaced descendants.</param>\r\n</member>\r\n",
                "StartLine": 53
              },
              "Syntax": {
                "Parameters": {
                  "!:TRoot : root": "",
                  "T:System.Collections.Generic.IEnumerable{``1} : nodes": "",
                  "T:System.Func{``1,``1,Microsoft.CodeAnalysis.SyntaxNode} : computeReplacementNode": ""
                },
                "Returns": {
                  "!:TRoot": ""
                },
                "Content": "public static TRoot ReplaceNodes<TRoot, TNode>(this TRoot root, IEnumerable<TNode> nodes, Func<TNode, TNode, SyntaxNode> computeReplacementNode)where TRoot : SyntaxNode where TNode : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceNodes``2(``0,System.Collections.Generic.IEnumerable{``1},System.Func{``1,``1,Microsoft.CodeAnalysis.SyntaxNode})\">\r\n    <summary>\r\n    Creates a new tree of nodes with the specified old node replaced with a new node.\r\n    </summary>\r\n    <typeparam name=\"TRoot\">The type of the root node.</typeparam>\r\n    <typeparam name=\"TNode\">The type of the nodes being replaced.</typeparam>\r\n    <param name=\"root\">The root node of the tree of nodes.</param>\r\n    <param name=\"nodes\">The nodes to be replaced; descendants of the root node.</param>\r\n    <param name=\"computeReplacementNode\">A function that computes a replacement node for the\r\n    argument nodes. The first argument is the original node. The second argument is the same\r\n    node potentially rewritten with replaced descendants.</param>\r\n</member>\r\n",
                "StartLine": 53
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceNodes``2(``0,System.Collections.Generic.IEnumerable{``1},System.Func{``1,``1,Microsoft.CodeAnalysis.SyntaxNode})",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeExtensions",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceNodes``2(``0,System.Collections.Generic.IEnumerable{``1},System.Func{``1,``1,Microsoft.CodeAnalysis.SyntaxNode})\">\r\n    <summary>\r\n    Creates a new tree of nodes with the specified old node replaced with a new node.\r\n    </summary>\r\n    <typeparam name=\"TRoot\">The type of the root node.</typeparam>\r\n    <typeparam name=\"TNode\">The type of the nodes being replaced.</typeparam>\r\n    <param name=\"root\">The root node of the tree of nodes.</param>\r\n    <param name=\"nodes\">The nodes to be replaced; descendants of the root node.</param>\r\n    <param name=\"computeReplacementNode\">A function that computes a replacement node for the\r\n    argument nodes. The first argument is the original node. The second argument is the same\r\n    node potentially rewritten with replaced descendants.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "!:TRoot : root": "",
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode} : nodes": "",
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken} : tokens": "",
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia} : trivia": "",
                  "T:System.Func{Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode} : computeReplacementNode": "",
                  "T:System.Func{Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken} : computeReplacementToken": "",
                  "T:System.Func{Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia} : computeReplacementTrivia": ""
                },
                "Returns": {
                  "!:TRoot": ""
                },
                "Content": "public static TRoot ReplaceSyntax<TRoot>(this TRoot root, IEnumerable<SyntaxNode> nodes, Func<SyntaxNode, SyntaxNode, SyntaxNode> computeReplacementNode, IEnumerable<SyntaxToken> tokens, Func<SyntaxToken, SyntaxToken, SyntaxToken> computeReplacementToken, IEnumerable<SyntaxTrivia> trivia, Func<SyntaxTrivia, SyntaxTrivia, SyntaxTrivia> computeReplacementTrivia)where TRoot : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceSyntax``1(``0,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Func{Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken},System.Func{Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia},System.Func{Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia})\">\r\n    <summary>\r\n    Creates a new tree of nodes with the specified nodes, tokens and trivia replaced.\r\n    </summary>\r\n    <typeparam name=\"TRoot\">The type of the root node.</typeparam>\r\n    <param name=\"root\">The root node of the tree of nodes.</param>\r\n    <param name=\"nodes\">The nodes to be replaced.</param>\r\n    <param name=\"computeReplacementNode\">A function that computes a replacement node for the\r\n    argument nodes. The first argument is the original node. The second argument is the same\r\n    node potentially rewritten with replaced descendants.</param>\r\n    <param name=\"tokens\">The tokens to be replaced.</param>\r\n    <param name=\"computeReplacementToken\">A function that computes a replacement token for\r\n    the argument tokens. The first argument is the original token. The second argument is\r\n    the same token potentially rewritten with replaced trivia.</param>\r\n    <param name=\"trivia\">The trivia to be replaced.</param>\r\n    <param name=\"computeReplacementTrivia\">A function that computes replacement trivia for\r\n    the specified arguments. The first argument is the original trivia. The second argument is\r\n    the same trivia with potentially rewritten sub structure.</param>\r\n</member>\r\n",
                "StartLine": 27
              },
              "Syntax": {
                "Parameters": {
                  "!:TRoot : root": "",
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode} : nodes": "",
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken} : tokens": "",
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia} : trivia": "",
                  "T:System.Func{Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode} : computeReplacementNode": "",
                  "T:System.Func{Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken} : computeReplacementToken": "",
                  "T:System.Func{Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia} : computeReplacementTrivia": ""
                },
                "Returns": {
                  "!:TRoot": ""
                },
                "Content": "public static TRoot ReplaceSyntax<TRoot>(this TRoot root, IEnumerable<SyntaxNode> nodes, Func<SyntaxNode, SyntaxNode, SyntaxNode> computeReplacementNode, IEnumerable<SyntaxToken> tokens, Func<SyntaxToken, SyntaxToken, SyntaxToken> computeReplacementToken, IEnumerable<SyntaxTrivia> trivia, Func<SyntaxTrivia, SyntaxTrivia, SyntaxTrivia> computeReplacementTrivia)where TRoot : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceSyntax``1(``0,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Func{Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken},System.Func{Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia},System.Func{Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia})\">\r\n    <summary>\r\n    Creates a new tree of nodes with the specified nodes, tokens and trivia replaced.\r\n    </summary>\r\n    <typeparam name=\"TRoot\">The type of the root node.</typeparam>\r\n    <param name=\"root\">The root node of the tree of nodes.</param>\r\n    <param name=\"nodes\">The nodes to be replaced.</param>\r\n    <param name=\"computeReplacementNode\">A function that computes a replacement node for the\r\n    argument nodes. The first argument is the original node. The second argument is the same\r\n    node potentially rewritten with replaced descendants.</param>\r\n    <param name=\"tokens\">The tokens to be replaced.</param>\r\n    <param name=\"computeReplacementToken\">A function that computes a replacement token for\r\n    the argument tokens. The first argument is the original token. The second argument is\r\n    the same token potentially rewritten with replaced trivia.</param>\r\n    <param name=\"trivia\">The trivia to be replaced.</param>\r\n    <param name=\"computeReplacementTrivia\">A function that computes replacement trivia for\r\n    the specified arguments. The first argument is the original trivia. The second argument is\r\n    the same trivia with potentially rewritten sub structure.</param>\r\n</member>\r\n",
                "StartLine": 27
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceSyntax``1(``0,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Func{Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken},System.Func{Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia},System.Func{Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia})",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeExtensions",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceSyntax``1(``0,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode},System.Func{Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken},System.Func{Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken},System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia},System.Func{Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia})\">\r\n    <summary>\r\n    Creates a new tree of nodes with the specified nodes, tokens and trivia replaced.\r\n    </summary>\r\n    <typeparam name=\"TRoot\">The type of the root node.</typeparam>\r\n    <param name=\"root\">The root node of the tree of nodes.</param>\r\n    <param name=\"nodes\">The nodes to be replaced.</param>\r\n    <param name=\"computeReplacementNode\">A function that computes a replacement node for the\r\n    argument nodes. The first argument is the original node. The second argument is the same\r\n    node potentially rewritten with replaced descendants.</param>\r\n    <param name=\"tokens\">The tokens to be replaced.</param>\r\n    <param name=\"computeReplacementToken\">A function that computes a replacement token for\r\n    the argument tokens. The first argument is the original token. The second argument is\r\n    the same token potentially rewritten with replaced trivia.</param>\r\n    <param name=\"trivia\">The trivia to be replaced.</param>\r\n    <param name=\"computeReplacementTrivia\">A function that computes replacement trivia for\r\n    the specified arguments. The first argument is the original trivia. The second argument is\r\n    the same trivia with potentially rewritten sub structure.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "!:TRoot : root": "",
                  "T:Microsoft.CodeAnalysis.SyntaxToken : newToken": "",
                  "T:Microsoft.CodeAnalysis.SyntaxToken : oldToken": ""
                },
                "Returns": {
                  "!:TRoot": ""
                },
                "Content": "public static TRoot ReplaceToken<TRoot>(this TRoot root, SyntaxToken oldToken, SyntaxToken newToken)where TRoot : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceToken``1(``0,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)\">\r\n    <summary>\r\n    Creates a new tree of nodes with the specified old token replaced with a new token.\r\n    </summary>\r\n    <typeparam name=\"TRoot\">The type of the root node.</typeparam>\r\n    <param name=\"root\">The root node of the tree of nodes.</param>\r\n    <param name=\"oldToken\">The token to be replaced.</param>\r\n    <param name=\"newToken\">The new token to use in the new tree in place of the old\r\n    token.</param>\r\n</member>\r\n",
                "StartLine": 213
              },
              "Syntax": {
                "Parameters": {
                  "!:TRoot : root": "",
                  "T:Microsoft.CodeAnalysis.SyntaxToken : newToken": "",
                  "T:Microsoft.CodeAnalysis.SyntaxToken : oldToken": ""
                },
                "Returns": {
                  "!:TRoot": ""
                },
                "Content": "public static TRoot ReplaceToken<TRoot>(this TRoot root, SyntaxToken oldToken, SyntaxToken newToken)where TRoot : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceToken``1(``0,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)\">\r\n    <summary>\r\n    Creates a new tree of nodes with the specified old token replaced with a new token.\r\n    </summary>\r\n    <typeparam name=\"TRoot\">The type of the root node.</typeparam>\r\n    <param name=\"root\">The root node of the tree of nodes.</param>\r\n    <param name=\"oldToken\">The token to be replaced.</param>\r\n    <param name=\"newToken\">The new token to use in the new tree in place of the old\r\n    token.</param>\r\n</member>\r\n",
                "StartLine": 213
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceToken``1(``0,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeExtensions",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceToken``1(``0,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)\">\r\n    <summary>\r\n    Creates a new tree of nodes with the specified old token replaced with a new token.\r\n    </summary>\r\n    <typeparam name=\"TRoot\">The type of the root node.</typeparam>\r\n    <param name=\"root\">The root node of the tree of nodes.</param>\r\n    <param name=\"oldToken\">The token to be replaced.</param>\r\n    <param name=\"newToken\">The new token to use in the new tree in place of the old\r\n    token.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "!:TRoot : root": "",
                  "T:Microsoft.CodeAnalysis.SyntaxToken : tokenInList": "",
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken} : newTokens": ""
                },
                "Returns": {
                  "!:TRoot": ""
                },
                "Content": "public static TRoot ReplaceToken<TRoot>(this TRoot root, SyntaxToken tokenInList, IEnumerable<SyntaxToken> newTokens)where TRoot : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceToken``1(``0,Microsoft.CodeAnalysis.SyntaxToken,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken})\">\r\n    <summary>\r\n    Creates a new tree of nodes with the specified old token replaced with new tokens.\r\n    </summary>\r\n    <typeparam name=\"TRoot\">The type of the root node.</typeparam>\r\n    <param name=\"root\">The root of the tree of nodes.</param>\r\n    <param name=\"tokenInList\">The token to be replaced; a descendant of the root node and an element of a list member.</param>\r\n    <param name=\"newTokens\">A sequence of tokens to use in the tree in place of the specified token.</param>\r\n</member>\r\n",
                "StartLine": 119
              },
              "Syntax": {
                "Parameters": {
                  "!:TRoot : root": "",
                  "T:Microsoft.CodeAnalysis.SyntaxToken : tokenInList": "",
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken} : newTokens": ""
                },
                "Returns": {
                  "!:TRoot": ""
                },
                "Content": "public static TRoot ReplaceToken<TRoot>(this TRoot root, SyntaxToken tokenInList, IEnumerable<SyntaxToken> newTokens)where TRoot : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceToken``1(``0,Microsoft.CodeAnalysis.SyntaxToken,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken})\">\r\n    <summary>\r\n    Creates a new tree of nodes with the specified old token replaced with new tokens.\r\n    </summary>\r\n    <typeparam name=\"TRoot\">The type of the root node.</typeparam>\r\n    <param name=\"root\">The root of the tree of nodes.</param>\r\n    <param name=\"tokenInList\">The token to be replaced; a descendant of the root node and an element of a list member.</param>\r\n    <param name=\"newTokens\">A sequence of tokens to use in the tree in place of the specified token.</param>\r\n</member>\r\n",
                "StartLine": 119
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceToken``1(``0,Microsoft.CodeAnalysis.SyntaxToken,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken})",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeExtensions",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceToken``1(``0,Microsoft.CodeAnalysis.SyntaxToken,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken})\">\r\n    <summary>\r\n    Creates a new tree of nodes with the specified old token replaced with new tokens.\r\n    </summary>\r\n    <typeparam name=\"TRoot\">The type of the root node.</typeparam>\r\n    <param name=\"root\">The root of the tree of nodes.</param>\r\n    <param name=\"tokenInList\">The token to be replaced; a descendant of the root node and an element of a list member.</param>\r\n    <param name=\"newTokens\">A sequence of tokens to use in the tree in place of the specified token.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "!:TRoot : root": "",
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken} : tokens": "",
                  "T:System.Func{Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken} : computeReplacementToken": ""
                },
                "Returns": {
                  "!:TRoot": ""
                },
                "Content": "public static TRoot ReplaceTokens<TRoot>(this TRoot root, IEnumerable<SyntaxToken> tokens, Func<SyntaxToken, SyntaxToken, SyntaxToken> computeReplacementToken)where TRoot : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceTokens``1(``0,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken},System.Func{Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken})\">\r\n    <summary>\r\n    Creates a new tree of nodes with the specified old node replaced with a new node.\r\n    </summary>\r\n    <typeparam name=\"TRoot\">The type of the root node.</typeparam>\r\n    <param name=\"root\">The root node of the tree of nodes.</param>\r\n    <param name=\"tokens\">The token to be replaced; descendants of the root node.</param>\r\n    <param name=\"computeReplacementToken\">A function that computes a replacement token for\r\n    the argument tokens. The first argument is the original token. The second argument is\r\n    the same token potentially rewritten with replaced trivia.</param>\r\n</member>\r\n",
                "StartLine": 199
              },
              "Syntax": {
                "Parameters": {
                  "!:TRoot : root": "",
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken} : tokens": "",
                  "T:System.Func{Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken} : computeReplacementToken": ""
                },
                "Returns": {
                  "!:TRoot": ""
                },
                "Content": "public static TRoot ReplaceTokens<TRoot>(this TRoot root, IEnumerable<SyntaxToken> tokens, Func<SyntaxToken, SyntaxToken, SyntaxToken> computeReplacementToken)where TRoot : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceTokens``1(``0,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken},System.Func{Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken})\">\r\n    <summary>\r\n    Creates a new tree of nodes with the specified old node replaced with a new node.\r\n    </summary>\r\n    <typeparam name=\"TRoot\">The type of the root node.</typeparam>\r\n    <param name=\"root\">The root node of the tree of nodes.</param>\r\n    <param name=\"tokens\">The token to be replaced; descendants of the root node.</param>\r\n    <param name=\"computeReplacementToken\">A function that computes a replacement token for\r\n    the argument tokens. The first argument is the original token. The second argument is\r\n    the same token potentially rewritten with replaced trivia.</param>\r\n</member>\r\n",
                "StartLine": 199
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceTokens``1(``0,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken},System.Func{Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken})",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeExtensions",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceTokens``1(``0,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken},System.Func{Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken})\">\r\n    <summary>\r\n    Creates a new tree of nodes with the specified old node replaced with a new node.\r\n    </summary>\r\n    <typeparam name=\"TRoot\">The type of the root node.</typeparam>\r\n    <param name=\"root\">The root node of the tree of nodes.</param>\r\n    <param name=\"tokens\">The token to be replaced; descendants of the root node.</param>\r\n    <param name=\"computeReplacementToken\">A function that computes a replacement token for\r\n    the argument tokens. The first argument is the original token. The second argument is\r\n    the same token potentially rewritten with replaced trivia.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "!:TRoot : root": "",
                  "T:Microsoft.CodeAnalysis.SyntaxTrivia : newTrivia": "",
                  "T:Microsoft.CodeAnalysis.SyntaxTrivia : trivia": ""
                },
                "Returns": {
                  "!:TRoot": ""
                },
                "Content": "public static TRoot ReplaceTrivia<TRoot>(this TRoot root, SyntaxTrivia trivia, SyntaxTrivia newTrivia)where TRoot : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceTrivia``1(``0,Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia)\">\r\n    <summary>\r\n    Creates a new tree of nodes with the specified trivia replaced with new trivia.\r\n    </summary>\r\n    <typeparam name=\"TRoot\">The type of the root node.</typeparam>\r\n    <param name=\"root\">The root node of the tree of nodes.</param>\r\n    <param name=\"trivia\">The trivia to be replaced.</param>\r\n    <param name=\"newTrivia\">The new trivia to use in the new tree in place of the old trivia.</param>\r\n</member>\r\n",
                "StartLine": 241
              },
              "Syntax": {
                "Parameters": {
                  "!:TRoot : root": "",
                  "T:Microsoft.CodeAnalysis.SyntaxTrivia : newTrivia": "",
                  "T:Microsoft.CodeAnalysis.SyntaxTrivia : trivia": ""
                },
                "Returns": {
                  "!:TRoot": ""
                },
                "Content": "public static TRoot ReplaceTrivia<TRoot>(this TRoot root, SyntaxTrivia trivia, SyntaxTrivia newTrivia)where TRoot : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceTrivia``1(``0,Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia)\">\r\n    <summary>\r\n    Creates a new tree of nodes with the specified trivia replaced with new trivia.\r\n    </summary>\r\n    <typeparam name=\"TRoot\">The type of the root node.</typeparam>\r\n    <param name=\"root\">The root node of the tree of nodes.</param>\r\n    <param name=\"trivia\">The trivia to be replaced.</param>\r\n    <param name=\"newTrivia\">The new trivia to use in the new tree in place of the old trivia.</param>\r\n</member>\r\n",
                "StartLine": 241
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceTrivia``1(``0,Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeExtensions",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceTrivia``1(``0,Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia)\">\r\n    <summary>\r\n    Creates a new tree of nodes with the specified trivia replaced with new trivia.\r\n    </summary>\r\n    <typeparam name=\"TRoot\">The type of the root node.</typeparam>\r\n    <param name=\"root\">The root node of the tree of nodes.</param>\r\n    <param name=\"trivia\">The trivia to be replaced.</param>\r\n    <param name=\"newTrivia\">The new trivia to use in the new tree in place of the old trivia.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "!:TRoot : root": "",
                  "T:Microsoft.CodeAnalysis.SyntaxTrivia : oldTrivia": "",
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia} : newTrivia": ""
                },
                "Returns": {
                  "!:TRoot": ""
                },
                "Content": "public static TRoot ReplaceTrivia<TRoot>(this TRoot root, SyntaxTrivia oldTrivia, IEnumerable<SyntaxTrivia> newTrivia)where TRoot : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceTrivia``1(``0,Microsoft.CodeAnalysis.SyntaxTrivia,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})\">\r\n    <summary>\r\n    Creates a new tree of nodes with the specified old trivia replaced with new trivia.\r\n    </summary>\r\n    <typeparam name=\"TRoot\">The type of the root node.</typeparam>\r\n    <param name=\"root\">The root of the tree of nodes.</param>\r\n    <param name=\"oldTrivia\">The trivia to be replaced; a descendant of the root node.</param>\r\n    <param name=\"newTrivia\">A sequence of trivia to use in the tree in place of the specified trivia.</param>\r\n</member>\r\n",
                "StartLine": 158
              },
              "Syntax": {
                "Parameters": {
                  "!:TRoot : root": "",
                  "T:Microsoft.CodeAnalysis.SyntaxTrivia : oldTrivia": "",
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia} : newTrivia": ""
                },
                "Returns": {
                  "!:TRoot": ""
                },
                "Content": "public static TRoot ReplaceTrivia<TRoot>(this TRoot root, SyntaxTrivia oldTrivia, IEnumerable<SyntaxTrivia> newTrivia)where TRoot : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceTrivia``1(``0,Microsoft.CodeAnalysis.SyntaxTrivia,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})\">\r\n    <summary>\r\n    Creates a new tree of nodes with the specified old trivia replaced with new trivia.\r\n    </summary>\r\n    <typeparam name=\"TRoot\">The type of the root node.</typeparam>\r\n    <param name=\"root\">The root of the tree of nodes.</param>\r\n    <param name=\"oldTrivia\">The trivia to be replaced; a descendant of the root node.</param>\r\n    <param name=\"newTrivia\">A sequence of trivia to use in the tree in place of the specified trivia.</param>\r\n</member>\r\n",
                "StartLine": 158
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceTrivia``1(``0,Microsoft.CodeAnalysis.SyntaxTrivia,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeExtensions",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceTrivia``1(``0,Microsoft.CodeAnalysis.SyntaxTrivia,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})\">\r\n    <summary>\r\n    Creates a new tree of nodes with the specified old trivia replaced with new trivia.\r\n    </summary>\r\n    <typeparam name=\"TRoot\">The type of the root node.</typeparam>\r\n    <param name=\"root\">The root of the tree of nodes.</param>\r\n    <param name=\"oldTrivia\">The trivia to be replaced; a descendant of the root node.</param>\r\n    <param name=\"newTrivia\">A sequence of trivia to use in the tree in place of the specified trivia.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "!:TRoot : root": "",
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia} : trivia": "",
                  "T:System.Func{Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia} : computeReplacementTrivia": ""
                },
                "Returns": {
                  "!:TRoot": ""
                },
                "Content": "public static TRoot ReplaceTrivia<TRoot>(this TRoot root, IEnumerable<SyntaxTrivia> trivia, Func<SyntaxTrivia, SyntaxTrivia, SyntaxTrivia> computeReplacementTrivia)where TRoot : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceTrivia``1(``0,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia},System.Func{Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia})\">\r\n    <summary>\r\n    Creates a new tree of nodes with the specified trivia replaced with new trivia.\r\n    </summary>\r\n    <typeparam name=\"TRoot\">The type of the root node.</typeparam>\r\n    <param name=\"root\">The root node of the tree of nodes.</param>\r\n    <param name=\"trivia\">The trivia to be replaced; descendants of the root node.</param>\r\n    <param name=\"computeReplacementTrivia\">A function that computes replacement trivia for\r\n    the specified arguments. The first argument is the original trivia. The second argument is\r\n    the same trivia with potentially rewritten sub structure.</param>\r\n</member>\r\n",
                "StartLine": 228
              },
              "Syntax": {
                "Parameters": {
                  "!:TRoot : root": "",
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia} : trivia": "",
                  "T:System.Func{Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia} : computeReplacementTrivia": ""
                },
                "Returns": {
                  "!:TRoot": ""
                },
                "Content": "public static TRoot ReplaceTrivia<TRoot>(this TRoot root, IEnumerable<SyntaxTrivia> trivia, Func<SyntaxTrivia, SyntaxTrivia, SyntaxTrivia> computeReplacementTrivia)where TRoot : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceTrivia``1(``0,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia},System.Func{Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia})\">\r\n    <summary>\r\n    Creates a new tree of nodes with the specified trivia replaced with new trivia.\r\n    </summary>\r\n    <typeparam name=\"TRoot\">The type of the root node.</typeparam>\r\n    <param name=\"root\">The root node of the tree of nodes.</param>\r\n    <param name=\"trivia\">The trivia to be replaced; descendants of the root node.</param>\r\n    <param name=\"computeReplacementTrivia\">A function that computes replacement trivia for\r\n    the specified arguments. The first argument is the original trivia. The second argument is\r\n    the same trivia with potentially rewritten sub structure.</param>\r\n</member>\r\n",
                "StartLine": 228
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceTrivia``1(``0,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia},System.Func{Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia})",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeExtensions",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceTrivia``1(``0,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia},System.Func{Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia})\">\r\n    <summary>\r\n    Creates a new tree of nodes with the specified trivia replaced with new trivia.\r\n    </summary>\r\n    <typeparam name=\"TRoot\">The type of the root node.</typeparam>\r\n    <param name=\"root\">The root node of the tree of nodes.</param>\r\n    <param name=\"trivia\">The trivia to be replaced; descendants of the root node.</param>\r\n    <param name=\"computeReplacementTrivia\">A function that computes replacement trivia for\r\n    the specified arguments. The first argument is the original trivia. The second argument is\r\n    the same trivia with potentially rewritten sub structure.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "!:TRoot : root": "",
                  "T:System.Array : nodes": ""
                },
                "Returns": {
                  "!:TRoot": ""
                },
                "Content": "public static TRoot TrackNodes<TRoot>(this TRoot root, params SyntaxNode[] nodes)where TRoot : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.TrackNodes``1(``0,Microsoft.CodeAnalysis.SyntaxNode[])\">\r\n    <summary>\r\n    Creates a new tree of nodes with the specified nodes being tracked.\r\n    \r\n    Use GetCurrentNode on the subtree resulting from this operation, or any transformation of it,\r\n    to get the current node corresponding to the original tracked node.\r\n    </summary>\r\n    <param name=\"root\">The root of the subtree containing the nodes to be tracked.</param>\r\n    <param name=\"nodes\">One or more nodes that are descendants of the root node.</param>\r\n</member>\r\n",
                "StartLine": 59
              },
              "Syntax": {
                "Parameters": {
                  "!:TRoot : root": "",
                  "T:System.Array : nodes": ""
                },
                "Returns": {
                  "!:TRoot": ""
                },
                "Content": "public static TRoot TrackNodes<TRoot>(this TRoot root, params SyntaxNode[] nodes)where TRoot : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.TrackNodes``1(``0,Microsoft.CodeAnalysis.SyntaxNode[])\">\r\n    <summary>\r\n    Creates a new tree of nodes with the specified nodes being tracked.\r\n    \r\n    Use GetCurrentNode on the subtree resulting from this operation, or any transformation of it,\r\n    to get the current node corresponding to the original tracked node.\r\n    </summary>\r\n    <param name=\"root\">The root of the subtree containing the nodes to be tracked.</param>\r\n    <param name=\"nodes\">One or more nodes that are descendants of the root node.</param>\r\n</member>\r\n",
                "StartLine": 59
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.TrackNodes``1(``0,Microsoft.CodeAnalysis.SyntaxNode[])",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeExtensions",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.TrackNodes``1(``0,Microsoft.CodeAnalysis.SyntaxNode[])\">\r\n    <summary>\r\n    Creates a new tree of nodes with the specified nodes being tracked.\r\n    \r\n    Use GetCurrentNode on the subtree resulting from this operation, or any transformation of it,\r\n    to get the current node corresponding to the original tracked node.\r\n    </summary>\r\n    <param name=\"root\">The root of the subtree containing the nodes to be tracked.</param>\r\n    <param name=\"nodes\">One or more nodes that are descendants of the root node.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "!:TRoot : root": "",
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode} : nodes": ""
                },
                "Returns": {
                  "!:TRoot": ""
                },
                "Content": "public static TRoot TrackNodes<TRoot>(this TRoot root, IEnumerable<SyntaxNode> nodes)where TRoot : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.TrackNodes``1(``0,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})\">\r\n    <summary>\r\n    Creates a new tree of nodes with the specified nodes being tracked.\r\n    \r\n    Use GetCurrentNode on the subtree resulting from this operation, or any transformation of it,\r\n    to get the current node corresponding to the original tracked node.\r\n    </summary>\r\n    <param name=\"root\">The root of the subtree containing the nodes to be tracked.</param>\r\n    <param name=\"nodes\">One or more nodes that are descendants of the root node.</param>\r\n</member>\r\n",
                "StartLine": 29
              },
              "Syntax": {
                "Parameters": {
                  "!:TRoot : root": "",
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode} : nodes": ""
                },
                "Returns": {
                  "!:TRoot": ""
                },
                "Content": "public static TRoot TrackNodes<TRoot>(this TRoot root, IEnumerable<SyntaxNode> nodes)where TRoot : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.TrackNodes``1(``0,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})\">\r\n    <summary>\r\n    Creates a new tree of nodes with the specified nodes being tracked.\r\n    \r\n    Use GetCurrentNode on the subtree resulting from this operation, or any transformation of it,\r\n    to get the current node corresponding to the original tracked node.\r\n    </summary>\r\n    <param name=\"root\">The root of the subtree containing the nodes to be tracked.</param>\r\n    <param name=\"nodes\">One or more nodes that are descendants of the root node.</param>\r\n</member>\r\n",
                "StartLine": 29
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.TrackNodes``1(``0,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeExtensions",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.TrackNodes``1(``0,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNode})\">\r\n    <summary>\r\n    Creates a new tree of nodes with the specified nodes being tracked.\r\n    \r\n    Use GetCurrentNode on the subtree resulting from this operation, or any transformation of it,\r\n    to get the current node corresponding to the original tracked node.\r\n    </summary>\r\n    <param name=\"root\">The root of the subtree containing the nodes to be tracked.</param>\r\n    <param name=\"nodes\">One or more nodes that are descendants of the root node.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "!:TSyntax : node": "",
                  "T:System.Array : trivia": ""
                },
                "Returns": {
                  "!:TSyntax": ""
                },
                "Content": "public static TSyntax WithLeadingTrivia<TSyntax>(this TSyntax node, params SyntaxTrivia[] trivia)where TSyntax : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithLeadingTrivia``1(``0,Microsoft.CodeAnalysis.SyntaxTrivia[])\">\r\n    <summary>\r\n    Creates a new node from this node with the leading trivia replaced.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 350
              },
              "Syntax": {
                "Parameters": {
                  "!:TSyntax : node": "",
                  "T:System.Array : trivia": ""
                },
                "Returns": {
                  "!:TSyntax": ""
                },
                "Content": "public static TSyntax WithLeadingTrivia<TSyntax>(this TSyntax node, params SyntaxTrivia[] trivia)where TSyntax : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithLeadingTrivia``1(``0,Microsoft.CodeAnalysis.SyntaxTrivia[])\">\r\n    <summary>\r\n    Creates a new node from this node with the leading trivia replaced.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 350
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithLeadingTrivia``1(``0,Microsoft.CodeAnalysis.SyntaxTrivia[])",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeExtensions",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithLeadingTrivia``1(``0,Microsoft.CodeAnalysis.SyntaxTrivia[])\">\r\n    <summary>\r\n    Creates a new node from this node with the leading trivia replaced.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "!:TSyntax : node": "",
                  "T:Microsoft.CodeAnalysis.SyntaxTriviaList : trivia": ""
                },
                "Returns": {
                  "!:TSyntax": ""
                },
                "Content": "public static TSyntax WithLeadingTrivia<TSyntax>(this TSyntax node, SyntaxTriviaList trivia)where TSyntax : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithLeadingTrivia``1(``0,Microsoft.CodeAnalysis.SyntaxTriviaList)\">\r\n    <summary>\r\n    Creates a new node from this node with the leading trivia replaced.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 316
              },
              "Syntax": {
                "Parameters": {
                  "!:TSyntax : node": "",
                  "T:Microsoft.CodeAnalysis.SyntaxTriviaList : trivia": ""
                },
                "Returns": {
                  "!:TSyntax": ""
                },
                "Content": "public static TSyntax WithLeadingTrivia<TSyntax>(this TSyntax node, SyntaxTriviaList trivia)where TSyntax : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithLeadingTrivia``1(``0,Microsoft.CodeAnalysis.SyntaxTriviaList)\">\r\n    <summary>\r\n    Creates a new node from this node with the leading trivia replaced.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 316
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithLeadingTrivia``1(``0,Microsoft.CodeAnalysis.SyntaxTriviaList)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeExtensions",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithLeadingTrivia``1(``0,Microsoft.CodeAnalysis.SyntaxTriviaList)\">\r\n    <summary>\r\n    Creates a new node from this node with the leading trivia replaced.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "!:TSyntax : node": "",
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia} : trivia": ""
                },
                "Returns": {
                  "!:TSyntax": ""
                },
                "Content": "public static TSyntax WithLeadingTrivia<TSyntax>(this TSyntax node, IEnumerable<SyntaxTrivia> trivia)where TSyntax : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithLeadingTrivia``1(``0,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})\">\r\n    <summary>\r\n    Creates a new node from this node with the leading trivia replaced.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 328
              },
              "Syntax": {
                "Parameters": {
                  "!:TSyntax : node": "",
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia} : trivia": ""
                },
                "Returns": {
                  "!:TSyntax": ""
                },
                "Content": "public static TSyntax WithLeadingTrivia<TSyntax>(this TSyntax node, IEnumerable<SyntaxTrivia> trivia)where TSyntax : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithLeadingTrivia``1(``0,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})\">\r\n    <summary>\r\n    Creates a new node from this node with the leading trivia replaced.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 328
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithLeadingTrivia``1(``0,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeExtensions",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithLeadingTrivia``1(``0,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})\">\r\n    <summary>\r\n    Creates a new node from this node with the leading trivia replaced.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "!:TSyntax : node": ""
                },
                "Returns": {
                  "!:TSyntax": ""
                },
                "Content": "public static TSyntax WithoutLeadingTrivia<TSyntax>(this TSyntax node)where TSyntax : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithoutLeadingTrivia``1(``0)\">\r\n    <summary>\r\n    Creates a new node from this node with the leading trivia removed.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 340
              },
              "Syntax": {
                "Parameters": {
                  "!:TSyntax : node": ""
                },
                "Returns": {
                  "!:TSyntax": ""
                },
                "Content": "public static TSyntax WithoutLeadingTrivia<TSyntax>(this TSyntax node)where TSyntax : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithoutLeadingTrivia``1(``0)\">\r\n    <summary>\r\n    Creates a new node from this node with the leading trivia removed.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 340
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithoutLeadingTrivia``1(``0)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeExtensions",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithoutLeadingTrivia``1(``0)\">\r\n    <summary>\r\n    Creates a new node from this node with the leading trivia removed.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "!:TSyntax : node": ""
                },
                "Returns": {
                  "!:TSyntax": ""
                },
                "Content": "public static TSyntax WithoutTrailingTrivia<TSyntax>(this TSyntax node)where TSyntax : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithoutTrailingTrivia``1(``0)\">\r\n    <summary>\r\n    Creates a new node from this node with the trailing trivia removed.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 384
              },
              "Syntax": {
                "Parameters": {
                  "!:TSyntax : node": ""
                },
                "Returns": {
                  "!:TSyntax": ""
                },
                "Content": "public static TSyntax WithoutTrailingTrivia<TSyntax>(this TSyntax node)where TSyntax : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithoutTrailingTrivia``1(``0)\">\r\n    <summary>\r\n    Creates a new node from this node with the trailing trivia removed.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 384
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithoutTrailingTrivia``1(``0)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeExtensions",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithoutTrailingTrivia``1(``0)\">\r\n    <summary>\r\n    Creates a new node from this node with the trailing trivia removed.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "!:TSyntax : syntax": ""
                },
                "Returns": {
                  "!:TSyntax": ""
                },
                "Content": "public static TSyntax WithoutTrivia<TSyntax>(this TSyntax syntax)where TSyntax : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithoutTrivia``1(``0)\">\r\n    <summary>\r\n    Creates a new node from this node without leading or trailing trivia.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 307
              },
              "Syntax": {
                "Parameters": {
                  "!:TSyntax : syntax": ""
                },
                "Returns": {
                  "!:TSyntax": ""
                },
                "Content": "public static TSyntax WithoutTrivia<TSyntax>(this TSyntax syntax)where TSyntax : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithoutTrivia``1(``0)\">\r\n    <summary>\r\n    Creates a new node from this node without leading or trailing trivia.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 307
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithoutTrivia``1(``0)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeExtensions",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithoutTrivia``1(``0)\">\r\n    <summary>\r\n    Creates a new node from this node without leading or trailing trivia.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "!:TSyntax : node": "",
                  "T:System.Array : trivia": ""
                },
                "Returns": {
                  "!:TSyntax": ""
                },
                "Content": "public static TSyntax WithTrailingTrivia<TSyntax>(this TSyntax node, params SyntaxTrivia[] trivia)where TSyntax : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithTrailingTrivia``1(``0,Microsoft.CodeAnalysis.SyntaxTrivia[])\">\r\n    <summary>\r\n    Creates a new node from this node with the trailing trivia replaced.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 394
              },
              "Syntax": {
                "Parameters": {
                  "!:TSyntax : node": "",
                  "T:System.Array : trivia": ""
                },
                "Returns": {
                  "!:TSyntax": ""
                },
                "Content": "public static TSyntax WithTrailingTrivia<TSyntax>(this TSyntax node, params SyntaxTrivia[] trivia)where TSyntax : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithTrailingTrivia``1(``0,Microsoft.CodeAnalysis.SyntaxTrivia[])\">\r\n    <summary>\r\n    Creates a new node from this node with the trailing trivia replaced.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 394
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithTrailingTrivia``1(``0,Microsoft.CodeAnalysis.SyntaxTrivia[])",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeExtensions",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithTrailingTrivia``1(``0,Microsoft.CodeAnalysis.SyntaxTrivia[])\">\r\n    <summary>\r\n    Creates a new node from this node with the trailing trivia replaced.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "!:TSyntax : node": "",
                  "T:Microsoft.CodeAnalysis.SyntaxTriviaList : trivia": ""
                },
                "Returns": {
                  "!:TSyntax": ""
                },
                "Content": "public static TSyntax WithTrailingTrivia<TSyntax>(this TSyntax node, SyntaxTriviaList trivia)where TSyntax : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithTrailingTrivia``1(``0,Microsoft.CodeAnalysis.SyntaxTriviaList)\">\r\n    <summary>\r\n    Creates a new node from this node with the trailing trivia replaced.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 360
              },
              "Syntax": {
                "Parameters": {
                  "!:TSyntax : node": "",
                  "T:Microsoft.CodeAnalysis.SyntaxTriviaList : trivia": ""
                },
                "Returns": {
                  "!:TSyntax": ""
                },
                "Content": "public static TSyntax WithTrailingTrivia<TSyntax>(this TSyntax node, SyntaxTriviaList trivia)where TSyntax : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithTrailingTrivia``1(``0,Microsoft.CodeAnalysis.SyntaxTriviaList)\">\r\n    <summary>\r\n    Creates a new node from this node with the trailing trivia replaced.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 360
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithTrailingTrivia``1(``0,Microsoft.CodeAnalysis.SyntaxTriviaList)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeExtensions",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithTrailingTrivia``1(``0,Microsoft.CodeAnalysis.SyntaxTriviaList)\">\r\n    <summary>\r\n    Creates a new node from this node with the trailing trivia replaced.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "!:TSyntax : node": "",
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia} : trivia": ""
                },
                "Returns": {
                  "!:TSyntax": ""
                },
                "Content": "public static TSyntax WithTrailingTrivia<TSyntax>(this TSyntax node, IEnumerable<SyntaxTrivia> trivia)where TSyntax : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithTrailingTrivia``1(``0,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})\">\r\n    <summary>\r\n    Creates a new node from this node with the trailing trivia replaced.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 372
              },
              "Syntax": {
                "Parameters": {
                  "!:TSyntax : node": "",
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia} : trivia": ""
                },
                "Returns": {
                  "!:TSyntax": ""
                },
                "Content": "public static TSyntax WithTrailingTrivia<TSyntax>(this TSyntax node, IEnumerable<SyntaxTrivia> trivia)where TSyntax : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithTrailingTrivia``1(``0,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})\">\r\n    <summary>\r\n    Creates a new node from this node with the trailing trivia replaced.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 372
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithTrailingTrivia``1(``0,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeExtensions",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithTrailingTrivia``1(``0,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})\">\r\n    <summary>\r\n    Creates a new node from this node with the trailing trivia replaced.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "!:TSyntax : syntax": "",
                  "T:Microsoft.CodeAnalysis.SyntaxNode : node": ""
                },
                "Returns": {
                  "!:TSyntax": ""
                },
                "Content": "public static TSyntax WithTriviaFrom<TSyntax>(this TSyntax syntax, SyntaxNode node)where TSyntax : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithTriviaFrom``1(``0,Microsoft.CodeAnalysis.SyntaxNode)\">\r\n    <summary>\r\n    Creates a new node from this node with both the leading and trailing trivia of the specified node.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 298
              },
              "Syntax": {
                "Parameters": {
                  "!:TSyntax : syntax": "",
                  "T:Microsoft.CodeAnalysis.SyntaxNode : node": ""
                },
                "Returns": {
                  "!:TSyntax": ""
                },
                "Content": "public static TSyntax WithTriviaFrom<TSyntax>(this TSyntax syntax, SyntaxNode node)where TSyntax : SyntaxNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithTriviaFrom``1(``0,Microsoft.CodeAnalysis.SyntaxNode)\">\r\n    <summary>\r\n    Creates a new node from this node with both the leading and trailing trivia of the specified node.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 298
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithTriviaFrom``1(``0,Microsoft.CodeAnalysis.SyntaxNode)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeExtensions",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeExtensions.WithTriviaFrom``1(``0,Microsoft.CodeAnalysis.SyntaxNode)\">\r\n    <summary>\r\n    Creates a new node from this node with both the leading and trailing trivia of the specified node.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Syntax\\SyntaxNodeExtensions.cs",
          "InheritanceHierarchy": [
            "T:System.Object"
          ],
          "Syntax": {
            "Content": "public static partial class SyntaxNodeExtensions",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.CodeAnalysis.SyntaxNodeExtensions",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxNode": ""
                },
                "Content": "public abstract SyntaxNode GetSyntax(CancellationToken cancellationToken = default (CancellationToken));",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxReference.GetSyntax(System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Retrieves the original referenced syntax node.  \r\n    This action may cause a parse to happen to recover the syntax node.\r\n    </summary>\r\n    <returns>The original referenced syntax node.</returns>\r\n</member>\r\n",
                "StartLine": 28
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxNode": ""
                },
                "Content": "public abstract SyntaxNode GetSyntax(CancellationToken cancellationToken = default (CancellationToken));",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxReference.GetSyntax(System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Retrieves the original referenced syntax node.  \r\n    This action may cause a parse to happen to recover the syntax node.\r\n    </summary>\r\n    <returns>The original referenced syntax node.</returns>\r\n</member>\r\n",
                "StartLine": 28
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxReference.GetSyntax(System.Threading.CancellationToken)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxReference",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxReference.GetSyntax(System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Retrieves the original referenced syntax node.  \r\n    This action may cause a parse to happen to recover the syntax node.\r\n    </summary>\r\n    <returns>The original referenced syntax node.</returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:System.Threading.Tasks.Task{Microsoft.CodeAnalysis.SyntaxNode}": ""
                },
                "Content": "public virtual Task<SyntaxNode> GetSyntaxAsync(CancellationToken cancellationToken = default (CancellationToken))",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxReference.GetSyntaxAsync(System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Retrieves the original referenced syntax node.  \r\n    This action may cause a parse to happen to recover the syntax node.\r\n    </summary>\r\n    <returns>The original referenced syntax node.</returns>\r\n</member>\r\n",
                "StartLine": 35
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:System.Threading.Tasks.Task{Microsoft.CodeAnalysis.SyntaxNode}": ""
                },
                "Content": "public virtual Task<SyntaxNode> GetSyntaxAsync(CancellationToken cancellationToken = default (CancellationToken))",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxReference.GetSyntaxAsync(System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Retrieves the original referenced syntax node.  \r\n    This action may cause a parse to happen to recover the syntax node.\r\n    </summary>\r\n    <returns>The original referenced syntax node.</returns>\r\n</member>\r\n",
                "StartLine": 35
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxReference.GetSyntaxAsync(System.Threading.CancellationToken)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxReference",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxReference.GetSyntaxAsync(System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Retrieves the original referenced syntax node.  \r\n    This action may cause a parse to happen to recover the syntax node.\r\n    </summary>\r\n    <returns>The original referenced syntax node.</returns>\r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Text.TextSpan",
                "Content": "public abstract TextSpan Span",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxReference.Span\">\r\n    <summary>\r\n    The span of the node referenced.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 21
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Text.TextSpan",
                "Content": "public abstract TextSpan Span",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxReference.Span\">\r\n    <summary>\r\n    The span of the node referenced.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 21
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxReference.Span",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxReference",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxReference.Span\">\r\n    <summary>\r\n    The span of the node referenced.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SyntaxTree",
                "Content": "public abstract SyntaxTree SyntaxTree",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxReference.SyntaxTree\">\r\n    <summary>\r\n    The syntax tree that this references a node within.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 16
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SyntaxTree",
                "Content": "public abstract SyntaxTree SyntaxTree",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxReference.SyntaxTree\">\r\n    <summary>\r\n    The syntax tree that this references a node within.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 16
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxReference.SyntaxTree",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxReference",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxReference.SyntaxTree\">\r\n    <summary>\r\n    The syntax tree that this references a node within.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Syntax\\SyntaxReference.cs",
          "InheritanceHierarchy": [
            "T:System.Object"
          ],
          "Syntax": {
            "Content": "public abstract class SyntaxReference",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.SyntaxReference\">\r\n    <summary>\r\n    A reference to a syntax node.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.SyntaxReference",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.SyntaxReference\">\r\n    <summary>\r\n    A reference to a syntax node.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxTree : syntaxTree": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IList{Microsoft.CodeAnalysis.Text.TextSpan}": ""
                },
                "Content": "public abstract IList<TextSpan> GetChangedSpans(SyntaxTree syntaxTree);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.GetChangedSpans(Microsoft.CodeAnalysis.SyntaxTree)\">\r\n    <summary>\r\n    Returns a list of the changed regions between this tree and the specified tree. The list is conservative for\r\n    performance reasons. It may return larger regions than what has actually changed.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 278
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxTree : syntaxTree": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IList{Microsoft.CodeAnalysis.Text.TextSpan}": ""
                },
                "Content": "public abstract IList<TextSpan> GetChangedSpans(SyntaxTree syntaxTree);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.GetChangedSpans(Microsoft.CodeAnalysis.SyntaxTree)\">\r\n    <summary>\r\n    Returns a list of the changed regions between this tree and the specified tree. The list is conservative for\r\n    performance reasons. It may return larger regions than what has actually changed.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 278
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTree.GetChangedSpans(Microsoft.CodeAnalysis.SyntaxTree)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTree",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.GetChangedSpans(Microsoft.CodeAnalysis.SyntaxTree)\">\r\n    <summary>\r\n    Returns a list of the changed regions between this tree and the specified tree. The list is conservative for\r\n    performance reasons. It may return larger regions than what has actually changed.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxTree : oldTree": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IList{Microsoft.CodeAnalysis.Text.TextChange}": ""
                },
                "Content": "public abstract IList<TextChange> GetChanges(SyntaxTree oldTree);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.GetChanges(Microsoft.CodeAnalysis.SyntaxTree)\">\r\n    <summary>\r\n    Gets a list of text changes that when applied to the old tree produce this tree.\r\n    </summary>\r\n    <param name=\"oldTree\">The old tree.</param>\r\n    <remarks>The list of changes may be different than the original changes that produced\r\n    this tree.</remarks>\r\n</member>\r\n",
                "StartLine": 308
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxTree : oldTree": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IList{Microsoft.CodeAnalysis.Text.TextChange}": ""
                },
                "Content": "public abstract IList<TextChange> GetChanges(SyntaxTree oldTree);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.GetChanges(Microsoft.CodeAnalysis.SyntaxTree)\">\r\n    <summary>\r\n    Gets a list of text changes that when applied to the old tree produce this tree.\r\n    </summary>\r\n    <param name=\"oldTree\">The old tree.</param>\r\n    <remarks>The list of changes may be different than the original changes that produced\r\n    this tree.</remarks>\r\n</member>\r\n",
                "StartLine": 308
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTree.GetChanges(Microsoft.CodeAnalysis.SyntaxTree)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTree",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.GetChanges(Microsoft.CodeAnalysis.SyntaxTree)\">\r\n    <summary>\r\n    Gets a list of text changes that when applied to the old tree produce this tree.\r\n    </summary>\r\n    <param name=\"oldTree\">The old tree.</param>\r\n    <remarks>The list of changes may be different than the original changes that produced\r\n    this tree.</remarks>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxNode : node": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Diagnostic}": ""
                },
                "Content": "public abstract IEnumerable<Diagnostic> GetDiagnostics(SyntaxNode node);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.GetDiagnostics(Microsoft.CodeAnalysis.SyntaxNode)\">\r\n    <summary>\r\n    Gets a list of all the diagnostics in the sub tree that has the specified node as its root.\r\n    This method does not filter diagnostics based on #pragmas and compiler options\r\n    like nowarn, warnaserror etc.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 154
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxNode : node": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Diagnostic}": ""
                },
                "Content": "public abstract IEnumerable<Diagnostic> GetDiagnostics(SyntaxNode node);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.GetDiagnostics(Microsoft.CodeAnalysis.SyntaxNode)\">\r\n    <summary>\r\n    Gets a list of all the diagnostics in the sub tree that has the specified node as its root.\r\n    This method does not filter diagnostics based on #pragmas and compiler options\r\n    like nowarn, warnaserror etc.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 154
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTree.GetDiagnostics(Microsoft.CodeAnalysis.SyntaxNode)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTree",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.GetDiagnostics(Microsoft.CodeAnalysis.SyntaxNode)\">\r\n    <summary>\r\n    Gets a list of all the diagnostics in the sub tree that has the specified node as its root.\r\n    This method does not filter diagnostics based on #pragmas and compiler options\r\n    like nowarn, warnaserror etc.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken : nodeOrToken": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Diagnostic}": ""
                },
                "Content": "public abstract IEnumerable<Diagnostic> GetDiagnostics(SyntaxNodeOrToken nodeOrToken);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.GetDiagnostics(Microsoft.CodeAnalysis.SyntaxNodeOrToken)\">\r\n    <summary>\r\n    Gets a list of all the diagnostics in either the sub tree that has the specified node as its root or\r\n    associated with the token and its related trivia. \r\n    This method does not filter diagnostics based on #pragmas and compiler options\r\n    like nowarn, warnaserror etc.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 176
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken : nodeOrToken": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Diagnostic}": ""
                },
                "Content": "public abstract IEnumerable<Diagnostic> GetDiagnostics(SyntaxNodeOrToken nodeOrToken);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.GetDiagnostics(Microsoft.CodeAnalysis.SyntaxNodeOrToken)\">\r\n    <summary>\r\n    Gets a list of all the diagnostics in either the sub tree that has the specified node as its root or\r\n    associated with the token and its related trivia. \r\n    This method does not filter diagnostics based on #pragmas and compiler options\r\n    like nowarn, warnaserror etc.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 176
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTree.GetDiagnostics(Microsoft.CodeAnalysis.SyntaxNodeOrToken)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTree",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.GetDiagnostics(Microsoft.CodeAnalysis.SyntaxNodeOrToken)\">\r\n    <summary>\r\n    Gets a list of all the diagnostics in either the sub tree that has the specified node as its root or\r\n    associated with the token and its related trivia. \r\n    This method does not filter diagnostics based on #pragmas and compiler options\r\n    like nowarn, warnaserror etc.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxToken : token": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Diagnostic}": ""
                },
                "Content": "public abstract IEnumerable<Diagnostic> GetDiagnostics(SyntaxToken token);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.GetDiagnostics(Microsoft.CodeAnalysis.SyntaxToken)\">\r\n    <summary>\r\n    Gets a list of all the diagnostics associated with the token and any related trivia.\r\n    This method does not filter diagnostics based on #pragmas and compiler options\r\n    like nowarn, warnaserror etc.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 161
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxToken : token": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Diagnostic}": ""
                },
                "Content": "public abstract IEnumerable<Diagnostic> GetDiagnostics(SyntaxToken token);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.GetDiagnostics(Microsoft.CodeAnalysis.SyntaxToken)\">\r\n    <summary>\r\n    Gets a list of all the diagnostics associated with the token and any related trivia.\r\n    This method does not filter diagnostics based on #pragmas and compiler options\r\n    like nowarn, warnaserror etc.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 161
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTree.GetDiagnostics(Microsoft.CodeAnalysis.SyntaxToken)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTree",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.GetDiagnostics(Microsoft.CodeAnalysis.SyntaxToken)\">\r\n    <summary>\r\n    Gets a list of all the diagnostics associated with the token and any related trivia.\r\n    This method does not filter diagnostics based on #pragmas and compiler options\r\n    like nowarn, warnaserror etc.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxTrivia : trivia": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Diagnostic}": ""
                },
                "Content": "public abstract IEnumerable<Diagnostic> GetDiagnostics(SyntaxTrivia trivia);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.GetDiagnostics(Microsoft.CodeAnalysis.SyntaxTrivia)\">\r\n    <summary>\r\n    Gets a list of all the diagnostics associated with the trivia.\r\n    This method does not filter diagnostics based on #pragmas and compiler options\r\n    like nowarn, warnaserror etc.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 168
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxTrivia : trivia": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Diagnostic}": ""
                },
                "Content": "public abstract IEnumerable<Diagnostic> GetDiagnostics(SyntaxTrivia trivia);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.GetDiagnostics(Microsoft.CodeAnalysis.SyntaxTrivia)\">\r\n    <summary>\r\n    Gets a list of all the diagnostics associated with the trivia.\r\n    This method does not filter diagnostics based on #pragmas and compiler options\r\n    like nowarn, warnaserror etc.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 168
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTree.GetDiagnostics(Microsoft.CodeAnalysis.SyntaxTrivia)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTree",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.GetDiagnostics(Microsoft.CodeAnalysis.SyntaxTrivia)\">\r\n    <summary>\r\n    Gets a list of all the diagnostics associated with the trivia.\r\n    This method does not filter diagnostics based on #pragmas and compiler options\r\n    like nowarn, warnaserror etc.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Diagnostic}": ""
                },
                "Content": "public abstract IEnumerable<Diagnostic> GetDiagnostics(CancellationToken cancellationToken = default (CancellationToken));",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.GetDiagnostics(System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Gets a list of all the diagnostics in the syntax tree.\r\n    This method does not filter diagnostics based on #pragmas and compiler options\r\n    like nowarn, warnaserror etc.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 147
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Diagnostic}": ""
                },
                "Content": "public abstract IEnumerable<Diagnostic> GetDiagnostics(CancellationToken cancellationToken = default (CancellationToken));",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.GetDiagnostics(System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Gets a list of all the diagnostics in the syntax tree.\r\n    This method does not filter diagnostics based on #pragmas and compiler options\r\n    like nowarn, warnaserror etc.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 147
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTree.GetDiagnostics(System.Threading.CancellationToken)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTree",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.GetDiagnostics(System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Gets a list of all the diagnostics in the syntax tree.\r\n    This method does not filter diagnostics based on #pragmas and compiler options\r\n    like nowarn, warnaserror etc.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.TextSpan : span": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.FileLinePositionSpan": ""
                },
                "Content": "public abstract FileLinePositionSpan GetLineSpan(TextSpan span, CancellationToken cancellationToken = default (CancellationToken));",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.GetLineSpan(Microsoft.CodeAnalysis.Text.TextSpan,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Gets the location in terms of path, line and column for a given span.\r\n    </summary>\r\n    <param name=\"span\">Span within the tree.</param>\r\n    <param name=\"cancellationToken\">Cancallation token.</param>\r\n    <returns>\r\n    A valid <see cref=\"T:Microsoft.CodeAnalysis.FileLinePositionSpan\"/> that contains path, line and column information.\r\n    The values are not affected by line mapping directives (<code>#line</code>).\r\n    </returns>\r\n</member>\r\n",
                "StartLine": 187
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.TextSpan : span": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.FileLinePositionSpan": ""
                },
                "Content": "public abstract FileLinePositionSpan GetLineSpan(TextSpan span, CancellationToken cancellationToken = default (CancellationToken));",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.GetLineSpan(Microsoft.CodeAnalysis.Text.TextSpan,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Gets the location in terms of path, line and column for a given span.\r\n    </summary>\r\n    <param name=\"span\">Span within the tree.</param>\r\n    <param name=\"cancellationToken\">Cancallation token.</param>\r\n    <returns>\r\n    A valid <see cref=\"T:Microsoft.CodeAnalysis.FileLinePositionSpan\"/> that contains path, line and column information.\r\n    The values are not affected by line mapping directives (<code>#line</code>).\r\n    </returns>\r\n</member>\r\n",
                "StartLine": 187
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTree.GetLineSpan(Microsoft.CodeAnalysis.Text.TextSpan,System.Threading.CancellationToken)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTree",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.GetLineSpan(Microsoft.CodeAnalysis.Text.TextSpan,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Gets the location in terms of path, line and column for a given span.\r\n    </summary>\r\n    <param name=\"span\">Span within the tree.</param>\r\n    <param name=\"cancellationToken\">Cancallation token.</param>\r\n    <returns>\r\n    A valid <see cref=\"T:Microsoft.CodeAnalysis.FileLinePositionSpan\"/> that contains path, line and column information.\r\n    The values are not affected by line mapping directives (<code>#line</code>).\r\n    </returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Int32 : position": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.LineVisibility": ""
                },
                "Content": "public virtual LineVisibility GetLineVisibility(int position, CancellationToken cancellationToken = default (CancellationToken))",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.GetLineVisibility(System.Int32,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Returns the visibility for the line at the given position.\r\n    </summary>\r\n    <param name=\"position\">The position to check.</param>\r\n    <param name=\"cancellationToken\">The cancellation token.</param> \r\n</member>\r\n",
                "StartLine": 211
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Int32 : position": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.LineVisibility": ""
                },
                "Content": "public virtual LineVisibility GetLineVisibility(int position, CancellationToken cancellationToken = default (CancellationToken))",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.GetLineVisibility(System.Int32,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Returns the visibility for the line at the given position.\r\n    </summary>\r\n    <param name=\"position\">The position to check.</param>\r\n    <param name=\"cancellationToken\">The cancellation token.</param> \r\n</member>\r\n",
                "StartLine": 211
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTree.GetLineVisibility(System.Int32,System.Threading.CancellationToken)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTree",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.GetLineVisibility(System.Int32,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Returns the visibility for the line at the given position.\r\n    </summary>\r\n    <param name=\"position\">The position to check.</param>\r\n    <param name=\"cancellationToken\">The cancellation token.</param> \r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.TextSpan : span": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Location": ""
                },
                "Content": "public abstract Location GetLocation(TextSpan span);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.GetLocation(Microsoft.CodeAnalysis.Text.TextSpan)\">\r\n    <summary>\r\n    Gets a location for the specified text span.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 283
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.TextSpan : span": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Location": ""
                },
                "Content": "public abstract Location GetLocation(TextSpan span);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.GetLocation(Microsoft.CodeAnalysis.Text.TextSpan)\">\r\n    <summary>\r\n    Gets a location for the specified text span.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 283
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTree.GetLocation(Microsoft.CodeAnalysis.Text.TextSpan)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTree",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.GetLocation(Microsoft.CodeAnalysis.Text.TextSpan)\">\r\n    <summary>\r\n    Gets a location for the specified text span.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.TextSpan : span": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.FileLinePositionSpan": ""
                },
                "Content": "public abstract FileLinePositionSpan GetMappedLineSpan(TextSpan span, CancellationToken cancellationToken = default (CancellationToken));",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.GetMappedLineSpan(Microsoft.CodeAnalysis.Text.TextSpan,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Gets the location in terms of path, line and column after applying source line mapping directives \r\n    (<code>#line</code> in C# or <code>#ExternalSource</code> in VB). \r\n    </summary>\r\n    <param name=\"span\">Span within the tree.</param>\r\n    <param name=\"cancellationToken\">Cancallation token.</param>\r\n    <returns>\r\n    A valid <see cref=\"T:Microsoft.CodeAnalysis.FileLinePositionSpan\"/> that contains path, line and column information.\r\n    \r\n    If the location path is mapped the resulting path is the path specified in the corresponding <code>#line</code>,\r\n    otherwise it's <see cref=\"P:Microsoft.CodeAnalysis.SyntaxTree.FilePath\"/>.\r\n    \r\n    A location path is considered mapped if the first <code>#line</code> directive that preceeds it and that \r\n    either specifies an explicit file path or is <code>#line default</code> exists and specifies an explicit path.\r\n    </returns>\r\n</member>\r\n",
                "StartLine": 204
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.TextSpan : span": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.FileLinePositionSpan": ""
                },
                "Content": "public abstract FileLinePositionSpan GetMappedLineSpan(TextSpan span, CancellationToken cancellationToken = default (CancellationToken));",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.GetMappedLineSpan(Microsoft.CodeAnalysis.Text.TextSpan,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Gets the location in terms of path, line and column after applying source line mapping directives \r\n    (<code>#line</code> in C# or <code>#ExternalSource</code> in VB). \r\n    </summary>\r\n    <param name=\"span\">Span within the tree.</param>\r\n    <param name=\"cancellationToken\">Cancallation token.</param>\r\n    <returns>\r\n    A valid <see cref=\"T:Microsoft.CodeAnalysis.FileLinePositionSpan\"/> that contains path, line and column information.\r\n    \r\n    If the location path is mapped the resulting path is the path specified in the corresponding <code>#line</code>,\r\n    otherwise it's <see cref=\"P:Microsoft.CodeAnalysis.SyntaxTree.FilePath\"/>.\r\n    \r\n    A location path is considered mapped if the first <code>#line</code> directive that preceeds it and that \r\n    either specifies an explicit file path or is <code>#line default</code> exists and specifies an explicit path.\r\n    </returns>\r\n</member>\r\n",
                "StartLine": 204
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTree.GetMappedLineSpan(Microsoft.CodeAnalysis.Text.TextSpan,System.Threading.CancellationToken)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTree",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.GetMappedLineSpan(Microsoft.CodeAnalysis.Text.TextSpan,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Gets the location in terms of path, line and column after applying source line mapping directives \r\n    (<code>#line</code> in C# or <code>#ExternalSource</code> in VB). \r\n    </summary>\r\n    <param name=\"span\">Span within the tree.</param>\r\n    <param name=\"cancellationToken\">Cancallation token.</param>\r\n    <returns>\r\n    A valid <see cref=\"T:Microsoft.CodeAnalysis.FileLinePositionSpan\"/> that contains path, line and column information.\r\n    \r\n    If the location path is mapped the resulting path is the path specified in the corresponding <code>#line</code>,\r\n    otherwise it's <see cref=\"P:Microsoft.CodeAnalysis.SyntaxTree.FilePath\"/>.\r\n    \r\n    A location path is considered mapped if the first <code>#line</code> directive that preceeds it and that \r\n    either specifies an explicit file path or is <code>#line default</code> exists and specifies an explicit path.\r\n    </returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxNode : node": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxReference": ""
                },
                "Content": "public abstract SyntaxReference GetReference(SyntaxNode node);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.GetReference(Microsoft.CodeAnalysis.SyntaxNode)\">\r\n    <summary>\r\n    Gets a SyntaxReference for a specified syntax node. SyntaxReferences can be used to\r\n    regain access to a syntax node without keeping the entire tree and source text in\r\n    memory.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 300
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxNode : node": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxReference": ""
                },
                "Content": "public abstract SyntaxReference GetReference(SyntaxNode node);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.GetReference(Microsoft.CodeAnalysis.SyntaxNode)\">\r\n    <summary>\r\n    Gets a SyntaxReference for a specified syntax node. SyntaxReferences can be used to\r\n    regain access to a syntax node without keeping the entire tree and source text in\r\n    memory.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 300
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTree.GetReference(Microsoft.CodeAnalysis.SyntaxNode)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTree",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.GetReference(Microsoft.CodeAnalysis.SyntaxNode)\">\r\n    <summary>\r\n    Gets a SyntaxReference for a specified syntax node. SyntaxReferences can be used to\r\n    regain access to a syntax node without keeping the entire tree and source text in\r\n    memory.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxNode": ""
                },
                "Content": "public SyntaxNode GetRoot(CancellationToken cancellationToken = default (CancellationToken))",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.GetRoot(System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Gets the root node of the syntax tree, causing computation if necessary.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 110
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxNode": ""
                },
                "Content": "public SyntaxNode GetRoot(CancellationToken cancellationToken = default (CancellationToken))",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.GetRoot(System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Gets the root node of the syntax tree, causing computation if necessary.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 110
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTree.GetRoot(System.Threading.CancellationToken)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTree",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.GetRoot(System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Gets the root node of the syntax tree, causing computation if necessary.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:System.Threading.Tasks.Task{Microsoft.CodeAnalysis.SyntaxNode}": ""
                },
                "Content": "public Task<SyntaxNode> GetRootAsync(CancellationToken cancellationToken = default (CancellationToken))",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.GetRootAsync(System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Gets the root node of the syntax tree asynchronously.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 123
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:System.Threading.Tasks.Task{Microsoft.CodeAnalysis.SyntaxNode}": ""
                },
                "Content": "public Task<SyntaxNode> GetRootAsync(CancellationToken cancellationToken = default (CancellationToken))",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.GetRootAsync(System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Gets the root node of the syntax tree asynchronously.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 123
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTree.GetRootAsync(System.Threading.CancellationToken)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTree",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.GetRootAsync(System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Gets the root node of the syntax tree asynchronously.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:System.Threading.Tasks.Task{Microsoft.CodeAnalysis.SyntaxNode}": ""
                },
                "Content": "protected abstract Task<SyntaxNode> GetRootAsyncCore(CancellationToken cancellationToken);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.GetRootAsyncCore(System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Gets the root node of the syntax tree asynchronously.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 131
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:System.Threading.Tasks.Task{Microsoft.CodeAnalysis.SyntaxNode}": ""
                },
                "Content": "protected abstract Task<SyntaxNode> GetRootAsyncCore(CancellationToken cancellationToken);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.GetRootAsyncCore(System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Gets the root node of the syntax tree asynchronously.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 131
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTree.GetRootAsyncCore(System.Threading.CancellationToken)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTree",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.GetRootAsyncCore(System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Gets the root node of the syntax tree asynchronously.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxNode": ""
                },
                "Content": "protected abstract SyntaxNode GetRootCore(CancellationToken cancellationToken);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.GetRootCore(System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Gets the root node of the syntax tree, causing computation if necessary.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 118
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxNode": ""
                },
                "Content": "protected abstract SyntaxNode GetRootCore(CancellationToken cancellationToken);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.GetRootCore(System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Gets the root node of the syntax tree, causing computation if necessary.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 118
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTree.GetRootCore(System.Threading.CancellationToken)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTree",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.GetRootCore(System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Gets the root node of the syntax tree, causing computation if necessary.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Text.SourceText": ""
                },
                "Content": "public abstract SourceText GetText(CancellationToken cancellationToken = default (CancellationToken));",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.GetText(System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Gets the text of the source document.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 79
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Text.SourceText": ""
                },
                "Content": "public abstract SourceText GetText(CancellationToken cancellationToken = default (CancellationToken));",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.GetText(System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Gets the text of the source document.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 79
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTree.GetText(System.Threading.CancellationToken)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTree",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.GetText(System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Gets the text of the source document.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:System.Threading.Tasks.Task{Microsoft.CodeAnalysis.Text.SourceText}": ""
                },
                "Content": "public virtual Task<SourceText> GetTextAsync(CancellationToken cancellationToken = default (CancellationToken))",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.GetTextAsync(System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Gets the text of the source document asynchronously.\r\n    </summary>\r\n    <remarks>\r\n    By default, the work associated with this method will be executed immediately on the current thread.\r\n    Implementations that wish to schedule this work differently should override <see cref=\"M:Microsoft.CodeAnalysis.SyntaxTree.GetTextAsync(System.Threading.CancellationToken)\"/>.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 88
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:System.Threading.Tasks.Task{Microsoft.CodeAnalysis.Text.SourceText}": ""
                },
                "Content": "public virtual Task<SourceText> GetTextAsync(CancellationToken cancellationToken = default (CancellationToken))",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.GetTextAsync(System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Gets the text of the source document asynchronously.\r\n    </summary>\r\n    <remarks>\r\n    By default, the work associated with this method will be executed immediately on the current thread.\r\n    Implementations that wish to schedule this work differently should override <see cref=\"M:Microsoft.CodeAnalysis.SyntaxTree.GetTextAsync(System.Threading.CancellationToken)\"/>.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 88
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTree.GetTextAsync(System.Threading.CancellationToken)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTree",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.GetTextAsync(System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Gets the text of the source document asynchronously.\r\n    </summary>\r\n    <remarks>\r\n    By default, the work associated with this method will be executed immediately on the current thread.\r\n    Implementations that wish to schedule this work differently should override <see cref=\"M:Microsoft.CodeAnalysis.SyntaxTree.GetTextAsync(System.Threading.CancellationToken)\"/>.\r\n    </remarks>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public abstract bool HasHiddenRegions();",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.HasHiddenRegions\">\r\n    <summary>\r\n    Are there any hidden regions in the tree?\r\n    </summary>\r\n    <returns>True if there is at least one hidden region.</returns>\r\n</member>\r\n",
                "StartLine": 272
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public abstract bool HasHiddenRegions();",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.HasHiddenRegions\">\r\n    <summary>\r\n    Are there any hidden regions in the tree?\r\n    </summary>\r\n    <returns>True if there is at least one hidden region.</returns>\r\n</member>\r\n",
                "StartLine": 272
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTree.HasHiddenRegions",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTree",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.HasHiddenRegions\">\r\n    <summary>\r\n    Are there any hidden regions in the tree?\r\n    </summary>\r\n    <returns>True if there is at least one hidden region.</returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxTree : tree": "",
                  "T:System.Boolean : topLevel": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public abstract bool IsEquivalentTo(SyntaxTree tree, bool topLevel = false);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.IsEquivalentTo(Microsoft.CodeAnalysis.SyntaxTree,System.Boolean)\">\r\n    <summary>\r\n    Determines if two trees are the same, disregarding trivia differences.\r\n    </summary>\r\n    <param name=\"tree\">The tree to compare against.</param>\r\n    <param name=\"topLevel\"> If true then the trees are equivalent if the contained nodes and tokens declaring\r\n    metadata visible symbolic information are equivalent, ignoring any differences of nodes inside method bodies\r\n    or initializer expressions, otherwise all nodes and tokens must be equivalent. \r\n    </param>\r\n</member>\r\n",
                "StartLine": 293
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxTree : tree": "",
                  "T:System.Boolean : topLevel": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public abstract bool IsEquivalentTo(SyntaxTree tree, bool topLevel = false);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.IsEquivalentTo(Microsoft.CodeAnalysis.SyntaxTree,System.Boolean)\">\r\n    <summary>\r\n    Determines if two trees are the same, disregarding trivia differences.\r\n    </summary>\r\n    <param name=\"tree\">The tree to compare against.</param>\r\n    <param name=\"topLevel\"> If true then the trees are equivalent if the contained nodes and tokens declaring\r\n    metadata visible symbolic information are equivalent, ignoring any differences of nodes inside method bodies\r\n    or initializer expressions, otherwise all nodes and tokens must be equivalent. \r\n    </param>\r\n</member>\r\n",
                "StartLine": 293
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTree.IsEquivalentTo(Microsoft.CodeAnalysis.SyntaxTree,System.Boolean)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTree",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.IsEquivalentTo(Microsoft.CodeAnalysis.SyntaxTree,System.Boolean)\">\r\n    <summary>\r\n    Determines if two trees are the same, disregarding trivia differences.\r\n    </summary>\r\n    <param name=\"tree\">The tree to compare against.</param>\r\n    <param name=\"topLevel\"> If true then the trees are equivalent if the contained nodes and tokens declaring\r\n    metadata visible symbolic information are equivalent, ignoring any differences of nodes inside method bodies\r\n    or initializer expressions, otherwise all nodes and tokens must be equivalent. \r\n    </param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxNode : root": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool TryGetRoot(out SyntaxNode root)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.TryGetRoot(Microsoft.CodeAnalysis.SyntaxNode@)\">\r\n    <summary>\r\n    Gets the root of the syntax tree if it is available.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 97
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxNode : root": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool TryGetRoot(out SyntaxNode root)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.TryGetRoot(Microsoft.CodeAnalysis.SyntaxNode@)\">\r\n    <summary>\r\n    Gets the root of the syntax tree if it is available.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 97
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTree.TryGetRoot(Microsoft.CodeAnalysis.SyntaxNode@)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTree",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.TryGetRoot(Microsoft.CodeAnalysis.SyntaxNode@)\">\r\n    <summary>\r\n    Gets the root of the syntax tree if it is available.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxNode : root": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "protected abstract bool TryGetRootCore(out SyntaxNode root);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.TryGetRootCore(Microsoft.CodeAnalysis.SyntaxNode@)\">\r\n    <summary>\r\n    Gets the root of the syntax tree if it is available.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 105
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxNode : root": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "protected abstract bool TryGetRootCore(out SyntaxNode root);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.TryGetRootCore(Microsoft.CodeAnalysis.SyntaxNode@)\">\r\n    <summary>\r\n    Gets the root of the syntax tree if it is available.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 105
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTree.TryGetRootCore(Microsoft.CodeAnalysis.SyntaxNode@)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTree",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.TryGetRootCore(Microsoft.CodeAnalysis.SyntaxNode@)\">\r\n    <summary>\r\n    Gets the root of the syntax tree if it is available.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.SourceText : text": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public abstract bool TryGetText(out SourceText text);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.TryGetText(Microsoft.CodeAnalysis.Text.SourceText@)\">\r\n    <summary>\r\n    Gets the syntax tree's text if it is available.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 74
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.SourceText : text": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public abstract bool TryGetText(out SourceText text);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.TryGetText(Microsoft.CodeAnalysis.Text.SourceText@)\">\r\n    <summary>\r\n    Gets the syntax tree's text if it is available.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 74
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTree.TryGetText(Microsoft.CodeAnalysis.Text.SourceText@)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTree",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.TryGetText(Microsoft.CodeAnalysis.Text.SourceText@)\">\r\n    <summary>\r\n    Gets the syntax tree's text if it is available.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.SourceText : newText": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTree": ""
                },
                "Content": "public abstract SyntaxTree WithChangedText(SourceText newText);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.WithChangedText(Microsoft.CodeAnalysis.Text.SourceText)\">\r\n    <summary>\r\n    Create a new syntax tree based off this tree using a new source text.\r\n    \r\n    If the new source text is a minor change from the current source text an incremental\r\n    parse will occur reusing most of the current syntax tree internal data.  Otherwise, a\r\n    full parse will occur using the new source text.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 140
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.SourceText : newText": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTree": ""
                },
                "Content": "public abstract SyntaxTree WithChangedText(SourceText newText);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.WithChangedText(Microsoft.CodeAnalysis.Text.SourceText)\">\r\n    <summary>\r\n    Create a new syntax tree based off this tree using a new source text.\r\n    \r\n    If the new source text is a minor change from the current source text an incremental\r\n    parse will occur reusing most of the current syntax tree internal data.  Otherwise, a\r\n    full parse will occur using the new source text.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 140
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTree.WithChangedText(Microsoft.CodeAnalysis.Text.SourceText)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTree",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.WithChangedText(Microsoft.CodeAnalysis.Text.SourceText)\">\r\n    <summary>\r\n    Create a new syntax tree based off this tree using a new source text.\r\n    \r\n    If the new source text is a minor change from the current source text an incremental\r\n    parse will occur reusing most of the current syntax tree internal data.  Otherwise, a\r\n    full parse will occur using the new source text.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.String : path": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTree": ""
                },
                "Content": "public abstract SyntaxTree WithFilePath(string path);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.WithFilePath(System.String)\">\r\n    <summary>\r\n    Returns a new tree whose <see cref=\"P:Microsoft.CodeAnalysis.SyntaxTree.FilePath\"/> is the specified node and other properties are copied from the current tree.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 337
              },
              "Syntax": {
                "Parameters": {
                  "T:System.String : path": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTree": ""
                },
                "Content": "public abstract SyntaxTree WithFilePath(string path);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.WithFilePath(System.String)\">\r\n    <summary>\r\n    Returns a new tree whose <see cref=\"P:Microsoft.CodeAnalysis.SyntaxTree.FilePath\"/> is the specified node and other properties are copied from the current tree.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 337
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTree.WithFilePath(System.String)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTree",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.WithFilePath(System.String)\">\r\n    <summary>\r\n    Returns a new tree whose <see cref=\"P:Microsoft.CodeAnalysis.SyntaxTree.FilePath\"/> is the specified node and other properties are copied from the current tree.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.ParseOptions : options": "",
                  "T:Microsoft.CodeAnalysis.SyntaxNode : root": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTree": ""
                },
                "Content": "public abstract SyntaxTree WithRootAndOptions(SyntaxNode root, ParseOptions options);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.WithRootAndOptions(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.ParseOptions)\">\r\n    <summary>\r\n    Returns a new tree whose root and options are as specified and other properties are copied from the current tree.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 332
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.ParseOptions : options": "",
                  "T:Microsoft.CodeAnalysis.SyntaxNode : root": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTree": ""
                },
                "Content": "public abstract SyntaxTree WithRootAndOptions(SyntaxNode root, ParseOptions options);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.WithRootAndOptions(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.ParseOptions)\">\r\n    <summary>\r\n    Returns a new tree whose root and options are as specified and other properties are copied from the current tree.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 332
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTree.WithRootAndOptions(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.ParseOptions)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTree",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTree.WithRootAndOptions(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.ParseOptions)\">\r\n    <summary>\r\n    Returns a new tree whose root and options are as specified and other properties are copied from the current tree.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:System.String",
                "Content": "public abstract string FilePath",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxTree.FilePath\">\r\n    <summary>\r\n    The path of the source document file.\r\n    </summary>\r\n    <remarks>\r\n    If this syntax tree is not associated with a file, this value can be empty.\r\n    The path shall not be null.\r\n    \r\n    The file doesn't need to exist on disk. The path is opaque to the compiler.\r\n    The only requirement on the path format is that the implementations of \r\n    <see cref=\"T:Microsoft.CodeAnalysis.SourceReferenceResolver\"/>, <see cref=\"T:Microsoft.CodeAnalysis.XmlReferenceResolver\"/> and <see cref=\"T:Microsoft.CodeAnalysis.MetadataReferenceResolver\"/> \r\n    passed to the compilation that contains the tree understand it.\r\n    \r\n    Clients must also not assume that the values of this property are unique\r\n    within a Compilation.\r\n    \r\n    The path is used as follows:\r\n       - When debug information is emitted, this path is embedded in the debug information.\r\n       - When resolving and normalizing relative paths in #r, #load, #line/#ExternalSource, \r\n         #pragma checksum, #ExternalChecksum directives, XML doc comment include elements, etc.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 43
              },
              "Syntax": {
                "PropertyType": "T:System.String",
                "Content": "public abstract string FilePath",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxTree.FilePath\">\r\n    <summary>\r\n    The path of the source document file.\r\n    </summary>\r\n    <remarks>\r\n    If this syntax tree is not associated with a file, this value can be empty.\r\n    The path shall not be null.\r\n    \r\n    The file doesn't need to exist on disk. The path is opaque to the compiler.\r\n    The only requirement on the path format is that the implementations of \r\n    <see cref=\"T:Microsoft.CodeAnalysis.SourceReferenceResolver\"/>, <see cref=\"T:Microsoft.CodeAnalysis.XmlReferenceResolver\"/> and <see cref=\"T:Microsoft.CodeAnalysis.MetadataReferenceResolver\"/> \r\n    passed to the compilation that contains the tree understand it.\r\n    \r\n    Clients must also not assume that the values of this property are unique\r\n    within a Compilation.\r\n    \r\n    The path is used as follows:\r\n       - When debug information is emitted, this path is embedded in the debug information.\r\n       - When resolving and normalizing relative paths in #r, #load, #line/#ExternalSource, \r\n         #pragma checksum, #ExternalChecksum directives, XML doc comment include elements, etc.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 43
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxTree.FilePath",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTree",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxTree.FilePath\">\r\n    <summary>\r\n    The path of the source document file.\r\n    </summary>\r\n    <remarks>\r\n    If this syntax tree is not associated with a file, this value can be empty.\r\n    The path shall not be null.\r\n    \r\n    The file doesn't need to exist on disk. The path is opaque to the compiler.\r\n    The only requirement on the path format is that the implementations of \r\n    <see cref=\"T:Microsoft.CodeAnalysis.SourceReferenceResolver\"/>, <see cref=\"T:Microsoft.CodeAnalysis.XmlReferenceResolver\"/> and <see cref=\"T:Microsoft.CodeAnalysis.MetadataReferenceResolver\"/> \r\n    passed to the compilation that contains the tree understand it.\r\n    \r\n    Clients must also not assume that the values of this property are unique\r\n    within a Compilation.\r\n    \r\n    The path is used as follows:\r\n       - When debug information is emitted, this path is embedded in the debug information.\r\n       - When resolving and normalizing relative paths in #r, #load, #line/#ExternalSource, \r\n         #pragma checksum, #ExternalChecksum directives, XML doc comment include elements, etc.\r\n    </remarks>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public abstract bool HasCompilationUnitRoot",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxTree.HasCompilationUnitRoot\">\r\n    <summary>\r\n    Returns true if this syntax tree has a root with SyntaxKind \"CompilationUnit\".\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 48
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public abstract bool HasCompilationUnitRoot",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxTree.HasCompilationUnitRoot\">\r\n    <summary>\r\n    Returns true if this syntax tree has a root with SyntaxKind \"CompilationUnit\".\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 48
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxTree.HasCompilationUnitRoot",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTree",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxTree.HasCompilationUnitRoot\">\r\n    <summary>\r\n    Returns true if this syntax tree has a root with SyntaxKind \"CompilationUnit\".\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Int32",
                "Content": "public abstract int Length",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxTree.Length\">\r\n    <summary>\r\n    The length of the text of the syntax tree.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 69
              },
              "Syntax": {
                "PropertyType": "T:System.Int32",
                "Content": "public abstract int Length",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxTree.Length\">\r\n    <summary>\r\n    The length of the text of the syntax tree.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 69
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxTree.Length",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTree",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxTree.Length\">\r\n    <summary>\r\n    The length of the text of the syntax tree.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.ParseOptions",
                "Content": "public ParseOptions Options",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxTree.Options\">\r\n    <summary>\r\n    The options used by the parser to produce the syntax tree.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 53
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.ParseOptions",
                "Content": "public ParseOptions Options",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxTree.Options\">\r\n    <summary>\r\n    The options used by the parser to produce the syntax tree.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 53
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxTree.Options",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTree",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxTree.Options\">\r\n    <summary>\r\n    The options used by the parser to produce the syntax tree.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.ParseOptions",
                "Content": "protected abstract ParseOptions OptionsCore",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxTree.OptionsCore\">\r\n    <summary>\r\n    The options used by the parser to produce the syntax tree.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 64
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.ParseOptions",
                "Content": "protected abstract ParseOptions OptionsCore",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxTree.OptionsCore\">\r\n    <summary>\r\n    The options used by the parser to produce the syntax tree.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 64
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxTree.OptionsCore",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTree",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxTree.OptionsCore\">\r\n    <summary>\r\n    The options used by the parser to produce the syntax tree.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Syntax\\SyntaxTree.cs",
          "InheritanceHierarchy": [
            "T:System.Object"
          ],
          "Syntax": {
            "Content": "public abstract class SyntaxTree",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.SyntaxTree\">\r\n    <summary>\r\n    The parsed representation of a source document.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.SyntaxTree",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.SyntaxTree\">\r\n    <summary>\r\n    The parsed representation of a source document.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxNode : node": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public virtual void Visit(SyntaxNode node)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxWalker.Visit(Microsoft.CodeAnalysis.SyntaxNode)\">\r\n    <summary>\r\n    Called when the walker visits a node.  This method may be overridden if subclasses want\r\n    to handle the node.  Overrides should call back into this base method if they want the\r\n    children of this node to be visited.\r\n    </summary>\r\n    <param name=\"node\">The current node that the walker is visiting.</param>\r\n</member>\r\n",
                "StartLine": 33
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxNode : node": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public virtual void Visit(SyntaxNode node)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxWalker.Visit(Microsoft.CodeAnalysis.SyntaxNode)\">\r\n    <summary>\r\n    Called when the walker visits a node.  This method may be overridden if subclasses want\r\n    to handle the node.  Overrides should call back into this base method if they want the\r\n    children of this node to be visited.\r\n    </summary>\r\n    <param name=\"node\">The current node that the walker is visiting.</param>\r\n</member>\r\n",
                "StartLine": 33
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxWalker.Visit(Microsoft.CodeAnalysis.SyntaxNode)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxWalker",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxWalker.Visit(Microsoft.CodeAnalysis.SyntaxNode)\">\r\n    <summary>\r\n    Called when the walker visits a node.  This method may be overridden if subclasses want\r\n    to handle the node.  Overrides should call back into this base method if they want the\r\n    children of this node to be visited.\r\n    </summary>\r\n    <param name=\"node\">The current node that the walker is visiting.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxToken : token": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "protected virtual void VisitToken(SyntaxToken token)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxWalker.VisitToken(Microsoft.CodeAnalysis.SyntaxToken)\">\r\n    <summary>\r\n    Called when the walker visits a token.  This method may be overridden if subclasses want\r\n    to handle the token.  Overrides should call back into this base method if they want the \r\n    trivia of this token to be visited.\r\n    </summary>\r\n    <param name=\"token\">The current token that the walker is visiting.</param>\r\n</member>\r\n",
                "StartLine": 60
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxToken : token": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "protected virtual void VisitToken(SyntaxToken token)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxWalker.VisitToken(Microsoft.CodeAnalysis.SyntaxToken)\">\r\n    <summary>\r\n    Called when the walker visits a token.  This method may be overridden if subclasses want\r\n    to handle the token.  Overrides should call back into this base method if they want the \r\n    trivia of this token to be visited.\r\n    </summary>\r\n    <param name=\"token\">The current token that the walker is visiting.</param>\r\n</member>\r\n",
                "StartLine": 60
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxWalker.VisitToken(Microsoft.CodeAnalysis.SyntaxToken)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxWalker",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxWalker.VisitToken(Microsoft.CodeAnalysis.SyntaxToken)\">\r\n    <summary>\r\n    Called when the walker visits a token.  This method may be overridden if subclasses want\r\n    to handle the token.  Overrides should call back into this base method if they want the \r\n    trivia of this token to be visited.\r\n    </summary>\r\n    <param name=\"token\">The current token that the walker is visiting.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxTrivia : trivia": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "protected virtual void VisitTrivia(SyntaxTrivia trivia)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxWalker.VisitTrivia(Microsoft.CodeAnalysis.SyntaxTrivia)\">\r\n    <summary>\r\n    Called when the walker visits a trivia syntax.  This method may be overridden if\r\n    subclasses want to handle the token.  Overrides should call back into this base method if\r\n    they want the children of this trivia syntax to be visited.\r\n    </summary>\r\n    <param name=\"trivia\">The current trivia syntax that the walker is visiting.</param>\r\n</member>\r\n",
                "StartLine": 97
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxTrivia : trivia": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "protected virtual void VisitTrivia(SyntaxTrivia trivia)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxWalker.VisitTrivia(Microsoft.CodeAnalysis.SyntaxTrivia)\">\r\n    <summary>\r\n    Called when the walker visits a trivia syntax.  This method may be overridden if\r\n    subclasses want to handle the token.  Overrides should call back into this base method if\r\n    they want the children of this trivia syntax to be visited.\r\n    </summary>\r\n    <param name=\"trivia\">The current trivia syntax that the walker is visiting.</param>\r\n</member>\r\n",
                "StartLine": 97
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxWalker.VisitTrivia(Microsoft.CodeAnalysis.SyntaxTrivia)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxWalker",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxWalker.VisitTrivia(Microsoft.CodeAnalysis.SyntaxTrivia)\">\r\n    <summary>\r\n    Called when the walker visits a trivia syntax.  This method may be overridden if\r\n    subclasses want to handle the token.  Overrides should call back into this base method if\r\n    they want the children of this trivia syntax to be visited.\r\n    </summary>\r\n    <param name=\"trivia\">The current trivia syntax that the walker is visiting.</param>\r\n</member>\r\n"
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "Depth",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.SyntaxWalker.Depth\">\r\n    <summary>\r\n    True if this walker will descend into structured trivia.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 15
              },
              "Id": "F:Microsoft.CodeAnalysis.SyntaxWalker.Depth",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxWalker",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.SyntaxWalker.Depth\">\r\n    <summary>\r\n    True if this walker will descend into structured trivia.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Constructors": [
            {
              "ConstructorSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxWalkerDepth : depth": ""
                },
                "Content": "protected SyntaxWalker(SyntaxWalkerDepth depth = SyntaxWalkerDepth.Node)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxWalker.#ctor(Microsoft.CodeAnalysis.SyntaxWalkerDepth)\">\r\n    <summary>\r\n    Creates a new walker instance.\r\n    </summary>\r\n    <param name=\"depth\">specify how much this walker will descent into\r\n    trivia.</param>\r\n</member>\r\n",
                "StartLine": 22
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxWalkerDepth : depth": ""
                },
                "Content": "protected SyntaxWalker(SyntaxWalkerDepth depth = SyntaxWalkerDepth.Node)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxWalker.#ctor(Microsoft.CodeAnalysis.SyntaxWalkerDepth)\">\r\n    <summary>\r\n    Creates a new walker instance.\r\n    </summary>\r\n    <param name=\"depth\">specify how much this walker will descent into\r\n    trivia.</param>\r\n</member>\r\n",
                "StartLine": 22
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxWalker.#ctor(Microsoft.CodeAnalysis.SyntaxWalkerDepth)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxWalker",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxWalker.#ctor(Microsoft.CodeAnalysis.SyntaxWalkerDepth)\">\r\n    <summary>\r\n    Creates a new walker instance.\r\n    </summary>\r\n    <param name=\"depth\">specify how much this walker will descent into\r\n    trivia.</param>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Syntax\\SyntaxWalker.cs",
          "InheritanceHierarchy": [
            "T:System.Object"
          ],
          "Syntax": {
            "Content": "public abstract class SyntaxWalker",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.SyntaxWalker\">\r\n    <summary>\r\n    Walks the syntax tree, allowing subclasses to operate on all nodes, token and trivia.  The\r\n    walker will perform a depth first walk of the tree.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.SyntaxWalker",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.SyntaxWalker\">\r\n    <summary>\r\n    Walks the syntax tree, allowing subclasses to operate on all nodes, token and trivia.  The\r\n    walker will perform a depth first walk of the tree.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Constructors": [
            {
              "ConstructorSyntax": {
                "Parameters": {
                  "T:System.Array : customTags": "",
                  "T:System.String : id": ""
                },
                "Content": "public TriggerDiagnosticDescriptor(string id, params string[] customTags): base (id, title: \"\", messageFormat: \"\", category: \"\", defaultSeverity: DiagnosticSeverity.Hidden, isEnabledByDefault: true, customTags: customTags.Append(WellKnownDiagnosticTags.NotConfigurable))",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.TriggerDiagnosticDescriptor.#ctor(System.String,System.String[])\">\r\n    <summary>\r\n    Create a TriggerDiagnosticDescriptor, which provides description about a <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/> that is a trigger for some custom behavior for code analyis clients.\r\n    </summary>\r\n    <param name=\"id\">A unique identifier for the diagnostic. For example, code analysis diagnostic ID \"CA1001\".</param>\r\n    <param name=\"customTags\">Optional custom tags for the diagnostic. See <see cref=\"T:Microsoft.CodeAnalysis.WellKnownDiagnosticTags\"/> for some well known tags.</param>\r\n</member>\r\n",
                "StartLine": 18
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Array : customTags": "",
                  "T:System.String : id": ""
                },
                "Content": "public TriggerDiagnosticDescriptor(string id, params string[] customTags): base (id, title: \"\", messageFormat: \"\", category: \"\", defaultSeverity: DiagnosticSeverity.Hidden, isEnabledByDefault: true, customTags: customTags.Append(WellKnownDiagnosticTags.NotConfigurable))",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.TriggerDiagnosticDescriptor.#ctor(System.String,System.String[])\">\r\n    <summary>\r\n    Create a TriggerDiagnosticDescriptor, which provides description about a <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/> that is a trigger for some custom behavior for code analyis clients.\r\n    </summary>\r\n    <param name=\"id\">A unique identifier for the diagnostic. For example, code analysis diagnostic ID \"CA1001\".</param>\r\n    <param name=\"customTags\">Optional custom tags for the diagnostic. See <see cref=\"T:Microsoft.CodeAnalysis.WellKnownDiagnosticTags\"/> for some well known tags.</param>\r\n</member>\r\n",
                "StartLine": 18
              },
              "Id": "M:Microsoft.CodeAnalysis.TriggerDiagnosticDescriptor.#ctor(System.String,System.String[])",
              "Parent": "T:Microsoft.CodeAnalysis.TriggerDiagnosticDescriptor",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.TriggerDiagnosticDescriptor.#ctor(System.String,System.String[])\">\r\n    <summary>\r\n    Create a TriggerDiagnosticDescriptor, which provides description about a <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/> that is a trigger for some custom behavior for code analyis clients.\r\n    </summary>\r\n    <param name=\"id\">A unique identifier for the diagnostic. For example, code analysis diagnostic ID \"CA1001\".</param>\r\n    <param name=\"customTags\">Optional custom tags for the diagnostic. See <see cref=\"T:Microsoft.CodeAnalysis.WellKnownDiagnosticTags\"/> for some well known tags.</param>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Diagnostic\\TriggerDiagnosticDescriptor.cs",
          "InheritanceHierarchy": [
            "T:System.Object",
            "T:Microsoft.CodeAnalysis.DiagnosticDescriptor"
          ],
          "Syntax": {
            "Content": "public class TriggerDiagnosticDescriptor",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.TriggerDiagnosticDescriptor\">\r\n    <summary>\r\n    Provides a description about a <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/> that is a trigger for some custom behavior for code analyis clients.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.TriggerDiagnosticDescriptor",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.TriggerDiagnosticDescriptor\">\r\n    <summary>\r\n    Provides a description about a <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/> that is a trigger for some custom behavior for code analyis clients.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:System.String",
                "Content": "public override string Display",
                "XmlDocumentation": "",
                "StartLine": 20
              },
              "Syntax": {
                "PropertyType": "T:System.String",
                "Content": "public override string Display",
                "XmlDocumentation": "",
                "StartLine": 20
              },
              "Id": "P:Microsoft.CodeAnalysis.UnresolvedMetadataReference.Display",
              "Parent": "T:Microsoft.CodeAnalysis.UnresolvedMetadataReference",
              "XmlDocumentation": ""
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.String",
                "Content": "public string Reference",
                "XmlDocumentation": "",
                "StartLine": 12
              },
              "Syntax": {
                "PropertyType": "T:System.String",
                "Content": "public string Reference",
                "XmlDocumentation": "",
                "StartLine": 12
              },
              "Id": "P:Microsoft.CodeAnalysis.UnresolvedMetadataReference.Reference",
              "Parent": "T:Microsoft.CodeAnalysis.UnresolvedMetadataReference",
              "XmlDocumentation": ""
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\MetadataReference\\UnresolvedMetadataReference.cs",
          "InheritanceHierarchy": [
            "T:System.Object",
            "T:Microsoft.CodeAnalysis.MetadataReference"
          ],
          "Syntax": {
            "Content": "public sealed class UnresolvedMetadataReference",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.UnresolvedMetadataReference\">\r\n    <summary>\r\n    Represents a metadata reference that can't be resolved.\r\n    </summary>\r\n    <remarks>\r\n    For error reporting only, can't be used to reference a metadata file.\r\n    </remarks>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.UnresolvedMetadataReference",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.UnresolvedMetadataReference\">\r\n    <summary>\r\n    Represents a metadata reference that can't be resolved.\r\n    </summary>\r\n    <remarks>\r\n    For error reporting only, can't be used to reference a metadata file.\r\n    </remarks>\r\n</member>\r\n"
        },
        {
          "Fields": [
            {
              "Syntax": {
                "Content": "AnalyzerException",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownDiagnosticTags.AnalyzerException\">\r\n    <summary>\r\n    Indicates that the diagnostic is related to an exception thrown by a <see cref=\"T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer\"/>.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 41
              },
              "Id": "F:Microsoft.CodeAnalysis.WellKnownDiagnosticTags.AnalyzerException",
              "Parent": "T:Microsoft.CodeAnalysis.WellKnownDiagnosticTags",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownDiagnosticTags.AnalyzerException\">\r\n    <summary>\r\n    Indicates that the diagnostic is related to an exception thrown by a <see cref=\"T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer\"/>.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "Build",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownDiagnosticTags.Build\">\r\n    <summary>\r\n    Indicates that the diagnostic is related to build.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 21
              },
              "Id": "F:Microsoft.CodeAnalysis.WellKnownDiagnosticTags.Build",
              "Parent": "T:Microsoft.CodeAnalysis.WellKnownDiagnosticTags",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownDiagnosticTags.Build\">\r\n    <summary>\r\n    Indicates that the diagnostic is related to build.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "Compiler",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownDiagnosticTags.Compiler\">\r\n    <summary>\r\n    Indicates that the diagnostic is reported by the compiler.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 26
              },
              "Id": "F:Microsoft.CodeAnalysis.WellKnownDiagnosticTags.Compiler",
              "Parent": "T:Microsoft.CodeAnalysis.WellKnownDiagnosticTags",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownDiagnosticTags.Compiler\">\r\n    <summary>\r\n    Indicates that the diagnostic is reported by the compiler.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "EditAndContinue",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownDiagnosticTags.EditAndContinue\">\r\n    <summary>\r\n    Indicates that the diagnostic is related to edit and continue.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 16
              },
              "Id": "F:Microsoft.CodeAnalysis.WellKnownDiagnosticTags.EditAndContinue",
              "Parent": "T:Microsoft.CodeAnalysis.WellKnownDiagnosticTags",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownDiagnosticTags.EditAndContinue\">\r\n    <summary>\r\n    Indicates that the diagnostic is related to edit and continue.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "NotConfigurable",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownDiagnosticTags.NotConfigurable\">\r\n    <summary>\r\n    Indicates that the diagnostic is not configurable, i.e. it cannot be suppressed or filtered or have its severity changed.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 36
              },
              "Id": "F:Microsoft.CodeAnalysis.WellKnownDiagnosticTags.NotConfigurable",
              "Parent": "T:Microsoft.CodeAnalysis.WellKnownDiagnosticTags",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownDiagnosticTags.NotConfigurable\">\r\n    <summary>\r\n    Indicates that the diagnostic is not configurable, i.e. it cannot be suppressed or filtered or have its severity changed.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "Telemetry",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownDiagnosticTags.Telemetry\">\r\n    <summary>\r\n    Indicates that the diagnostic can be used for telemetry\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 31
              },
              "Id": "F:Microsoft.CodeAnalysis.WellKnownDiagnosticTags.Telemetry",
              "Parent": "T:Microsoft.CodeAnalysis.WellKnownDiagnosticTags",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownDiagnosticTags.Telemetry\">\r\n    <summary>\r\n    Indicates that the diagnostic can be used for telemetry\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "Unnecessary",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownDiagnosticTags.Unnecessary\">\r\n    <summary>\r\n    Indicates that the diagnostic is related to some unnecessary source code.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 11
              },
              "Id": "F:Microsoft.CodeAnalysis.WellKnownDiagnosticTags.Unnecessary",
              "Parent": "T:Microsoft.CodeAnalysis.WellKnownDiagnosticTags",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownDiagnosticTags.Unnecessary\">\r\n    <summary>\r\n    Indicates that the diagnostic is related to some unnecessary source code.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Diagnostic\\WellKnownDiagnosticTags.cs",
          "InheritanceHierarchy": [
            "T:System.Object"
          ],
          "Syntax": {
            "Content": "public static class WellKnownDiagnosticTags",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.CodeAnalysis.WellKnownDiagnosticTags",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": ""
        },
        {
          "Fields": [
            {
              "Syntax": {
                "Content": "AdditionOperatorName",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.AdditionOperatorName\">\r\n    <summary>\r\n    The name assigned to the Addition operator.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 93
              },
              "Id": "F:Microsoft.CodeAnalysis.WellKnownMemberNames.AdditionOperatorName",
              "Parent": "T:Microsoft.CodeAnalysis.WellKnownMemberNames",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.AdditionOperatorName\">\r\n    <summary>\r\n    The name assigned to the Addition operator.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "BitwiseAndOperatorName",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.BitwiseAndOperatorName\">\r\n    <summary>\r\n    The name assigned to the BitwiseAnd operator.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 98
              },
              "Id": "F:Microsoft.CodeAnalysis.WellKnownMemberNames.BitwiseAndOperatorName",
              "Parent": "T:Microsoft.CodeAnalysis.WellKnownMemberNames",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.BitwiseAndOperatorName\">\r\n    <summary>\r\n    The name assigned to the BitwiseAnd operator.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "BitwiseOrOperatorName",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.BitwiseOrOperatorName\">\r\n    <summary>\r\n    The name assigned to the BitwiseOr operator.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 103
              },
              "Id": "F:Microsoft.CodeAnalysis.WellKnownMemberNames.BitwiseOrOperatorName",
              "Parent": "T:Microsoft.CodeAnalysis.WellKnownMemberNames",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.BitwiseOrOperatorName\">\r\n    <summary>\r\n    The name assigned to the BitwiseOr operator.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "CollectionInitializerAddMethodName",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.CollectionInitializerAddMethodName\">\r\n    <summary>\r\n    The name for the <c>Add</c> method to be invoked for each element in a collection initializer expression\r\n    (see C# Specification, §7.6.10.3 Collection initializers).\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 275
              },
              "Id": "F:Microsoft.CodeAnalysis.WellKnownMemberNames.CollectionInitializerAddMethodName",
              "Parent": "T:Microsoft.CodeAnalysis.WellKnownMemberNames",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.CollectionInitializerAddMethodName\">\r\n    <summary>\r\n    The name for the <c>Add</c> method to be invoked for each element in a collection initializer expression\r\n    (see C# Specification, §7.6.10.3 Collection initializers).\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "ConcatenateOperatorName",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.ConcatenateOperatorName\">\r\n    <summary>\r\n    The name assigned to the Concatenate operator.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 233
              },
              "Id": "F:Microsoft.CodeAnalysis.WellKnownMemberNames.ConcatenateOperatorName",
              "Parent": "T:Microsoft.CodeAnalysis.WellKnownMemberNames",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.ConcatenateOperatorName\">\r\n    <summary>\r\n    The name assigned to the Concatenate operator.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "CurrentPropertyName",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.CurrentPropertyName\">\r\n    <summary>\r\n    The required name for the <c>Current</c> property used in a ForEach statement.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 263
              },
              "Id": "F:Microsoft.CodeAnalysis.WellKnownMemberNames.CurrentPropertyName",
              "Parent": "T:Microsoft.CodeAnalysis.WellKnownMemberNames",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.CurrentPropertyName\">\r\n    <summary>\r\n    The required name for the <c>Current</c> property used in a ForEach statement.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "DecrementOperatorName",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.DecrementOperatorName\">\r\n    <summary>\r\n    The name assigned to the Decrement operator.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 108
              },
              "Id": "F:Microsoft.CodeAnalysis.WellKnownMemberNames.DecrementOperatorName",
              "Parent": "T:Microsoft.CodeAnalysis.WellKnownMemberNames",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.DecrementOperatorName\">\r\n    <summary>\r\n    The name assigned to the Decrement operator.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "DefaultScriptClassName",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.DefaultScriptClassName\">\r\n    <summary>\r\n    The default fully qualified name of a <c>Script</c> class.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 63
              },
              "Id": "F:Microsoft.CodeAnalysis.WellKnownMemberNames.DefaultScriptClassName",
              "Parent": "T:Microsoft.CodeAnalysis.WellKnownMemberNames",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.DefaultScriptClassName\">\r\n    <summary>\r\n    The default fully qualified name of a <c>Script</c> class.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "DelegateBeginInvokeName",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.DelegateBeginInvokeName\">\r\n    <summary>\r\n    The name assigned to the delegate <c>BeginInvoke</c> method.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 48
              },
              "Id": "F:Microsoft.CodeAnalysis.WellKnownMemberNames.DelegateBeginInvokeName",
              "Parent": "T:Microsoft.CodeAnalysis.WellKnownMemberNames",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.DelegateBeginInvokeName\">\r\n    <summary>\r\n    The name assigned to the delegate <c>BeginInvoke</c> method.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "DelegateEndInvokeName",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.DelegateEndInvokeName\">\r\n    <summary>\r\n    The name assigned to the delegate <c>EndInvoke</c> method.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 53
              },
              "Id": "F:Microsoft.CodeAnalysis.WellKnownMemberNames.DelegateEndInvokeName",
              "Parent": "T:Microsoft.CodeAnalysis.WellKnownMemberNames",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.DelegateEndInvokeName\">\r\n    <summary>\r\n    The name assigned to the delegate <c>EndInvoke</c> method.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "DelegateInvokeName",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.DelegateInvokeName\">\r\n    <summary>\r\n    The name assigned to the delegate <c>Invoke</c> method.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 43
              },
              "Id": "F:Microsoft.CodeAnalysis.WellKnownMemberNames.DelegateInvokeName",
              "Parent": "T:Microsoft.CodeAnalysis.WellKnownMemberNames",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.DelegateInvokeName\">\r\n    <summary>\r\n    The name assigned to the delegate <c>Invoke</c> method.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "DestructorName",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.DestructorName\">\r\n    <summary>\r\n    The name assigned to the destructor.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 38
              },
              "Id": "F:Microsoft.CodeAnalysis.WellKnownMemberNames.DestructorName",
              "Parent": "T:Microsoft.CodeAnalysis.WellKnownMemberNames",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.DestructorName\">\r\n    <summary>\r\n    The name assigned to the destructor.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "DivisionOperatorName",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.DivisionOperatorName\">\r\n    <summary>\r\n    The name assigned to the Division operator.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 113
              },
              "Id": "F:Microsoft.CodeAnalysis.WellKnownMemberNames.DivisionOperatorName",
              "Parent": "T:Microsoft.CodeAnalysis.WellKnownMemberNames",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.DivisionOperatorName\">\r\n    <summary>\r\n    The name assigned to the Division operator.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "EntryPointMethodName",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.EntryPointMethodName\">\r\n    <summary>\r\n    The name of an entry point method.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 58
              },
              "Id": "F:Microsoft.CodeAnalysis.WellKnownMemberNames.EntryPointMethodName",
              "Parent": "T:Microsoft.CodeAnalysis.WellKnownMemberNames",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.EntryPointMethodName\">\r\n    <summary>\r\n    The name of an entry point method.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "EnumBackingFieldName",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.EnumBackingFieldName\">\r\n    <summary>\r\n    Name of the enum backing field.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 15
              },
              "Id": "F:Microsoft.CodeAnalysis.WellKnownMemberNames.EnumBackingFieldName",
              "Parent": "T:Microsoft.CodeAnalysis.WellKnownMemberNames",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.EnumBackingFieldName\">\r\n    <summary>\r\n    Name of the enum backing field.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "EqualityOperatorName",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.EqualityOperatorName\">\r\n    <summary>\r\n    The name assigned to the Equality operator.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 118
              },
              "Id": "F:Microsoft.CodeAnalysis.WellKnownMemberNames.EqualityOperatorName",
              "Parent": "T:Microsoft.CodeAnalysis.WellKnownMemberNames",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.EqualityOperatorName\">\r\n    <summary>\r\n    The name assigned to the Equality operator.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "ExclusiveOrOperatorName",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.ExclusiveOrOperatorName\">\r\n    <summary>\r\n    The name assigned to the ExclusiveOr operator.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 123
              },
              "Id": "F:Microsoft.CodeAnalysis.WellKnownMemberNames.ExclusiveOrOperatorName",
              "Parent": "T:Microsoft.CodeAnalysis.WellKnownMemberNames",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.ExclusiveOrOperatorName\">\r\n    <summary>\r\n    The name assigned to the ExclusiveOr operator.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "ExplicitConversionName",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.ExplicitConversionName\">\r\n    <summary>\r\n    The name assigned to an explicit (narrowing) conversion.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 88
              },
              "Id": "F:Microsoft.CodeAnalysis.WellKnownMemberNames.ExplicitConversionName",
              "Parent": "T:Microsoft.CodeAnalysis.WellKnownMemberNames",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.ExplicitConversionName\">\r\n    <summary>\r\n    The name assigned to an explicit (narrowing) conversion.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "ExponentOperatorName",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.ExponentOperatorName\">\r\n    <summary>\r\n    The name assigned to the Exponent operator.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 238
              },
              "Id": "F:Microsoft.CodeAnalysis.WellKnownMemberNames.ExponentOperatorName",
              "Parent": "T:Microsoft.CodeAnalysis.WellKnownMemberNames",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.ExponentOperatorName\">\r\n    <summary>\r\n    The name assigned to the Exponent operator.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "FalseOperatorName",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.FalseOperatorName\">\r\n    <summary>\r\n    The name assigned to the False operator.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 128
              },
              "Id": "F:Microsoft.CodeAnalysis.WellKnownMemberNames.FalseOperatorName",
              "Parent": "T:Microsoft.CodeAnalysis.WellKnownMemberNames",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.FalseOperatorName\">\r\n    <summary>\r\n    The name assigned to the False operator.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "GetAwaiter",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.GetAwaiter\">\r\n    <summary>\r\n    The required name for the <c>GetAwaiter</c> method used to obtain an awaiter for a task\r\n    (see C# Specification, §7.7.7.1 Awaitable expressions).\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 281
              },
              "Id": "F:Microsoft.CodeAnalysis.WellKnownMemberNames.GetAwaiter",
              "Parent": "T:Microsoft.CodeAnalysis.WellKnownMemberNames",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.GetAwaiter\">\r\n    <summary>\r\n    The required name for the <c>GetAwaiter</c> method used to obtain an awaiter for a task\r\n    (see C# Specification, §7.7.7.1 Awaitable expressions).\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "GetEnumeratorMethodName",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.GetEnumeratorMethodName\">\r\n    <summary>\r\n    The required name for the <c>GetEnumerator</c> method used in a ForEach statement.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 253
              },
              "Id": "F:Microsoft.CodeAnalysis.WellKnownMemberNames.GetEnumeratorMethodName",
              "Parent": "T:Microsoft.CodeAnalysis.WellKnownMemberNames",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.GetEnumeratorMethodName\">\r\n    <summary>\r\n    The required name for the <c>GetEnumerator</c> method used in a ForEach statement.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "GetResult",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.GetResult\">\r\n    <summary>\r\n    The required name for the <c>GetResult</c> method used to obtain the outcome of a task once it is complete\r\n    (see C# Specification, §7.7.7.1 Awaitable expressions).\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 293
              },
              "Id": "F:Microsoft.CodeAnalysis.WellKnownMemberNames.GetResult",
              "Parent": "T:Microsoft.CodeAnalysis.WellKnownMemberNames",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.GetResult\">\r\n    <summary>\r\n    The required name for the <c>GetResult</c> method used to obtain the outcome of a task once it is complete\r\n    (see C# Specification, §7.7.7.1 Awaitable expressions).\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "GreaterThanOperatorName",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.GreaterThanOperatorName\">\r\n    <summary>\r\n    The name assigned to the GreaterThan operator.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 133
              },
              "Id": "F:Microsoft.CodeAnalysis.WellKnownMemberNames.GreaterThanOperatorName",
              "Parent": "T:Microsoft.CodeAnalysis.WellKnownMemberNames",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.GreaterThanOperatorName\">\r\n    <summary>\r\n    The name assigned to the GreaterThan operator.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "GreaterThanOrEqualOperatorName",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.GreaterThanOrEqualOperatorName\">\r\n    <summary>\r\n    The name assigned to the GreaterThanOrEqual operator.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 138
              },
              "Id": "F:Microsoft.CodeAnalysis.WellKnownMemberNames.GreaterThanOrEqualOperatorName",
              "Parent": "T:Microsoft.CodeAnalysis.WellKnownMemberNames",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.GreaterThanOrEqualOperatorName\">\r\n    <summary>\r\n    The name assigned to the GreaterThanOrEqual operator.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "ImplicitConversionName",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.ImplicitConversionName\">\r\n    <summary>\r\n    The name assigned to an implicit (widening) conversion.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 83
              },
              "Id": "F:Microsoft.CodeAnalysis.WellKnownMemberNames.ImplicitConversionName",
              "Parent": "T:Microsoft.CodeAnalysis.WellKnownMemberNames",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.ImplicitConversionName\">\r\n    <summary>\r\n    The name assigned to an implicit (widening) conversion.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "IncrementOperatorName",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.IncrementOperatorName\">\r\n    <summary>\r\n    The name assigned to the Increment operator.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 143
              },
              "Id": "F:Microsoft.CodeAnalysis.WellKnownMemberNames.IncrementOperatorName",
              "Parent": "T:Microsoft.CodeAnalysis.WellKnownMemberNames",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.IncrementOperatorName\">\r\n    <summary>\r\n    The name assigned to the Increment operator.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "Indexer",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.Indexer\">\r\n    <summary>\r\n    The symbol name assigned to all indexers, other than explicit interface implementations.\r\n    </summary>\r\n    <remarks>\r\n    Will not correspond to the name that appears in metadata.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 33
              },
              "Id": "F:Microsoft.CodeAnalysis.WellKnownMemberNames.Indexer",
              "Parent": "T:Microsoft.CodeAnalysis.WellKnownMemberNames",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.Indexer\">\r\n    <summary>\r\n    The symbol name assigned to all indexers, other than explicit interface implementations.\r\n    </summary>\r\n    <remarks>\r\n    Will not correspond to the name that appears in metadata.\r\n    </remarks>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "InequalityOperatorName",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.InequalityOperatorName\">\r\n    <summary>\r\n    The name assigned to the Inequality operator.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 148
              },
              "Id": "F:Microsoft.CodeAnalysis.WellKnownMemberNames.InequalityOperatorName",
              "Parent": "T:Microsoft.CodeAnalysis.WellKnownMemberNames",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.InequalityOperatorName\">\r\n    <summary>\r\n    The name assigned to the Inequality operator.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "InstanceConstructorName",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.InstanceConstructorName\">\r\n    <summary>\r\n    The name assigned to an instance constructor.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 20
              },
              "Id": "F:Microsoft.CodeAnalysis.WellKnownMemberNames.InstanceConstructorName",
              "Parent": "T:Microsoft.CodeAnalysis.WellKnownMemberNames",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.InstanceConstructorName\">\r\n    <summary>\r\n    The name assigned to an instance constructor.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "IntegerDivisionOperatorName",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.IntegerDivisionOperatorName\">\r\n    <summary>\r\n    The name assigned to the IntegerDivision operator.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 243
              },
              "Id": "F:Microsoft.CodeAnalysis.WellKnownMemberNames.IntegerDivisionOperatorName",
              "Parent": "T:Microsoft.CodeAnalysis.WellKnownMemberNames",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.IntegerDivisionOperatorName\">\r\n    <summary>\r\n    The name assigned to the IntegerDivision operator.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "IsCompleted",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.IsCompleted\">\r\n    <summary>\r\n    The required name for the <c>IsCompleted</c> property used to determine if a task is already complete\r\n    (see C# Specification, §7.7.7.1 Awaitable expressions).\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 287
              },
              "Id": "F:Microsoft.CodeAnalysis.WellKnownMemberNames.IsCompleted",
              "Parent": "T:Microsoft.CodeAnalysis.WellKnownMemberNames",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.IsCompleted\">\r\n    <summary>\r\n    The required name for the <c>IsCompleted</c> property used to determine if a task is already complete\r\n    (see C# Specification, §7.7.7.1 Awaitable expressions).\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "LeftShiftOperatorName",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.LeftShiftOperatorName\">\r\n    <summary>\r\n    The name assigned to the LeftShift operator.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 153
              },
              "Id": "F:Microsoft.CodeAnalysis.WellKnownMemberNames.LeftShiftOperatorName",
              "Parent": "T:Microsoft.CodeAnalysis.WellKnownMemberNames",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.LeftShiftOperatorName\">\r\n    <summary>\r\n    The name assigned to the LeftShift operator.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "LessThanOperatorName",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.LessThanOperatorName\">\r\n    <summary>\r\n    The name assigned to the LessThan operator.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 163
              },
              "Id": "F:Microsoft.CodeAnalysis.WellKnownMemberNames.LessThanOperatorName",
              "Parent": "T:Microsoft.CodeAnalysis.WellKnownMemberNames",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.LessThanOperatorName\">\r\n    <summary>\r\n    The name assigned to the LessThan operator.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "LessThanOrEqualOperatorName",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.LessThanOrEqualOperatorName\">\r\n    <summary>\r\n    The name assigned to the LessThanOrEqual operator.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 168
              },
              "Id": "F:Microsoft.CodeAnalysis.WellKnownMemberNames.LessThanOrEqualOperatorName",
              "Parent": "T:Microsoft.CodeAnalysis.WellKnownMemberNames",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.LessThanOrEqualOperatorName\">\r\n    <summary>\r\n    The name assigned to the LessThanOrEqual operator.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "LikeOperatorName",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.LikeOperatorName\">\r\n    <summary>\r\n    The name assigned to the <c>Like</c> operator.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 248
              },
              "Id": "F:Microsoft.CodeAnalysis.WellKnownMemberNames.LikeOperatorName",
              "Parent": "T:Microsoft.CodeAnalysis.WellKnownMemberNames",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.LikeOperatorName\">\r\n    <summary>\r\n    The name assigned to the <c>Like</c> operator.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "LogicalAndOperatorName",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.LogicalAndOperatorName\">\r\n    <summary>\r\n    The name assigned to the LogicalAnd operator.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 183
              },
              "Id": "F:Microsoft.CodeAnalysis.WellKnownMemberNames.LogicalAndOperatorName",
              "Parent": "T:Microsoft.CodeAnalysis.WellKnownMemberNames",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.LogicalAndOperatorName\">\r\n    <summary>\r\n    The name assigned to the LogicalAnd operator.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "LogicalNotOperatorName",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.LogicalNotOperatorName\">\r\n    <summary>\r\n    The name assigned to the LogicalNot operator.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 173
              },
              "Id": "F:Microsoft.CodeAnalysis.WellKnownMemberNames.LogicalNotOperatorName",
              "Parent": "T:Microsoft.CodeAnalysis.WellKnownMemberNames",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.LogicalNotOperatorName\">\r\n    <summary>\r\n    The name assigned to the LogicalNot operator.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "LogicalOrOperatorName",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.LogicalOrOperatorName\">\r\n    <summary>\r\n    The name assigned to the LogicalOr operator.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 178
              },
              "Id": "F:Microsoft.CodeAnalysis.WellKnownMemberNames.LogicalOrOperatorName",
              "Parent": "T:Microsoft.CodeAnalysis.WellKnownMemberNames",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.LogicalOrOperatorName\">\r\n    <summary>\r\n    The name assigned to the LogicalOr operator.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "ModulusOperatorName",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.ModulusOperatorName\">\r\n    <summary>\r\n    The name assigned to the Modulus operator.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 188
              },
              "Id": "F:Microsoft.CodeAnalysis.WellKnownMemberNames.ModulusOperatorName",
              "Parent": "T:Microsoft.CodeAnalysis.WellKnownMemberNames",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.ModulusOperatorName\">\r\n    <summary>\r\n    The name assigned to the Modulus operator.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "MoveNextMethodName",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.MoveNextMethodName\">\r\n    <summary>\r\n    The required name for the <c>MoveNext</c> method used in a ForEach statement.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 258
              },
              "Id": "F:Microsoft.CodeAnalysis.WellKnownMemberNames.MoveNextMethodName",
              "Parent": "T:Microsoft.CodeAnalysis.WellKnownMemberNames",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.MoveNextMethodName\">\r\n    <summary>\r\n    The required name for the <c>MoveNext</c> method used in a ForEach statement.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "MultiplyOperatorName",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.MultiplyOperatorName\">\r\n    <summary>\r\n    The name assigned to the Multiply operator.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 193
              },
              "Id": "F:Microsoft.CodeAnalysis.WellKnownMemberNames.MultiplyOperatorName",
              "Parent": "T:Microsoft.CodeAnalysis.WellKnownMemberNames",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.MultiplyOperatorName\">\r\n    <summary>\r\n    The name assigned to the Multiply operator.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "ObjectEquals",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.ObjectEquals\">\r\n    <summary>\r\n    The name assigned to <c>Object.Equals</c> method.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 73
              },
              "Id": "F:Microsoft.CodeAnalysis.WellKnownMemberNames.ObjectEquals",
              "Parent": "T:Microsoft.CodeAnalysis.WellKnownMemberNames",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.ObjectEquals\">\r\n    <summary>\r\n    The name assigned to <c>Object.Equals</c> method.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "ObjectGetHashCode",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.ObjectGetHashCode\">\r\n    <summary>\r\n    The name assigned to <c>Object.GetHashCode</c> method.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 78
              },
              "Id": "F:Microsoft.CodeAnalysis.WellKnownMemberNames.ObjectGetHashCode",
              "Parent": "T:Microsoft.CodeAnalysis.WellKnownMemberNames",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.ObjectGetHashCode\">\r\n    <summary>\r\n    The name assigned to <c>Object.GetHashCode</c> method.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "ObjectToString",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.ObjectToString\">\r\n    <summary>\r\n    The name assigned to <c>Object.ToString</c> method.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 68
              },
              "Id": "F:Microsoft.CodeAnalysis.WellKnownMemberNames.ObjectToString",
              "Parent": "T:Microsoft.CodeAnalysis.WellKnownMemberNames",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.ObjectToString\">\r\n    <summary>\r\n    The name assigned to <c>Object.ToString</c> method.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "OnCompleted",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.OnCompleted\">\r\n    <summary>\r\n    The name of the <see cref=\"M:System.Runtime.CompilerServices.INotifyCompletion.OnCompleted(System.Action)\"/> method used to register a resumption delegate\r\n    (see C# Specification, §7.7.7.1 Awaitable expressions).\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 299
              },
              "Id": "F:Microsoft.CodeAnalysis.WellKnownMemberNames.OnCompleted",
              "Parent": "T:Microsoft.CodeAnalysis.WellKnownMemberNames",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.OnCompleted\">\r\n    <summary>\r\n    The name of the <see cref=\"M:System.Runtime.CompilerServices.INotifyCompletion.OnCompleted(System.Action)\"/> method used to register a resumption delegate\r\n    (see C# Specification, §7.7.7.1 Awaitable expressions).\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "OnesComplementOperatorName",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.OnesComplementOperatorName\">\r\n    <summary>\r\n    The name assigned to the OnesComplement operator.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 198
              },
              "Id": "F:Microsoft.CodeAnalysis.WellKnownMemberNames.OnesComplementOperatorName",
              "Parent": "T:Microsoft.CodeAnalysis.WellKnownMemberNames",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.OnesComplementOperatorName\">\r\n    <summary>\r\n    The name assigned to the OnesComplement operator.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "RightShiftOperatorName",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.RightShiftOperatorName\">\r\n    <summary>\r\n    The name assigned to the RightShift operator.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 203
              },
              "Id": "F:Microsoft.CodeAnalysis.WellKnownMemberNames.RightShiftOperatorName",
              "Parent": "T:Microsoft.CodeAnalysis.WellKnownMemberNames",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.RightShiftOperatorName\">\r\n    <summary>\r\n    The name assigned to the RightShift operator.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "StaticConstructorName",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.StaticConstructorName\">\r\n    <summary>\r\n    The name assigned to the static constructor.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 25
              },
              "Id": "F:Microsoft.CodeAnalysis.WellKnownMemberNames.StaticConstructorName",
              "Parent": "T:Microsoft.CodeAnalysis.WellKnownMemberNames",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.StaticConstructorName\">\r\n    <summary>\r\n    The name assigned to the static constructor.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "SubtractionOperatorName",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.SubtractionOperatorName\">\r\n    <summary>\r\n    The name assigned to the Subtraction operator.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 213
              },
              "Id": "F:Microsoft.CodeAnalysis.WellKnownMemberNames.SubtractionOperatorName",
              "Parent": "T:Microsoft.CodeAnalysis.WellKnownMemberNames",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.SubtractionOperatorName\">\r\n    <summary>\r\n    The name assigned to the Subtraction operator.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "TrueOperatorName",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.TrueOperatorName\">\r\n    <summary>\r\n    The name assigned to the True operator.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 218
              },
              "Id": "F:Microsoft.CodeAnalysis.WellKnownMemberNames.TrueOperatorName",
              "Parent": "T:Microsoft.CodeAnalysis.WellKnownMemberNames",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.TrueOperatorName\">\r\n    <summary>\r\n    The name assigned to the True operator.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "UnaryNegationOperatorName",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.UnaryNegationOperatorName\">\r\n    <summary>\r\n    The name assigned to the UnaryNegation operator.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 223
              },
              "Id": "F:Microsoft.CodeAnalysis.WellKnownMemberNames.UnaryNegationOperatorName",
              "Parent": "T:Microsoft.CodeAnalysis.WellKnownMemberNames",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.UnaryNegationOperatorName\">\r\n    <summary>\r\n    The name assigned to the UnaryNegation operator.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "UnaryPlusOperatorName",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.UnaryPlusOperatorName\">\r\n    <summary>\r\n    The name assigned to the UnaryPlus operator.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 228
              },
              "Id": "F:Microsoft.CodeAnalysis.WellKnownMemberNames.UnaryPlusOperatorName",
              "Parent": "T:Microsoft.CodeAnalysis.WellKnownMemberNames",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.UnaryPlusOperatorName\">\r\n    <summary>\r\n    The name assigned to the UnaryPlus operator.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "UnsignedLeftShiftOperatorName",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.UnsignedLeftShiftOperatorName\">\r\n    <summary>\r\n    The name assigned to the UnsignedLeftShift operator.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 158
              },
              "Id": "F:Microsoft.CodeAnalysis.WellKnownMemberNames.UnsignedLeftShiftOperatorName",
              "Parent": "T:Microsoft.CodeAnalysis.WellKnownMemberNames",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.UnsignedLeftShiftOperatorName\">\r\n    <summary>\r\n    The name assigned to the UnsignedLeftShift operator.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "UnsignedRightShiftOperatorName",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.UnsignedRightShiftOperatorName\">\r\n    <summary>\r\n    The name assigned to the UnsignedRightShift operator.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 208
              },
              "Id": "F:Microsoft.CodeAnalysis.WellKnownMemberNames.UnsignedRightShiftOperatorName",
              "Parent": "T:Microsoft.CodeAnalysis.WellKnownMemberNames",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.UnsignedRightShiftOperatorName\">\r\n    <summary>\r\n    The name assigned to the UnsignedRightShift operator.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "ValuePropertyName",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.ValuePropertyName\">\r\n    <summary>\r\n    The required name for the <see cref=\"P:System.Nullable`1.Value\"/> property used in\r\n    a ForEach statement when the collection is a nullable struct.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 269
              },
              "Id": "F:Microsoft.CodeAnalysis.WellKnownMemberNames.ValuePropertyName",
              "Parent": "T:Microsoft.CodeAnalysis.WellKnownMemberNames",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.WellKnownMemberNames.ValuePropertyName\">\r\n    <summary>\r\n    The required name for the <see cref=\"P:System.Nullable`1.Value\"/> property used in\r\n    a ForEach statement when the collection is a nullable struct.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Symbols\\WellKnownMemberNames.cs",
          "InheritanceHierarchy": [
            "T:System.Object"
          ],
          "Syntax": {
            "Content": "public static class WellKnownMemberNames",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.WellKnownMemberNames\">\r\n    <summary>\r\n    Specifies the member names known to the compiler (such as <c>.ctor</c> or <c>op_Explicit</c>).\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.WellKnownMemberNames",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.WellKnownMemberNames\">\r\n    <summary>\r\n    Specifies the member names known to the compiler (such as <c>.ctor</c> or <c>op_Explicit</c>).\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Object : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public abstract override bool Equals(object other);",
                "XmlDocumentation": "",
                "StartLine": 16
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Object : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public abstract override bool Equals(object other);",
                "XmlDocumentation": "",
                "StartLine": 16
              },
              "Id": "M:Microsoft.CodeAnalysis.XmlReferenceResolver.Equals(System.Object)",
              "Parent": "T:Microsoft.CodeAnalysis.XmlReferenceResolver",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public abstract override int GetHashCode();",
                "XmlDocumentation": "",
                "StartLine": 17
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public abstract override int GetHashCode();",
                "XmlDocumentation": "",
                "StartLine": 17
              },
              "Id": "M:Microsoft.CodeAnalysis.XmlReferenceResolver.GetHashCode",
              "Parent": "T:Microsoft.CodeAnalysis.XmlReferenceResolver",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.String : resolvedPath": ""
                },
                "Returns": {
                  "T:System.IO.Stream": ""
                },
                "Content": "public abstract Stream OpenRead(string resolvedPath);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.XmlReferenceResolver.OpenRead(System.String)\">\r\n    <summary>\r\n    Opens a <see cref=\"T:System.IO.Stream\"/> that allows reading the content of the specified file.\r\n    </summary>\r\n    <param name=\"resolvedPath\">Path returned by <see cref=\"M:Microsoft.CodeAnalysis.XmlReferenceResolver.ResolveReference(System.String,System.String)\"/>.</param>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"resolvedPath\"/> is null.</exception>\r\n    <exception cref=\"T:System.ArgumentException\"><paramref name=\"resolvedPath\"/> is not a valid absolute path.</exception>\r\n    <exception cref=\"T:System.IO.IOException\">Error reading file <paramref name=\"resolvedPath\"/>. See <see cref=\"P:System.Exception.InnerException\"/> for details.</exception>\r\n</member>\r\n",
                "StartLine": 34
              },
              "Syntax": {
                "Parameters": {
                  "T:System.String : resolvedPath": ""
                },
                "Returns": {
                  "T:System.IO.Stream": ""
                },
                "Content": "public abstract Stream OpenRead(string resolvedPath);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.XmlReferenceResolver.OpenRead(System.String)\">\r\n    <summary>\r\n    Opens a <see cref=\"T:System.IO.Stream\"/> that allows reading the content of the specified file.\r\n    </summary>\r\n    <param name=\"resolvedPath\">Path returned by <see cref=\"M:Microsoft.CodeAnalysis.XmlReferenceResolver.ResolveReference(System.String,System.String)\"/>.</param>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"resolvedPath\"/> is null.</exception>\r\n    <exception cref=\"T:System.ArgumentException\"><paramref name=\"resolvedPath\"/> is not a valid absolute path.</exception>\r\n    <exception cref=\"T:System.IO.IOException\">Error reading file <paramref name=\"resolvedPath\"/>. See <see cref=\"P:System.Exception.InnerException\"/> for details.</exception>\r\n</member>\r\n",
                "StartLine": 34
              },
              "Id": "M:Microsoft.CodeAnalysis.XmlReferenceResolver.OpenRead(System.String)",
              "Parent": "T:Microsoft.CodeAnalysis.XmlReferenceResolver",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.XmlReferenceResolver.OpenRead(System.String)\">\r\n    <summary>\r\n    Opens a <see cref=\"T:System.IO.Stream\"/> that allows reading the content of the specified file.\r\n    </summary>\r\n    <param name=\"resolvedPath\">Path returned by <see cref=\"M:Microsoft.CodeAnalysis.XmlReferenceResolver.ResolveReference(System.String,System.String)\"/>.</param>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"resolvedPath\"/> is null.</exception>\r\n    <exception cref=\"T:System.ArgumentException\"><paramref name=\"resolvedPath\"/> is not a valid absolute path.</exception>\r\n    <exception cref=\"T:System.IO.IOException\">Error reading file <paramref name=\"resolvedPath\"/>. See <see cref=\"P:System.Exception.InnerException\"/> for details.</exception>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.String : baseFilePath": "",
                  "T:System.String : path": ""
                },
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public abstract string ResolveReference(string path, string baseFilePath);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.XmlReferenceResolver.ResolveReference(System.String,System.String)\">\r\n    <summary>\r\n    Resolves specified XML reference with respect to base file path.\r\n    </summary>\r\n    <param name=\"path\">The reference path to resolve. May be absolute or relative path.</param>\r\n    <param name=\"baseFilePath\">Path of the source file that contains the <paramref name=\"path\"/> (may also be relative), or null if not available.</param>\r\n    <returns>Path to the XML artifact, or null if the file can't be resolved.</returns>\r\n</member>\r\n",
                "StartLine": 25
              },
              "Syntax": {
                "Parameters": {
                  "T:System.String : baseFilePath": "",
                  "T:System.String : path": ""
                },
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public abstract string ResolveReference(string path, string baseFilePath);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.XmlReferenceResolver.ResolveReference(System.String,System.String)\">\r\n    <summary>\r\n    Resolves specified XML reference with respect to base file path.\r\n    </summary>\r\n    <param name=\"path\">The reference path to resolve. May be absolute or relative path.</param>\r\n    <param name=\"baseFilePath\">Path of the source file that contains the <paramref name=\"path\"/> (may also be relative), or null if not available.</param>\r\n    <returns>Path to the XML artifact, or null if the file can't be resolved.</returns>\r\n</member>\r\n",
                "StartLine": 25
              },
              "Id": "M:Microsoft.CodeAnalysis.XmlReferenceResolver.ResolveReference(System.String,System.String)",
              "Parent": "T:Microsoft.CodeAnalysis.XmlReferenceResolver",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.XmlReferenceResolver.ResolveReference(System.String,System.String)\">\r\n    <summary>\r\n    Resolves specified XML reference with respect to base file path.\r\n    </summary>\r\n    <param name=\"path\">The reference path to resolve. May be absolute or relative path.</param>\r\n    <param name=\"baseFilePath\">Path of the source file that contains the <paramref name=\"path\"/> (may also be relative), or null if not available.</param>\r\n    <returns>Path to the XML artifact, or null if the file can't be resolved.</returns>\r\n</member>\r\n"
            }
          ],
          "Constructors": [
            {
              "ConstructorSyntax": {
                "Parameters": {},
                "Content": "protected XmlReferenceResolver()",
                "XmlDocumentation": "",
                "StartLine": 12
              },
              "Syntax": {
                "Parameters": {},
                "Content": "protected XmlReferenceResolver()",
                "XmlDocumentation": "",
                "StartLine": 12
              },
              "Id": "M:Microsoft.CodeAnalysis.XmlReferenceResolver.#ctor",
              "Parent": "T:Microsoft.CodeAnalysis.XmlReferenceResolver",
              "XmlDocumentation": ""
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Compilation\\XmlReferenceResolver.cs",
          "InheritanceHierarchy": [
            "T:System.Object"
          ],
          "Syntax": {
            "Content": "public abstract class XmlReferenceResolver",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.XmlReferenceResolver\">\r\n    <summary>\r\n    Resolves references to XML documents specified in source code.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.XmlReferenceResolver",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.XmlReferenceResolver\">\r\n    <summary>\r\n    Resolves references to XML documents specified in source code.\r\n    </summary>\r\n</member>\r\n"
        }
      ],
      "Interfaces": [
        {
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.INamespaceOrTypeSymbol",
                "Content": "INamespaceOrTypeSymbol Target",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IAliasSymbol.Target\">\r\n    <summary>\r\n    Gets the <see cref=\"T:Microsoft.CodeAnalysis.INamespaceOrTypeSymbol\"/> for the\r\n    namespace or type referenced by the alias.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 15
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.INamespaceOrTypeSymbol",
                "Content": "INamespaceOrTypeSymbol Target",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IAliasSymbol.Target\">\r\n    <summary>\r\n    Gets the <see cref=\"T:Microsoft.CodeAnalysis.INamespaceOrTypeSymbol\"/> for the\r\n    namespace or type referenced by the alias.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 15
              },
              "Id": "P:Microsoft.CodeAnalysis.IAliasSymbol.Target",
              "Parent": "T:Microsoft.CodeAnalysis.IAliasSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IAliasSymbol.Target\">\r\n    <summary>\r\n    Gets the <see cref=\"T:Microsoft.CodeAnalysis.INamespaceOrTypeSymbol\"/> for the\r\n    namespace or type referenced by the alias.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            8,
            9,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Symbols\\IAliasSymbol.cs",
          "InheritanceHierarchy": [],
          "Syntax": {
            "Content": "public interface IAliasSymbol",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.IAliasSymbol\">\r\n    <summary>\r\n    Represents a using alias (Imports alias in Visual Basic).\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.IAliasSymbol",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.IAliasSymbol\">\r\n    <summary>\r\n    Represents a using alias (Imports alias in Visual Basic).\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.IArrayTypeSymbol : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "bool Equals(IArrayTypeSymbol other);",
                "XmlDocumentation": "",
                "StartLine": 29
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.IArrayTypeSymbol : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "bool Equals(IArrayTypeSymbol other);",
                "XmlDocumentation": "",
                "StartLine": 29
              },
              "Id": "M:Microsoft.CodeAnalysis.IArrayTypeSymbol.Equals(Microsoft.CodeAnalysis.IArrayTypeSymbol)",
              "Parent": "T:Microsoft.CodeAnalysis.IArrayTypeSymbol",
              "XmlDocumentation": ""
            }
          ],
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.CustomModifier}",
                "Content": "ImmutableArray<CustomModifier> CustomModifiers",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IArrayTypeSymbol.CustomModifiers\">\r\n    <summary>\r\n    Gets the list of custom modifiers associated with the array.\r\n    Returns an empty list if there are no custom modifiers.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 27
              },
              "Syntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.CustomModifier}",
                "Content": "ImmutableArray<CustomModifier> CustomModifiers",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IArrayTypeSymbol.CustomModifiers\">\r\n    <summary>\r\n    Gets the list of custom modifiers associated with the array.\r\n    Returns an empty list if there are no custom modifiers.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 27
              },
              "Id": "P:Microsoft.CodeAnalysis.IArrayTypeSymbol.CustomModifiers",
              "Parent": "T:Microsoft.CodeAnalysis.IArrayTypeSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IArrayTypeSymbol.CustomModifiers\">\r\n    <summary>\r\n    Gets the list of custom modifiers associated with the array.\r\n    Returns an empty list if there are no custom modifiers.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.ITypeSymbol",
                "Content": "ITypeSymbol ElementType",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IArrayTypeSymbol.ElementType\">\r\n    <summary>\r\n    Gets the type of the elements stored in the array.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 21
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.ITypeSymbol",
                "Content": "ITypeSymbol ElementType",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IArrayTypeSymbol.ElementType\">\r\n    <summary>\r\n    Gets the type of the elements stored in the array.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 21
              },
              "Id": "P:Microsoft.CodeAnalysis.IArrayTypeSymbol.ElementType",
              "Parent": "T:Microsoft.CodeAnalysis.IArrayTypeSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IArrayTypeSymbol.ElementType\">\r\n    <summary>\r\n    Gets the type of the elements stored in the array.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Int32",
                "Content": "int Rank",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IArrayTypeSymbol.Rank\">\r\n    <summary>\r\n    Gets the number of dimensions of this array. A regular single-dimensional array\r\n    has rank 1, a two-dimensional array has rank 2, etc.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 16
              },
              "Syntax": {
                "PropertyType": "T:System.Int32",
                "Content": "int Rank",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IArrayTypeSymbol.Rank\">\r\n    <summary>\r\n    Gets the number of dimensions of this array. A regular single-dimensional array\r\n    has rank 1, a two-dimensional array has rank 2, etc.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 16
              },
              "Id": "P:Microsoft.CodeAnalysis.IArrayTypeSymbol.Rank",
              "Parent": "T:Microsoft.CodeAnalysis.IArrayTypeSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IArrayTypeSymbol.Rank\">\r\n    <summary>\r\n    Gets the number of dimensions of this array. A regular single-dimensional array\r\n    has rank 1, a two-dimensional array has rank 2, etc.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            8,
            9,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Symbols\\IArrayTypeSymbol.cs",
          "InheritanceHierarchy": [],
          "Syntax": {
            "Content": "public interface IArrayTypeSymbol",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.IArrayTypeSymbol\">\r\n    <summary>\r\n    Represents an array.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.IArrayTypeSymbol",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.IArrayTypeSymbol\">\r\n    <summary>\r\n    Represents an array.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.String : fullyQualifiedMetadataName": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.INamedTypeSymbol": ""
                },
                "Content": "INamedTypeSymbol GetTypeByMetadataName(string fullyQualifiedMetadataName);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.IAssemblySymbol.GetTypeByMetadataName(System.String)\">\r\n    <summary>\r\n    Lookup a type within the assembly using the canonical CLR metadata name of the type.\r\n    </summary>\r\n    <param name=\"fullyQualifiedMetadataName\">Type name.</param>\r\n    <returns>Symbol for the type or null if type cannot be found or is ambiguous. </returns>\r\n</member>\r\n",
                "StartLine": 55
              },
              "Syntax": {
                "Parameters": {
                  "T:System.String : fullyQualifiedMetadataName": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.INamedTypeSymbol": ""
                },
                "Content": "INamedTypeSymbol GetTypeByMetadataName(string fullyQualifiedMetadataName);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.IAssemblySymbol.GetTypeByMetadataName(System.String)\">\r\n    <summary>\r\n    Lookup a type within the assembly using the canonical CLR metadata name of the type.\r\n    </summary>\r\n    <param name=\"fullyQualifiedMetadataName\">Type name.</param>\r\n    <returns>Symbol for the type or null if type cannot be found or is ambiguous. </returns>\r\n</member>\r\n",
                "StartLine": 55
              },
              "Id": "M:Microsoft.CodeAnalysis.IAssemblySymbol.GetTypeByMetadataName(System.String)",
              "Parent": "T:Microsoft.CodeAnalysis.IAssemblySymbol",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.IAssemblySymbol.GetTypeByMetadataName(System.String)\">\r\n    <summary>\r\n    Lookup a type within the assembly using the canonical CLR metadata name of the type.\r\n    </summary>\r\n    <param name=\"fullyQualifiedMetadataName\">Type name.</param>\r\n    <returns>Symbol for the type or null if type cannot be found or is ambiguous. </returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.IAssemblySymbol : toAssembly": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "bool GivesAccessTo(IAssemblySymbol toAssembly);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.IAssemblySymbol.GivesAccessTo(Microsoft.CodeAnalysis.IAssemblySymbol)\">\r\n    <summary>\r\n    Gets a value indicating whether this assembly gives \r\n    <paramref name=\"toAssembly\"/> access to internal symbols</summary>\r\n</member>\r\n",
                "StartLine": 48
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.IAssemblySymbol : toAssembly": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "bool GivesAccessTo(IAssemblySymbol toAssembly);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.IAssemblySymbol.GivesAccessTo(Microsoft.CodeAnalysis.IAssemblySymbol)\">\r\n    <summary>\r\n    Gets a value indicating whether this assembly gives \r\n    <paramref name=\"toAssembly\"/> access to internal symbols</summary>\r\n</member>\r\n",
                "StartLine": 48
              },
              "Id": "M:Microsoft.CodeAnalysis.IAssemblySymbol.GivesAccessTo(Microsoft.CodeAnalysis.IAssemblySymbol)",
              "Parent": "T:Microsoft.CodeAnalysis.IAssemblySymbol",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.IAssemblySymbol.GivesAccessTo(Microsoft.CodeAnalysis.IAssemblySymbol)\">\r\n    <summary>\r\n    Gets a value indicating whether this assembly gives \r\n    <paramref name=\"toAssembly\"/> access to internal symbols</summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.String : fullyQualifiedMetadataName": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.INamedTypeSymbol": ""
                },
                "Content": "INamedTypeSymbol ResolveForwardedType(string fullyQualifiedMetadataName);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.IAssemblySymbol.ResolveForwardedType(System.String)\">\r\n    <summary>\r\n    Returns the type symbol for a forwarded type based its canonical CLR metadata name.\r\n    The name should refer to a non-nested type. If type with this name is not forwarded,\r\n    null is returned.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 68
              },
              "Syntax": {
                "Parameters": {
                  "T:System.String : fullyQualifiedMetadataName": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.INamedTypeSymbol": ""
                },
                "Content": "INamedTypeSymbol ResolveForwardedType(string fullyQualifiedMetadataName);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.IAssemblySymbol.ResolveForwardedType(System.String)\">\r\n    <summary>\r\n    Returns the type symbol for a forwarded type based its canonical CLR metadata name.\r\n    The name should refer to a non-nested type. If type with this name is not forwarded,\r\n    null is returned.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 68
              },
              "Id": "M:Microsoft.CodeAnalysis.IAssemblySymbol.ResolveForwardedType(System.String)",
              "Parent": "T:Microsoft.CodeAnalysis.IAssemblySymbol",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.IAssemblySymbol.ResolveForwardedType(System.String)\">\r\n    <summary>\r\n    Returns the type symbol for a forwarded type based its canonical CLR metadata name.\r\n    The name should refer to a non-nested type. If type with this name is not forwarded,\r\n    null is returned.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.INamespaceSymbol",
                "Content": "INamespaceSymbol GlobalNamespace",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IAssemblySymbol.GlobalNamespace\">\r\n    <summary>\r\n    Gets the merged root namespace that contains all namespaces and types defined in the modules\r\n    of this assembly. If there is just one module in this assembly, this property just returns the \r\n    GlobalNamespace of that module.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 27
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.INamespaceSymbol",
                "Content": "INamespaceSymbol GlobalNamespace",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IAssemblySymbol.GlobalNamespace\">\r\n    <summary>\r\n    Gets the merged root namespace that contains all namespaces and types defined in the modules\r\n    of this assembly. If there is just one module in this assembly, this property just returns the \r\n    GlobalNamespace of that module.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 27
              },
              "Id": "P:Microsoft.CodeAnalysis.IAssemblySymbol.GlobalNamespace",
              "Parent": "T:Microsoft.CodeAnalysis.IAssemblySymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IAssemblySymbol.GlobalNamespace\">\r\n    <summary>\r\n    Gets the merged root namespace that contains all namespaces and types defined in the modules\r\n    of this assembly. If there is just one module in this assembly, this property just returns the \r\n    GlobalNamespace of that module.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.AssemblyIdentity",
                "Content": "AssemblyIdentity Identity",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IAssemblySymbol.Identity\">\r\n    <summary>\r\n    Gets the name of this assembly.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 20
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.AssemblyIdentity",
                "Content": "AssemblyIdentity Identity",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IAssemblySymbol.Identity\">\r\n    <summary>\r\n    Gets the name of this assembly.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 20
              },
              "Id": "P:Microsoft.CodeAnalysis.IAssemblySymbol.Identity",
              "Parent": "T:Microsoft.CodeAnalysis.IAssemblySymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IAssemblySymbol.Identity\">\r\n    <summary>\r\n    Gets the name of this assembly.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool IsInteractive",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IAssemblySymbol.IsInteractive\">\r\n    <summary>\r\n    True if the assembly contains interactive code.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 15
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool IsInteractive",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IAssemblySymbol.IsInteractive\">\r\n    <summary>\r\n    True if the assembly contains interactive code.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 15
              },
              "Id": "P:Microsoft.CodeAnalysis.IAssemblySymbol.IsInteractive",
              "Parent": "T:Microsoft.CodeAnalysis.IAssemblySymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IAssemblySymbol.IsInteractive\">\r\n    <summary>\r\n    True if the assembly contains interactive code.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool MightContainExtensionMethods",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IAssemblySymbol.MightContainExtensionMethods\">\r\n    <summary>\r\n    Determines if the assembly might contain extension methods.\r\n    If false, the assembly does not contain extension methods.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 61
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool MightContainExtensionMethods",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IAssemblySymbol.MightContainExtensionMethods\">\r\n    <summary>\r\n    Determines if the assembly might contain extension methods.\r\n    If false, the assembly does not contain extension methods.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 61
              },
              "Id": "P:Microsoft.CodeAnalysis.IAssemblySymbol.MightContainExtensionMethods",
              "Parent": "T:Microsoft.CodeAnalysis.IAssemblySymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IAssemblySymbol.MightContainExtensionMethods\">\r\n    <summary>\r\n    Determines if the assembly might contain extension methods.\r\n    If false, the assembly does not contain extension methods.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.IModuleSymbol}",
                "Content": "IEnumerable<IModuleSymbol> Modules",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IAssemblySymbol.Modules\">\r\n    <summary>\r\n    Gets the modules in this assembly. (There must be at least one.) The first one is the main module\r\n    that holds the assembly manifest.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 33
              },
              "Syntax": {
                "PropertyType": "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.IModuleSymbol}",
                "Content": "IEnumerable<IModuleSymbol> Modules",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IAssemblySymbol.Modules\">\r\n    <summary>\r\n    Gets the modules in this assembly. (There must be at least one.) The first one is the main module\r\n    that holds the assembly manifest.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 33
              },
              "Id": "P:Microsoft.CodeAnalysis.IAssemblySymbol.Modules",
              "Parent": "T:Microsoft.CodeAnalysis.IAssemblySymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IAssemblySymbol.Modules\">\r\n    <summary>\r\n    Gets the modules in this assembly. (There must be at least one.) The first one is the main module\r\n    that holds the assembly manifest.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Collections.Generic.ICollection{System.String}",
                "Content": "ICollection<string> NamespaceNames",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IAssemblySymbol.NamespaceNames\">\r\n    <summary>\r\n    Gets the set of namespace names from this assembly.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 43
              },
              "Syntax": {
                "PropertyType": "T:System.Collections.Generic.ICollection{System.String}",
                "Content": "ICollection<string> NamespaceNames",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IAssemblySymbol.NamespaceNames\">\r\n    <summary>\r\n    Gets the set of namespace names from this assembly.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 43
              },
              "Id": "P:Microsoft.CodeAnalysis.IAssemblySymbol.NamespaceNames",
              "Parent": "T:Microsoft.CodeAnalysis.IAssemblySymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IAssemblySymbol.NamespaceNames\">\r\n    <summary>\r\n    Gets the set of namespace names from this assembly.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Collections.Generic.ICollection{System.String}",
                "Content": "ICollection<string> TypeNames",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IAssemblySymbol.TypeNames\">\r\n    <summary>\r\n    Gets the set of type identifiers from this assembly.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 38
              },
              "Syntax": {
                "PropertyType": "T:System.Collections.Generic.ICollection{System.String}",
                "Content": "ICollection<string> TypeNames",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IAssemblySymbol.TypeNames\">\r\n    <summary>\r\n    Gets the set of type identifiers from this assembly.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 38
              },
              "Id": "P:Microsoft.CodeAnalysis.IAssemblySymbol.TypeNames",
              "Parent": "T:Microsoft.CodeAnalysis.IAssemblySymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IAssemblySymbol.TypeNames\">\r\n    <summary>\r\n    Gets the set of type identifiers from this assembly.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            8,
            9,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Symbols\\IAssemblySymbol.cs",
          "InheritanceHierarchy": [],
          "Syntax": {
            "Content": "public interface IAssemblySymbol",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.IAssemblySymbol\">\r\n    <summary>\r\n    Represents a .NET assembly, consisting of one or more modules.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.IAssemblySymbol",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.IAssemblySymbol\">\r\n    <summary>\r\n    Represents a .NET assembly, consisting of one or more modules.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "AllowedMemberTypes": [
            8,
            9,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Symbols\\IDynamicTypeSymbol.cs",
          "InheritanceHierarchy": [],
          "Syntax": {
            "Content": "public interface IDynamicTypeSymbol",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.IDynamicTypeSymbol\">\r\n    <summary>\r\n    Represents the 'dynamic' type in C#.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.IDynamicTypeSymbol",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.IDynamicTypeSymbol\">\r\n    <summary>\r\n    Represents the 'dynamic' type in C#.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.CandidateReason",
                "Content": "CandidateReason CandidateReason",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IErrorTypeSymbol.CandidateReason\">\r\n    <summary>\r\n     If CandidateSymbols returns one or more symbols, returns the reason that those\r\n     symbols were not chosen. Otherwise, returns None.\r\n     </summary>\r\n</member>\r\n",
                "StartLine": 32
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.CandidateReason",
                "Content": "CandidateReason CandidateReason",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IErrorTypeSymbol.CandidateReason\">\r\n    <summary>\r\n     If CandidateSymbols returns one or more symbols, returns the reason that those\r\n     symbols were not chosen. Otherwise, returns None.\r\n     </summary>\r\n</member>\r\n",
                "StartLine": 32
              },
              "Id": "P:Microsoft.CodeAnalysis.IErrorTypeSymbol.CandidateReason",
              "Parent": "T:Microsoft.CodeAnalysis.IErrorTypeSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IErrorTypeSymbol.CandidateReason\">\r\n    <summary>\r\n     If CandidateSymbols returns one or more symbols, returns the reason that those\r\n     symbols were not chosen. Otherwise, returns None.\r\n     </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ISymbol}",
                "Content": "ImmutableArray<ISymbol> CandidateSymbols",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IErrorTypeSymbol.CandidateSymbols\">\r\n    <summary>\r\n    When constructing this type, there may have been symbols that seemed to\r\n    be what the user intended, but were unsuitable. For example, a type might have been\r\n    inaccessible, or ambiguous. This property returns the possible symbols that the user\r\n    might have intended. It will return no symbols if no possible symbols were found.\r\n    See the CandidateReason property to understand why the symbols were unsuitable.\r\n    </summary>\r\n    <remarks>\r\n    This only applies if this INamedTypeSymbol has TypeKind TypeKind.Error.\r\n    If not, an empty ImmutableArray is returned.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 26
              },
              "Syntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ISymbol}",
                "Content": "ImmutableArray<ISymbol> CandidateSymbols",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IErrorTypeSymbol.CandidateSymbols\">\r\n    <summary>\r\n    When constructing this type, there may have been symbols that seemed to\r\n    be what the user intended, but were unsuitable. For example, a type might have been\r\n    inaccessible, or ambiguous. This property returns the possible symbols that the user\r\n    might have intended. It will return no symbols if no possible symbols were found.\r\n    See the CandidateReason property to understand why the symbols were unsuitable.\r\n    </summary>\r\n    <remarks>\r\n    This only applies if this INamedTypeSymbol has TypeKind TypeKind.Error.\r\n    If not, an empty ImmutableArray is returned.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 26
              },
              "Id": "P:Microsoft.CodeAnalysis.IErrorTypeSymbol.CandidateSymbols",
              "Parent": "T:Microsoft.CodeAnalysis.IErrorTypeSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IErrorTypeSymbol.CandidateSymbols\">\r\n    <summary>\r\n    When constructing this type, there may have been symbols that seemed to\r\n    be what the user intended, but were unsuitable. For example, a type might have been\r\n    inaccessible, or ambiguous. This property returns the possible symbols that the user\r\n    might have intended. It will return no symbols if no possible symbols were found.\r\n    See the CandidateReason property to understand why the symbols were unsuitable.\r\n    </summary>\r\n    <remarks>\r\n    This only applies if this INamedTypeSymbol has TypeKind TypeKind.Error.\r\n    If not, an empty ImmutableArray is returned.\r\n    </remarks>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            8,
            9,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Symbols\\IErrorTypeSymbol.cs",
          "InheritanceHierarchy": [],
          "Syntax": {
            "Content": "public interface IErrorTypeSymbol",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.IErrorTypeSymbol\">\r\n    <summary>\r\n    An IErrorTypeSymbol is used when the compiler cannot determine a symbol object to return because\r\n    of an error. For example, if a field is declared \"Foo x;\", and the type \"Foo\" cannot be\r\n    found, an IErrorTypeSymbol is returned when asking the field \"x\" what it's type is.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.IErrorTypeSymbol",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.IErrorTypeSymbol\">\r\n    <summary>\r\n    An IErrorTypeSymbol is used when the compiler cannot determine a symbol object to return because\r\n    of an error. For example, if a field is declared \"Foo x;\", and the type \"Foo\" cannot be\r\n    found, an IErrorTypeSymbol is returned when asking the field \"x\" what it's type is.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.IMethodSymbol",
                "Content": "IMethodSymbol AddMethod",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IEventSymbol.AddMethod\">\r\n    <summary>\r\n    The 'add' accessor of the event.  Null only in error scenarios.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 25
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.IMethodSymbol",
                "Content": "IMethodSymbol AddMethod",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IEventSymbol.AddMethod\">\r\n    <summary>\r\n    The 'add' accessor of the event.  Null only in error scenarios.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 25
              },
              "Id": "P:Microsoft.CodeAnalysis.IEventSymbol.AddMethod",
              "Parent": "T:Microsoft.CodeAnalysis.IEventSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IEventSymbol.AddMethod\">\r\n    <summary>\r\n    The 'add' accessor of the event.  Null only in error scenarios.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.IEventSymbol}",
                "Content": "ImmutableArray<IEventSymbol> ExplicitInterfaceImplementations",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IEventSymbol.ExplicitInterfaceImplementations\">\r\n    <summary>\r\n    Returns interface properties explicitly implemented by this event.\r\n    </summary>\r\n    <remarks>\r\n    Properties imported from metadata can explicitly implement more than one event.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 55
              },
              "Syntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.IEventSymbol}",
                "Content": "ImmutableArray<IEventSymbol> ExplicitInterfaceImplementations",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IEventSymbol.ExplicitInterfaceImplementations\">\r\n    <summary>\r\n    Returns interface properties explicitly implemented by this event.\r\n    </summary>\r\n    <remarks>\r\n    Properties imported from metadata can explicitly implement more than one event.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 55
              },
              "Id": "P:Microsoft.CodeAnalysis.IEventSymbol.ExplicitInterfaceImplementations",
              "Parent": "T:Microsoft.CodeAnalysis.IEventSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IEventSymbol.ExplicitInterfaceImplementations\">\r\n    <summary>\r\n    Returns interface properties explicitly implemented by this event.\r\n    </summary>\r\n    <remarks>\r\n    Properties imported from metadata can explicitly implement more than one event.\r\n    </remarks>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool IsWindowsRuntimeEvent",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IEventSymbol.IsWindowsRuntimeEvent\">\r\n    <summary>\r\n    Returns true if the event is a WinRT type event.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 20
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool IsWindowsRuntimeEvent",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IEventSymbol.IsWindowsRuntimeEvent\">\r\n    <summary>\r\n    Returns true if the event is a WinRT type event.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 20
              },
              "Id": "P:Microsoft.CodeAnalysis.IEventSymbol.IsWindowsRuntimeEvent",
              "Parent": "T:Microsoft.CodeAnalysis.IEventSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IEventSymbol.IsWindowsRuntimeEvent\">\r\n    <summary>\r\n    Returns true if the event is a WinRT type event.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.IEventSymbol",
                "Content": "new IEventSymbol OriginalDefinition",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IEventSymbol.OriginalDefinition\">\r\n    <summary>\r\n    The original definition of the event. If the event is constructed from another\r\n    symbol by type substitution, OriginalDefinition gets the original symbol, as it was \r\n    defined in source or metadata.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 42
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.IEventSymbol",
                "Content": "new IEventSymbol OriginalDefinition",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IEventSymbol.OriginalDefinition\">\r\n    <summary>\r\n    The original definition of the event. If the event is constructed from another\r\n    symbol by type substitution, OriginalDefinition gets the original symbol, as it was \r\n    defined in source or metadata.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 42
              },
              "Id": "P:Microsoft.CodeAnalysis.IEventSymbol.OriginalDefinition",
              "Parent": "T:Microsoft.CodeAnalysis.IEventSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IEventSymbol.OriginalDefinition\">\r\n    <summary>\r\n    The original definition of the event. If the event is constructed from another\r\n    symbol by type substitution, OriginalDefinition gets the original symbol, as it was \r\n    defined in source or metadata.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.IEventSymbol",
                "Content": "IEventSymbol OverriddenEvent",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IEventSymbol.OverriddenEvent\">\r\n    <summary>\r\n    Returns the overridden event, or null.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 47
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.IEventSymbol",
                "Content": "IEventSymbol OverriddenEvent",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IEventSymbol.OverriddenEvent\">\r\n    <summary>\r\n    Returns the overridden event, or null.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 47
              },
              "Id": "P:Microsoft.CodeAnalysis.IEventSymbol.OverriddenEvent",
              "Parent": "T:Microsoft.CodeAnalysis.IEventSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IEventSymbol.OverriddenEvent\">\r\n    <summary>\r\n    Returns the overridden event, or null.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.IMethodSymbol",
                "Content": "IMethodSymbol RaiseMethod",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IEventSymbol.RaiseMethod\">\r\n    <summary>\r\n    The 'raise' accessor of the event.  Null if there is no raise method.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 35
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.IMethodSymbol",
                "Content": "IMethodSymbol RaiseMethod",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IEventSymbol.RaiseMethod\">\r\n    <summary>\r\n    The 'raise' accessor of the event.  Null if there is no raise method.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 35
              },
              "Id": "P:Microsoft.CodeAnalysis.IEventSymbol.RaiseMethod",
              "Parent": "T:Microsoft.CodeAnalysis.IEventSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IEventSymbol.RaiseMethod\">\r\n    <summary>\r\n    The 'raise' accessor of the event.  Null if there is no raise method.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.IMethodSymbol",
                "Content": "IMethodSymbol RemoveMethod",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IEventSymbol.RemoveMethod\">\r\n    <summary>\r\n    The 'remove' accessor of the event.  Null only in error scenarios.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 30
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.IMethodSymbol",
                "Content": "IMethodSymbol RemoveMethod",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IEventSymbol.RemoveMethod\">\r\n    <summary>\r\n    The 'remove' accessor of the event.  Null only in error scenarios.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 30
              },
              "Id": "P:Microsoft.CodeAnalysis.IEventSymbol.RemoveMethod",
              "Parent": "T:Microsoft.CodeAnalysis.IEventSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IEventSymbol.RemoveMethod\">\r\n    <summary>\r\n    The 'remove' accessor of the event.  Null only in error scenarios.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.ITypeSymbol",
                "Content": "ITypeSymbol Type",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IEventSymbol.Type\">\r\n    <summary>\r\n    The type of the event. \r\n    </summary>\r\n</member>\r\n",
                "StartLine": 15
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.ITypeSymbol",
                "Content": "ITypeSymbol Type",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IEventSymbol.Type\">\r\n    <summary>\r\n    The type of the event. \r\n    </summary>\r\n</member>\r\n",
                "StartLine": 15
              },
              "Id": "P:Microsoft.CodeAnalysis.IEventSymbol.Type",
              "Parent": "T:Microsoft.CodeAnalysis.IEventSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IEventSymbol.Type\">\r\n    <summary>\r\n    The type of the event. \r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            8,
            9,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Symbols\\IEventSymbol.cs",
          "InheritanceHierarchy": [],
          "Syntax": {
            "Content": "public interface IEventSymbol",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.IEventSymbol\">\r\n    <summary>\r\n    Represents an event.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.IEventSymbol",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.IEventSymbol\">\r\n    <summary>\r\n    Represents an event.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.ISymbol",
                "Content": "ISymbol AssociatedSymbol",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IFieldSymbol.AssociatedSymbol\">\r\n    <summary>\r\n    If this field serves as a backing variable for an automatically generated\r\n    property or a field-like event, returns that \r\n    property/event. Otherwise returns null.\r\n    Note, the set of possible associated symbols might be expanded in the future to \r\n    reflect changes in the languages.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 19
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.ISymbol",
                "Content": "ISymbol AssociatedSymbol",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IFieldSymbol.AssociatedSymbol\">\r\n    <summary>\r\n    If this field serves as a backing variable for an automatically generated\r\n    property or a field-like event, returns that \r\n    property/event. Otherwise returns null.\r\n    Note, the set of possible associated symbols might be expanded in the future to \r\n    reflect changes in the languages.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 19
              },
              "Id": "P:Microsoft.CodeAnalysis.IFieldSymbol.AssociatedSymbol",
              "Parent": "T:Microsoft.CodeAnalysis.IFieldSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IFieldSymbol.AssociatedSymbol\">\r\n    <summary>\r\n    If this field serves as a backing variable for an automatically generated\r\n    property or a field-like event, returns that \r\n    property/event. Otherwise returns null.\r\n    Note, the set of possible associated symbols might be expanded in the future to \r\n    reflect changes in the languages.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Object",
                "Content": "object ConstantValue",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IFieldSymbol.ConstantValue\">\r\n    <summary>\r\n    Gets the constant value of this field\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 51
              },
              "Syntax": {
                "PropertyType": "T:System.Object",
                "Content": "object ConstantValue",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IFieldSymbol.ConstantValue\">\r\n    <summary>\r\n    Gets the constant value of this field\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 51
              },
              "Id": "P:Microsoft.CodeAnalysis.IFieldSymbol.ConstantValue",
              "Parent": "T:Microsoft.CodeAnalysis.IFieldSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IFieldSymbol.ConstantValue\">\r\n    <summary>\r\n    Gets the constant value of this field\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.CustomModifier}",
                "Content": "ImmutableArray<CustomModifier> CustomModifiers",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IFieldSymbol.CustomModifiers\">\r\n    <summary>\r\n    Gets the list of custom modifiers, if any, associated with the field.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 56
              },
              "Syntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.CustomModifier}",
                "Content": "ImmutableArray<CustomModifier> CustomModifiers",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IFieldSymbol.CustomModifiers\">\r\n    <summary>\r\n    Gets the list of custom modifiers, if any, associated with the field.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 56
              },
              "Id": "P:Microsoft.CodeAnalysis.IFieldSymbol.CustomModifiers",
              "Parent": "T:Microsoft.CodeAnalysis.IFieldSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IFieldSymbol.CustomModifiers\">\r\n    <summary>\r\n    Gets the list of custom modifiers, if any, associated with the field.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool HasConstantValue",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IFieldSymbol.HasConstantValue\">\r\n    <summary>\r\n    Returns false if the field wasn't declared as \"const\", or constant value was omitted or errorneous.\r\n    True otherwise.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 46
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool HasConstantValue",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IFieldSymbol.HasConstantValue\">\r\n    <summary>\r\n    Returns false if the field wasn't declared as \"const\", or constant value was omitted or errorneous.\r\n    True otherwise.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 46
              },
              "Id": "P:Microsoft.CodeAnalysis.IFieldSymbol.HasConstantValue",
              "Parent": "T:Microsoft.CodeAnalysis.IFieldSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IFieldSymbol.HasConstantValue\">\r\n    <summary>\r\n    Returns false if the field wasn't declared as \"const\", or constant value was omitted or errorneous.\r\n    True otherwise.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool IsConst",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IFieldSymbol.IsConst\">\r\n    <summary>\r\n    Returns true if this field was declared as \"const\" (i.e. is a constant declaration).\r\n    Also returns true for an enum member.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 25
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool IsConst",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IFieldSymbol.IsConst\">\r\n    <summary>\r\n    Returns true if this field was declared as \"const\" (i.e. is a constant declaration).\r\n    Also returns true for an enum member.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 25
              },
              "Id": "P:Microsoft.CodeAnalysis.IFieldSymbol.IsConst",
              "Parent": "T:Microsoft.CodeAnalysis.IFieldSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IFieldSymbol.IsConst\">\r\n    <summary>\r\n    Returns true if this field was declared as \"const\" (i.e. is a constant declaration).\r\n    Also returns true for an enum member.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool IsReadOnly",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IFieldSymbol.IsReadOnly\">\r\n    <summary>\r\n    Returns true if this field was declared as \"readonly\". \r\n    </summary>\r\n</member>\r\n",
                "StartLine": 30
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool IsReadOnly",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IFieldSymbol.IsReadOnly\">\r\n    <summary>\r\n    Returns true if this field was declared as \"readonly\". \r\n    </summary>\r\n</member>\r\n",
                "StartLine": 30
              },
              "Id": "P:Microsoft.CodeAnalysis.IFieldSymbol.IsReadOnly",
              "Parent": "T:Microsoft.CodeAnalysis.IFieldSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IFieldSymbol.IsReadOnly\">\r\n    <summary>\r\n    Returns true if this field was declared as \"readonly\". \r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool IsVolatile",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IFieldSymbol.IsVolatile\">\r\n    <summary>\r\n    Returns true if this field was declared as \"volatile\". \r\n    </summary>\r\n</member>\r\n",
                "StartLine": 35
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool IsVolatile",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IFieldSymbol.IsVolatile\">\r\n    <summary>\r\n    Returns true if this field was declared as \"volatile\". \r\n    </summary>\r\n</member>\r\n",
                "StartLine": 35
              },
              "Id": "P:Microsoft.CodeAnalysis.IFieldSymbol.IsVolatile",
              "Parent": "T:Microsoft.CodeAnalysis.IFieldSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IFieldSymbol.IsVolatile\">\r\n    <summary>\r\n    Returns true if this field was declared as \"volatile\". \r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.IFieldSymbol",
                "Content": "new IFieldSymbol OriginalDefinition",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IFieldSymbol.OriginalDefinition\">\r\n    <summary>\r\n    Get the original definition of this symbol. If this symbol is derived from another\r\n    symbol by (say) type substitution, this gets the original symbol, as it was defined in\r\n    source or metadata.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 63
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.IFieldSymbol",
                "Content": "new IFieldSymbol OriginalDefinition",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IFieldSymbol.OriginalDefinition\">\r\n    <summary>\r\n    Get the original definition of this symbol. If this symbol is derived from another\r\n    symbol by (say) type substitution, this gets the original symbol, as it was defined in\r\n    source or metadata.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 63
              },
              "Id": "P:Microsoft.CodeAnalysis.IFieldSymbol.OriginalDefinition",
              "Parent": "T:Microsoft.CodeAnalysis.IFieldSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IFieldSymbol.OriginalDefinition\">\r\n    <summary>\r\n    Get the original definition of this symbol. If this symbol is derived from another\r\n    symbol by (say) type substitution, this gets the original symbol, as it was defined in\r\n    source or metadata.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.ITypeSymbol",
                "Content": "ITypeSymbol Type",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IFieldSymbol.Type\">\r\n    <summary>\r\n    Gets the type of this field.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 40
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.ITypeSymbol",
                "Content": "ITypeSymbol Type",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IFieldSymbol.Type\">\r\n    <summary>\r\n    Gets the type of this field.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 40
              },
              "Id": "P:Microsoft.CodeAnalysis.IFieldSymbol.Type",
              "Parent": "T:Microsoft.CodeAnalysis.IFieldSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IFieldSymbol.Type\">\r\n    <summary>\r\n    Gets the type of this field.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            8,
            9,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Symbols\\IFieldSymbol.cs",
          "InheritanceHierarchy": [],
          "Syntax": {
            "Content": "public interface IFieldSymbol",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.IFieldSymbol\">\r\n    <summary>\r\n    Represents a field in a class, struct or enum.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.IFieldSymbol",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.IFieldSymbol\">\r\n    <summary>\r\n    Represents a field in a class, struct or enum.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.IMethodSymbol",
                "Content": "IMethodSymbol ContainingMethod",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ILabelSymbol.ContainingMethod\">\r\n    <summary>\r\n    Gets the immediately containing <see cref=\"T:Microsoft.CodeAnalysis.IMethodSymbol\"/> of this <see cref=\"T:Microsoft.CodeAnalysis.ILocalSymbol\"/>.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 14
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.IMethodSymbol",
                "Content": "IMethodSymbol ContainingMethod",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ILabelSymbol.ContainingMethod\">\r\n    <summary>\r\n    Gets the immediately containing <see cref=\"T:Microsoft.CodeAnalysis.IMethodSymbol\"/> of this <see cref=\"T:Microsoft.CodeAnalysis.ILocalSymbol\"/>.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 14
              },
              "Id": "P:Microsoft.CodeAnalysis.ILabelSymbol.ContainingMethod",
              "Parent": "T:Microsoft.CodeAnalysis.ILabelSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ILabelSymbol.ContainingMethod\">\r\n    <summary>\r\n    Gets the immediately containing <see cref=\"T:Microsoft.CodeAnalysis.IMethodSymbol\"/> of this <see cref=\"T:Microsoft.CodeAnalysis.ILocalSymbol\"/>.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            8,
            9,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Symbols\\ILabelSymbol.cs",
          "InheritanceHierarchy": [],
          "Syntax": {
            "Content": "public interface ILabelSymbol",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.ILabelSymbol\">\r\n    <summary>\r\n    Represents a label in method body\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.ILabelSymbol",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.ILabelSymbol\">\r\n    <summary>\r\n    Represents a label in method body\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Object",
                "Content": "object ConstantValue",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ILocalSymbol.ConstantValue\">\r\n    <summary>\r\n    Gets the constant value of this local variable.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 29
              },
              "Syntax": {
                "PropertyType": "T:System.Object",
                "Content": "object ConstantValue",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ILocalSymbol.ConstantValue\">\r\n    <summary>\r\n    Gets the constant value of this local variable.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 29
              },
              "Id": "P:Microsoft.CodeAnalysis.ILocalSymbol.ConstantValue",
              "Parent": "T:Microsoft.CodeAnalysis.ILocalSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ILocalSymbol.ConstantValue\">\r\n    <summary>\r\n    Gets the constant value of this local variable.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool HasConstantValue",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ILocalSymbol.HasConstantValue\">\r\n    <summary>\r\n    Returns false if the local variable wasn't declared as \"const\", or constant value was omitted or erroneous.\r\n    True otherwise.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 24
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool HasConstantValue",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ILocalSymbol.HasConstantValue\">\r\n    <summary>\r\n    Returns false if the local variable wasn't declared as \"const\", or constant value was omitted or erroneous.\r\n    True otherwise.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 24
              },
              "Id": "P:Microsoft.CodeAnalysis.ILocalSymbol.HasConstantValue",
              "Parent": "T:Microsoft.CodeAnalysis.ILocalSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ILocalSymbol.HasConstantValue\">\r\n    <summary>\r\n    Returns false if the local variable wasn't declared as \"const\", or constant value was omitted or erroneous.\r\n    True otherwise.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool IsConst",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ILocalSymbol.IsConst\">\r\n    <summary>\r\n    Returns true if this local variable was declared as \"const\" (i.e. is a constant declaration).\r\n    Also returns true for an enum member.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 18
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool IsConst",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ILocalSymbol.IsConst\">\r\n    <summary>\r\n    Returns true if this local variable was declared as \"const\" (i.e. is a constant declaration).\r\n    Also returns true for an enum member.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 18
              },
              "Id": "P:Microsoft.CodeAnalysis.ILocalSymbol.IsConst",
              "Parent": "T:Microsoft.CodeAnalysis.ILocalSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ILocalSymbol.IsConst\">\r\n    <summary>\r\n    Returns true if this local variable was declared as \"const\" (i.e. is a constant declaration).\r\n    Also returns true for an enum member.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool IsFunctionValue",
                "XmlDocumentation": "",
                "StartLine": 32
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool IsFunctionValue",
                "XmlDocumentation": "",
                "StartLine": 32
              },
              "Id": "P:Microsoft.CodeAnalysis.ILocalSymbol.IsFunctionValue",
              "Parent": "T:Microsoft.CodeAnalysis.ILocalSymbol",
              "XmlDocumentation": ""
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.ITypeSymbol",
                "Content": "ITypeSymbol Type",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ILocalSymbol.Type\">\r\n    <summary>\r\n    Gets the type of this local variable.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 12
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.ITypeSymbol",
                "Content": "ITypeSymbol Type",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ILocalSymbol.Type\">\r\n    <summary>\r\n    Gets the type of this local variable.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 12
              },
              "Id": "P:Microsoft.CodeAnalysis.ILocalSymbol.Type",
              "Parent": "T:Microsoft.CodeAnalysis.ILocalSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ILocalSymbol.Type\">\r\n    <summary>\r\n    Gets the type of this local variable.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            8,
            9,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Symbols\\ILocalSymbol.cs",
          "InheritanceHierarchy": [],
          "Syntax": {
            "Content": "public interface ILocalSymbol",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.ILocalSymbol\">\r\n    <summary>\r\n    Represents a local variable in method body.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.ILocalSymbol",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.ILocalSymbol\">\r\n    <summary>\r\n    Represents a local variable in method body.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Array : typeArguments": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.IMethodSymbol": ""
                },
                "Content": "IMethodSymbol Construct(params ITypeSymbol[] typeArguments);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.IMethodSymbol.Construct(Microsoft.CodeAnalysis.ITypeSymbol[])\">\r\n    <summary>\r\n    Returns a constructed method given its type arguments.\r\n    </summary>\r\n    <param name=\"typeArguments\">The immediate type arguments to be replaced for type\r\n    parameters in the method.</param>\r\n</member>\r\n",
                "StartLine": 177
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Array : typeArguments": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.IMethodSymbol": ""
                },
                "Content": "IMethodSymbol Construct(params ITypeSymbol[] typeArguments);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.IMethodSymbol.Construct(Microsoft.CodeAnalysis.ITypeSymbol[])\">\r\n    <summary>\r\n    Returns a constructed method given its type arguments.\r\n    </summary>\r\n    <param name=\"typeArguments\">The immediate type arguments to be replaced for type\r\n    parameters in the method.</param>\r\n</member>\r\n",
                "StartLine": 177
              },
              "Id": "M:Microsoft.CodeAnalysis.IMethodSymbol.Construct(Microsoft.CodeAnalysis.ITypeSymbol[])",
              "Parent": "T:Microsoft.CodeAnalysis.IMethodSymbol",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.IMethodSymbol.Construct(Microsoft.CodeAnalysis.ITypeSymbol[])\">\r\n    <summary>\r\n    Returns a constructed method given its type arguments.\r\n    </summary>\r\n    <param name=\"typeArguments\">The immediate type arguments to be replaced for type\r\n    parameters in the method.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.DllImportData": ""
                },
                "Content": "DllImportData GetDllImportData();",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.IMethodSymbol.GetDllImportData\">\r\n    <summary>\r\n    Platform invoke information, or null if the method isn't a P/Invoke.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 195
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.DllImportData": ""
                },
                "Content": "DllImportData GetDllImportData();",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.IMethodSymbol.GetDllImportData\">\r\n    <summary>\r\n    Platform invoke information, or null if the method isn't a P/Invoke.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 195
              },
              "Id": "M:Microsoft.CodeAnalysis.IMethodSymbol.GetDllImportData",
              "Parent": "T:Microsoft.CodeAnalysis.IMethodSymbol",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.IMethodSymbol.GetDllImportData\">\r\n    <summary>\r\n    Platform invoke information, or null if the method isn't a P/Invoke.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.AttributeData}": ""
                },
                "Content": "ImmutableArray<AttributeData> GetReturnTypeAttributes();",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.IMethodSymbol.GetReturnTypeAttributes\">\r\n    <summary>\r\n    Returns the list of custom attributes, if any, associated with the returned value. \r\n    </summary>\r\n</member>\r\n",
                "StartLine": 157
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.AttributeData}": ""
                },
                "Content": "ImmutableArray<AttributeData> GetReturnTypeAttributes();",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.IMethodSymbol.GetReturnTypeAttributes\">\r\n    <summary>\r\n    Returns the list of custom attributes, if any, associated with the returned value. \r\n    </summary>\r\n</member>\r\n",
                "StartLine": 157
              },
              "Id": "M:Microsoft.CodeAnalysis.IMethodSymbol.GetReturnTypeAttributes",
              "Parent": "T:Microsoft.CodeAnalysis.IMethodSymbol",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.IMethodSymbol.GetReturnTypeAttributes\">\r\n    <summary>\r\n    Returns the list of custom attributes, if any, associated with the returned value. \r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.ITypeParameterSymbol : reducedFromTypeParameter": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.ITypeSymbol": ""
                },
                "Content": "ITypeSymbol GetTypeInferredDuringReduction(ITypeParameterSymbol reducedFromTypeParameter);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.IMethodSymbol.GetTypeInferredDuringReduction(Microsoft.CodeAnalysis.ITypeParameterSymbol)\">\r\n    <summary>\r\n    If this method is a reduced extension method, returns a type inferred during reduction process for the type parameter. \r\n    </summary>\r\n    <param name=\"reducedFromTypeParameter\">Type parameter of the corresponding <see cref=\"P:Microsoft.CodeAnalysis.IMethodSymbol.ReducedFrom\"/> method.</param>\r\n    <returns>Inferred type or Nothing if nothing was inferred.</returns>\r\n    <exception cref=\"T:System.InvalidOperationException\">If this is not a reduced extension method.</exception>\r\n    <exception cref=\"T:System.ArgumentNullException\">If <paramref name=\"reducedFromTypeParameter\"/> is null.</exception>\r\n    <exception cref=\"T:System.ArgumentException\">If <paramref name=\"reducedFromTypeParameter\"/> doesn't belong to the corresponding <see cref=\"P:Microsoft.CodeAnalysis.IMethodSymbol.ReducedFrom\"/> method.</exception>\r\n</member>\r\n",
                "StartLine": 132
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.ITypeParameterSymbol : reducedFromTypeParameter": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.ITypeSymbol": ""
                },
                "Content": "ITypeSymbol GetTypeInferredDuringReduction(ITypeParameterSymbol reducedFromTypeParameter);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.IMethodSymbol.GetTypeInferredDuringReduction(Microsoft.CodeAnalysis.ITypeParameterSymbol)\">\r\n    <summary>\r\n    If this method is a reduced extension method, returns a type inferred during reduction process for the type parameter. \r\n    </summary>\r\n    <param name=\"reducedFromTypeParameter\">Type parameter of the corresponding <see cref=\"P:Microsoft.CodeAnalysis.IMethodSymbol.ReducedFrom\"/> method.</param>\r\n    <returns>Inferred type or Nothing if nothing was inferred.</returns>\r\n    <exception cref=\"T:System.InvalidOperationException\">If this is not a reduced extension method.</exception>\r\n    <exception cref=\"T:System.ArgumentNullException\">If <paramref name=\"reducedFromTypeParameter\"/> is null.</exception>\r\n    <exception cref=\"T:System.ArgumentException\">If <paramref name=\"reducedFromTypeParameter\"/> doesn't belong to the corresponding <see cref=\"P:Microsoft.CodeAnalysis.IMethodSymbol.ReducedFrom\"/> method.</exception>\r\n</member>\r\n",
                "StartLine": 132
              },
              "Id": "M:Microsoft.CodeAnalysis.IMethodSymbol.GetTypeInferredDuringReduction(Microsoft.CodeAnalysis.ITypeParameterSymbol)",
              "Parent": "T:Microsoft.CodeAnalysis.IMethodSymbol",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.IMethodSymbol.GetTypeInferredDuringReduction(Microsoft.CodeAnalysis.ITypeParameterSymbol)\">\r\n    <summary>\r\n    If this method is a reduced extension method, returns a type inferred during reduction process for the type parameter. \r\n    </summary>\r\n    <param name=\"reducedFromTypeParameter\">Type parameter of the corresponding <see cref=\"P:Microsoft.CodeAnalysis.IMethodSymbol.ReducedFrom\"/> method.</param>\r\n    <returns>Inferred type or Nothing if nothing was inferred.</returns>\r\n    <exception cref=\"T:System.InvalidOperationException\">If this is not a reduced extension method.</exception>\r\n    <exception cref=\"T:System.ArgumentNullException\">If <paramref name=\"reducedFromTypeParameter\"/> is null.</exception>\r\n    <exception cref=\"T:System.ArgumentException\">If <paramref name=\"reducedFromTypeParameter\"/> doesn't belong to the corresponding <see cref=\"P:Microsoft.CodeAnalysis.IMethodSymbol.ReducedFrom\"/> method.</exception>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.ITypeSymbol : receiverType": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.IMethodSymbol": ""
                },
                "Content": "IMethodSymbol ReduceExtensionMethod(ITypeSymbol receiverType);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.IMethodSymbol.ReduceExtensionMethod(Microsoft.CodeAnalysis.ITypeSymbol)\">\r\n    <summary>\r\n    If this is an extension method that can be applied to a receiver of the given type,\r\n    returns a reduced extension method symbol thus formed. Otherwise, returns null.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 138
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.ITypeSymbol : receiverType": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.IMethodSymbol": ""
                },
                "Content": "IMethodSymbol ReduceExtensionMethod(ITypeSymbol receiverType);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.IMethodSymbol.ReduceExtensionMethod(Microsoft.CodeAnalysis.ITypeSymbol)\">\r\n    <summary>\r\n    If this is an extension method that can be applied to a receiver of the given type,\r\n    returns a reduced extension method symbol thus formed. Otherwise, returns null.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 138
              },
              "Id": "M:Microsoft.CodeAnalysis.IMethodSymbol.ReduceExtensionMethod(Microsoft.CodeAnalysis.ITypeSymbol)",
              "Parent": "T:Microsoft.CodeAnalysis.IMethodSymbol",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.IMethodSymbol.ReduceExtensionMethod(Microsoft.CodeAnalysis.ITypeSymbol)\">\r\n    <summary>\r\n    If this is an extension method that can be applied to a receiver of the given type,\r\n    returns a reduced extension method symbol thus formed. Otherwise, returns null.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Int32",
                "Content": "int Arity",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IMethodSymbol.Arity\">\r\n    <summary>\r\n    Returns the arity of this method, or the number of type parameters it takes.\r\n    A non-generic method has zero arity.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 24
              },
              "Syntax": {
                "PropertyType": "T:System.Int32",
                "Content": "int Arity",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IMethodSymbol.Arity\">\r\n    <summary>\r\n    Returns the arity of this method, or the number of type parameters it takes.\r\n    A non-generic method has zero arity.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 24
              },
              "Id": "P:Microsoft.CodeAnalysis.IMethodSymbol.Arity",
              "Parent": "T:Microsoft.CodeAnalysis.IMethodSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IMethodSymbol.Arity\">\r\n    <summary>\r\n    Returns the arity of this method, or the number of type parameters it takes.\r\n    A non-generic method has zero arity.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.INamedTypeSymbol",
                "Content": "INamedTypeSymbol AssociatedAnonymousDelegate",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IMethodSymbol.AssociatedAnonymousDelegate\">\r\n    <summary>\r\n    If this method is a Lambda method (MethodKind = MethodKind.LambdaMethod) and \r\n    there is an anonymous delegate associated with it, returns this delegate.\r\n    \r\n    Returns null if the symbol is not a lambda or if it does not have an\r\n    anonymous delegate associated with it.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 204
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.INamedTypeSymbol",
                "Content": "INamedTypeSymbol AssociatedAnonymousDelegate",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IMethodSymbol.AssociatedAnonymousDelegate\">\r\n    <summary>\r\n    If this method is a Lambda method (MethodKind = MethodKind.LambdaMethod) and \r\n    there is an anonymous delegate associated with it, returns this delegate.\r\n    \r\n    Returns null if the symbol is not a lambda or if it does not have an\r\n    anonymous delegate associated with it.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 204
              },
              "Id": "P:Microsoft.CodeAnalysis.IMethodSymbol.AssociatedAnonymousDelegate",
              "Parent": "T:Microsoft.CodeAnalysis.IMethodSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IMethodSymbol.AssociatedAnonymousDelegate\">\r\n    <summary>\r\n    If this method is a Lambda method (MethodKind = MethodKind.LambdaMethod) and \r\n    there is an anonymous delegate associated with it, returns this delegate.\r\n    \r\n    Returns null if the symbol is not a lambda or if it does not have an\r\n    anonymous delegate associated with it.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.ISymbol",
                "Content": "ISymbol AssociatedSymbol",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IMethodSymbol.AssociatedSymbol\">\r\n    <summary>\r\n    Returns a symbol (e.g. property, event, etc.) associated with the method.\r\n    </summary>\r\n    <remarks>\r\n    If this method has <see cref=\"P:Microsoft.CodeAnalysis.IMethodSymbol.MethodKind\"/> of <see cref=\"F:Microsoft.CodeAnalysis.MethodKind.PropertyGet\"/> or <see cref=\"F:Microsoft.CodeAnalysis.MethodKind.PropertySet\"/>,\r\n    returns the property that this method is the getter or setter for.\r\n    If this method has <see cref=\"P:Microsoft.CodeAnalysis.IMethodSymbol.MethodKind\"/> of <see cref=\"F:Microsoft.CodeAnalysis.MethodKind.EventAdd\"/> or <see cref=\"F:Microsoft.CodeAnalysis.MethodKind.EventRemove\"/>,\r\n    returns the event that this method is the adder or remover for.\r\n    Note, the set of possible associated symbols might be expanded in the future to \r\n    reflect changes in the languages.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 170
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.ISymbol",
                "Content": "ISymbol AssociatedSymbol",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IMethodSymbol.AssociatedSymbol\">\r\n    <summary>\r\n    Returns a symbol (e.g. property, event, etc.) associated with the method.\r\n    </summary>\r\n    <remarks>\r\n    If this method has <see cref=\"P:Microsoft.CodeAnalysis.IMethodSymbol.MethodKind\"/> of <see cref=\"F:Microsoft.CodeAnalysis.MethodKind.PropertyGet\"/> or <see cref=\"F:Microsoft.CodeAnalysis.MethodKind.PropertySet\"/>,\r\n    returns the property that this method is the getter or setter for.\r\n    If this method has <see cref=\"P:Microsoft.CodeAnalysis.IMethodSymbol.MethodKind\"/> of <see cref=\"F:Microsoft.CodeAnalysis.MethodKind.EventAdd\"/> or <see cref=\"F:Microsoft.CodeAnalysis.MethodKind.EventRemove\"/>,\r\n    returns the event that this method is the adder or remover for.\r\n    Note, the set of possible associated symbols might be expanded in the future to \r\n    reflect changes in the languages.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 170
              },
              "Id": "P:Microsoft.CodeAnalysis.IMethodSymbol.AssociatedSymbol",
              "Parent": "T:Microsoft.CodeAnalysis.IMethodSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IMethodSymbol.AssociatedSymbol\">\r\n    <summary>\r\n    Returns a symbol (e.g. property, event, etc.) associated with the method.\r\n    </summary>\r\n    <remarks>\r\n    If this method has <see cref=\"P:Microsoft.CodeAnalysis.IMethodSymbol.MethodKind\"/> of <see cref=\"F:Microsoft.CodeAnalysis.MethodKind.PropertyGet\"/> or <see cref=\"F:Microsoft.CodeAnalysis.MethodKind.PropertySet\"/>,\r\n    returns the property that this method is the getter or setter for.\r\n    If this method has <see cref=\"P:Microsoft.CodeAnalysis.IMethodSymbol.MethodKind\"/> of <see cref=\"F:Microsoft.CodeAnalysis.MethodKind.EventAdd\"/> or <see cref=\"F:Microsoft.CodeAnalysis.MethodKind.EventRemove\"/>,\r\n    returns the event that this method is the adder or remover for.\r\n    Note, the set of possible associated symbols might be expanded in the future to \r\n    reflect changes in the languages.\r\n    </remarks>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.IMethodSymbol",
                "Content": "IMethodSymbol ConstructedFrom",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IMethodSymbol.ConstructedFrom\">\r\n    <summary>\r\n    Returns the method symbol that this method was constructed from. The resulting\r\n    method symbol\r\n    has the same containing type (if any), but has type arguments that are the same\r\n    as the type parameters (although its containing type might not).\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 98
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.IMethodSymbol",
                "Content": "IMethodSymbol ConstructedFrom",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IMethodSymbol.ConstructedFrom\">\r\n    <summary>\r\n    Returns the method symbol that this method was constructed from. The resulting\r\n    method symbol\r\n    has the same containing type (if any), but has type arguments that are the same\r\n    as the type parameters (although its containing type might not).\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 98
              },
              "Id": "P:Microsoft.CodeAnalysis.IMethodSymbol.ConstructedFrom",
              "Parent": "T:Microsoft.CodeAnalysis.IMethodSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IMethodSymbol.ConstructedFrom\">\r\n    <summary>\r\n    Returns the method symbol that this method was constructed from. The resulting\r\n    method symbol\r\n    has the same containing type (if any), but has type arguments that are the same\r\n    as the type parameters (although its containing type might not).\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.IMethodSymbol}",
                "Content": "ImmutableArray<IMethodSymbol> ExplicitInterfaceImplementations",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IMethodSymbol.ExplicitInterfaceImplementations\">\r\n    <summary>\r\n    Returns interface methods explicitly implemented by this method.\r\n    </summary>\r\n    <remarks>\r\n    Methods imported from metadata can explicitly implement more than one method, \r\n    that is why return type is ImmutableArray.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 147
              },
              "Syntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.IMethodSymbol}",
                "Content": "ImmutableArray<IMethodSymbol> ExplicitInterfaceImplementations",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IMethodSymbol.ExplicitInterfaceImplementations\">\r\n    <summary>\r\n    Returns interface methods explicitly implemented by this method.\r\n    </summary>\r\n    <remarks>\r\n    Methods imported from metadata can explicitly implement more than one method, \r\n    that is why return type is ImmutableArray.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 147
              },
              "Id": "P:Microsoft.CodeAnalysis.IMethodSymbol.ExplicitInterfaceImplementations",
              "Parent": "T:Microsoft.CodeAnalysis.IMethodSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IMethodSymbol.ExplicitInterfaceImplementations\">\r\n    <summary>\r\n    Returns interface methods explicitly implemented by this method.\r\n    </summary>\r\n    <remarks>\r\n    Methods imported from metadata can explicitly implement more than one method, \r\n    that is why return type is ImmutableArray.\r\n    </remarks>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool HidesBaseMethodsByName",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IMethodSymbol.HidesBaseMethodsByName\">\r\n    <summary>\r\n    Returns true if this method hides base methods by name. This cannot be specified directly\r\n    in the C# language, but can be true for methods defined in other languages imported from\r\n    metadata. The equivalent of the \"hidebyname\" flag in metadata. \r\n    </summary>\r\n</member>\r\n",
                "StartLine": 61
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool HidesBaseMethodsByName",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IMethodSymbol.HidesBaseMethodsByName\">\r\n    <summary>\r\n    Returns true if this method hides base methods by name. This cannot be specified directly\r\n    in the C# language, but can be true for methods defined in other languages imported from\r\n    metadata. The equivalent of the \"hidebyname\" flag in metadata. \r\n    </summary>\r\n</member>\r\n",
                "StartLine": 61
              },
              "Id": "P:Microsoft.CodeAnalysis.IMethodSymbol.HidesBaseMethodsByName",
              "Parent": "T:Microsoft.CodeAnalysis.IMethodSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IMethodSymbol.HidesBaseMethodsByName\">\r\n    <summary>\r\n    Returns true if this method hides base methods by name. This cannot be specified directly\r\n    in the C# language, but can be true for methods defined in other languages imported from\r\n    metadata. The equivalent of the \"hidebyname\" flag in metadata. \r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool IsAsync",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IMethodSymbol.IsAsync\">\r\n    <summary>\r\n    Returns true if this method is an async method\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 39
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool IsAsync",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IMethodSymbol.IsAsync\">\r\n    <summary>\r\n    Returns true if this method is an async method\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 39
              },
              "Id": "P:Microsoft.CodeAnalysis.IMethodSymbol.IsAsync",
              "Parent": "T:Microsoft.CodeAnalysis.IMethodSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IMethodSymbol.IsAsync\">\r\n    <summary>\r\n    Returns true if this method is an async method\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool IsCheckedBuiltin",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IMethodSymbol.IsCheckedBuiltin\">\r\n    <summary>\r\n    Returns whether this built-in operator checks for integer overflow.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 54
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool IsCheckedBuiltin",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IMethodSymbol.IsCheckedBuiltin\">\r\n    <summary>\r\n    Returns whether this built-in operator checks for integer overflow.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 54
              },
              "Id": "P:Microsoft.CodeAnalysis.IMethodSymbol.IsCheckedBuiltin",
              "Parent": "T:Microsoft.CodeAnalysis.IMethodSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IMethodSymbol.IsCheckedBuiltin\">\r\n    <summary>\r\n    Returns whether this built-in operator checks for integer overflow.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool IsExtensionMethod",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IMethodSymbol.IsExtensionMethod\">\r\n    <summary>\r\n    Returns true if this method is an extension method. \r\n    </summary>\r\n</member>\r\n",
                "StartLine": 34
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool IsExtensionMethod",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IMethodSymbol.IsExtensionMethod\">\r\n    <summary>\r\n    Returns true if this method is an extension method. \r\n    </summary>\r\n</member>\r\n",
                "StartLine": 34
              },
              "Id": "P:Microsoft.CodeAnalysis.IMethodSymbol.IsExtensionMethod",
              "Parent": "T:Microsoft.CodeAnalysis.IMethodSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IMethodSymbol.IsExtensionMethod\">\r\n    <summary>\r\n    Returns true if this method is an extension method. \r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool IsGenericMethod",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IMethodSymbol.IsGenericMethod\">\r\n    <summary>\r\n    Returns whether this method is generic; i.e., does it have any type parameters?\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 29
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool IsGenericMethod",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IMethodSymbol.IsGenericMethod\">\r\n    <summary>\r\n    Returns whether this method is generic; i.e., does it have any type parameters?\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 29
              },
              "Id": "P:Microsoft.CodeAnalysis.IMethodSymbol.IsGenericMethod",
              "Parent": "T:Microsoft.CodeAnalysis.IMethodSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IMethodSymbol.IsGenericMethod\">\r\n    <summary>\r\n    Returns whether this method is generic; i.e., does it have any type parameters?\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool IsVararg",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IMethodSymbol.IsVararg\">\r\n     <summary>\r\n     Returns whether this method is using CLI VARARG calling convention. This is used for\r\n     C-style variable argument lists. This is used extremely rarely in C# code and is\r\n     represented using the undocumented “__arglist” keyword.\r\n    \r\n     Note that methods with “params” on the last parameter are indicated with the “IsParams”\r\n     property on ParameterSymbol, and are not represented with this property.\r\n     </summary>\r\n</member>\r\n",
                "StartLine": 49
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool IsVararg",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IMethodSymbol.IsVararg\">\r\n     <summary>\r\n     Returns whether this method is using CLI VARARG calling convention. This is used for\r\n     C-style variable argument lists. This is used extremely rarely in C# code and is\r\n     represented using the undocumented “__arglist” keyword.\r\n    \r\n     Note that methods with “params” on the last parameter are indicated with the “IsParams”\r\n     property on ParameterSymbol, and are not represented with this property.\r\n     </summary>\r\n</member>\r\n",
                "StartLine": 49
              },
              "Id": "P:Microsoft.CodeAnalysis.IMethodSymbol.IsVararg",
              "Parent": "T:Microsoft.CodeAnalysis.IMethodSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IMethodSymbol.IsVararg\">\r\n     <summary>\r\n     Returns whether this method is using CLI VARARG calling convention. This is used for\r\n     C-style variable argument lists. This is used extremely rarely in C# code and is\r\n     represented using the undocumented “__arglist” keyword.\r\n    \r\n     Note that methods with “params” on the last parameter are indicated with the “IsParams”\r\n     property on ParameterSymbol, and are not represented with this property.\r\n     </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.MethodKind",
                "Content": "MethodKind MethodKind",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IMethodSymbol.MethodKind\">\r\n    <summary>\r\n    Gets what kind of method this is. There are several different kinds of things in the\r\n    C# language that are represented as methods. This property allow distinguishing those things\r\n    without having to decode the name of the method.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 18
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.MethodKind",
                "Content": "MethodKind MethodKind",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IMethodSymbol.MethodKind\">\r\n    <summary>\r\n    Gets what kind of method this is. There are several different kinds of things in the\r\n    C# language that are represented as methods. This property allow distinguishing those things\r\n    without having to decode the name of the method.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 18
              },
              "Id": "P:Microsoft.CodeAnalysis.IMethodSymbol.MethodKind",
              "Parent": "T:Microsoft.CodeAnalysis.IMethodSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IMethodSymbol.MethodKind\">\r\n    <summary>\r\n    Gets what kind of method this is. There are several different kinds of things in the\r\n    C# language that are represented as methods. This property allow distinguishing those things\r\n    without having to decode the name of the method.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.IMethodSymbol",
                "Content": "new IMethodSymbol OriginalDefinition",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IMethodSymbol.OriginalDefinition\">\r\n    <summary>\r\n    Get the original definition of this symbol. If this symbol is derived from another\r\n    symbol by (say) type substitution, this gets the original symbol, as it was defined in\r\n    source or metadata.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 105
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.IMethodSymbol",
                "Content": "new IMethodSymbol OriginalDefinition",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IMethodSymbol.OriginalDefinition\">\r\n    <summary>\r\n    Get the original definition of this symbol. If this symbol is derived from another\r\n    symbol by (say) type substitution, this gets the original symbol, as it was defined in\r\n    source or metadata.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 105
              },
              "Id": "P:Microsoft.CodeAnalysis.IMethodSymbol.OriginalDefinition",
              "Parent": "T:Microsoft.CodeAnalysis.IMethodSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IMethodSymbol.OriginalDefinition\">\r\n    <summary>\r\n    Get the original definition of this symbol. If this symbol is derived from another\r\n    symbol by (say) type substitution, this gets the original symbol, as it was defined in\r\n    source or metadata.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.IMethodSymbol",
                "Content": "IMethodSymbol OverriddenMethod",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IMethodSymbol.OverriddenMethod\">\r\n    <summary>\r\n    If this method overrides another method (because it both had the override modifier\r\n    and there correctly was a method to override), returns the overridden method.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 111
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.IMethodSymbol",
                "Content": "IMethodSymbol OverriddenMethod",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IMethodSymbol.OverriddenMethod\">\r\n    <summary>\r\n    If this method overrides another method (because it both had the override modifier\r\n    and there correctly was a method to override), returns the overridden method.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 111
              },
              "Id": "P:Microsoft.CodeAnalysis.IMethodSymbol.OverriddenMethod",
              "Parent": "T:Microsoft.CodeAnalysis.IMethodSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IMethodSymbol.OverriddenMethod\">\r\n    <summary>\r\n    If this method overrides another method (because it both had the override modifier\r\n    and there correctly was a method to override), returns the overridden method.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.IParameterSymbol}",
                "Content": "ImmutableArray<IParameterSymbol> Parameters",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IMethodSymbol.Parameters\">\r\n    <summary>\r\n    Gets the parameters of this method. If this method has no parameters, returns\r\n    an empty list.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 90
              },
              "Syntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.IParameterSymbol}",
                "Content": "ImmutableArray<IParameterSymbol> Parameters",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IMethodSymbol.Parameters\">\r\n    <summary>\r\n    Gets the parameters of this method. If this method has no parameters, returns\r\n    an empty list.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 90
              },
              "Id": "P:Microsoft.CodeAnalysis.IMethodSymbol.Parameters",
              "Parent": "T:Microsoft.CodeAnalysis.IMethodSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IMethodSymbol.Parameters\">\r\n    <summary>\r\n    Gets the parameters of this method. If this method has no parameters, returns\r\n    an empty list.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.IMethodSymbol",
                "Content": "IMethodSymbol PartialDefinitionPart",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IMethodSymbol.PartialDefinitionPart\">\r\n    <summary>\r\n    If this is a partial method implementation part, returns the corresponding\r\n    definition part.  Otherwise null.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 183
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.IMethodSymbol",
                "Content": "IMethodSymbol PartialDefinitionPart",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IMethodSymbol.PartialDefinitionPart\">\r\n    <summary>\r\n    If this is a partial method implementation part, returns the corresponding\r\n    definition part.  Otherwise null.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 183
              },
              "Id": "P:Microsoft.CodeAnalysis.IMethodSymbol.PartialDefinitionPart",
              "Parent": "T:Microsoft.CodeAnalysis.IMethodSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IMethodSymbol.PartialDefinitionPart\">\r\n    <summary>\r\n    If this is a partial method implementation part, returns the corresponding\r\n    definition part.  Otherwise null.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.IMethodSymbol",
                "Content": "IMethodSymbol PartialImplementationPart",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IMethodSymbol.PartialImplementationPart\">\r\n    <summary>\r\n    If this is a partial method declaration without a body, and the method is\r\n    implemented with a body, returns that implementing definition.  Otherwise\r\n    null.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 190
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.IMethodSymbol",
                "Content": "IMethodSymbol PartialImplementationPart",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IMethodSymbol.PartialImplementationPart\">\r\n    <summary>\r\n    If this is a partial method declaration without a body, and the method is\r\n    implemented with a body, returns that implementing definition.  Otherwise\r\n    null.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 190
              },
              "Id": "P:Microsoft.CodeAnalysis.IMethodSymbol.PartialImplementationPart",
              "Parent": "T:Microsoft.CodeAnalysis.IMethodSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IMethodSymbol.PartialImplementationPart\">\r\n    <summary>\r\n    If this is a partial method declaration without a body, and the method is\r\n    implemented with a body, returns that implementing definition.  Otherwise\r\n    null.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.ITypeSymbol",
                "Content": "ITypeSymbol ReceiverType",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IMethodSymbol.ReceiverType\">\r\n    <summary>\r\n    If this method can be applied to an object, returns the type of object it is applied to.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 116
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.ITypeSymbol",
                "Content": "ITypeSymbol ReceiverType",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IMethodSymbol.ReceiverType\">\r\n    <summary>\r\n    If this method can be applied to an object, returns the type of object it is applied to.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 116
              },
              "Id": "P:Microsoft.CodeAnalysis.IMethodSymbol.ReceiverType",
              "Parent": "T:Microsoft.CodeAnalysis.IMethodSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IMethodSymbol.ReceiverType\">\r\n    <summary>\r\n    If this method can be applied to an object, returns the type of object it is applied to.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.IMethodSymbol",
                "Content": "IMethodSymbol ReducedFrom",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IMethodSymbol.ReducedFrom\">\r\n    <summary>\r\n    If this method is a reduced extension method, returns the definition of extension\r\n    method from which this was reduced. Otherwise, returns null.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 122
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.IMethodSymbol",
                "Content": "IMethodSymbol ReducedFrom",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IMethodSymbol.ReducedFrom\">\r\n    <summary>\r\n    If this method is a reduced extension method, returns the definition of extension\r\n    method from which this was reduced. Otherwise, returns null.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 122
              },
              "Id": "P:Microsoft.CodeAnalysis.IMethodSymbol.ReducedFrom",
              "Parent": "T:Microsoft.CodeAnalysis.IMethodSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IMethodSymbol.ReducedFrom\">\r\n    <summary>\r\n    If this method is a reduced extension method, returns the definition of extension\r\n    method from which this was reduced. Otherwise, returns null.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool ReturnsVoid",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IMethodSymbol.ReturnsVoid\">\r\n    <summary>\r\n    Returns true if this method has no return type; i.e., returns \"void\".\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 66
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool ReturnsVoid",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IMethodSymbol.ReturnsVoid\">\r\n    <summary>\r\n    Returns true if this method has no return type; i.e., returns \"void\".\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 66
              },
              "Id": "P:Microsoft.CodeAnalysis.IMethodSymbol.ReturnsVoid",
              "Parent": "T:Microsoft.CodeAnalysis.IMethodSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IMethodSymbol.ReturnsVoid\">\r\n    <summary>\r\n    Returns true if this method has no return type; i.e., returns \"void\".\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.ITypeSymbol",
                "Content": "ITypeSymbol ReturnType",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IMethodSymbol.ReturnType\">\r\n    <summary>\r\n    Gets the return type of the method.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 71
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.ITypeSymbol",
                "Content": "ITypeSymbol ReturnType",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IMethodSymbol.ReturnType\">\r\n    <summary>\r\n    Gets the return type of the method.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 71
              },
              "Id": "P:Microsoft.CodeAnalysis.IMethodSymbol.ReturnType",
              "Parent": "T:Microsoft.CodeAnalysis.IMethodSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IMethodSymbol.ReturnType\">\r\n    <summary>\r\n    Gets the return type of the method.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.CustomModifier}",
                "Content": "ImmutableArray<CustomModifier> ReturnTypeCustomModifiers",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IMethodSymbol.ReturnTypeCustomModifiers\">\r\n    <summary>\r\n    Returns the list of custom modifiers, if any, associated with the returned value. \r\n    </summary>\r\n</member>\r\n",
                "StartLine": 152
              },
              "Syntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.CustomModifier}",
                "Content": "ImmutableArray<CustomModifier> ReturnTypeCustomModifiers",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IMethodSymbol.ReturnTypeCustomModifiers\">\r\n    <summary>\r\n    Returns the list of custom modifiers, if any, associated with the returned value. \r\n    </summary>\r\n</member>\r\n",
                "StartLine": 152
              },
              "Id": "P:Microsoft.CodeAnalysis.IMethodSymbol.ReturnTypeCustomModifiers",
              "Parent": "T:Microsoft.CodeAnalysis.IMethodSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IMethodSymbol.ReturnTypeCustomModifiers\">\r\n    <summary>\r\n    Returns the list of custom modifiers, if any, associated with the returned value. \r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ITypeSymbol}",
                "Content": "ImmutableArray<ITypeSymbol> TypeArguments",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IMethodSymbol.TypeArguments\">\r\n    <summary>\r\n    Returns the type arguments that have been substituted for the type parameters. \r\n    If nothing has been substituted for a given type parameter,\r\n    then the type parameter itself is consider the type argument.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 78
              },
              "Syntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ITypeSymbol}",
                "Content": "ImmutableArray<ITypeSymbol> TypeArguments",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IMethodSymbol.TypeArguments\">\r\n    <summary>\r\n    Returns the type arguments that have been substituted for the type parameters. \r\n    If nothing has been substituted for a given type parameter,\r\n    then the type parameter itself is consider the type argument.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 78
              },
              "Id": "P:Microsoft.CodeAnalysis.IMethodSymbol.TypeArguments",
              "Parent": "T:Microsoft.CodeAnalysis.IMethodSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IMethodSymbol.TypeArguments\">\r\n    <summary>\r\n    Returns the type arguments that have been substituted for the type parameters. \r\n    If nothing has been substituted for a given type parameter,\r\n    then the type parameter itself is consider the type argument.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ITypeParameterSymbol}",
                "Content": "ImmutableArray<ITypeParameterSymbol> TypeParameters",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IMethodSymbol.TypeParameters\">\r\n    <summary>\r\n    Get the type parameters on this method. If the method has not generic,\r\n    returns an empty list.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 84
              },
              "Syntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ITypeParameterSymbol}",
                "Content": "ImmutableArray<ITypeParameterSymbol> TypeParameters",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IMethodSymbol.TypeParameters\">\r\n    <summary>\r\n    Get the type parameters on this method. If the method has not generic,\r\n    returns an empty list.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 84
              },
              "Id": "P:Microsoft.CodeAnalysis.IMethodSymbol.TypeParameters",
              "Parent": "T:Microsoft.CodeAnalysis.IMethodSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IMethodSymbol.TypeParameters\">\r\n    <summary>\r\n    Get the type parameters on this method. If the method has not generic,\r\n    returns an empty list.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            8,
            9,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Symbols\\IMethodSymbol.cs",
          "InheritanceHierarchy": [],
          "Syntax": {
            "Content": "public interface IMethodSymbol",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.IMethodSymbol\">\r\n    <summary>\r\n    Represents a method or method-like symbol (including constructor,\r\n    destructor, operator, or property/event accessor).\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.IMethodSymbol",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.IMethodSymbol\">\r\n    <summary>\r\n    Represents a method or method-like symbol (including constructor,\r\n    destructor, operator, or property/event accessor).\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.INamespaceSymbol : namespaceSymbol": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.INamespaceSymbol": ""
                },
                "Content": "INamespaceSymbol GetModuleNamespace(INamespaceSymbol namespaceSymbol);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.IModuleSymbol.GetModuleNamespace(Microsoft.CodeAnalysis.INamespaceSymbol)\">\r\n    <summary>\r\n    Given a namespace symbol, returns the corresponding module specific namespace symbol\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 21
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.INamespaceSymbol : namespaceSymbol": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.INamespaceSymbol": ""
                },
                "Content": "INamespaceSymbol GetModuleNamespace(INamespaceSymbol namespaceSymbol);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.IModuleSymbol.GetModuleNamespace(Microsoft.CodeAnalysis.INamespaceSymbol)\">\r\n    <summary>\r\n    Given a namespace symbol, returns the corresponding module specific namespace symbol\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 21
              },
              "Id": "M:Microsoft.CodeAnalysis.IModuleSymbol.GetModuleNamespace(Microsoft.CodeAnalysis.INamespaceSymbol)",
              "Parent": "T:Microsoft.CodeAnalysis.IModuleSymbol",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.IModuleSymbol.GetModuleNamespace(Microsoft.CodeAnalysis.INamespaceSymbol)\">\r\n    <summary>\r\n    Given a namespace symbol, returns the corresponding module specific namespace symbol\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.INamespaceSymbol",
                "Content": "INamespaceSymbol GlobalNamespace",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IModuleSymbol.GlobalNamespace\">\r\n    <summary>\r\n    Returns a NamespaceSymbol representing the global (root) namespace, with\r\n    module extent, that can be used to browse all of the symbols defined in this module.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 16
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.INamespaceSymbol",
                "Content": "INamespaceSymbol GlobalNamespace",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IModuleSymbol.GlobalNamespace\">\r\n    <summary>\r\n    Returns a NamespaceSymbol representing the global (root) namespace, with\r\n    module extent, that can be used to browse all of the symbols defined in this module.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 16
              },
              "Id": "P:Microsoft.CodeAnalysis.IModuleSymbol.GlobalNamespace",
              "Parent": "T:Microsoft.CodeAnalysis.IModuleSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IModuleSymbol.GlobalNamespace\">\r\n    <summary>\r\n    Returns a NamespaceSymbol representing the global (root) namespace, with\r\n    module extent, that can be used to browse all of the symbols defined in this module.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.AssemblyIdentity}",
                "Content": "ImmutableArray<AssemblyIdentity> ReferencedAssemblies",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IModuleSymbol.ReferencedAssemblies\">\r\n    <summary>\r\n    Returns an array of assembly identities for assemblies referenced by this module.\r\n    Items at the same position from ReferencedAssemblies and from ReferencedAssemblySymbols \r\n    correspond to each other.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 28
              },
              "Syntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.AssemblyIdentity}",
                "Content": "ImmutableArray<AssemblyIdentity> ReferencedAssemblies",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IModuleSymbol.ReferencedAssemblies\">\r\n    <summary>\r\n    Returns an array of assembly identities for assemblies referenced by this module.\r\n    Items at the same position from ReferencedAssemblies and from ReferencedAssemblySymbols \r\n    correspond to each other.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 28
              },
              "Id": "P:Microsoft.CodeAnalysis.IModuleSymbol.ReferencedAssemblies",
              "Parent": "T:Microsoft.CodeAnalysis.IModuleSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IModuleSymbol.ReferencedAssemblies\">\r\n    <summary>\r\n    Returns an array of assembly identities for assemblies referenced by this module.\r\n    Items at the same position from ReferencedAssemblies and from ReferencedAssemblySymbols \r\n    correspond to each other.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.IAssemblySymbol}",
                "Content": "ImmutableArray<IAssemblySymbol> ReferencedAssemblySymbols",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IModuleSymbol.ReferencedAssemblySymbols\">\r\n    <summary>\r\n    Returns an array of AssemblySymbol objects corresponding to assemblies referenced \r\n    by this module. Items at the same position from ReferencedAssemblies and \r\n    from ReferencedAssemblySymbols correspond to each other.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 35
              },
              "Syntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.IAssemblySymbol}",
                "Content": "ImmutableArray<IAssemblySymbol> ReferencedAssemblySymbols",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IModuleSymbol.ReferencedAssemblySymbols\">\r\n    <summary>\r\n    Returns an array of AssemblySymbol objects corresponding to assemblies referenced \r\n    by this module. Items at the same position from ReferencedAssemblies and \r\n    from ReferencedAssemblySymbols correspond to each other.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 35
              },
              "Id": "P:Microsoft.CodeAnalysis.IModuleSymbol.ReferencedAssemblySymbols",
              "Parent": "T:Microsoft.CodeAnalysis.IModuleSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IModuleSymbol.ReferencedAssemblySymbols\">\r\n    <summary>\r\n    Returns an array of AssemblySymbol objects corresponding to assemblies referenced \r\n    by this module. Items at the same position from ReferencedAssemblies and \r\n    from ReferencedAssemblySymbols correspond to each other.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            8,
            9,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Symbols\\IModuleSymbol.cs",
          "InheritanceHierarchy": [],
          "Syntax": {
            "Content": "public interface IModuleSymbol",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.IModuleSymbol\">\r\n    <summary>\r\n    Represents a module within an assembly. Every assembly contains one or more modules.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.IModuleSymbol",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.IModuleSymbol\">\r\n    <summary>\r\n    Represents a module within an assembly. Every assembly contains one or more modules.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Array : typeArguments": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.INamedTypeSymbol": ""
                },
                "Content": "INamedTypeSymbol Construct(params ITypeSymbol[] typeArguments);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.INamedTypeSymbol.Construct(Microsoft.CodeAnalysis.ITypeSymbol[])\">\r\n    <summary>\r\n    Returns a constructed type given its type arguments.\r\n    </summary>\r\n    <param name=\"typeArguments\">The immediate type arguments to be replaced for type\r\n    parameters in the type.</param>\r\n</member>\r\n",
                "StartLine": 96
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Array : typeArguments": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.INamedTypeSymbol": ""
                },
                "Content": "INamedTypeSymbol Construct(params ITypeSymbol[] typeArguments);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.INamedTypeSymbol.Construct(Microsoft.CodeAnalysis.ITypeSymbol[])\">\r\n    <summary>\r\n    Returns a constructed type given its type arguments.\r\n    </summary>\r\n    <param name=\"typeArguments\">The immediate type arguments to be replaced for type\r\n    parameters in the type.</param>\r\n</member>\r\n",
                "StartLine": 96
              },
              "Id": "M:Microsoft.CodeAnalysis.INamedTypeSymbol.Construct(Microsoft.CodeAnalysis.ITypeSymbol[])",
              "Parent": "T:Microsoft.CodeAnalysis.INamedTypeSymbol",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.INamedTypeSymbol.Construct(Microsoft.CodeAnalysis.ITypeSymbol[])\">\r\n    <summary>\r\n    Returns a constructed type given its type arguments.\r\n    </summary>\r\n    <param name=\"typeArguments\">The immediate type arguments to be replaced for type\r\n    parameters in the type.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.INamedTypeSymbol": ""
                },
                "Content": "INamedTypeSymbol ConstructUnboundGenericType();",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.INamedTypeSymbol.ConstructUnboundGenericType\">\r\n    <summary>\r\n    Returns an unbound generic type of this named type.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 101
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.INamedTypeSymbol": ""
                },
                "Content": "INamedTypeSymbol ConstructUnboundGenericType();",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.INamedTypeSymbol.ConstructUnboundGenericType\">\r\n    <summary>\r\n    Returns an unbound generic type of this named type.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 101
              },
              "Id": "M:Microsoft.CodeAnalysis.INamedTypeSymbol.ConstructUnboundGenericType",
              "Parent": "T:Microsoft.CodeAnalysis.INamedTypeSymbol",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.INamedTypeSymbol.ConstructUnboundGenericType\">\r\n    <summary>\r\n    Returns an unbound generic type of this named type.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Int32",
                "Content": "int Arity",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.INamedTypeSymbol.Arity\">\r\n    <summary>\r\n    Returns the arity of this type, or the number of type parameters it takes.\r\n    A non-generic type has zero arity.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 16
              },
              "Syntax": {
                "PropertyType": "T:System.Int32",
                "Content": "int Arity",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.INamedTypeSymbol.Arity\">\r\n    <summary>\r\n    Returns the arity of this type, or the number of type parameters it takes.\r\n    A non-generic type has zero arity.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 16
              },
              "Id": "P:Microsoft.CodeAnalysis.INamedTypeSymbol.Arity",
              "Parent": "T:Microsoft.CodeAnalysis.INamedTypeSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.INamedTypeSymbol.Arity\">\r\n    <summary>\r\n    Returns the arity of this type, or the number of type parameters it takes.\r\n    A non-generic type has zero arity.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.ISymbol",
                "Content": "ISymbol AssociatedSymbol",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.INamedTypeSymbol.AssociatedSymbol\">\r\n    <summary>\r\n    For implicitly declared delegate types returns the EventSymbol that caused this\r\n    delegate type to be generated.\r\n    For all other types returns null.\r\n    Note, the set of possible associated symbols might be expanded in the future to \r\n    reflect changes in the languages.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 125
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.ISymbol",
                "Content": "ISymbol AssociatedSymbol",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.INamedTypeSymbol.AssociatedSymbol\">\r\n    <summary>\r\n    For implicitly declared delegate types returns the EventSymbol that caused this\r\n    delegate type to be generated.\r\n    For all other types returns null.\r\n    Note, the set of possible associated symbols might be expanded in the future to \r\n    reflect changes in the languages.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 125
              },
              "Id": "P:Microsoft.CodeAnalysis.INamedTypeSymbol.AssociatedSymbol",
              "Parent": "T:Microsoft.CodeAnalysis.INamedTypeSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.INamedTypeSymbol.AssociatedSymbol\">\r\n    <summary>\r\n    For implicitly declared delegate types returns the EventSymbol that caused this\r\n    delegate type to be generated.\r\n    For all other types returns null.\r\n    Note, the set of possible associated symbols might be expanded in the future to \r\n    reflect changes in the languages.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.INamedTypeSymbol",
                "Content": "INamedTypeSymbol ConstructedFrom",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.INamedTypeSymbol.ConstructedFrom\">\r\n    <summary>\r\n    Returns the type symbol that this type was constructed from. This type symbol\r\n    has the same containing type (if any), but has type arguments that are the same\r\n    as the type parameters (although its containing type might not).\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 89
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.INamedTypeSymbol",
                "Content": "INamedTypeSymbol ConstructedFrom",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.INamedTypeSymbol.ConstructedFrom\">\r\n    <summary>\r\n    Returns the type symbol that this type was constructed from. This type symbol\r\n    has the same containing type (if any), but has type arguments that are the same\r\n    as the type parameters (although its containing type might not).\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 89
              },
              "Id": "P:Microsoft.CodeAnalysis.INamedTypeSymbol.ConstructedFrom",
              "Parent": "T:Microsoft.CodeAnalysis.INamedTypeSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.INamedTypeSymbol.ConstructedFrom\">\r\n    <summary>\r\n    Returns the type symbol that this type was constructed from. This type symbol\r\n    has the same containing type (if any), but has type arguments that are the same\r\n    as the type parameters (although its containing type might not).\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.IMethodSymbol}",
                "Content": "ImmutableArray<IMethodSymbol> Constructors",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.INamedTypeSymbol.Constructors\">\r\n    <summary>\r\n    Get the both instance and static constructors for this type.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 116
              },
              "Syntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.IMethodSymbol}",
                "Content": "ImmutableArray<IMethodSymbol> Constructors",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.INamedTypeSymbol.Constructors\">\r\n    <summary>\r\n    Get the both instance and static constructors for this type.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 116
              },
              "Id": "P:Microsoft.CodeAnalysis.INamedTypeSymbol.Constructors",
              "Parent": "T:Microsoft.CodeAnalysis.INamedTypeSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.INamedTypeSymbol.Constructors\">\r\n    <summary>\r\n    Get the both instance and static constructors for this type.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.IMethodSymbol",
                "Content": "IMethodSymbol DelegateInvokeMethod",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.INamedTypeSymbol.DelegateInvokeMethod\">\r\n    <summary>\r\n    For delegate types, gets the delegate's invoke method.  Returns null on\r\n    all other kinds of types.  Note that is is possible to have an ill-formed\r\n    delegate type imported from metadata which does not have an Invoke method.\r\n    Such a type will be classified as a delegate but its DelegateInvokeMethod\r\n    would be null.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 76
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.IMethodSymbol",
                "Content": "IMethodSymbol DelegateInvokeMethod",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.INamedTypeSymbol.DelegateInvokeMethod\">\r\n    <summary>\r\n    For delegate types, gets the delegate's invoke method.  Returns null on\r\n    all other kinds of types.  Note that is is possible to have an ill-formed\r\n    delegate type imported from metadata which does not have an Invoke method.\r\n    Such a type will be classified as a delegate but its DelegateInvokeMethod\r\n    would be null.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 76
              },
              "Id": "P:Microsoft.CodeAnalysis.INamedTypeSymbol.DelegateInvokeMethod",
              "Parent": "T:Microsoft.CodeAnalysis.INamedTypeSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.INamedTypeSymbol.DelegateInvokeMethod\">\r\n    <summary>\r\n    For delegate types, gets the delegate's invoke method.  Returns null on\r\n    all other kinds of types.  Note that is is possible to have an ill-formed\r\n    delegate type imported from metadata which does not have an Invoke method.\r\n    Such a type will be classified as a delegate but its DelegateInvokeMethod\r\n    would be null.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.INamedTypeSymbol",
                "Content": "INamedTypeSymbol EnumUnderlyingType",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.INamedTypeSymbol.EnumUnderlyingType\">\r\n    <summary>\r\n    For enum types, gets the underlying type. Returns null on all other\r\n    kinds of types.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 82
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.INamedTypeSymbol",
                "Content": "INamedTypeSymbol EnumUnderlyingType",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.INamedTypeSymbol.EnumUnderlyingType\">\r\n    <summary>\r\n    For enum types, gets the underlying type. Returns null on all other\r\n    kinds of types.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 82
              },
              "Id": "P:Microsoft.CodeAnalysis.INamedTypeSymbol.EnumUnderlyingType",
              "Parent": "T:Microsoft.CodeAnalysis.INamedTypeSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.INamedTypeSymbol.EnumUnderlyingType\">\r\n    <summary>\r\n    For enum types, gets the underlying type. Returns null on all other\r\n    kinds of types.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.IMethodSymbol}",
                "Content": "ImmutableArray<IMethodSymbol> InstanceConstructors",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.INamedTypeSymbol.InstanceConstructors\">\r\n    <summary>\r\n    Get the instance constructors for this type.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 106
              },
              "Syntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.IMethodSymbol}",
                "Content": "ImmutableArray<IMethodSymbol> InstanceConstructors",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.INamedTypeSymbol.InstanceConstructors\">\r\n    <summary>\r\n    Get the instance constructors for this type.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 106
              },
              "Id": "P:Microsoft.CodeAnalysis.INamedTypeSymbol.InstanceConstructors",
              "Parent": "T:Microsoft.CodeAnalysis.INamedTypeSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.INamedTypeSymbol.InstanceConstructors\">\r\n    <summary>\r\n    Get the instance constructors for this type.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool IsGenericType",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.INamedTypeSymbol.IsGenericType\">\r\n    <summary>\r\n    True if this type or some containing type has type parameters.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 21
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool IsGenericType",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.INamedTypeSymbol.IsGenericType\">\r\n    <summary>\r\n    True if this type or some containing type has type parameters.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 21
              },
              "Id": "P:Microsoft.CodeAnalysis.INamedTypeSymbol.IsGenericType",
              "Parent": "T:Microsoft.CodeAnalysis.INamedTypeSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.INamedTypeSymbol.IsGenericType\">\r\n    <summary>\r\n    True if this type or some containing type has type parameters.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool IsImplicitClass",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.INamedTypeSymbol.IsImplicitClass\">\r\n    <summary>\r\n    Returns true if the type is the implicit class that holds onto invalid global members (like methods or\r\n    statements in a non script file).\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 42
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool IsImplicitClass",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.INamedTypeSymbol.IsImplicitClass\">\r\n    <summary>\r\n    Returns true if the type is the implicit class that holds onto invalid global members (like methods or\r\n    statements in a non script file).\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 42
              },
              "Id": "P:Microsoft.CodeAnalysis.INamedTypeSymbol.IsImplicitClass",
              "Parent": "T:Microsoft.CodeAnalysis.INamedTypeSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.INamedTypeSymbol.IsImplicitClass\">\r\n    <summary>\r\n    Returns true if the type is the implicit class that holds onto invalid global members (like methods or\r\n    statements in a non script file).\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool IsScriptClass",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.INamedTypeSymbol.IsScriptClass\">\r\n    <summary>\r\n    Returns true if the type is a Script class. \r\n    It might be an interactive submission class or a Script class in a csx file.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 36
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool IsScriptClass",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.INamedTypeSymbol.IsScriptClass\">\r\n    <summary>\r\n    Returns true if the type is a Script class. \r\n    It might be an interactive submission class or a Script class in a csx file.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 36
              },
              "Id": "P:Microsoft.CodeAnalysis.INamedTypeSymbol.IsScriptClass",
              "Parent": "T:Microsoft.CodeAnalysis.INamedTypeSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.INamedTypeSymbol.IsScriptClass\">\r\n    <summary>\r\n    Returns true if the type is a Script class. \r\n    It might be an interactive submission class or a Script class in a csx file.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool IsUnboundGenericType",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.INamedTypeSymbol.IsUnboundGenericType\">\r\n    <summary>\r\n    True if this is a reference to an <em>unbound</em> generic type. A generic type is\r\n    considered <em>unbound</em> if all of the type argument lists in its fully qualified\r\n    name are empty. Note that the type arguments of an unbound generic type will be\r\n    returned as error types because they do not really have type arguments.  An unbound\r\n    generic type yields null for its BaseType and an empty result for its Interfaces.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 30
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool IsUnboundGenericType",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.INamedTypeSymbol.IsUnboundGenericType\">\r\n    <summary>\r\n    True if this is a reference to an <em>unbound</em> generic type. A generic type is\r\n    considered <em>unbound</em> if all of the type argument lists in its fully qualified\r\n    name are empty. Note that the type arguments of an unbound generic type will be\r\n    returned as error types because they do not really have type arguments.  An unbound\r\n    generic type yields null for its BaseType and an empty result for its Interfaces.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 30
              },
              "Id": "P:Microsoft.CodeAnalysis.INamedTypeSymbol.IsUnboundGenericType",
              "Parent": "T:Microsoft.CodeAnalysis.INamedTypeSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.INamedTypeSymbol.IsUnboundGenericType\">\r\n    <summary>\r\n    True if this is a reference to an <em>unbound</em> generic type. A generic type is\r\n    considered <em>unbound</em> if all of the type argument lists in its fully qualified\r\n    name are empty. Note that the type arguments of an unbound generic type will be\r\n    returned as error types because they do not really have type arguments.  An unbound\r\n    generic type yields null for its BaseType and an empty result for its Interfaces.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Collections.Generic.IEnumerable{System.String}",
                "Content": "IEnumerable<string> MemberNames",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.INamedTypeSymbol.MemberNames\">\r\n    <summary>\r\n    Returns collection of names of members declared within this type.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 47
              },
              "Syntax": {
                "PropertyType": "T:System.Collections.Generic.IEnumerable{System.String}",
                "Content": "IEnumerable<string> MemberNames",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.INamedTypeSymbol.MemberNames\">\r\n    <summary>\r\n    Returns collection of names of members declared within this type.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 47
              },
              "Id": "P:Microsoft.CodeAnalysis.INamedTypeSymbol.MemberNames",
              "Parent": "T:Microsoft.CodeAnalysis.INamedTypeSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.INamedTypeSymbol.MemberNames\">\r\n    <summary>\r\n    Returns collection of names of members declared within this type.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool MightContainExtensionMethods",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.INamedTypeSymbol.MightContainExtensionMethods\">\r\n    <summary>\r\n    Determines if the symbol might contain extension methods. \r\n    If false, the symbol does not contain extension methods. \r\n    </summary>\r\n</member>\r\n",
                "StartLine": 131
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool MightContainExtensionMethods",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.INamedTypeSymbol.MightContainExtensionMethods\">\r\n    <summary>\r\n    Determines if the symbol might contain extension methods. \r\n    If false, the symbol does not contain extension methods. \r\n    </summary>\r\n</member>\r\n",
                "StartLine": 131
              },
              "Id": "P:Microsoft.CodeAnalysis.INamedTypeSymbol.MightContainExtensionMethods",
              "Parent": "T:Microsoft.CodeAnalysis.INamedTypeSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.INamedTypeSymbol.MightContainExtensionMethods\">\r\n    <summary>\r\n    Determines if the symbol might contain extension methods. \r\n    If false, the symbol does not contain extension methods. \r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.INamedTypeSymbol",
                "Content": "new INamedTypeSymbol OriginalDefinition",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.INamedTypeSymbol.OriginalDefinition\">\r\n    <summary>\r\n    Get the original definition of this type symbol. If this symbol is derived from another\r\n    symbol by (say) type substitution, this gets the original symbol, as it was defined in\r\n    source or metadata.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 67
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.INamedTypeSymbol",
                "Content": "new INamedTypeSymbol OriginalDefinition",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.INamedTypeSymbol.OriginalDefinition\">\r\n    <summary>\r\n    Get the original definition of this type symbol. If this symbol is derived from another\r\n    symbol by (say) type substitution, this gets the original symbol, as it was defined in\r\n    source or metadata.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 67
              },
              "Id": "P:Microsoft.CodeAnalysis.INamedTypeSymbol.OriginalDefinition",
              "Parent": "T:Microsoft.CodeAnalysis.INamedTypeSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.INamedTypeSymbol.OriginalDefinition\">\r\n    <summary>\r\n    Get the original definition of this type symbol. If this symbol is derived from another\r\n    symbol by (say) type substitution, this gets the original symbol, as it was defined in\r\n    source or metadata.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.IMethodSymbol}",
                "Content": "ImmutableArray<IMethodSymbol> StaticConstructors",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.INamedTypeSymbol.StaticConstructors\">\r\n    <summary>\r\n    Get the static constructors for this type.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 111
              },
              "Syntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.IMethodSymbol}",
                "Content": "ImmutableArray<IMethodSymbol> StaticConstructors",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.INamedTypeSymbol.StaticConstructors\">\r\n    <summary>\r\n    Get the static constructors for this type.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 111
              },
              "Id": "P:Microsoft.CodeAnalysis.INamedTypeSymbol.StaticConstructors",
              "Parent": "T:Microsoft.CodeAnalysis.INamedTypeSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.INamedTypeSymbol.StaticConstructors\">\r\n    <summary>\r\n    Get the static constructors for this type.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ITypeSymbol}",
                "Content": "ImmutableArray<ITypeSymbol> TypeArguments",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.INamedTypeSymbol.TypeArguments\">\r\n    <summary>\r\n    Returns the type arguments that have been substituted for the type parameters. \r\n    If nothing has been substituted for a give type parameters,\r\n    then the type parameter itself is consider the type argument.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 60
              },
              "Syntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ITypeSymbol}",
                "Content": "ImmutableArray<ITypeSymbol> TypeArguments",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.INamedTypeSymbol.TypeArguments\">\r\n    <summary>\r\n    Returns the type arguments that have been substituted for the type parameters. \r\n    If nothing has been substituted for a give type parameters,\r\n    then the type parameter itself is consider the type argument.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 60
              },
              "Id": "P:Microsoft.CodeAnalysis.INamedTypeSymbol.TypeArguments",
              "Parent": "T:Microsoft.CodeAnalysis.INamedTypeSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.INamedTypeSymbol.TypeArguments\">\r\n    <summary>\r\n    Returns the type arguments that have been substituted for the type parameters. \r\n    If nothing has been substituted for a give type parameters,\r\n    then the type parameter itself is consider the type argument.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ITypeParameterSymbol}",
                "Content": "ImmutableArray<ITypeParameterSymbol> TypeParameters",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.INamedTypeSymbol.TypeParameters\">\r\n    <summary>\r\n    Returns the type parameters that this type has. If this is a non-generic type,\r\n    returns an empty ImmutableArray.  \r\n    </summary>\r\n</member>\r\n",
                "StartLine": 53
              },
              "Syntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ITypeParameterSymbol}",
                "Content": "ImmutableArray<ITypeParameterSymbol> TypeParameters",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.INamedTypeSymbol.TypeParameters\">\r\n    <summary>\r\n    Returns the type parameters that this type has. If this is a non-generic type,\r\n    returns an empty ImmutableArray.  \r\n    </summary>\r\n</member>\r\n",
                "StartLine": 53
              },
              "Id": "P:Microsoft.CodeAnalysis.INamedTypeSymbol.TypeParameters",
              "Parent": "T:Microsoft.CodeAnalysis.INamedTypeSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.INamedTypeSymbol.TypeParameters\">\r\n    <summary>\r\n    Returns the type parameters that this type has. If this is a non-generic type,\r\n    returns an empty ImmutableArray.  \r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            8,
            9,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Symbols\\INamedTypeSymbol.cs",
          "InheritanceHierarchy": [],
          "Syntax": {
            "Content": "public interface INamedTypeSymbol",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.INamedTypeSymbol\">\r\n    <summary>\r\n    Represents a type other than an array, a pointer, a type parameter.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.INamedTypeSymbol",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.INamedTypeSymbol\">\r\n    <summary>\r\n    Represents a type other than an array, a pointer, a type parameter.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ISymbol}": ""
                },
                "Content": "ImmutableArray<ISymbol> GetMembers();",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.INamespaceOrTypeSymbol.GetMembers\">\r\n    <summary>\r\n    Get all the members of this symbol.\r\n    </summary>\r\n    <returns>An ImmutableArray containing all the members of this symbol. If this symbol has no members,\r\n    returns an empty ImmutableArray. Never returns Null.</returns>\r\n</member>\r\n",
                "StartLine": 18
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ISymbol}": ""
                },
                "Content": "ImmutableArray<ISymbol> GetMembers();",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.INamespaceOrTypeSymbol.GetMembers\">\r\n    <summary>\r\n    Get all the members of this symbol.\r\n    </summary>\r\n    <returns>An ImmutableArray containing all the members of this symbol. If this symbol has no members,\r\n    returns an empty ImmutableArray. Never returns Null.</returns>\r\n</member>\r\n",
                "StartLine": 18
              },
              "Id": "M:Microsoft.CodeAnalysis.INamespaceOrTypeSymbol.GetMembers",
              "Parent": "T:Microsoft.CodeAnalysis.INamespaceOrTypeSymbol",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.INamespaceOrTypeSymbol.GetMembers\">\r\n    <summary>\r\n    Get all the members of this symbol.\r\n    </summary>\r\n    <returns>An ImmutableArray containing all the members of this symbol. If this symbol has no members,\r\n    returns an empty ImmutableArray. Never returns Null.</returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.String : name": ""
                },
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ISymbol}": ""
                },
                "Content": "ImmutableArray<ISymbol> GetMembers(string name);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.INamespaceOrTypeSymbol.GetMembers(System.String)\">\r\n    <summary>\r\n    Get all the members of this symbol that have a particular name.\r\n    </summary>\r\n    <returns>An ImmutableArray containing all the members of this symbol with the given name. If there are\r\n    no members with this name, returns an empty ImmutableArray. Never returns Null.</returns>\r\n</member>\r\n",
                "StartLine": 25
              },
              "Syntax": {
                "Parameters": {
                  "T:System.String : name": ""
                },
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ISymbol}": ""
                },
                "Content": "ImmutableArray<ISymbol> GetMembers(string name);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.INamespaceOrTypeSymbol.GetMembers(System.String)\">\r\n    <summary>\r\n    Get all the members of this symbol that have a particular name.\r\n    </summary>\r\n    <returns>An ImmutableArray containing all the members of this symbol with the given name. If there are\r\n    no members with this name, returns an empty ImmutableArray. Never returns Null.</returns>\r\n</member>\r\n",
                "StartLine": 25
              },
              "Id": "M:Microsoft.CodeAnalysis.INamespaceOrTypeSymbol.GetMembers(System.String)",
              "Parent": "T:Microsoft.CodeAnalysis.INamespaceOrTypeSymbol",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.INamespaceOrTypeSymbol.GetMembers(System.String)\">\r\n    <summary>\r\n    Get all the members of this symbol that have a particular name.\r\n    </summary>\r\n    <returns>An ImmutableArray containing all the members of this symbol with the given name. If there are\r\n    no members with this name, returns an empty ImmutableArray. Never returns Null.</returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.INamedTypeSymbol}": ""
                },
                "Content": "ImmutableArray<INamedTypeSymbol> GetTypeMembers();",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.INamespaceOrTypeSymbol.GetTypeMembers\">\r\n    <summary>\r\n    Get all the members of this symbol that are types.\r\n    </summary>\r\n    <returns>An ImmutableArray containing all the types that are members of this symbol. If this symbol has no type members,\r\n    returns an empty ImmutableArray. Never returns null.</returns>\r\n</member>\r\n",
                "StartLine": 32
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.INamedTypeSymbol}": ""
                },
                "Content": "ImmutableArray<INamedTypeSymbol> GetTypeMembers();",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.INamespaceOrTypeSymbol.GetTypeMembers\">\r\n    <summary>\r\n    Get all the members of this symbol that are types.\r\n    </summary>\r\n    <returns>An ImmutableArray containing all the types that are members of this symbol. If this symbol has no type members,\r\n    returns an empty ImmutableArray. Never returns null.</returns>\r\n</member>\r\n",
                "StartLine": 32
              },
              "Id": "M:Microsoft.CodeAnalysis.INamespaceOrTypeSymbol.GetTypeMembers",
              "Parent": "T:Microsoft.CodeAnalysis.INamespaceOrTypeSymbol",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.INamespaceOrTypeSymbol.GetTypeMembers\">\r\n    <summary>\r\n    Get all the members of this symbol that are types.\r\n    </summary>\r\n    <returns>An ImmutableArray containing all the types that are members of this symbol. If this symbol has no type members,\r\n    returns an empty ImmutableArray. Never returns null.</returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.String : name": ""
                },
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.INamedTypeSymbol}": ""
                },
                "Content": "ImmutableArray<INamedTypeSymbol> GetTypeMembers(string name);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.INamespaceOrTypeSymbol.GetTypeMembers(System.String)\">\r\n    <summary>\r\n    Get all the members of this symbol that are types that have a particular name, of any arity.\r\n    </summary>\r\n    <returns>An ImmutableArray containing all the types that are members of this symbol with the given name.\r\n    If this symbol has no type members with this name,\r\n    returns an empty ImmutableArray. Never returns null.</returns>\r\n</member>\r\n",
                "StartLine": 40
              },
              "Syntax": {
                "Parameters": {
                  "T:System.String : name": ""
                },
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.INamedTypeSymbol}": ""
                },
                "Content": "ImmutableArray<INamedTypeSymbol> GetTypeMembers(string name);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.INamespaceOrTypeSymbol.GetTypeMembers(System.String)\">\r\n    <summary>\r\n    Get all the members of this symbol that are types that have a particular name, of any arity.\r\n    </summary>\r\n    <returns>An ImmutableArray containing all the types that are members of this symbol with the given name.\r\n    If this symbol has no type members with this name,\r\n    returns an empty ImmutableArray. Never returns null.</returns>\r\n</member>\r\n",
                "StartLine": 40
              },
              "Id": "M:Microsoft.CodeAnalysis.INamespaceOrTypeSymbol.GetTypeMembers(System.String)",
              "Parent": "T:Microsoft.CodeAnalysis.INamespaceOrTypeSymbol",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.INamespaceOrTypeSymbol.GetTypeMembers(System.String)\">\r\n    <summary>\r\n    Get all the members of this symbol that are types that have a particular name, of any arity.\r\n    </summary>\r\n    <returns>An ImmutableArray containing all the types that are members of this symbol with the given name.\r\n    If this symbol has no type members with this name,\r\n    returns an empty ImmutableArray. Never returns null.</returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Int32 : arity": "",
                  "T:System.String : name": ""
                },
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.INamedTypeSymbol}": ""
                },
                "Content": "ImmutableArray<INamedTypeSymbol> GetTypeMembers(string name, int arity);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.INamespaceOrTypeSymbol.GetTypeMembers(System.String,System.Int32)\">\r\n    <summary>\r\n    Get all the members of this symbol that are types that have a particular name and arity\r\n    </summary>\r\n    <returns>An ImmutableArray containing all the types that are members of this symbol with the given name and arity.\r\n    If this symbol has no type members with this name and arity,\r\n    returns an empty ImmutableArray. Never returns null.</returns>\r\n</member>\r\n",
                "StartLine": 48
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Int32 : arity": "",
                  "T:System.String : name": ""
                },
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.INamedTypeSymbol}": ""
                },
                "Content": "ImmutableArray<INamedTypeSymbol> GetTypeMembers(string name, int arity);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.INamespaceOrTypeSymbol.GetTypeMembers(System.String,System.Int32)\">\r\n    <summary>\r\n    Get all the members of this symbol that are types that have a particular name and arity\r\n    </summary>\r\n    <returns>An ImmutableArray containing all the types that are members of this symbol with the given name and arity.\r\n    If this symbol has no type members with this name and arity,\r\n    returns an empty ImmutableArray. Never returns null.</returns>\r\n</member>\r\n",
                "StartLine": 48
              },
              "Id": "M:Microsoft.CodeAnalysis.INamespaceOrTypeSymbol.GetTypeMembers(System.String,System.Int32)",
              "Parent": "T:Microsoft.CodeAnalysis.INamespaceOrTypeSymbol",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.INamespaceOrTypeSymbol.GetTypeMembers(System.String,System.Int32)\">\r\n    <summary>\r\n    Get all the members of this symbol that are types that have a particular name and arity\r\n    </summary>\r\n    <returns>An ImmutableArray containing all the types that are members of this symbol with the given name and arity.\r\n    If this symbol has no type members with this name and arity,\r\n    returns an empty ImmutableArray. Never returns null.</returns>\r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool IsNamespace",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.INamespaceOrTypeSymbol.IsNamespace\">\r\n    <summary>\r\n    Returns true if this symbol is a namespace. If it is not a namespace, it must be a type.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 53
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool IsNamespace",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.INamespaceOrTypeSymbol.IsNamespace\">\r\n    <summary>\r\n    Returns true if this symbol is a namespace. If it is not a namespace, it must be a type.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 53
              },
              "Id": "P:Microsoft.CodeAnalysis.INamespaceOrTypeSymbol.IsNamespace",
              "Parent": "T:Microsoft.CodeAnalysis.INamespaceOrTypeSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.INamespaceOrTypeSymbol.IsNamespace\">\r\n    <summary>\r\n    Returns true if this symbol is a namespace. If it is not a namespace, it must be a type.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool IsType",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.INamespaceOrTypeSymbol.IsType\">\r\n    <summary>\r\n    Returns true if this symbols is a type. If it is not a type, it must be a namespace.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 58
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool IsType",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.INamespaceOrTypeSymbol.IsType\">\r\n    <summary>\r\n    Returns true if this symbols is a type. If it is not a type, it must be a namespace.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 58
              },
              "Id": "P:Microsoft.CodeAnalysis.INamespaceOrTypeSymbol.IsType",
              "Parent": "T:Microsoft.CodeAnalysis.INamespaceOrTypeSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.INamespaceOrTypeSymbol.IsType\">\r\n    <summary>\r\n    Returns true if this symbols is a type. If it is not a type, it must be a namespace.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            8,
            9,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Symbols\\INamespaceOrTypeSymbol.cs",
          "InheritanceHierarchy": [],
          "Syntax": {
            "Content": "public interface INamespaceOrTypeSymbol",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.INamespaceOrTypeSymbol\">\r\n    <summary>\r\n    Represents either a namespace or a type.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.INamespaceOrTypeSymbol",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.INamespaceOrTypeSymbol\">\r\n    <summary>\r\n    Represents either a namespace or a type.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.INamespaceOrTypeSymbol}": ""
                },
                "Content": "new IEnumerable<INamespaceOrTypeSymbol> GetMembers();",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.INamespaceSymbol.GetMembers\">\r\n    <summary>\r\n    Get all the members of this symbol.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 16
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.INamespaceOrTypeSymbol}": ""
                },
                "Content": "new IEnumerable<INamespaceOrTypeSymbol> GetMembers();",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.INamespaceSymbol.GetMembers\">\r\n    <summary>\r\n    Get all the members of this symbol.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 16
              },
              "Id": "M:Microsoft.CodeAnalysis.INamespaceSymbol.GetMembers",
              "Parent": "T:Microsoft.CodeAnalysis.INamespaceSymbol",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.INamespaceSymbol.GetMembers\">\r\n    <summary>\r\n    Get all the members of this symbol.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.String : name": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.INamespaceOrTypeSymbol}": ""
                },
                "Content": "new IEnumerable<INamespaceOrTypeSymbol> GetMembers(string name);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.INamespaceSymbol.GetMembers(System.String)\">\r\n    <summary>\r\n    Get all the members of this symbol that have a particular name.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 21
              },
              "Syntax": {
                "Parameters": {
                  "T:System.String : name": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.INamespaceOrTypeSymbol}": ""
                },
                "Content": "new IEnumerable<INamespaceOrTypeSymbol> GetMembers(string name);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.INamespaceSymbol.GetMembers(System.String)\">\r\n    <summary>\r\n    Get all the members of this symbol that have a particular name.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 21
              },
              "Id": "M:Microsoft.CodeAnalysis.INamespaceSymbol.GetMembers(System.String)",
              "Parent": "T:Microsoft.CodeAnalysis.INamespaceSymbol",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.INamespaceSymbol.GetMembers(System.String)\">\r\n    <summary>\r\n    Get all the members of this symbol that have a particular name.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.INamespaceSymbol}": ""
                },
                "Content": "IEnumerable<INamespaceSymbol> GetNamespaceMembers();",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.INamespaceSymbol.GetNamespaceMembers\">\r\n    <summary>\r\n    Get all the members of this symbol that are namespaces.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 26
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.INamespaceSymbol}": ""
                },
                "Content": "IEnumerable<INamespaceSymbol> GetNamespaceMembers();",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.INamespaceSymbol.GetNamespaceMembers\">\r\n    <summary>\r\n    Get all the members of this symbol that are namespaces.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 26
              },
              "Id": "M:Microsoft.CodeAnalysis.INamespaceSymbol.GetNamespaceMembers",
              "Parent": "T:Microsoft.CodeAnalysis.INamespaceSymbol",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.INamespaceSymbol.GetNamespaceMembers\">\r\n    <summary>\r\n    Get all the members of this symbol that are namespaces.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.INamespaceSymbol}",
                "Content": "ImmutableArray<INamespaceSymbol> ConstituentNamespaces",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.INamespaceSymbol.ConstituentNamespaces\">\r\n    <summary>\r\n    If a namespace is an assembly or compilation namespace, it may be composed of multiple\r\n    namespaces that are merged together. If so, ConstituentNamespaces returns\r\n    all the namespaces that were merged. If this namespace was not merged, returns\r\n    an array containing only this namespace.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 53
              },
              "Syntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.INamespaceSymbol}",
                "Content": "ImmutableArray<INamespaceSymbol> ConstituentNamespaces",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.INamespaceSymbol.ConstituentNamespaces\">\r\n    <summary>\r\n    If a namespace is an assembly or compilation namespace, it may be composed of multiple\r\n    namespaces that are merged together. If so, ConstituentNamespaces returns\r\n    all the namespaces that were merged. If this namespace was not merged, returns\r\n    an array containing only this namespace.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 53
              },
              "Id": "P:Microsoft.CodeAnalysis.INamespaceSymbol.ConstituentNamespaces",
              "Parent": "T:Microsoft.CodeAnalysis.INamespaceSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.INamespaceSymbol.ConstituentNamespaces\">\r\n    <summary>\r\n    If a namespace is an assembly or compilation namespace, it may be composed of multiple\r\n    namespaces that are merged together. If so, ConstituentNamespaces returns\r\n    all the namespaces that were merged. If this namespace was not merged, returns\r\n    an array containing only this namespace.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Compilation",
                "Content": "Compilation ContainingCompilation",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.INamespaceSymbol.ContainingCompilation\">\r\n    <summary>\r\n    The containing compilation for compilation namespaces.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 45
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Compilation",
                "Content": "Compilation ContainingCompilation",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.INamespaceSymbol.ContainingCompilation\">\r\n    <summary>\r\n    The containing compilation for compilation namespaces.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 45
              },
              "Id": "P:Microsoft.CodeAnalysis.INamespaceSymbol.ContainingCompilation",
              "Parent": "T:Microsoft.CodeAnalysis.INamespaceSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.INamespaceSymbol.ContainingCompilation\">\r\n    <summary>\r\n    The containing compilation for compilation namespaces.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool IsGlobalNamespace",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.INamespaceSymbol.IsGlobalNamespace\">\r\n    <summary>\r\n    Returns whether this namespace is the unnamed, global namespace that is \r\n    at the root of all namespaces.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 32
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool IsGlobalNamespace",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.INamespaceSymbol.IsGlobalNamespace\">\r\n    <summary>\r\n    Returns whether this namespace is the unnamed, global namespace that is \r\n    at the root of all namespaces.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 32
              },
              "Id": "P:Microsoft.CodeAnalysis.INamespaceSymbol.IsGlobalNamespace",
              "Parent": "T:Microsoft.CodeAnalysis.INamespaceSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.INamespaceSymbol.IsGlobalNamespace\">\r\n    <summary>\r\n    Returns whether this namespace is the unnamed, global namespace that is \r\n    at the root of all namespaces.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.NamespaceKind",
                "Content": "NamespaceKind NamespaceKind",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.INamespaceSymbol.NamespaceKind\">\r\n    <summary>\r\n    The kind of namespace: Module, Assembly or Compilation.\r\n    Module namespaces contain only members from the containing module that share the same namespace name.\r\n    Assembly namespaces contain members for all modules in the containing assembly that share the same namespace name.\r\n    Compilation namespaces contain all members, from source or referenced metadata (assemblies and modules) that share the same namespace name.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 40
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.NamespaceKind",
                "Content": "NamespaceKind NamespaceKind",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.INamespaceSymbol.NamespaceKind\">\r\n    <summary>\r\n    The kind of namespace: Module, Assembly or Compilation.\r\n    Module namespaces contain only members from the containing module that share the same namespace name.\r\n    Assembly namespaces contain members for all modules in the containing assembly that share the same namespace name.\r\n    Compilation namespaces contain all members, from source or referenced metadata (assemblies and modules) that share the same namespace name.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 40
              },
              "Id": "P:Microsoft.CodeAnalysis.INamespaceSymbol.NamespaceKind",
              "Parent": "T:Microsoft.CodeAnalysis.INamespaceSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.INamespaceSymbol.NamespaceKind\">\r\n    <summary>\r\n    The kind of namespace: Module, Assembly or Compilation.\r\n    Module namespaces contain only members from the containing module that share the same namespace name.\r\n    Assembly namespaces contain members for all modules in the containing assembly that share the same namespace name.\r\n    Compilation namespaces contain all members, from source or referenced metadata (assemblies and modules) that share the same namespace name.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            8,
            9,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Symbols\\INamespaceSymbol.cs",
          "InheritanceHierarchy": [],
          "Syntax": {
            "Content": "public interface INamespaceSymbol",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.INamespaceSymbol\">\r\n    <summary>\r\n    Represents a namespace.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.INamespaceSymbol",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.INamespaceSymbol\">\r\n    <summary>\r\n    Represents a namespace.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.CustomModifier}",
                "Content": "ImmutableArray<CustomModifier> CustomModifiers",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IParameterSymbol.CustomModifiers\">\r\n    <summary>\r\n    The list of custom modifiers, if any, associated with the parameter.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 41
              },
              "Syntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.CustomModifier}",
                "Content": "ImmutableArray<CustomModifier> CustomModifiers",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IParameterSymbol.CustomModifiers\">\r\n    <summary>\r\n    The list of custom modifiers, if any, associated with the parameter.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 41
              },
              "Id": "P:Microsoft.CodeAnalysis.IParameterSymbol.CustomModifiers",
              "Parent": "T:Microsoft.CodeAnalysis.IParameterSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IParameterSymbol.CustomModifiers\">\r\n    <summary>\r\n    The list of custom modifiers, if any, associated with the parameter.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Object",
                "Content": "object ExplicitDefaultValue",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IParameterSymbol.ExplicitDefaultValue\">\r\n    <summary>\r\n    Returns the default value of the parameter. \r\n    </summary>\r\n    <remarks>\r\n    Returns null if the parameter type is a struct and the default value of the parameter\r\n    is the default value of the struct type.\r\n    </remarks>\r\n    <exception cref=\"T:System.InvalidOperationException\">The parameter has no default value.</exception>\r\n</member>\r\n",
                "StartLine": 64
              },
              "Syntax": {
                "PropertyType": "T:System.Object",
                "Content": "object ExplicitDefaultValue",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IParameterSymbol.ExplicitDefaultValue\">\r\n    <summary>\r\n    Returns the default value of the parameter. \r\n    </summary>\r\n    <remarks>\r\n    Returns null if the parameter type is a struct and the default value of the parameter\r\n    is the default value of the struct type.\r\n    </remarks>\r\n    <exception cref=\"T:System.InvalidOperationException\">The parameter has no default value.</exception>\r\n</member>\r\n",
                "StartLine": 64
              },
              "Id": "P:Microsoft.CodeAnalysis.IParameterSymbol.ExplicitDefaultValue",
              "Parent": "T:Microsoft.CodeAnalysis.IParameterSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IParameterSymbol.ExplicitDefaultValue\">\r\n    <summary>\r\n    Returns the default value of the parameter. \r\n    </summary>\r\n    <remarks>\r\n    Returns null if the parameter type is a struct and the default value of the parameter\r\n    is the default value of the struct type.\r\n    </remarks>\r\n    <exception cref=\"T:System.InvalidOperationException\">The parameter has no default value.</exception>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool HasExplicitDefaultValue",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IParameterSymbol.HasExplicitDefaultValue\">\r\n    <summary>\r\n    Returns true if the parameter specifies a default value to be passed\r\n    when no value is provided as an argument to a call. The default value\r\n    can be obtained with the DefaultValue property.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 54
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool HasExplicitDefaultValue",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IParameterSymbol.HasExplicitDefaultValue\">\r\n    <summary>\r\n    Returns true if the parameter specifies a default value to be passed\r\n    when no value is provided as an argument to a call. The default value\r\n    can be obtained with the DefaultValue property.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 54
              },
              "Id": "P:Microsoft.CodeAnalysis.IParameterSymbol.HasExplicitDefaultValue",
              "Parent": "T:Microsoft.CodeAnalysis.IParameterSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IParameterSymbol.HasExplicitDefaultValue\">\r\n    <summary>\r\n    Returns true if the parameter specifies a default value to be passed\r\n    when no value is provided as an argument to a call. The default value\r\n    can be obtained with the DefaultValue property.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool IsOptional",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IParameterSymbol.IsOptional\">\r\n    <summary>\r\n    Returns true if the parameter is optional.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 26
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool IsOptional",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IParameterSymbol.IsOptional\">\r\n    <summary>\r\n    Returns true if the parameter is optional.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 26
              },
              "Id": "P:Microsoft.CodeAnalysis.IParameterSymbol.IsOptional",
              "Parent": "T:Microsoft.CodeAnalysis.IParameterSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IParameterSymbol.IsOptional\">\r\n    <summary>\r\n    Returns true if the parameter is optional.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool IsParams",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IParameterSymbol.IsParams\">\r\n    <summary>\r\n    Returns true if the parameter was declared as a parameter array. \r\n    </summary>\r\n</member>\r\n",
                "StartLine": 21
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool IsParams",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IParameterSymbol.IsParams\">\r\n    <summary>\r\n    Returns true if the parameter was declared as a parameter array. \r\n    </summary>\r\n</member>\r\n",
                "StartLine": 21
              },
              "Id": "P:Microsoft.CodeAnalysis.IParameterSymbol.IsParams",
              "Parent": "T:Microsoft.CodeAnalysis.IParameterSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IParameterSymbol.IsParams\">\r\n    <summary>\r\n    Returns true if the parameter was declared as a parameter array. \r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool IsThis",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IParameterSymbol.IsThis\">\r\n    <summary>\r\n    Returns true if the parameter is the hidden 'this' ('Me' in Visual Basic) parameter.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 31
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool IsThis",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IParameterSymbol.IsThis\">\r\n    <summary>\r\n    Returns true if the parameter is the hidden 'this' ('Me' in Visual Basic) parameter.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 31
              },
              "Id": "P:Microsoft.CodeAnalysis.IParameterSymbol.IsThis",
              "Parent": "T:Microsoft.CodeAnalysis.IParameterSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IParameterSymbol.IsThis\">\r\n    <summary>\r\n    Returns true if the parameter is the hidden 'this' ('Me' in Visual Basic) parameter.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Int32",
                "Content": "int Ordinal",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IParameterSymbol.Ordinal\">\r\n    <summary>\r\n    Gets the ordinal position of the parameter. The first parameter has ordinal zero.\r\n    The 'this' parameter ('Me' in Visual Basic) has ordinal -1.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 47
              },
              "Syntax": {
                "PropertyType": "T:System.Int32",
                "Content": "int Ordinal",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IParameterSymbol.Ordinal\">\r\n    <summary>\r\n    Gets the ordinal position of the parameter. The first parameter has ordinal zero.\r\n    The 'this' parameter ('Me' in Visual Basic) has ordinal -1.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 47
              },
              "Id": "P:Microsoft.CodeAnalysis.IParameterSymbol.Ordinal",
              "Parent": "T:Microsoft.CodeAnalysis.IParameterSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IParameterSymbol.Ordinal\">\r\n    <summary>\r\n    Gets the ordinal position of the parameter. The first parameter has ordinal zero.\r\n    The 'this' parameter ('Me' in Visual Basic) has ordinal -1.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.IParameterSymbol",
                "Content": "new IParameterSymbol OriginalDefinition",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IParameterSymbol.OriginalDefinition\">\r\n    <summary>\r\n    Get the original definition of this symbol. If this symbol is derived from another\r\n    symbol by (say) type substitution, this gets the original symbol, as it was defined in\r\n    source or metadata.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 71
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.IParameterSymbol",
                "Content": "new IParameterSymbol OriginalDefinition",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IParameterSymbol.OriginalDefinition\">\r\n    <summary>\r\n    Get the original definition of this symbol. If this symbol is derived from another\r\n    symbol by (say) type substitution, this gets the original symbol, as it was defined in\r\n    source or metadata.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 71
              },
              "Id": "P:Microsoft.CodeAnalysis.IParameterSymbol.OriginalDefinition",
              "Parent": "T:Microsoft.CodeAnalysis.IParameterSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IParameterSymbol.OriginalDefinition\">\r\n    <summary>\r\n    Get the original definition of this symbol. If this symbol is derived from another\r\n    symbol by (say) type substitution, this gets the original symbol, as it was defined in\r\n    source or metadata.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.RefKind",
                "Content": "RefKind RefKind",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IParameterSymbol.RefKind\">\r\n    <summary>\r\n    Whether the parameter passed by value or by reference.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 16
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.RefKind",
                "Content": "RefKind RefKind",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IParameterSymbol.RefKind\">\r\n    <summary>\r\n    Whether the parameter passed by value or by reference.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 16
              },
              "Id": "P:Microsoft.CodeAnalysis.IParameterSymbol.RefKind",
              "Parent": "T:Microsoft.CodeAnalysis.IParameterSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IParameterSymbol.RefKind\">\r\n    <summary>\r\n    Whether the parameter passed by value or by reference.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.ITypeSymbol",
                "Content": "ITypeSymbol Type",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IParameterSymbol.Type\">\r\n    <summary>\r\n    Gets the type of the parameter.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 36
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.ITypeSymbol",
                "Content": "ITypeSymbol Type",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IParameterSymbol.Type\">\r\n    <summary>\r\n    Gets the type of the parameter.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 36
              },
              "Id": "P:Microsoft.CodeAnalysis.IParameterSymbol.Type",
              "Parent": "T:Microsoft.CodeAnalysis.IParameterSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IParameterSymbol.Type\">\r\n    <summary>\r\n    Gets the type of the parameter.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            8,
            9,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Symbols\\IParameterSymbol.cs",
          "InheritanceHierarchy": [],
          "Syntax": {
            "Content": "public interface IParameterSymbol",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.IParameterSymbol\">\r\n    <summary>\r\n    Represents a parameter of a method or property.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.IParameterSymbol",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.IParameterSymbol\">\r\n    <summary>\r\n    Represents a parameter of a method or property.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.CustomModifier}",
                "Content": "ImmutableArray<CustomModifier> CustomModifiers",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IPointerTypeSymbol.CustomModifiers\">\r\n    <summary>\r\n    The list of custom modifiers, if any, associated with the pointer type.\r\n    (Some managed languages may represent special information about the pointer type\r\n    as a custom modifier on either the pointer type or the element type, or\r\n    both.)\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 24
              },
              "Syntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.CustomModifier}",
                "Content": "ImmutableArray<CustomModifier> CustomModifiers",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IPointerTypeSymbol.CustomModifiers\">\r\n    <summary>\r\n    The list of custom modifiers, if any, associated with the pointer type.\r\n    (Some managed languages may represent special information about the pointer type\r\n    as a custom modifier on either the pointer type or the element type, or\r\n    both.)\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 24
              },
              "Id": "P:Microsoft.CodeAnalysis.IPointerTypeSymbol.CustomModifiers",
              "Parent": "T:Microsoft.CodeAnalysis.IPointerTypeSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IPointerTypeSymbol.CustomModifiers\">\r\n    <summary>\r\n    The list of custom modifiers, if any, associated with the pointer type.\r\n    (Some managed languages may represent special information about the pointer type\r\n    as a custom modifier on either the pointer type or the element type, or\r\n    both.)\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.ITypeSymbol",
                "Content": "ITypeSymbol PointedAtType",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IPointerTypeSymbol.PointedAtType\">\r\n    <summary>\r\n    Gets the type of the storage location that an instance of the pointer type points to.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 16
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.ITypeSymbol",
                "Content": "ITypeSymbol PointedAtType",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IPointerTypeSymbol.PointedAtType\">\r\n    <summary>\r\n    Gets the type of the storage location that an instance of the pointer type points to.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 16
              },
              "Id": "P:Microsoft.CodeAnalysis.IPointerTypeSymbol.PointedAtType",
              "Parent": "T:Microsoft.CodeAnalysis.IPointerTypeSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IPointerTypeSymbol.PointedAtType\">\r\n    <summary>\r\n    Gets the type of the storage location that an instance of the pointer type points to.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            8,
            9,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Symbols\\IPointerTypeSymbol.cs",
          "InheritanceHierarchy": [],
          "Syntax": {
            "Content": "public interface IPointerTypeSymbol",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.IPointerTypeSymbol\">\r\n    <summary>\r\n    Represents a pointer type such as \"int *\". Pointer types\r\n    are used only in unsafe code.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.IPointerTypeSymbol",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.IPointerTypeSymbol\">\r\n    <summary>\r\n    Represents a pointer type such as \"int *\". Pointer types\r\n    are used only in unsafe code.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "AllowedMemberTypes": [
            8,
            9,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Symbols\\IPreprocessingSymbol.cs",
          "InheritanceHierarchy": [],
          "Syntax": {
            "Content": "public interface IPreprocessingSymbol",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.IPreprocessingSymbol\">\r\n    <summary>\r\n    Represents a preprocessing conditional compilation symbol.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.IPreprocessingSymbol",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.IPreprocessingSymbol\">\r\n    <summary>\r\n    Represents a preprocessing conditional compilation symbol.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.IPropertySymbol}",
                "Content": "ImmutableArray<IPropertySymbol> ExplicitInterfaceImplementations",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IPropertySymbol.ExplicitInterfaceImplementations\">\r\n    <summary>\r\n    Returns interface properties explicitly implemented by this property.\r\n    </summary>\r\n    <remarks>\r\n    Properties imported from metadata can explicitly implement more than one property.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 73
              },
              "Syntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.IPropertySymbol}",
                "Content": "ImmutableArray<IPropertySymbol> ExplicitInterfaceImplementations",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IPropertySymbol.ExplicitInterfaceImplementations\">\r\n    <summary>\r\n    Returns interface properties explicitly implemented by this property.\r\n    </summary>\r\n    <remarks>\r\n    Properties imported from metadata can explicitly implement more than one property.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 73
              },
              "Id": "P:Microsoft.CodeAnalysis.IPropertySymbol.ExplicitInterfaceImplementations",
              "Parent": "T:Microsoft.CodeAnalysis.IPropertySymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IPropertySymbol.ExplicitInterfaceImplementations\">\r\n    <summary>\r\n    Returns interface properties explicitly implemented by this property.\r\n    </summary>\r\n    <remarks>\r\n    Properties imported from metadata can explicitly implement more than one property.\r\n    </remarks>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.IMethodSymbol",
                "Content": "IMethodSymbol GetMethod",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IPropertySymbol.GetMethod\">\r\n    <summary>\r\n    The 'get' accessor of the property, or null if the property is write-only.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 48
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.IMethodSymbol",
                "Content": "IMethodSymbol GetMethod",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IPropertySymbol.GetMethod\">\r\n    <summary>\r\n    The 'get' accessor of the property, or null if the property is write-only.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 48
              },
              "Id": "P:Microsoft.CodeAnalysis.IPropertySymbol.GetMethod",
              "Parent": "T:Microsoft.CodeAnalysis.IPropertySymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IPropertySymbol.GetMethod\">\r\n    <summary>\r\n    The 'get' accessor of the property, or null if the property is write-only.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool IsIndexer",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IPropertySymbol.IsIndexer\">\r\n    <summary>\r\n    Returns whether the property is really an indexer.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 15
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool IsIndexer",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IPropertySymbol.IsIndexer\">\r\n    <summary>\r\n    Returns whether the property is really an indexer.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 15
              },
              "Id": "P:Microsoft.CodeAnalysis.IPropertySymbol.IsIndexer",
              "Parent": "T:Microsoft.CodeAnalysis.IPropertySymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IPropertySymbol.IsIndexer\">\r\n    <summary>\r\n    Returns whether the property is really an indexer.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool IsReadOnly",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IPropertySymbol.IsReadOnly\">\r\n    <summary>\r\n    True if this is a read-only property; that is, a property with no set accessor.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 20
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool IsReadOnly",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IPropertySymbol.IsReadOnly\">\r\n    <summary>\r\n    True if this is a read-only property; that is, a property with no set accessor.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 20
              },
              "Id": "P:Microsoft.CodeAnalysis.IPropertySymbol.IsReadOnly",
              "Parent": "T:Microsoft.CodeAnalysis.IPropertySymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IPropertySymbol.IsReadOnly\">\r\n    <summary>\r\n    True if this is a read-only property; that is, a property with no set accessor.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool IsWithEvents",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IPropertySymbol.IsWithEvents\">\r\n    <summary>\r\n    Returns true if this property is an auto-created WithEvents property that takes place of\r\n    a field member when the field is marked as WithEvents.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 31
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool IsWithEvents",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IPropertySymbol.IsWithEvents\">\r\n    <summary>\r\n    Returns true if this property is an auto-created WithEvents property that takes place of\r\n    a field member when the field is marked as WithEvents.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 31
              },
              "Id": "P:Microsoft.CodeAnalysis.IPropertySymbol.IsWithEvents",
              "Parent": "T:Microsoft.CodeAnalysis.IPropertySymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IPropertySymbol.IsWithEvents\">\r\n    <summary>\r\n    Returns true if this property is an auto-created WithEvents property that takes place of\r\n    a field member when the field is marked as WithEvents.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool IsWriteOnly",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IPropertySymbol.IsWriteOnly\">\r\n    <summary>\r\n    True if this is a write-only property; that is, a property with no get accessor.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 25
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool IsWriteOnly",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IPropertySymbol.IsWriteOnly\">\r\n    <summary>\r\n    True if this is a write-only property; that is, a property with no get accessor.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 25
              },
              "Id": "P:Microsoft.CodeAnalysis.IPropertySymbol.IsWriteOnly",
              "Parent": "T:Microsoft.CodeAnalysis.IPropertySymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IPropertySymbol.IsWriteOnly\">\r\n    <summary>\r\n    True if this is a write-only property; that is, a property with no get accessor.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.IPropertySymbol",
                "Content": "new IPropertySymbol OriginalDefinition",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IPropertySymbol.OriginalDefinition\">\r\n    <summary>\r\n    The original definition of the property. If the property is constructed from another\r\n    symbol by type substitution, OriginalDefinition gets the original symbol, as it was \r\n    defined in source or metadata.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 60
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.IPropertySymbol",
                "Content": "new IPropertySymbol OriginalDefinition",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IPropertySymbol.OriginalDefinition\">\r\n    <summary>\r\n    The original definition of the property. If the property is constructed from another\r\n    symbol by type substitution, OriginalDefinition gets the original symbol, as it was \r\n    defined in source or metadata.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 60
              },
              "Id": "P:Microsoft.CodeAnalysis.IPropertySymbol.OriginalDefinition",
              "Parent": "T:Microsoft.CodeAnalysis.IPropertySymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IPropertySymbol.OriginalDefinition\">\r\n    <summary>\r\n    The original definition of the property. If the property is constructed from another\r\n    symbol by type substitution, OriginalDefinition gets the original symbol, as it was \r\n    defined in source or metadata.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.IPropertySymbol",
                "Content": "IPropertySymbol OverriddenProperty",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IPropertySymbol.OverriddenProperty\">\r\n    <summary>\r\n    Returns the overridden property, or null.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 65
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.IPropertySymbol",
                "Content": "IPropertySymbol OverriddenProperty",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IPropertySymbol.OverriddenProperty\">\r\n    <summary>\r\n    Returns the overridden property, or null.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 65
              },
              "Id": "P:Microsoft.CodeAnalysis.IPropertySymbol.OverriddenProperty",
              "Parent": "T:Microsoft.CodeAnalysis.IPropertySymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IPropertySymbol.OverriddenProperty\">\r\n    <summary>\r\n    Returns the overridden property, or null.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.IParameterSymbol}",
                "Content": "ImmutableArray<IParameterSymbol> Parameters",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IPropertySymbol.Parameters\">\r\n    <summary>\r\n    The parameters of this property. If this property has no parameters, returns\r\n    an empty list. Parameters are only present on indexers, or on some properties\r\n    imported from a COM interface.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 43
              },
              "Syntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.IParameterSymbol}",
                "Content": "ImmutableArray<IParameterSymbol> Parameters",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IPropertySymbol.Parameters\">\r\n    <summary>\r\n    The parameters of this property. If this property has no parameters, returns\r\n    an empty list. Parameters are only present on indexers, or on some properties\r\n    imported from a COM interface.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 43
              },
              "Id": "P:Microsoft.CodeAnalysis.IPropertySymbol.Parameters",
              "Parent": "T:Microsoft.CodeAnalysis.IPropertySymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IPropertySymbol.Parameters\">\r\n    <summary>\r\n    The parameters of this property. If this property has no parameters, returns\r\n    an empty list. Parameters are only present on indexers, or on some properties\r\n    imported from a COM interface.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.IMethodSymbol",
                "Content": "IMethodSymbol SetMethod",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IPropertySymbol.SetMethod\">\r\n    <summary>\r\n    The 'set' accessor of the property, or null if the property is read-only.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 53
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.IMethodSymbol",
                "Content": "IMethodSymbol SetMethod",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IPropertySymbol.SetMethod\">\r\n    <summary>\r\n    The 'set' accessor of the property, or null if the property is read-only.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 53
              },
              "Id": "P:Microsoft.CodeAnalysis.IPropertySymbol.SetMethod",
              "Parent": "T:Microsoft.CodeAnalysis.IPropertySymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IPropertySymbol.SetMethod\">\r\n    <summary>\r\n    The 'set' accessor of the property, or null if the property is read-only.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.ITypeSymbol",
                "Content": "ITypeSymbol Type",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IPropertySymbol.Type\">\r\n    <summary>\r\n    The type of the property. \r\n    </summary>\r\n</member>\r\n",
                "StartLine": 36
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.ITypeSymbol",
                "Content": "ITypeSymbol Type",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IPropertySymbol.Type\">\r\n    <summary>\r\n    The type of the property. \r\n    </summary>\r\n</member>\r\n",
                "StartLine": 36
              },
              "Id": "P:Microsoft.CodeAnalysis.IPropertySymbol.Type",
              "Parent": "T:Microsoft.CodeAnalysis.IPropertySymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IPropertySymbol.Type\">\r\n    <summary>\r\n    The type of the property. \r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.CustomModifier}",
                "Content": "ImmutableArray<CustomModifier> TypeCustomModifiers",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IPropertySymbol.TypeCustomModifiers\">\r\n    <summary>\r\n    The list of custom modifiers, if any, associated with the type of the property. \r\n    </summary>\r\n</member>\r\n",
                "StartLine": 78
              },
              "Syntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.CustomModifier}",
                "Content": "ImmutableArray<CustomModifier> TypeCustomModifiers",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IPropertySymbol.TypeCustomModifiers\">\r\n    <summary>\r\n    The list of custom modifiers, if any, associated with the type of the property. \r\n    </summary>\r\n</member>\r\n",
                "StartLine": 78
              },
              "Id": "P:Microsoft.CodeAnalysis.IPropertySymbol.TypeCustomModifiers",
              "Parent": "T:Microsoft.CodeAnalysis.IPropertySymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IPropertySymbol.TypeCustomModifiers\">\r\n    <summary>\r\n    The list of custom modifiers, if any, associated with the type of the property. \r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            8,
            9,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Symbols\\IPropertySymbol.cs",
          "InheritanceHierarchy": [],
          "Syntax": {
            "Content": "public interface IPropertySymbol",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.IPropertySymbol\">\r\n    <summary>\r\n    Represents a property or indexer.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.IPropertySymbol",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.IPropertySymbol\">\r\n    <summary>\r\n    Represents a property or indexer.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "AllowedMemberTypes": [
            8,
            9,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Symbols\\IRangeVariableSymbol.cs",
          "InheritanceHierarchy": [],
          "Syntax": {
            "Content": "public interface IRangeVariableSymbol",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.IRangeVariableSymbol\">\r\n    <summary>\r\n    Represents a range variable in a query expression.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.IRangeVariableSymbol",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.IRangeVariableSymbol\">\r\n    <summary>\r\n    Represents a range variable in a query expression.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SyntaxTrivia",
                "Content": "SyntaxTrivia ParentTrivia",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IStructuredTriviaSyntax.ParentTrivia\">\r\n    <summary>\r\n    Returns the parent trivia syntax for this structured trivia syntax.\r\n    </summary>\r\n    <returns>The parent trivia syntax for this structured trivia syntax.</returns>\r\n</member>\r\n",
                "StartLine": 15
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SyntaxTrivia",
                "Content": "SyntaxTrivia ParentTrivia",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IStructuredTriviaSyntax.ParentTrivia\">\r\n    <summary>\r\n    Returns the parent trivia syntax for this structured trivia syntax.\r\n    </summary>\r\n    <returns>The parent trivia syntax for this structured trivia syntax.</returns>\r\n</member>\r\n",
                "StartLine": 15
              },
              "Id": "P:Microsoft.CodeAnalysis.IStructuredTriviaSyntax.ParentTrivia",
              "Parent": "T:Microsoft.CodeAnalysis.IStructuredTriviaSyntax",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.IStructuredTriviaSyntax.ParentTrivia\">\r\n    <summary>\r\n    Returns the parent trivia syntax for this structured trivia syntax.\r\n    </summary>\r\n    <returns>The parent trivia syntax for this structured trivia syntax.</returns>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            8,
            9,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Syntax\\IStructuredTriviaSyntax.cs",
          "InheritanceHierarchy": [],
          "Syntax": {
            "Content": "public interface IStructuredTriviaSyntax",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.IStructuredTriviaSyntax\">\r\n    <summary>\r\n    Represents the root node of a structured trivia tree (for example, a preprocessor directive\r\n    or a documentation comment). From this root node you can traverse back up to the containing\r\n    trivia in the outer tree that contains it.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.IStructuredTriviaSyntax",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.IStructuredTriviaSyntax\">\r\n    <summary>\r\n    Represents the root node of a structured trivia tree (for example, a preprocessor directive\r\n    or a documentation comment). From this root node you can traverse back up to the containing\r\n    trivia in the outer tree that contains it.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SymbolVisitor : visitor": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "void Accept(SymbolVisitor visitor);",
                "XmlDocumentation": "",
                "StartLine": 178
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SymbolVisitor : visitor": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "void Accept(SymbolVisitor visitor);",
                "XmlDocumentation": "",
                "StartLine": 178
              },
              "Id": "M:Microsoft.CodeAnalysis.ISymbol.Accept(Microsoft.CodeAnalysis.SymbolVisitor)",
              "Parent": "T:Microsoft.CodeAnalysis.ISymbol",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SymbolVisitor{``0} : visitor": ""
                },
                "Returns": {
                  "!:TResult": ""
                },
                "Content": "TResult Accept<TResult>(SymbolVisitor<TResult> visitor);",
                "XmlDocumentation": "",
                "StartLine": 179
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SymbolVisitor{``0} : visitor": ""
                },
                "Returns": {
                  "!:TResult": ""
                },
                "Content": "TResult Accept<TResult>(SymbolVisitor<TResult> visitor);",
                "XmlDocumentation": "",
                "StartLine": 179
              },
              "Id": "M:Microsoft.CodeAnalysis.ISymbol.Accept``1(Microsoft.CodeAnalysis.SymbolVisitor{``0})",
              "Parent": "T:Microsoft.CodeAnalysis.ISymbol",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.AttributeData}": ""
                },
                "Content": "ImmutableArray<AttributeData> GetAttributes();",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ISymbol.GetAttributes\">\r\n    <summary>\r\n    Gets the attributes for the symbol. Returns an empty <see cref=\"T:System.Collections.Generic.IEnumerable`1\"/>\r\n    if there are no attributes.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 163
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.AttributeData}": ""
                },
                "Content": "ImmutableArray<AttributeData> GetAttributes();",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ISymbol.GetAttributes\">\r\n    <summary>\r\n    Gets the attributes for the symbol. Returns an empty <see cref=\"T:System.Collections.Generic.IEnumerable`1\"/>\r\n    if there are no attributes.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 163
              },
              "Id": "M:Microsoft.CodeAnalysis.ISymbol.GetAttributes",
              "Parent": "T:Microsoft.CodeAnalysis.ISymbol",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ISymbol.GetAttributes\">\r\n    <summary>\r\n    Gets the attributes for the symbol. Returns an empty <see cref=\"T:System.Collections.Generic.IEnumerable`1\"/>\r\n    if there are no attributes.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "string GetDocumentationCommentId();",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ISymbol.GetDocumentationCommentId\">\r\n    <summary>\r\n    Returns the Documentation Comment ID for the symbol, or null if the symbol doesn't\r\n    support documentation comments.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 185
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "string GetDocumentationCommentId();",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ISymbol.GetDocumentationCommentId\">\r\n    <summary>\r\n    Returns the Documentation Comment ID for the symbol, or null if the symbol doesn't\r\n    support documentation comments.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 185
              },
              "Id": "M:Microsoft.CodeAnalysis.ISymbol.GetDocumentationCommentId",
              "Parent": "T:Microsoft.CodeAnalysis.ISymbol",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ISymbol.GetDocumentationCommentId\">\r\n    <summary>\r\n    Returns the Documentation Comment ID for the symbol, or null if the symbol doesn't\r\n    support documentation comments.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Boolean : expandIncludes": "",
                  "T:System.Globalization.CultureInfo : preferredCulture": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "string GetDocumentationCommentXml(CultureInfo preferredCulture = null, bool expandIncludes = false, CancellationToken cancellationToken = default (CancellationToken));",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ISymbol.GetDocumentationCommentXml(System.Globalization.CultureInfo,System.Boolean,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Gets the XML (as text) for the comment associated with the symbol.\r\n    </summary>\r\n    <param name=\"preferredCulture\">Preferred culture or null for the default.</param>\r\n    <param name=\"expandIncludes\">Optionally, expand &lt;include&gt; elements.  No impact on non-source documentation comments.</param>\r\n    <param name=\"cancellationToken\">Token allowing cancellation of request.</param>\r\n    <returns>The XML that would be written to the documentation file for the symbol.</returns>\r\n</member>\r\n",
                "StartLine": 194
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Boolean : expandIncludes": "",
                  "T:System.Globalization.CultureInfo : preferredCulture": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "string GetDocumentationCommentXml(CultureInfo preferredCulture = null, bool expandIncludes = false, CancellationToken cancellationToken = default (CancellationToken));",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ISymbol.GetDocumentationCommentXml(System.Globalization.CultureInfo,System.Boolean,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Gets the XML (as text) for the comment associated with the symbol.\r\n    </summary>\r\n    <param name=\"preferredCulture\">Preferred culture or null for the default.</param>\r\n    <param name=\"expandIncludes\">Optionally, expand &lt;include&gt; elements.  No impact on non-source documentation comments.</param>\r\n    <param name=\"cancellationToken\">Token allowing cancellation of request.</param>\r\n    <returns>The XML that would be written to the documentation file for the symbol.</returns>\r\n</member>\r\n",
                "StartLine": 194
              },
              "Id": "M:Microsoft.CodeAnalysis.ISymbol.GetDocumentationCommentXml(System.Globalization.CultureInfo,System.Boolean,System.Threading.CancellationToken)",
              "Parent": "T:Microsoft.CodeAnalysis.ISymbol",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ISymbol.GetDocumentationCommentXml(System.Globalization.CultureInfo,System.Boolean,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Gets the XML (as text) for the comment associated with the symbol.\r\n    </summary>\r\n    <param name=\"preferredCulture\">Preferred culture or null for the default.</param>\r\n    <param name=\"expandIncludes\">Optionally, expand &lt;include&gt; elements.  No impact on non-source documentation comments.</param>\r\n    <param name=\"cancellationToken\">Token allowing cancellation of request.</param>\r\n    <returns>The XML that would be written to the documentation file for the symbol.</returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SymbolDisplayFormat : format": ""
                },
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.SymbolDisplayPart}": ""
                },
                "Content": "ImmutableArray<SymbolDisplayPart> ToDisplayParts(SymbolDisplayFormat format = null);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ISymbol.ToDisplayParts(Microsoft.CodeAnalysis.SymbolDisplayFormat)\">\r\n    <summary>\r\n    Convert a symbol to an array of string parts, each of which has a kind. Useful for\r\n    colorizing the display string.\r\n    </summary>\r\n    <param name=\"format\">Formatting rules - null implies\r\n    SymbolDisplayFormat.ErrorMessageFormat.</param>\r\n    <returns>A read-only array of string parts.</returns>\r\n</member>\r\n",
                "StartLine": 210
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SymbolDisplayFormat : format": ""
                },
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.SymbolDisplayPart}": ""
                },
                "Content": "ImmutableArray<SymbolDisplayPart> ToDisplayParts(SymbolDisplayFormat format = null);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ISymbol.ToDisplayParts(Microsoft.CodeAnalysis.SymbolDisplayFormat)\">\r\n    <summary>\r\n    Convert a symbol to an array of string parts, each of which has a kind. Useful for\r\n    colorizing the display string.\r\n    </summary>\r\n    <param name=\"format\">Formatting rules - null implies\r\n    SymbolDisplayFormat.ErrorMessageFormat.</param>\r\n    <returns>A read-only array of string parts.</returns>\r\n</member>\r\n",
                "StartLine": 210
              },
              "Id": "M:Microsoft.CodeAnalysis.ISymbol.ToDisplayParts(Microsoft.CodeAnalysis.SymbolDisplayFormat)",
              "Parent": "T:Microsoft.CodeAnalysis.ISymbol",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ISymbol.ToDisplayParts(Microsoft.CodeAnalysis.SymbolDisplayFormat)\">\r\n    <summary>\r\n    Convert a symbol to an array of string parts, each of which has a kind. Useful for\r\n    colorizing the display string.\r\n    </summary>\r\n    <param name=\"format\">Formatting rules - null implies\r\n    SymbolDisplayFormat.ErrorMessageFormat.</param>\r\n    <returns>A read-only array of string parts.</returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SymbolDisplayFormat : format": ""
                },
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "string ToDisplayString(SymbolDisplayFormat format = null);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ISymbol.ToDisplayString(Microsoft.CodeAnalysis.SymbolDisplayFormat)\">\r\n    <summary>\r\n    Converts the symbol to a string representation.\r\n    </summary>\r\n    <param name=\"format\">Format or null for the default.</param>\r\n    <returns>A formatted string representation of the symbol.</returns>\r\n</member>\r\n",
                "StartLine": 201
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SymbolDisplayFormat : format": ""
                },
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "string ToDisplayString(SymbolDisplayFormat format = null);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ISymbol.ToDisplayString(Microsoft.CodeAnalysis.SymbolDisplayFormat)\">\r\n    <summary>\r\n    Converts the symbol to a string representation.\r\n    </summary>\r\n    <param name=\"format\">Format or null for the default.</param>\r\n    <returns>A formatted string representation of the symbol.</returns>\r\n</member>\r\n",
                "StartLine": 201
              },
              "Id": "M:Microsoft.CodeAnalysis.ISymbol.ToDisplayString(Microsoft.CodeAnalysis.SymbolDisplayFormat)",
              "Parent": "T:Microsoft.CodeAnalysis.ISymbol",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ISymbol.ToDisplayString(Microsoft.CodeAnalysis.SymbolDisplayFormat)\">\r\n    <summary>\r\n    Converts the symbol to a string representation.\r\n    </summary>\r\n    <param name=\"format\">Format or null for the default.</param>\r\n    <returns>A formatted string representation of the symbol.</returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SemanticModel : semanticModel": "",
                  "T:Microsoft.CodeAnalysis.SymbolDisplayFormat : format": "",
                  "T:System.Int32 : position": ""
                },
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.SymbolDisplayPart}": ""
                },
                "Content": "ImmutableArray<SymbolDisplayPart> ToMinimalDisplayParts(SemanticModel semanticModel, int position, SymbolDisplayFormat format = null);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ISymbol.ToMinimalDisplayParts(Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.SymbolDisplayFormat)\">\r\n    <summary>\r\n    Convert a symbol to an array of string parts, each of which has a kind. May be tailored\r\n    to a specific location in the source code. Useful for colorizing the display string.\r\n    </summary>\r\n    <param name=\"semanticModel\">Binding information (for determining names appropriate to\r\n    the context).</param>\r\n    <param name=\"position\">A position in the source code (context).</param>\r\n    <param name=\"format\">Formatting rules - null implies\r\n    SymbolDisplayFormat.MinimallyQualifiedFormat.</param>\r\n    <returns>A read-only array of string parts.</returns>\r\n</member>\r\n",
                "StartLine": 237
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SemanticModel : semanticModel": "",
                  "T:Microsoft.CodeAnalysis.SymbolDisplayFormat : format": "",
                  "T:System.Int32 : position": ""
                },
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.SymbolDisplayPart}": ""
                },
                "Content": "ImmutableArray<SymbolDisplayPart> ToMinimalDisplayParts(SemanticModel semanticModel, int position, SymbolDisplayFormat format = null);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ISymbol.ToMinimalDisplayParts(Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.SymbolDisplayFormat)\">\r\n    <summary>\r\n    Convert a symbol to an array of string parts, each of which has a kind. May be tailored\r\n    to a specific location in the source code. Useful for colorizing the display string.\r\n    </summary>\r\n    <param name=\"semanticModel\">Binding information (for determining names appropriate to\r\n    the context).</param>\r\n    <param name=\"position\">A position in the source code (context).</param>\r\n    <param name=\"format\">Formatting rules - null implies\r\n    SymbolDisplayFormat.MinimallyQualifiedFormat.</param>\r\n    <returns>A read-only array of string parts.</returns>\r\n</member>\r\n",
                "StartLine": 237
              },
              "Id": "M:Microsoft.CodeAnalysis.ISymbol.ToMinimalDisplayParts(Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.SymbolDisplayFormat)",
              "Parent": "T:Microsoft.CodeAnalysis.ISymbol",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ISymbol.ToMinimalDisplayParts(Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.SymbolDisplayFormat)\">\r\n    <summary>\r\n    Convert a symbol to an array of string parts, each of which has a kind. May be tailored\r\n    to a specific location in the source code. Useful for colorizing the display string.\r\n    </summary>\r\n    <param name=\"semanticModel\">Binding information (for determining names appropriate to\r\n    the context).</param>\r\n    <param name=\"position\">A position in the source code (context).</param>\r\n    <param name=\"format\">Formatting rules - null implies\r\n    SymbolDisplayFormat.MinimallyQualifiedFormat.</param>\r\n    <returns>A read-only array of string parts.</returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SemanticModel : semanticModel": "",
                  "T:Microsoft.CodeAnalysis.SymbolDisplayFormat : format": "",
                  "T:System.Int32 : position": ""
                },
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "string ToMinimalDisplayString(SemanticModel semanticModel, int position, SymbolDisplayFormat format = null);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ISymbol.ToMinimalDisplayString(Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.SymbolDisplayFormat)\">\r\n    <summary>\r\n    Convert a symbol to a string that can be displayed to the user. May be tailored to a\r\n    specific location in the source code.\r\n    </summary>\r\n    <param name=\"semanticModel\">Binding information (for determining names appropriate to\r\n    the context).</param>\r\n    <param name=\"position\">A position in the source code (context).</param>\r\n    <param name=\"format\">Formatting rules - null implies\r\n    SymbolDisplayFormat.MinimallyQualifiedFormat.</param>\r\n    <returns>A formatted string that can be displayed to the user.</returns>\r\n</member>\r\n",
                "StartLine": 222
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SemanticModel : semanticModel": "",
                  "T:Microsoft.CodeAnalysis.SymbolDisplayFormat : format": "",
                  "T:System.Int32 : position": ""
                },
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "string ToMinimalDisplayString(SemanticModel semanticModel, int position, SymbolDisplayFormat format = null);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ISymbol.ToMinimalDisplayString(Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.SymbolDisplayFormat)\">\r\n    <summary>\r\n    Convert a symbol to a string that can be displayed to the user. May be tailored to a\r\n    specific location in the source code.\r\n    </summary>\r\n    <param name=\"semanticModel\">Binding information (for determining names appropriate to\r\n    the context).</param>\r\n    <param name=\"position\">A position in the source code (context).</param>\r\n    <param name=\"format\">Formatting rules - null implies\r\n    SymbolDisplayFormat.MinimallyQualifiedFormat.</param>\r\n    <returns>A formatted string that can be displayed to the user.</returns>\r\n</member>\r\n",
                "StartLine": 222
              },
              "Id": "M:Microsoft.CodeAnalysis.ISymbol.ToMinimalDisplayString(Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.SymbolDisplayFormat)",
              "Parent": "T:Microsoft.CodeAnalysis.ISymbol",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ISymbol.ToMinimalDisplayString(Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.SymbolDisplayFormat)\">\r\n    <summary>\r\n    Convert a symbol to a string that can be displayed to the user. May be tailored to a\r\n    specific location in the source code.\r\n    </summary>\r\n    <param name=\"semanticModel\">Binding information (for determining names appropriate to\r\n    the context).</param>\r\n    <param name=\"position\">A position in the source code (context).</param>\r\n    <param name=\"format\">Formatting rules - null implies\r\n    SymbolDisplayFormat.MinimallyQualifiedFormat.</param>\r\n    <returns>A formatted string that can be displayed to the user.</returns>\r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool CanBeReferencedByName",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ISymbol.CanBeReferencedByName\">\r\n    <summary>\r\n    Returns true if this symbol can be referenced by its name in code.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 133
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool CanBeReferencedByName",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ISymbol.CanBeReferencedByName\">\r\n    <summary>\r\n    Returns true if this symbol can be referenced by its name in code.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 133
              },
              "Id": "P:Microsoft.CodeAnalysis.ISymbol.CanBeReferencedByName",
              "Parent": "T:Microsoft.CodeAnalysis.ISymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ISymbol.CanBeReferencedByName\">\r\n    <summary>\r\n    Returns true if this symbol can be referenced by its name in code.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.IAssemblySymbol",
                "Content": "IAssemblySymbol ContainingAssembly",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ISymbol.ContainingAssembly\">\r\n    <summary>\r\n    Gets the <see cref=\"T:Microsoft.CodeAnalysis.IAssemblySymbol\"/> for the containing assembly. Returns null if the\r\n    symbol is shared across multiple assemblies.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 54
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.IAssemblySymbol",
                "Content": "IAssemblySymbol ContainingAssembly",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ISymbol.ContainingAssembly\">\r\n    <summary>\r\n    Gets the <see cref=\"T:Microsoft.CodeAnalysis.IAssemblySymbol\"/> for the containing assembly. Returns null if the\r\n    symbol is shared across multiple assemblies.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 54
              },
              "Id": "P:Microsoft.CodeAnalysis.ISymbol.ContainingAssembly",
              "Parent": "T:Microsoft.CodeAnalysis.ISymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ISymbol.ContainingAssembly\">\r\n    <summary>\r\n    Gets the <see cref=\"T:Microsoft.CodeAnalysis.IAssemblySymbol\"/> for the containing assembly. Returns null if the\r\n    symbol is shared across multiple assemblies.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.IModuleSymbol",
                "Content": "IModuleSymbol ContainingModule",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ISymbol.ContainingModule\">\r\n    <summary>\r\n    Gets the <see cref=\"T:Microsoft.CodeAnalysis.IModuleSymbol\"/> for the containing module. Returns null if the\r\n    symbol is shared across multiple modules.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 60
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.IModuleSymbol",
                "Content": "IModuleSymbol ContainingModule",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ISymbol.ContainingModule\">\r\n    <summary>\r\n    Gets the <see cref=\"T:Microsoft.CodeAnalysis.IModuleSymbol\"/> for the containing module. Returns null if the\r\n    symbol is shared across multiple modules.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 60
              },
              "Id": "P:Microsoft.CodeAnalysis.ISymbol.ContainingModule",
              "Parent": "T:Microsoft.CodeAnalysis.ISymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ISymbol.ContainingModule\">\r\n    <summary>\r\n    Gets the <see cref=\"T:Microsoft.CodeAnalysis.IModuleSymbol\"/> for the containing module. Returns null if the\r\n    symbol is shared across multiple modules.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.INamespaceSymbol",
                "Content": "INamespaceSymbol ContainingNamespace",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ISymbol.ContainingNamespace\">\r\n    <summary>\r\n    Gets the <see cref=\"T:Microsoft.CodeAnalysis.INamespaceSymbol\"/> for the nearest enclosing namespace. Returns null if the\r\n    symbol isn't contained in a namespace.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 72
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.INamespaceSymbol",
                "Content": "INamespaceSymbol ContainingNamespace",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ISymbol.ContainingNamespace\">\r\n    <summary>\r\n    Gets the <see cref=\"T:Microsoft.CodeAnalysis.INamespaceSymbol\"/> for the nearest enclosing namespace. Returns null if the\r\n    symbol isn't contained in a namespace.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 72
              },
              "Id": "P:Microsoft.CodeAnalysis.ISymbol.ContainingNamespace",
              "Parent": "T:Microsoft.CodeAnalysis.ISymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ISymbol.ContainingNamespace\">\r\n    <summary>\r\n    Gets the <see cref=\"T:Microsoft.CodeAnalysis.INamespaceSymbol\"/> for the nearest enclosing namespace. Returns null if the\r\n    symbol isn't contained in a namespace.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.ISymbol",
                "Content": "ISymbol ContainingSymbol",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ISymbol.ContainingSymbol\">\r\n    <summary>\r\n    Gets the <see cref=\"T:Microsoft.CodeAnalysis.ISymbol\"/> for the immediately containing symbol.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 48
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.ISymbol",
                "Content": "ISymbol ContainingSymbol",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ISymbol.ContainingSymbol\">\r\n    <summary>\r\n    Gets the <see cref=\"T:Microsoft.CodeAnalysis.ISymbol\"/> for the immediately containing symbol.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 48
              },
              "Id": "P:Microsoft.CodeAnalysis.ISymbol.ContainingSymbol",
              "Parent": "T:Microsoft.CodeAnalysis.ISymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ISymbol.ContainingSymbol\">\r\n    <summary>\r\n    Gets the <see cref=\"T:Microsoft.CodeAnalysis.ISymbol\"/> for the immediately containing symbol.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.INamedTypeSymbol",
                "Content": "INamedTypeSymbol ContainingType",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ISymbol.ContainingType\">\r\n    <summary>\r\n    Gets the <see cref=\"T:Microsoft.CodeAnalysis.INamedTypeSymbol\"/> for the containing type. Returns null if the\r\n    symbol is not contained within a type.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 66
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.INamedTypeSymbol",
                "Content": "INamedTypeSymbol ContainingType",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ISymbol.ContainingType\">\r\n    <summary>\r\n    Gets the <see cref=\"T:Microsoft.CodeAnalysis.INamedTypeSymbol\"/> for the containing type. Returns null if the\r\n    symbol is not contained within a type.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 66
              },
              "Id": "P:Microsoft.CodeAnalysis.ISymbol.ContainingType",
              "Parent": "T:Microsoft.CodeAnalysis.ISymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ISymbol.ContainingType\">\r\n    <summary>\r\n    Gets the <see cref=\"T:Microsoft.CodeAnalysis.INamedTypeSymbol\"/> for the containing type. Returns null if the\r\n    symbol is not contained within a type.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Accessibility",
                "Content": "Accessibility DeclaredAccessibility",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ISymbol.DeclaredAccessibility\">\r\n    <summary>\r\n    Gets a <see cref=\"T:Microsoft.CodeAnalysis.Accessibility\"/> indicating the declared accessibility for the symbol.\r\n    Returns NotApplicable if no accessibility is declared.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 169
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Accessibility",
                "Content": "Accessibility DeclaredAccessibility",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ISymbol.DeclaredAccessibility\">\r\n    <summary>\r\n    Gets a <see cref=\"T:Microsoft.CodeAnalysis.Accessibility\"/> indicating the declared accessibility for the symbol.\r\n    Returns NotApplicable if no accessibility is declared.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 169
              },
              "Id": "P:Microsoft.CodeAnalysis.ISymbol.DeclaredAccessibility",
              "Parent": "T:Microsoft.CodeAnalysis.ISymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ISymbol.DeclaredAccessibility\">\r\n    <summary>\r\n    Gets a <see cref=\"T:Microsoft.CodeAnalysis.Accessibility\"/> indicating the declared accessibility for the symbol.\r\n    Returns NotApplicable if no accessibility is declared.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.SyntaxReference}",
                "Content": "ImmutableArray<SyntaxReference> DeclaringSyntaxReferences",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ISymbol.DeclaringSyntaxReferences\">\r\n    <summary>\r\n    Get the syntax node(s) where this symbol was declared in source. Some symbols (for example,\r\n    partial classes) may be defined in more than one location. This property should return\r\n    one or more syntax nodes only if the symbol was declared in source code and also was\r\n    not implicitly declared (see the IsImplicitlyDeclared property). \r\n    \r\n    Note that for namespace symbol, the declaring syntax might be declaring a nested namespace.\r\n    For example, the declaring syntax node for N1 in \"namespace N1.N2 {...}\" is the entire\r\n    NamespaceDeclarationSyntax for N1.N2. For the global namespace, the declaring syntax will\r\n    be the CompilationUnitSyntax.\r\n    </summary>\r\n    <returns>\r\n    The syntax node(s) that declared the symbol. If the symbol was declared in metadata\r\n    or was implicitly declared, returns an empty read-only array.\r\n    </returns>\r\n</member>\r\n",
                "StartLine": 157
              },
              "Syntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.SyntaxReference}",
                "Content": "ImmutableArray<SyntaxReference> DeclaringSyntaxReferences",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ISymbol.DeclaringSyntaxReferences\">\r\n    <summary>\r\n    Get the syntax node(s) where this symbol was declared in source. Some symbols (for example,\r\n    partial classes) may be defined in more than one location. This property should return\r\n    one or more syntax nodes only if the symbol was declared in source code and also was\r\n    not implicitly declared (see the IsImplicitlyDeclared property). \r\n    \r\n    Note that for namespace symbol, the declaring syntax might be declaring a nested namespace.\r\n    For example, the declaring syntax node for N1 in \"namespace N1.N2 {...}\" is the entire\r\n    NamespaceDeclarationSyntax for N1.N2. For the global namespace, the declaring syntax will\r\n    be the CompilationUnitSyntax.\r\n    </summary>\r\n    <returns>\r\n    The syntax node(s) that declared the symbol. If the symbol was declared in metadata\r\n    or was implicitly declared, returns an empty read-only array.\r\n    </returns>\r\n</member>\r\n",
                "StartLine": 157
              },
              "Id": "P:Microsoft.CodeAnalysis.ISymbol.DeclaringSyntaxReferences",
              "Parent": "T:Microsoft.CodeAnalysis.ISymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ISymbol.DeclaringSyntaxReferences\">\r\n    <summary>\r\n    Get the syntax node(s) where this symbol was declared in source. Some symbols (for example,\r\n    partial classes) may be defined in more than one location. This property should return\r\n    one or more syntax nodes only if the symbol was declared in source code and also was\r\n    not implicitly declared (see the IsImplicitlyDeclared property). \r\n    \r\n    Note that for namespace symbol, the declaring syntax might be declaring a nested namespace.\r\n    For example, the declaring syntax node for N1 in \"namespace N1.N2 {...}\" is the entire\r\n    NamespaceDeclarationSyntax for N1.N2. For the global namespace, the declaring syntax will\r\n    be the CompilationUnitSyntax.\r\n    </summary>\r\n    <returns>\r\n    The syntax node(s) that declared the symbol. If the symbol was declared in metadata\r\n    or was implicitly declared, returns an empty read-only array.\r\n    </returns>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool HasUnsupportedMetadata",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ISymbol.HasUnsupportedMetadata\">\r\n    <summary>\r\n    Indicates that this symbol uses metadata that cannot be supported by the language.\r\n    \r\n    Examples include:\r\n       - Pointer types in VB\r\n       - ByRef return type\r\n       - Required custom modifiers\r\n       \r\n    This is distinguished from, for example, references to metadata symbols defined in assemblies that weren't referenced.\r\n    Symbols where this returns true can never be used successfully, and thus should never appear in any IDE feature.\r\n    \r\n    This is set for metadata symbols, as follows:\r\n    Type - if a type is unsupported (e.g., a pointer type, etc.)\r\n    Method - parameter or return type is unsupported\r\n    Field - type is unsupported\r\n    Event - type is unsupported\r\n    Property - type is unsupported\r\n    Parameter - type is unsupported\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 261
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool HasUnsupportedMetadata",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ISymbol.HasUnsupportedMetadata\">\r\n    <summary>\r\n    Indicates that this symbol uses metadata that cannot be supported by the language.\r\n    \r\n    Examples include:\r\n       - Pointer types in VB\r\n       - ByRef return type\r\n       - Required custom modifiers\r\n       \r\n    This is distinguished from, for example, references to metadata symbols defined in assemblies that weren't referenced.\r\n    Symbols where this returns true can never be used successfully, and thus should never appear in any IDE feature.\r\n    \r\n    This is set for metadata symbols, as follows:\r\n    Type - if a type is unsupported (e.g., a pointer type, etc.)\r\n    Method - parameter or return type is unsupported\r\n    Field - type is unsupported\r\n    Event - type is unsupported\r\n    Property - type is unsupported\r\n    Parameter - type is unsupported\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 261
              },
              "Id": "P:Microsoft.CodeAnalysis.ISymbol.HasUnsupportedMetadata",
              "Parent": "T:Microsoft.CodeAnalysis.ISymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ISymbol.HasUnsupportedMetadata\">\r\n    <summary>\r\n    Indicates that this symbol uses metadata that cannot be supported by the language.\r\n    \r\n    Examples include:\r\n       - Pointer types in VB\r\n       - ByRef return type\r\n       - Required custom modifiers\r\n       \r\n    This is distinguished from, for example, references to metadata symbols defined in assemblies that weren't referenced.\r\n    Symbols where this returns true can never be used successfully, and thus should never appear in any IDE feature.\r\n    \r\n    This is set for metadata symbols, as follows:\r\n    Type - if a type is unsupported (e.g., a pointer type, etc.)\r\n    Method - parameter or return type is unsupported\r\n    Field - type is unsupported\r\n    Event - type is unsupported\r\n    Property - type is unsupported\r\n    Parameter - type is unsupported\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool IsAbstract",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ISymbol.IsAbstract\">\r\n    <summary>\r\n    Gets a value indicating whether the symbol is abstract.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 98
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool IsAbstract",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ISymbol.IsAbstract\">\r\n    <summary>\r\n    Gets a value indicating whether the symbol is abstract.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 98
              },
              "Id": "P:Microsoft.CodeAnalysis.ISymbol.IsAbstract",
              "Parent": "T:Microsoft.CodeAnalysis.ISymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ISymbol.IsAbstract\">\r\n    <summary>\r\n    Gets a value indicating whether the symbol is abstract.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool IsDefinition",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ISymbol.IsDefinition\">\r\n    <summary>\r\n    Gets a value indicating whether the symbol is the original definition. Returns false\r\n    if the symbol is derived from another symbol, by type substitution for instance.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 78
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool IsDefinition",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ISymbol.IsDefinition\">\r\n    <summary>\r\n    Gets a value indicating whether the symbol is the original definition. Returns false\r\n    if the symbol is derived from another symbol, by type substitution for instance.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 78
              },
              "Id": "P:Microsoft.CodeAnalysis.ISymbol.IsDefinition",
              "Parent": "T:Microsoft.CodeAnalysis.ISymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ISymbol.IsDefinition\">\r\n    <summary>\r\n    Gets a value indicating whether the symbol is the original definition. Returns false\r\n    if the symbol is derived from another symbol, by type substitution for instance.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool IsExtern",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ISymbol.IsExtern\">\r\n    <summary>\r\n    Gets a value indicating whether the symbol is defined externally.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 108
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool IsExtern",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ISymbol.IsExtern\">\r\n    <summary>\r\n    Gets a value indicating whether the symbol is defined externally.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 108
              },
              "Id": "P:Microsoft.CodeAnalysis.ISymbol.IsExtern",
              "Parent": "T:Microsoft.CodeAnalysis.ISymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ISymbol.IsExtern\">\r\n    <summary>\r\n    Gets a value indicating whether the symbol is defined externally.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool IsImplicitlyDeclared",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ISymbol.IsImplicitlyDeclared\">\r\n    <summary>\r\n    Returns true if this symbol was automatically created by the compiler, and does not have\r\n    an explicit corresponding source code declaration. \r\n    </summary> \r\n    <remarks>\r\n    This is intended for symbols that are ordinary symbols in the language sense, and may be\r\n    used by code, but that are simply declared implicitly rather than with explicit language\r\n    syntax.\r\n    \r\n    Examples include (this list is not exhaustive):\r\n      the default constructor for a class or struct that is created if one is not provided,\r\n      the BeginInvoke/Invoke/EndInvoke methods for a delegate,\r\n      the generated backing field for an auto property or a field-like event,\r\n      the \"this\" parameter for non-static methods,\r\n      the \"value\" parameter for a property setter,\r\n      the parameters on indexer accessor methods (not on the indexer itself),\r\n      methods in anonymous types\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 128
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool IsImplicitlyDeclared",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ISymbol.IsImplicitlyDeclared\">\r\n    <summary>\r\n    Returns true if this symbol was automatically created by the compiler, and does not have\r\n    an explicit corresponding source code declaration. \r\n    </summary> \r\n    <remarks>\r\n    This is intended for symbols that are ordinary symbols in the language sense, and may be\r\n    used by code, but that are simply declared implicitly rather than with explicit language\r\n    syntax.\r\n    \r\n    Examples include (this list is not exhaustive):\r\n      the default constructor for a class or struct that is created if one is not provided,\r\n      the BeginInvoke/Invoke/EndInvoke methods for a delegate,\r\n      the generated backing field for an auto property or a field-like event,\r\n      the \"this\" parameter for non-static methods,\r\n      the \"value\" parameter for a property setter,\r\n      the parameters on indexer accessor methods (not on the indexer itself),\r\n      methods in anonymous types\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 128
              },
              "Id": "P:Microsoft.CodeAnalysis.ISymbol.IsImplicitlyDeclared",
              "Parent": "T:Microsoft.CodeAnalysis.ISymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ISymbol.IsImplicitlyDeclared\">\r\n    <summary>\r\n    Returns true if this symbol was automatically created by the compiler, and does not have\r\n    an explicit corresponding source code declaration. \r\n    </summary> \r\n    <remarks>\r\n    This is intended for symbols that are ordinary symbols in the language sense, and may be\r\n    used by code, but that are simply declared implicitly rather than with explicit language\r\n    syntax.\r\n    \r\n    Examples include (this list is not exhaustive):\r\n      the default constructor for a class or struct that is created if one is not provided,\r\n      the BeginInvoke/Invoke/EndInvoke methods for a delegate,\r\n      the generated backing field for an auto property or a field-like event,\r\n      the \"this\" parameter for non-static methods,\r\n      the \"value\" parameter for a property setter,\r\n      the parameters on indexer accessor methods (not on the indexer itself),\r\n      methods in anonymous types\r\n    </remarks>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool IsOverride",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ISymbol.IsOverride\">\r\n    <summary>\r\n    Gets a value indicating whether the symbol is an override of a base class symbol.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 93
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool IsOverride",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ISymbol.IsOverride\">\r\n    <summary>\r\n    Gets a value indicating whether the symbol is an override of a base class symbol.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 93
              },
              "Id": "P:Microsoft.CodeAnalysis.ISymbol.IsOverride",
              "Parent": "T:Microsoft.CodeAnalysis.ISymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ISymbol.IsOverride\">\r\n    <summary>\r\n    Gets a value indicating whether the symbol is an override of a base class symbol.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool IsSealed",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ISymbol.IsSealed\">\r\n    <summary>\r\n    Gets a value indicating whether the symbol is sealed.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 103
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool IsSealed",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ISymbol.IsSealed\">\r\n    <summary>\r\n    Gets a value indicating whether the symbol is sealed.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 103
              },
              "Id": "P:Microsoft.CodeAnalysis.ISymbol.IsSealed",
              "Parent": "T:Microsoft.CodeAnalysis.ISymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ISymbol.IsSealed\">\r\n    <summary>\r\n    Gets a value indicating whether the symbol is sealed.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool IsStatic",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ISymbol.IsStatic\">\r\n    <summary>\r\n    Gets a value indicating whether the symbol is static.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 83
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool IsStatic",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ISymbol.IsStatic\">\r\n    <summary>\r\n    Gets a value indicating whether the symbol is static.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 83
              },
              "Id": "P:Microsoft.CodeAnalysis.ISymbol.IsStatic",
              "Parent": "T:Microsoft.CodeAnalysis.ISymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ISymbol.IsStatic\">\r\n    <summary>\r\n    Gets a value indicating whether the symbol is static.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool IsVirtual",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ISymbol.IsVirtual\">\r\n    <summary>\r\n    Gets a value indicating whether the symbol is virtual.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 88
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool IsVirtual",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ISymbol.IsVirtual\">\r\n    <summary>\r\n    Gets a value indicating whether the symbol is virtual.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 88
              },
              "Id": "P:Microsoft.CodeAnalysis.ISymbol.IsVirtual",
              "Parent": "T:Microsoft.CodeAnalysis.ISymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ISymbol.IsVirtual\">\r\n    <summary>\r\n    Gets a value indicating whether the symbol is virtual.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SymbolKind",
                "Content": "SymbolKind Kind",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ISymbol.Kind\">\r\n    <summary>\r\n    Gets the <see cref=\"T:Microsoft.CodeAnalysis.SymbolKind\"/> indicating what kind of symbol it is.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 21
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SymbolKind",
                "Content": "SymbolKind Kind",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ISymbol.Kind\">\r\n    <summary>\r\n    Gets the <see cref=\"T:Microsoft.CodeAnalysis.SymbolKind\"/> indicating what kind of symbol it is.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 21
              },
              "Id": "P:Microsoft.CodeAnalysis.ISymbol.Kind",
              "Parent": "T:Microsoft.CodeAnalysis.ISymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ISymbol.Kind\">\r\n    <summary>\r\n    Gets the <see cref=\"T:Microsoft.CodeAnalysis.SymbolKind\"/> indicating what kind of symbol it is.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.String",
                "Content": "string Language",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ISymbol.Language\">\r\n    <summary>\r\n    Gets the source language (\"C#\" or \"Visual Basic\").\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 26
              },
              "Syntax": {
                "PropertyType": "T:System.String",
                "Content": "string Language",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ISymbol.Language\">\r\n    <summary>\r\n    Gets the source language (\"C#\" or \"Visual Basic\").\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 26
              },
              "Id": "P:Microsoft.CodeAnalysis.ISymbol.Language",
              "Parent": "T:Microsoft.CodeAnalysis.ISymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ISymbol.Language\">\r\n    <summary>\r\n    Gets the source language (\"C#\" or \"Visual Basic\").\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Location}",
                "Content": "ImmutableArray<Location> Locations",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ISymbol.Locations\">\r\n    <summary>\r\n    Gets the locations where the symbol was originally defined, either in source or\r\n    metadata. Some symbols (for example, partial classes) may be defined in more than one\r\n    location.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 140
              },
              "Syntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Location}",
                "Content": "ImmutableArray<Location> Locations",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ISymbol.Locations\">\r\n    <summary>\r\n    Gets the locations where the symbol was originally defined, either in source or\r\n    metadata. Some symbols (for example, partial classes) may be defined in more than one\r\n    location.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 140
              },
              "Id": "P:Microsoft.CodeAnalysis.ISymbol.Locations",
              "Parent": "T:Microsoft.CodeAnalysis.ISymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ISymbol.Locations\">\r\n    <summary>\r\n    Gets the locations where the symbol was originally defined, either in source or\r\n    metadata. Some symbols (for example, partial classes) may be defined in more than one\r\n    location.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.String",
                "Content": "string MetadataName",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ISymbol.MetadataName\">\r\n    <summary>\r\n    Gets the name of a symbol as it appears in metadata. Most of the time, this\r\n    is the same as the Name property, with the following exceptions:\r\n    1) The metadata name of generic types includes the \"`1\", \"`2\" etc. suffix that\r\n    indicates the number of type parameters (it does not include, however, names of\r\n    containing types or namespaces).\r\n    2) The metadata name of explicit interface names have spaces removed, compared to\r\n    the name property.\r\n    3) The length of names is limited to not exceed metadata restrictions.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 43
              },
              "Syntax": {
                "PropertyType": "T:System.String",
                "Content": "string MetadataName",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ISymbol.MetadataName\">\r\n    <summary>\r\n    Gets the name of a symbol as it appears in metadata. Most of the time, this\r\n    is the same as the Name property, with the following exceptions:\r\n    1) The metadata name of generic types includes the \"`1\", \"`2\" etc. suffix that\r\n    indicates the number of type parameters (it does not include, however, names of\r\n    containing types or namespaces).\r\n    2) The metadata name of explicit interface names have spaces removed, compared to\r\n    the name property.\r\n    3) The length of names is limited to not exceed metadata restrictions.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 43
              },
              "Id": "P:Microsoft.CodeAnalysis.ISymbol.MetadataName",
              "Parent": "T:Microsoft.CodeAnalysis.ISymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ISymbol.MetadataName\">\r\n    <summary>\r\n    Gets the name of a symbol as it appears in metadata. Most of the time, this\r\n    is the same as the Name property, with the following exceptions:\r\n    1) The metadata name of generic types includes the \"`1\", \"`2\" etc. suffix that\r\n    indicates the number of type parameters (it does not include, however, names of\r\n    containing types or namespaces).\r\n    2) The metadata name of explicit interface names have spaces removed, compared to\r\n    the name property.\r\n    3) The length of names is limited to not exceed metadata restrictions.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.String",
                "Content": "string Name",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ISymbol.Name\">\r\n    <summary>\r\n    Gets the symbol name. Returns the empty string if unnamed.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 31
              },
              "Syntax": {
                "PropertyType": "T:System.String",
                "Content": "string Name",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ISymbol.Name\">\r\n    <summary>\r\n    Gets the symbol name. Returns the empty string if unnamed.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 31
              },
              "Id": "P:Microsoft.CodeAnalysis.ISymbol.Name",
              "Parent": "T:Microsoft.CodeAnalysis.ISymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ISymbol.Name\">\r\n    <summary>\r\n    Gets the symbol name. Returns the empty string if unnamed.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.ISymbol",
                "Content": "ISymbol OriginalDefinition",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ISymbol.OriginalDefinition\">\r\n    <summary>\r\n    Gets the <see cref=\"T:Microsoft.CodeAnalysis.ISymbol\"/> for the original definition of the symbol.\r\n    If this symbol is derived from another symbol, by type substitution for instance,\r\n    this gets the original symbol, as it was defined in source or metadata.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 176
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.ISymbol",
                "Content": "ISymbol OriginalDefinition",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ISymbol.OriginalDefinition\">\r\n    <summary>\r\n    Gets the <see cref=\"T:Microsoft.CodeAnalysis.ISymbol\"/> for the original definition of the symbol.\r\n    If this symbol is derived from another symbol, by type substitution for instance,\r\n    this gets the original symbol, as it was defined in source or metadata.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 176
              },
              "Id": "P:Microsoft.CodeAnalysis.ISymbol.OriginalDefinition",
              "Parent": "T:Microsoft.CodeAnalysis.ISymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ISymbol.OriginalDefinition\">\r\n    <summary>\r\n    Gets the <see cref=\"T:Microsoft.CodeAnalysis.ISymbol\"/> for the original definition of the symbol.\r\n    If this symbol is derived from another symbol, by type substitution for instance,\r\n    this gets the original symbol, as it was defined in source or metadata.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            8,
            9,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Symbols\\ISymbol.cs",
          "InheritanceHierarchy": [],
          "Syntax": {
            "Content": "public interface ISymbol",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.ISymbol\">\r\n    <summary>\r\n    Represents a symbol (namespace, class, method, parameter, etc.)\r\n    exposed by the compiler.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.ISymbol",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.ISymbol\">\r\n    <summary>\r\n    Represents a symbol (namespace, class, method, parameter, etc.)\r\n    exposed by the compiler.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ITypeSymbol}",
                "Content": "ImmutableArray<ITypeSymbol> ConstraintTypes",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ITypeParameterSymbol.ConstraintTypes\">\r\n    <summary>\r\n    The types that were directly specified as constraints on the type parameter.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 56
              },
              "Syntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ITypeSymbol}",
                "Content": "ImmutableArray<ITypeSymbol> ConstraintTypes",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ITypeParameterSymbol.ConstraintTypes\">\r\n    <summary>\r\n    The types that were directly specified as constraints on the type parameter.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 56
              },
              "Id": "P:Microsoft.CodeAnalysis.ITypeParameterSymbol.ConstraintTypes",
              "Parent": "T:Microsoft.CodeAnalysis.ITypeParameterSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ITypeParameterSymbol.ConstraintTypes\">\r\n    <summary>\r\n    The types that were directly specified as constraints on the type parameter.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.IMethodSymbol",
                "Content": "IMethodSymbol DeclaringMethod",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ITypeParameterSymbol.DeclaringMethod\">\r\n    <summary>\r\n    The method that declares the type parameter, or null.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 31
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.IMethodSymbol",
                "Content": "IMethodSymbol DeclaringMethod",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ITypeParameterSymbol.DeclaringMethod\">\r\n    <summary>\r\n    The method that declares the type parameter, or null.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 31
              },
              "Id": "P:Microsoft.CodeAnalysis.ITypeParameterSymbol.DeclaringMethod",
              "Parent": "T:Microsoft.CodeAnalysis.ITypeParameterSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ITypeParameterSymbol.DeclaringMethod\">\r\n    <summary>\r\n    The method that declares the type parameter, or null.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.INamedTypeSymbol",
                "Content": "INamedTypeSymbol DeclaringType",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ITypeParameterSymbol.DeclaringType\">\r\n    <summary>\r\n    The type that declares the type parameter, or null.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 36
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.INamedTypeSymbol",
                "Content": "INamedTypeSymbol DeclaringType",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ITypeParameterSymbol.DeclaringType\">\r\n    <summary>\r\n    The type that declares the type parameter, or null.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 36
              },
              "Id": "P:Microsoft.CodeAnalysis.ITypeParameterSymbol.DeclaringType",
              "Parent": "T:Microsoft.CodeAnalysis.ITypeParameterSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ITypeParameterSymbol.DeclaringType\">\r\n    <summary>\r\n    The type that declares the type parameter, or null.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool HasConstructorConstraint",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ITypeParameterSymbol.HasConstructorConstraint\">\r\n    <summary>\r\n    True if the parameterless constructor constraint (<c>new()</c>) was specified for the type parameter.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 51
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool HasConstructorConstraint",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ITypeParameterSymbol.HasConstructorConstraint\">\r\n    <summary>\r\n    True if the parameterless constructor constraint (<c>new()</c>) was specified for the type parameter.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 51
              },
              "Id": "P:Microsoft.CodeAnalysis.ITypeParameterSymbol.HasConstructorConstraint",
              "Parent": "T:Microsoft.CodeAnalysis.ITypeParameterSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ITypeParameterSymbol.HasConstructorConstraint\">\r\n    <summary>\r\n    True if the parameterless constructor constraint (<c>new()</c>) was specified for the type parameter.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool HasReferenceTypeConstraint",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ITypeParameterSymbol.HasReferenceTypeConstraint\">\r\n    <summary>\r\n    True if the reference type constraint (<c>class</c>) was specified for the type parameter.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 41
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool HasReferenceTypeConstraint",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ITypeParameterSymbol.HasReferenceTypeConstraint\">\r\n    <summary>\r\n    True if the reference type constraint (<c>class</c>) was specified for the type parameter.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 41
              },
              "Id": "P:Microsoft.CodeAnalysis.ITypeParameterSymbol.HasReferenceTypeConstraint",
              "Parent": "T:Microsoft.CodeAnalysis.ITypeParameterSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ITypeParameterSymbol.HasReferenceTypeConstraint\">\r\n    <summary>\r\n    True if the reference type constraint (<c>class</c>) was specified for the type parameter.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool HasValueTypeConstraint",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ITypeParameterSymbol.HasValueTypeConstraint\">\r\n    <summary>\r\n    True if the value type constraint (<c>struct</c>)was specified for the type parameter.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 46
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool HasValueTypeConstraint",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ITypeParameterSymbol.HasValueTypeConstraint\">\r\n    <summary>\r\n    True if the value type constraint (<c>struct</c>)was specified for the type parameter.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 46
              },
              "Id": "P:Microsoft.CodeAnalysis.ITypeParameterSymbol.HasValueTypeConstraint",
              "Parent": "T:Microsoft.CodeAnalysis.ITypeParameterSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ITypeParameterSymbol.HasValueTypeConstraint\">\r\n    <summary>\r\n    True if the value type constraint (<c>struct</c>)was specified for the type parameter.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Int32",
                "Content": "int Ordinal",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ITypeParameterSymbol.Ordinal\">\r\n    <summary>\r\n    The ordinal position of the type parameter in the parameter list which declares\r\n    it. The first type parameter has ordinal zero.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 15
              },
              "Syntax": {
                "PropertyType": "T:System.Int32",
                "Content": "int Ordinal",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ITypeParameterSymbol.Ordinal\">\r\n    <summary>\r\n    The ordinal position of the type parameter in the parameter list which declares\r\n    it. The first type parameter has ordinal zero.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 15
              },
              "Id": "P:Microsoft.CodeAnalysis.ITypeParameterSymbol.Ordinal",
              "Parent": "T:Microsoft.CodeAnalysis.ITypeParameterSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ITypeParameterSymbol.Ordinal\">\r\n    <summary>\r\n    The ordinal position of the type parameter in the parameter list which declares\r\n    it. The first type parameter has ordinal zero.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.ITypeParameterSymbol",
                "Content": "new ITypeParameterSymbol OriginalDefinition",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ITypeParameterSymbol.OriginalDefinition\">\r\n    <summary>\r\n    Get the original definition of this type symbol. If this symbol is derived from another\r\n    symbol by (say) type substitution, this gets the original symbol, as it was defined in\r\n    source or metadata.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 63
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.ITypeParameterSymbol",
                "Content": "new ITypeParameterSymbol OriginalDefinition",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ITypeParameterSymbol.OriginalDefinition\">\r\n    <summary>\r\n    Get the original definition of this type symbol. If this symbol is derived from another\r\n    symbol by (say) type substitution, this gets the original symbol, as it was defined in\r\n    source or metadata.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 63
              },
              "Id": "P:Microsoft.CodeAnalysis.ITypeParameterSymbol.OriginalDefinition",
              "Parent": "T:Microsoft.CodeAnalysis.ITypeParameterSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ITypeParameterSymbol.OriginalDefinition\">\r\n    <summary>\r\n    Get the original definition of this type symbol. If this symbol is derived from another\r\n    symbol by (say) type substitution, this gets the original symbol, as it was defined in\r\n    source or metadata.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.ITypeParameterSymbol",
                "Content": "ITypeParameterSymbol ReducedFrom",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ITypeParameterSymbol.ReducedFrom\">\r\n    <summary>\r\n    If this is a type parameter of a reduced extension method, gets the type parameter definition that\r\n    this type parameter was reduced from. Otherwise, returns Nothing.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 69
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.ITypeParameterSymbol",
                "Content": "ITypeParameterSymbol ReducedFrom",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ITypeParameterSymbol.ReducedFrom\">\r\n    <summary>\r\n    If this is a type parameter of a reduced extension method, gets the type parameter definition that\r\n    this type parameter was reduced from. Otherwise, returns Nothing.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 69
              },
              "Id": "P:Microsoft.CodeAnalysis.ITypeParameterSymbol.ReducedFrom",
              "Parent": "T:Microsoft.CodeAnalysis.ITypeParameterSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ITypeParameterSymbol.ReducedFrom\">\r\n    <summary>\r\n    If this is a type parameter of a reduced extension method, gets the type parameter definition that\r\n    this type parameter was reduced from. Otherwise, returns Nothing.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.TypeParameterKind",
                "Content": "TypeParameterKind TypeParameterKind",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ITypeParameterSymbol.TypeParameterKind\">\r\n    <summary>\r\n    The type parameter kind of this type parameter.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 26
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.TypeParameterKind",
                "Content": "TypeParameterKind TypeParameterKind",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ITypeParameterSymbol.TypeParameterKind\">\r\n    <summary>\r\n    The type parameter kind of this type parameter.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 26
              },
              "Id": "P:Microsoft.CodeAnalysis.ITypeParameterSymbol.TypeParameterKind",
              "Parent": "T:Microsoft.CodeAnalysis.ITypeParameterSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ITypeParameterSymbol.TypeParameterKind\">\r\n    <summary>\r\n    The type parameter kind of this type parameter.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.VarianceKind",
                "Content": "VarianceKind Variance",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ITypeParameterSymbol.Variance\">\r\n    <summary>\r\n    The variance annotation, if any, of the type parameter declaration. Type parameters may be \r\n    declared as covariant (<c>out</c>), contravariant (<c>in</c>), or neither.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 21
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.VarianceKind",
                "Content": "VarianceKind Variance",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ITypeParameterSymbol.Variance\">\r\n    <summary>\r\n    The variance annotation, if any, of the type parameter declaration. Type parameters may be \r\n    declared as covariant (<c>out</c>), contravariant (<c>in</c>), or neither.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 21
              },
              "Id": "P:Microsoft.CodeAnalysis.ITypeParameterSymbol.Variance",
              "Parent": "T:Microsoft.CodeAnalysis.ITypeParameterSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ITypeParameterSymbol.Variance\">\r\n    <summary>\r\n    The variance annotation, if any, of the type parameter declaration. Type parameters may be \r\n    declared as covariant (<c>out</c>), contravariant (<c>in</c>), or neither.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            8,
            9,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Symbols\\ITypeParameterSymbol.cs",
          "InheritanceHierarchy": [],
          "Syntax": {
            "Content": "public interface ITypeParameterSymbol",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.ITypeParameterSymbol\">\r\n    <summary>\r\n    Represents a type parameter in a generic type or generic method.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.ITypeParameterSymbol",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.ITypeParameterSymbol\">\r\n    <summary>\r\n    Represents a type parameter in a generic type or generic method.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.ISymbol : interfaceMember": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.ISymbol": ""
                },
                "Content": "ISymbol FindImplementationForInterfaceMember(ISymbol interfaceMember);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ITypeSymbol.FindImplementationForInterfaceMember(Microsoft.CodeAnalysis.ISymbol)\">\r\n    <summary>\r\n    Returns the corresponding symbol in this type or a base type that implements \r\n    interfaceMember (either implicitly or explicitly), or null if no such symbol exists\r\n    (which might be either because this type doesn't implement the container of\r\n    interfaceMember, or this type doesn't supply a member that successfully implements\r\n    interfaceMember).\r\n    </summary>\r\n    <param name=\"interfaceMember\">\r\n    Must be a non-null interface property, method, or event.\r\n    </param>\r\n</member>\r\n",
                "StartLine": 82
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.ISymbol : interfaceMember": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.ISymbol": ""
                },
                "Content": "ISymbol FindImplementationForInterfaceMember(ISymbol interfaceMember);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ITypeSymbol.FindImplementationForInterfaceMember(Microsoft.CodeAnalysis.ISymbol)\">\r\n    <summary>\r\n    Returns the corresponding symbol in this type or a base type that implements \r\n    interfaceMember (either implicitly or explicitly), or null if no such symbol exists\r\n    (which might be either because this type doesn't implement the container of\r\n    interfaceMember, or this type doesn't supply a member that successfully implements\r\n    interfaceMember).\r\n    </summary>\r\n    <param name=\"interfaceMember\">\r\n    Must be a non-null interface property, method, or event.\r\n    </param>\r\n</member>\r\n",
                "StartLine": 82
              },
              "Id": "M:Microsoft.CodeAnalysis.ITypeSymbol.FindImplementationForInterfaceMember(Microsoft.CodeAnalysis.ISymbol)",
              "Parent": "T:Microsoft.CodeAnalysis.ITypeSymbol",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ITypeSymbol.FindImplementationForInterfaceMember(Microsoft.CodeAnalysis.ISymbol)\">\r\n    <summary>\r\n    Returns the corresponding symbol in this type or a base type that implements \r\n    interfaceMember (either implicitly or explicitly), or null if no such symbol exists\r\n    (which might be either because this type doesn't implement the container of\r\n    interfaceMember, or this type doesn't supply a member that successfully implements\r\n    interfaceMember).\r\n    </summary>\r\n    <param name=\"interfaceMember\">\r\n    Must be a non-null interface property, method, or event.\r\n    </param>\r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.INamedTypeSymbol}",
                "Content": "ImmutableArray<INamedTypeSymbol> AllInterfaces",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ITypeSymbol.AllInterfaces\">\r\n    <summary>\r\n    The list of all interfaces of which this type is a declared subtype, excluding this type\r\n    itself. This includes all declared base interfaces, all declared base interfaces of base\r\n    types, and all declared base interfaces of those results (recursively). This also is the effective\r\n    interface set of a type parameter. Each result\r\n    appears exactly once in the list. This list is topologically sorted by the inheritance\r\n    relationship: if interface type A extends interface type B, then A precedes B in the\r\n    list. This is not quite the same as \"all interfaces of which this type is a proper\r\n    subtype\" because it does not take into account variance: AllInterfaces for\r\n    <c><![CDATA[IEnumerable<string>]]></c> will not include <c><![CDATA[IEnumerable<object>]]></c>;\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 38
              },
              "Syntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.INamedTypeSymbol}",
                "Content": "ImmutableArray<INamedTypeSymbol> AllInterfaces",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ITypeSymbol.AllInterfaces\">\r\n    <summary>\r\n    The list of all interfaces of which this type is a declared subtype, excluding this type\r\n    itself. This includes all declared base interfaces, all declared base interfaces of base\r\n    types, and all declared base interfaces of those results (recursively). This also is the effective\r\n    interface set of a type parameter. Each result\r\n    appears exactly once in the list. This list is topologically sorted by the inheritance\r\n    relationship: if interface type A extends interface type B, then A precedes B in the\r\n    list. This is not quite the same as \"all interfaces of which this type is a proper\r\n    subtype\" because it does not take into account variance: AllInterfaces for\r\n    <c><![CDATA[IEnumerable<string>]]></c> will not include <c><![CDATA[IEnumerable<object>]]></c>;\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 38
              },
              "Id": "P:Microsoft.CodeAnalysis.ITypeSymbol.AllInterfaces",
              "Parent": "T:Microsoft.CodeAnalysis.ITypeSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ITypeSymbol.AllInterfaces\">\r\n    <summary>\r\n    The list of all interfaces of which this type is a declared subtype, excluding this type\r\n    itself. This includes all declared base interfaces, all declared base interfaces of base\r\n    types, and all declared base interfaces of those results (recursively). This also is the effective\r\n    interface set of a type parameter. Each result\r\n    appears exactly once in the list. This list is topologically sorted by the inheritance\r\n    relationship: if interface type A extends interface type B, then A precedes B in the\r\n    list. This is not quite the same as \"all interfaces of which this type is a proper\r\n    subtype\" because it does not take into account variance: AllInterfaces for\r\n    <c><![CDATA[IEnumerable<string>]]></c> will not include <c><![CDATA[IEnumerable<object>]]></c>;\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.INamedTypeSymbol",
                "Content": "INamedTypeSymbol BaseType",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ITypeSymbol.BaseType\">\r\n    <summary>\r\n    The declared base type of this type, or null. The object type, interface types,\r\n    and pointer types do not have a base type. The base type of a type parameter\r\n    is its effective base class.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 18
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.INamedTypeSymbol",
                "Content": "INamedTypeSymbol BaseType",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ITypeSymbol.BaseType\">\r\n    <summary>\r\n    The declared base type of this type, or null. The object type, interface types,\r\n    and pointer types do not have a base type. The base type of a type parameter\r\n    is its effective base class.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 18
              },
              "Id": "P:Microsoft.CodeAnalysis.ITypeSymbol.BaseType",
              "Parent": "T:Microsoft.CodeAnalysis.ITypeSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ITypeSymbol.BaseType\">\r\n    <summary>\r\n    The declared base type of this type, or null. The object type, interface types,\r\n    and pointer types do not have a base type. The base type of a type parameter\r\n    is its effective base class.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.INamedTypeSymbol}",
                "Content": "ImmutableArray<INamedTypeSymbol> Interfaces",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ITypeSymbol.Interfaces\">\r\n    <summary>\r\n    Gets the set of interfaces that this type directly implements. This set does not include\r\n    interfaces that are base interfaces of directly implemented interfaces. This does\r\n    include the interfaces declared as constraints on type parameters.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 25
              },
              "Syntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.INamedTypeSymbol}",
                "Content": "ImmutableArray<INamedTypeSymbol> Interfaces",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ITypeSymbol.Interfaces\">\r\n    <summary>\r\n    Gets the set of interfaces that this type directly implements. This set does not include\r\n    interfaces that are base interfaces of directly implemented interfaces. This does\r\n    include the interfaces declared as constraints on type parameters.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 25
              },
              "Id": "P:Microsoft.CodeAnalysis.ITypeSymbol.Interfaces",
              "Parent": "T:Microsoft.CodeAnalysis.ITypeSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ITypeSymbol.Interfaces\">\r\n    <summary>\r\n    Gets the set of interfaces that this type directly implements. This set does not include\r\n    interfaces that are base interfaces of directly implemented interfaces. This does\r\n    include the interfaces declared as constraints on type parameters.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool IsAnonymousType",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ITypeSymbol.IsAnonymousType\">\r\n    <summary>\r\n    Is this a symbol for an anonymous type (including anonymous VB delegate).\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 57
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool IsAnonymousType",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ITypeSymbol.IsAnonymousType\">\r\n    <summary>\r\n    Is this a symbol for an anonymous type (including anonymous VB delegate).\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 57
              },
              "Id": "P:Microsoft.CodeAnalysis.ITypeSymbol.IsAnonymousType",
              "Parent": "T:Microsoft.CodeAnalysis.ITypeSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ITypeSymbol.IsAnonymousType\">\r\n    <summary>\r\n    Is this a symbol for an anonymous type (including anonymous VB delegate).\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool IsReferenceType",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ITypeSymbol.IsReferenceType\">\r\n    <summary>\r\n    True if this type is known to be a reference type. It is never the case that\r\n    <see cref=\"P:Microsoft.CodeAnalysis.ITypeSymbol.IsReferenceType\"/> and <see cref=\"P:Microsoft.CodeAnalysis.ITypeSymbol.IsValueType\"/> both return true. However, for an unconstrained type\r\n    parameter, <see cref=\"P:Microsoft.CodeAnalysis.ITypeSymbol.IsReferenceType\"/> and <see cref=\"P:Microsoft.CodeAnalysis.ITypeSymbol.IsValueType\"/> will both return false.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 45
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool IsReferenceType",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ITypeSymbol.IsReferenceType\">\r\n    <summary>\r\n    True if this type is known to be a reference type. It is never the case that\r\n    <see cref=\"P:Microsoft.CodeAnalysis.ITypeSymbol.IsReferenceType\"/> and <see cref=\"P:Microsoft.CodeAnalysis.ITypeSymbol.IsValueType\"/> both return true. However, for an unconstrained type\r\n    parameter, <see cref=\"P:Microsoft.CodeAnalysis.ITypeSymbol.IsReferenceType\"/> and <see cref=\"P:Microsoft.CodeAnalysis.ITypeSymbol.IsValueType\"/> will both return false.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 45
              },
              "Id": "P:Microsoft.CodeAnalysis.ITypeSymbol.IsReferenceType",
              "Parent": "T:Microsoft.CodeAnalysis.ITypeSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ITypeSymbol.IsReferenceType\">\r\n    <summary>\r\n    True if this type is known to be a reference type. It is never the case that\r\n    <see cref=\"P:Microsoft.CodeAnalysis.ITypeSymbol.IsReferenceType\"/> and <see cref=\"P:Microsoft.CodeAnalysis.ITypeSymbol.IsValueType\"/> both return true. However, for an unconstrained type\r\n    parameter, <see cref=\"P:Microsoft.CodeAnalysis.ITypeSymbol.IsReferenceType\"/> and <see cref=\"P:Microsoft.CodeAnalysis.ITypeSymbol.IsValueType\"/> will both return false.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool IsValueType",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ITypeSymbol.IsValueType\">\r\n    <summary>\r\n    True if this type is known to be a value type. It is never the case that\r\n    <see cref=\"P:Microsoft.CodeAnalysis.ITypeSymbol.IsReferenceType\"/> and <see cref=\"P:Microsoft.CodeAnalysis.ITypeSymbol.IsValueType\"/> both return true. However, for an unconstrained type\r\n    parameter, <see cref=\"P:Microsoft.CodeAnalysis.ITypeSymbol.IsReferenceType\"/> and <see cref=\"P:Microsoft.CodeAnalysis.ITypeSymbol.IsValueType\"/> will both return false.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 52
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "bool IsValueType",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ITypeSymbol.IsValueType\">\r\n    <summary>\r\n    True if this type is known to be a value type. It is never the case that\r\n    <see cref=\"P:Microsoft.CodeAnalysis.ITypeSymbol.IsReferenceType\"/> and <see cref=\"P:Microsoft.CodeAnalysis.ITypeSymbol.IsValueType\"/> both return true. However, for an unconstrained type\r\n    parameter, <see cref=\"P:Microsoft.CodeAnalysis.ITypeSymbol.IsReferenceType\"/> and <see cref=\"P:Microsoft.CodeAnalysis.ITypeSymbol.IsValueType\"/> will both return false.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 52
              },
              "Id": "P:Microsoft.CodeAnalysis.ITypeSymbol.IsValueType",
              "Parent": "T:Microsoft.CodeAnalysis.ITypeSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ITypeSymbol.IsValueType\">\r\n    <summary>\r\n    True if this type is known to be a value type. It is never the case that\r\n    <see cref=\"P:Microsoft.CodeAnalysis.ITypeSymbol.IsReferenceType\"/> and <see cref=\"P:Microsoft.CodeAnalysis.ITypeSymbol.IsValueType\"/> both return true. However, for an unconstrained type\r\n    parameter, <see cref=\"P:Microsoft.CodeAnalysis.ITypeSymbol.IsReferenceType\"/> and <see cref=\"P:Microsoft.CodeAnalysis.ITypeSymbol.IsValueType\"/> will both return false.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.ITypeSymbol",
                "Content": "new ITypeSymbol OriginalDefinition",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ITypeSymbol.OriginalDefinition\">\r\n    <summary>\r\n    The original definition of this symbol. If this symbol is constructed from another\r\n    symbol by type substitution then <see cref=\"P:Microsoft.CodeAnalysis.ITypeSymbol.OriginalDefinition\"/> gets the original symbol as it was defined in\r\n    source or metadata.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 64
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.ITypeSymbol",
                "Content": "new ITypeSymbol OriginalDefinition",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ITypeSymbol.OriginalDefinition\">\r\n    <summary>\r\n    The original definition of this symbol. If this symbol is constructed from another\r\n    symbol by type substitution then <see cref=\"P:Microsoft.CodeAnalysis.ITypeSymbol.OriginalDefinition\"/> gets the original symbol as it was defined in\r\n    source or metadata.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 64
              },
              "Id": "P:Microsoft.CodeAnalysis.ITypeSymbol.OriginalDefinition",
              "Parent": "T:Microsoft.CodeAnalysis.ITypeSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ITypeSymbol.OriginalDefinition\">\r\n    <summary>\r\n    The original definition of this symbol. If this symbol is constructed from another\r\n    symbol by type substitution then <see cref=\"P:Microsoft.CodeAnalysis.ITypeSymbol.OriginalDefinition\"/> gets the original symbol as it was defined in\r\n    source or metadata.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SpecialType",
                "Content": "SpecialType SpecialType",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ITypeSymbol.SpecialType\">\r\n    <summary>\r\n    An enumerated value that identifies certain 'special' types such as <see cref=\"T:System.Object\"/>. \r\n    Returns <see cref=\"F:Microsoft.CodeAnalysis.SpecialType.None\"/> if the type is not special.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 70
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SpecialType",
                "Content": "SpecialType SpecialType",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ITypeSymbol.SpecialType\">\r\n    <summary>\r\n    An enumerated value that identifies certain 'special' types such as <see cref=\"T:System.Object\"/>. \r\n    Returns <see cref=\"F:Microsoft.CodeAnalysis.SpecialType.None\"/> if the type is not special.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 70
              },
              "Id": "P:Microsoft.CodeAnalysis.ITypeSymbol.SpecialType",
              "Parent": "T:Microsoft.CodeAnalysis.ITypeSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ITypeSymbol.SpecialType\">\r\n    <summary>\r\n    An enumerated value that identifies certain 'special' types such as <see cref=\"T:System.Object\"/>. \r\n    Returns <see cref=\"F:Microsoft.CodeAnalysis.SpecialType.None\"/> if the type is not special.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.TypeKind",
                "Content": "TypeKind TypeKind",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ITypeSymbol.TypeKind\">\r\n    <summary>\r\n    An enumerated value that identifies whether this type is an array, pointer, enum, and so on.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 11
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.TypeKind",
                "Content": "TypeKind TypeKind",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ITypeSymbol.TypeKind\">\r\n    <summary>\r\n    An enumerated value that identifies whether this type is an array, pointer, enum, and so on.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 11
              },
              "Id": "P:Microsoft.CodeAnalysis.ITypeSymbol.TypeKind",
              "Parent": "T:Microsoft.CodeAnalysis.ITypeSymbol",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ITypeSymbol.TypeKind\">\r\n    <summary>\r\n    An enumerated value that identifies whether this type is an array, pointer, enum, and so on.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            8,
            9,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Symbols\\ITypeSymbol.cs",
          "InheritanceHierarchy": [],
          "Syntax": {
            "Content": "public interface ITypeSymbol",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.CodeAnalysis.ITypeSymbol",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": ""
        }
      ],
      "Structs": [
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool Any()",
                "XmlDocumentation": "",
                "StartLine": 304
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool Any()",
                "XmlDocumentation": "",
                "StartLine": 304
              },
              "Id": "M:Microsoft.CodeAnalysis.ChildSyntaxList.Any",
              "Parent": "T:Microsoft.CodeAnalysis.ChildSyntaxList",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.ChildSyntaxList : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool Equals(ChildSyntaxList other)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ChildSyntaxList.Equals(Microsoft.CodeAnalysis.ChildSyntaxList)\">\r\n    <summary>Determines whether the specified <see cref=\"T:Microsoft.CodeAnalysis.ChildSyntaxList\" /> structure is equal to the current instance.</summary>\r\n    <returns>true if the specified <see cref=\"T:Microsoft.CodeAnalysis.ChildSyntaxList\" /> structure is equal to the current instance; otherwise, false.</returns>\r\n    <param name=\"other\">The <see cref=\"T:Microsoft.CodeAnalysis.ChildSyntaxList\" /> structure to be compared with the current instance.</param>\r\n</member>\r\n",
                "StartLine": 391
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.ChildSyntaxList : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool Equals(ChildSyntaxList other)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ChildSyntaxList.Equals(Microsoft.CodeAnalysis.ChildSyntaxList)\">\r\n    <summary>Determines whether the specified <see cref=\"T:Microsoft.CodeAnalysis.ChildSyntaxList\" /> structure is equal to the current instance.</summary>\r\n    <returns>true if the specified <see cref=\"T:Microsoft.CodeAnalysis.ChildSyntaxList\" /> structure is equal to the current instance; otherwise, false.</returns>\r\n    <param name=\"other\">The <see cref=\"T:Microsoft.CodeAnalysis.ChildSyntaxList\" /> structure to be compared with the current instance.</param>\r\n</member>\r\n",
                "StartLine": 391
              },
              "Id": "M:Microsoft.CodeAnalysis.ChildSyntaxList.Equals(Microsoft.CodeAnalysis.ChildSyntaxList)",
              "Parent": "T:Microsoft.CodeAnalysis.ChildSyntaxList",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ChildSyntaxList.Equals(Microsoft.CodeAnalysis.ChildSyntaxList)\">\r\n    <summary>Determines whether the specified <see cref=\"T:Microsoft.CodeAnalysis.ChildSyntaxList\" /> structure is equal to the current instance.</summary>\r\n    <returns>true if the specified <see cref=\"T:Microsoft.CodeAnalysis.ChildSyntaxList\" /> structure is equal to the current instance; otherwise, false.</returns>\r\n    <param name=\"other\">The <see cref=\"T:Microsoft.CodeAnalysis.ChildSyntaxList\" /> structure to be compared with the current instance.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Object : obj": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public override bool Equals(object obj)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ChildSyntaxList.Equals(System.Object)\">\r\n    <summary>Determines whether the specified object is equal to the current instance.</summary>\r\n    <returns>true if the specified object is a <see cref=\"T:Microsoft.CodeAnalysis.ChildSyntaxList\" /> structure and is equal to the current instance; otherwise, false.</returns>\r\n    <param name=\"obj\">The object to be compared with the current instance.</param>\r\n</member>\r\n",
                "StartLine": 383
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Object : obj": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public override bool Equals(object obj)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ChildSyntaxList.Equals(System.Object)\">\r\n    <summary>Determines whether the specified object is equal to the current instance.</summary>\r\n    <returns>true if the specified object is a <see cref=\"T:Microsoft.CodeAnalysis.ChildSyntaxList\" /> structure and is equal to the current instance; otherwise, false.</returns>\r\n    <param name=\"obj\">The object to be compared with the current instance.</param>\r\n</member>\r\n",
                "StartLine": 383
              },
              "Id": "M:Microsoft.CodeAnalysis.ChildSyntaxList.Equals(System.Object)",
              "Parent": "T:Microsoft.CodeAnalysis.ChildSyntaxList",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ChildSyntaxList.Equals(System.Object)\">\r\n    <summary>Determines whether the specified object is equal to the current instance.</summary>\r\n    <returns>true if the specified object is a <see cref=\"T:Microsoft.CodeAnalysis.ChildSyntaxList\" /> structure and is equal to the current instance; otherwise, false.</returns>\r\n    <param name=\"obj\">The object to be compared with the current instance.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken": ""
                },
                "Content": "public SyntaxNodeOrToken First()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ChildSyntaxList.First\">\r\n    <summary>\r\n    Returns the first child in the list.\r\n    </summary>\r\n    <returns>The first child in the list.</returns>\r\n    <exception cref=\"T:System.InvalidOperationException\">The list is empty.</exception>    \r\n</member>\r\n",
                "StartLine": 314
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken": ""
                },
                "Content": "public SyntaxNodeOrToken First()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ChildSyntaxList.First\">\r\n    <summary>\r\n    Returns the first child in the list.\r\n    </summary>\r\n    <returns>The first child in the list.</returns>\r\n    <exception cref=\"T:System.InvalidOperationException\">The list is empty.</exception>    \r\n</member>\r\n",
                "StartLine": 314
              },
              "Id": "M:Microsoft.CodeAnalysis.ChildSyntaxList.First",
              "Parent": "T:Microsoft.CodeAnalysis.ChildSyntaxList",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ChildSyntaxList.First\">\r\n    <summary>\r\n    Returns the first child in the list.\r\n    </summary>\r\n    <returns>The first child in the list.</returns>\r\n    <exception cref=\"T:System.InvalidOperationException\">The list is empty.</exception>    \r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.ChildSyntaxList.Enumerator": ""
                },
                "Content": "public Enumerator GetEnumerator()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ChildSyntaxList.GetEnumerator\">\r\n    <summary>Returns an enumerator that iterates through the <see cref=\"T:Microsoft.CodeAnalysis.ChildSyntaxList\"/>.</summary>\r\n    <returns>A <see cref=\"T:Microsoft.CodeAnalysis.ChildSyntaxList.Enumerator\"/> for the <see cref=\"T:Microsoft.CodeAnalysis.ChildSyntaxList\"/>.</returns>\r\n</member>\r\n",
                "StartLine": 350
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.ChildSyntaxList.Enumerator": ""
                },
                "Content": "public Enumerator GetEnumerator()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ChildSyntaxList.GetEnumerator\">\r\n    <summary>Returns an enumerator that iterates through the <see cref=\"T:Microsoft.CodeAnalysis.ChildSyntaxList\"/>.</summary>\r\n    <returns>A <see cref=\"T:Microsoft.CodeAnalysis.ChildSyntaxList.Enumerator\"/> for the <see cref=\"T:Microsoft.CodeAnalysis.ChildSyntaxList\"/>.</returns>\r\n</member>\r\n",
                "StartLine": 350
              },
              "Id": "M:Microsoft.CodeAnalysis.ChildSyntaxList.GetEnumerator",
              "Parent": "T:Microsoft.CodeAnalysis.ChildSyntaxList",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ChildSyntaxList.GetEnumerator\">\r\n    <summary>Returns an enumerator that iterates through the <see cref=\"T:Microsoft.CodeAnalysis.ChildSyntaxList\"/>.</summary>\r\n    <returns>A <see cref=\"T:Microsoft.CodeAnalysis.ChildSyntaxList.Enumerator\"/> for the <see cref=\"T:Microsoft.CodeAnalysis.ChildSyntaxList\"/>.</returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public override int GetHashCode()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ChildSyntaxList.GetHashCode\">\r\n    <summary>Returns the hash code for the current instance.</summary>\r\n    <returns>A 32-bit signed integer hash code.</returns>\r\n</member>\r\n",
                "StartLine": 398
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public override int GetHashCode()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ChildSyntaxList.GetHashCode\">\r\n    <summary>Returns the hash code for the current instance.</summary>\r\n    <returns>A 32-bit signed integer hash code.</returns>\r\n</member>\r\n",
                "StartLine": 398
              },
              "Id": "M:Microsoft.CodeAnalysis.ChildSyntaxList.GetHashCode",
              "Parent": "T:Microsoft.CodeAnalysis.ChildSyntaxList",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ChildSyntaxList.GetHashCode\">\r\n    <summary>Returns the hash code for the current instance.</summary>\r\n    <returns>A 32-bit signed integer hash code.</returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken": ""
                },
                "Content": "public SyntaxNodeOrToken Last()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ChildSyntaxList.Last\">\r\n    <summary>\r\n    Returns the last child in the list.\r\n    </summary>\r\n    <returns>The last child in the list.</returns>\r\n    <exception cref=\"T:System.InvalidOperationException\">The list is empty.</exception>    \r\n</member>\r\n",
                "StartLine": 329
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken": ""
                },
                "Content": "public SyntaxNodeOrToken Last()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ChildSyntaxList.Last\">\r\n    <summary>\r\n    Returns the last child in the list.\r\n    </summary>\r\n    <returns>The last child in the list.</returns>\r\n    <exception cref=\"T:System.InvalidOperationException\">The list is empty.</exception>    \r\n</member>\r\n",
                "StartLine": 329
              },
              "Id": "M:Microsoft.CodeAnalysis.ChildSyntaxList.Last",
              "Parent": "T:Microsoft.CodeAnalysis.ChildSyntaxList",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ChildSyntaxList.Last\">\r\n    <summary>\r\n    Returns the last child in the list.\r\n    </summary>\r\n    <returns>The last child in the list.</returns>\r\n    <exception cref=\"T:System.InvalidOperationException\">The list is empty.</exception>    \r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.ChildSyntaxList.Reversed": ""
                },
                "Content": "public Reversed Reverse()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ChildSyntaxList.Reverse\">\r\n    <summary>\r\n    Returns a list which contains all children of <see cref=\"T:Microsoft.CodeAnalysis.ChildSyntaxList\"/> in reversed order.\r\n    </summary>\r\n    <returns><see cref=\"T:Microsoft.CodeAnalysis.ChildSyntaxList.Reversed\"/> which contains all children of <see cref=\"T:Microsoft.CodeAnalysis.ChildSyntaxList\"/> in reversed order</returns>\r\n</member>\r\n",
                "StartLine": 343
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.ChildSyntaxList.Reversed": ""
                },
                "Content": "public Reversed Reverse()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ChildSyntaxList.Reverse\">\r\n    <summary>\r\n    Returns a list which contains all children of <see cref=\"T:Microsoft.CodeAnalysis.ChildSyntaxList\"/> in reversed order.\r\n    </summary>\r\n    <returns><see cref=\"T:Microsoft.CodeAnalysis.ChildSyntaxList.Reversed\"/> which contains all children of <see cref=\"T:Microsoft.CodeAnalysis.ChildSyntaxList\"/> in reversed order</returns>\r\n</member>\r\n",
                "StartLine": 343
              },
              "Id": "M:Microsoft.CodeAnalysis.ChildSyntaxList.Reverse",
              "Parent": "T:Microsoft.CodeAnalysis.ChildSyntaxList",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.ChildSyntaxList.Reverse\">\r\n    <summary>\r\n    Returns a list which contains all children of <see cref=\"T:Microsoft.CodeAnalysis.ChildSyntaxList\"/> in reversed order.\r\n    </summary>\r\n    <returns><see cref=\"T:Microsoft.CodeAnalysis.ChildSyntaxList.Reversed\"/> which contains all children of <see cref=\"T:Microsoft.CodeAnalysis.ChildSyntaxList\"/> in reversed order</returns>\r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Int32",
                "Content": "public int Count",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ChildSyntaxList.Count\">\r\n    <summary>\r\n    Gets the number of children contained in the <see cref=\"T:Microsoft.CodeAnalysis.ChildSyntaxList\"/>.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 26
              },
              "Syntax": {
                "PropertyType": "T:System.Int32",
                "Content": "public int Count",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ChildSyntaxList.Count\">\r\n    <summary>\r\n    Gets the number of children contained in the <see cref=\"T:Microsoft.CodeAnalysis.ChildSyntaxList\"/>.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 26
              },
              "Id": "P:Microsoft.CodeAnalysis.ChildSyntaxList.Count",
              "Parent": "T:Microsoft.CodeAnalysis.ChildSyntaxList",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.ChildSyntaxList.Count\">\r\n    <summary>\r\n    Gets the number of children contained in the <see cref=\"T:Microsoft.CodeAnalysis.ChildSyntaxList\"/>.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Syntax\\ChildSyntaxList.cs",
          "InheritanceHierarchy": [
            "T:System.Object",
            "T:System.ValueType"
          ],
          "Syntax": {
            "Content": "public partial struct ChildSyntaxList",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.CodeAnalysis.ChildSyntaxList",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.FileLinePositionSpan : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool Equals(FileLinePositionSpan other)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.FileLinePositionSpan.Equals(Microsoft.CodeAnalysis.FileLinePositionSpan)\">\r\n    <summary>\r\n    Determines if two FileLinePositionSpan objects are equal.\r\n    </summary>\r\n    <remarks>\r\n    The path is treated as an opaque string, i.e. a case-sensitive comparison is used.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 112
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.FileLinePositionSpan : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool Equals(FileLinePositionSpan other)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.FileLinePositionSpan.Equals(Microsoft.CodeAnalysis.FileLinePositionSpan)\">\r\n    <summary>\r\n    Determines if two FileLinePositionSpan objects are equal.\r\n    </summary>\r\n    <remarks>\r\n    The path is treated as an opaque string, i.e. a case-sensitive comparison is used.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 112
              },
              "Id": "M:Microsoft.CodeAnalysis.FileLinePositionSpan.Equals(Microsoft.CodeAnalysis.FileLinePositionSpan)",
              "Parent": "T:Microsoft.CodeAnalysis.FileLinePositionSpan",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.FileLinePositionSpan.Equals(Microsoft.CodeAnalysis.FileLinePositionSpan)\">\r\n    <summary>\r\n    Determines if two FileLinePositionSpan objects are equal.\r\n    </summary>\r\n    <remarks>\r\n    The path is treated as an opaque string, i.e. a case-sensitive comparison is used.\r\n    </remarks>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Object : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public override bool Equals(object other)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.FileLinePositionSpan.Equals(System.Object)\">\r\n    <summary>\r\n    Determines if two FileLinePositionSpan objects are equal.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 122
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Object : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public override bool Equals(object other)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.FileLinePositionSpan.Equals(System.Object)\">\r\n    <summary>\r\n    Determines if two FileLinePositionSpan objects are equal.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 122
              },
              "Id": "M:Microsoft.CodeAnalysis.FileLinePositionSpan.Equals(System.Object)",
              "Parent": "T:Microsoft.CodeAnalysis.FileLinePositionSpan",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.FileLinePositionSpan.Equals(System.Object)\">\r\n    <summary>\r\n    Determines if two FileLinePositionSpan objects are equal.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public override int GetHashCode()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.FileLinePositionSpan.GetHashCode\">\r\n    <summary>\r\n    Serves as a hash function for FileLinePositionSpan.\r\n    </summary>\r\n    <returns>The hash code.</returns>\r\n    <remarks>\r\n    The path is treated as an opaque string, i.e. a case-sensitive hash is calculated.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 134
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public override int GetHashCode()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.FileLinePositionSpan.GetHashCode\">\r\n    <summary>\r\n    Serves as a hash function for FileLinePositionSpan.\r\n    </summary>\r\n    <returns>The hash code.</returns>\r\n    <remarks>\r\n    The path is treated as an opaque string, i.e. a case-sensitive hash is calculated.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 134
              },
              "Id": "M:Microsoft.CodeAnalysis.FileLinePositionSpan.GetHashCode",
              "Parent": "T:Microsoft.CodeAnalysis.FileLinePositionSpan",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.FileLinePositionSpan.GetHashCode\">\r\n    <summary>\r\n    Serves as a hash function for FileLinePositionSpan.\r\n    </summary>\r\n    <returns>The hash code.</returns>\r\n    <remarks>\r\n    The path is treated as an opaque string, i.e. a case-sensitive hash is calculated.\r\n    </remarks>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public override string ToString()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.FileLinePositionSpan.ToString\">\r\n    <summary>\r\n    Returns a <see cref=\"T:System.String\"/> that represents FileLinePositionSpan.\r\n    </summary>\r\n    <returns>The string representation of FileLinePositionSpan.</returns>\r\n    <example>Path: (0,0)-(5,6)</example>\r\n</member>\r\n",
                "StartLine": 144
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public override string ToString()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.FileLinePositionSpan.ToString\">\r\n    <summary>\r\n    Returns a <see cref=\"T:System.String\"/> that represents FileLinePositionSpan.\r\n    </summary>\r\n    <returns>The string representation of FileLinePositionSpan.</returns>\r\n    <example>Path: (0,0)-(5,6)</example>\r\n</member>\r\n",
                "StartLine": 144
              },
              "Id": "M:Microsoft.CodeAnalysis.FileLinePositionSpan.ToString",
              "Parent": "T:Microsoft.CodeAnalysis.FileLinePositionSpan",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.FileLinePositionSpan.ToString\">\r\n    <summary>\r\n    Returns a <see cref=\"T:System.String\"/> that represents FileLinePositionSpan.\r\n    </summary>\r\n    <returns>The string representation of FileLinePositionSpan.</returns>\r\n    <example>Path: (0,0)-(5,6)</example>\r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Text.LinePosition",
                "Content": "public LinePosition EndLinePosition",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.FileLinePositionSpan.EndLinePosition\">\r\n    <summary>\r\n    Gets the <see cref=\"T:Microsoft.CodeAnalysis.Text.LinePosition\"/> of the end of the span.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n",
                "StartLine": 44
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Text.LinePosition",
                "Content": "public LinePosition EndLinePosition",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.FileLinePositionSpan.EndLinePosition\">\r\n    <summary>\r\n    Gets the <see cref=\"T:Microsoft.CodeAnalysis.Text.LinePosition\"/> of the end of the span.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n",
                "StartLine": 44
              },
              "Id": "P:Microsoft.CodeAnalysis.FileLinePositionSpan.EndLinePosition",
              "Parent": "T:Microsoft.CodeAnalysis.FileLinePositionSpan",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.FileLinePositionSpan.EndLinePosition\">\r\n    <summary>\r\n    Gets the <see cref=\"T:Microsoft.CodeAnalysis.Text.LinePosition\"/> of the end of the span.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool HasMappedPath",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.FileLinePositionSpan.HasMappedPath\">\r\n    <summary>\r\n    True if the <see cref=\"P:Microsoft.CodeAnalysis.FileLinePositionSpan.Path\"/> is a mapped path.\r\n    </summary>\r\n    <remarks>\r\n    A mapped path is a path specified in source via <code>#line</code> (C#) or <code>#ExternalSource</code> (VB) directives.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 32
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool HasMappedPath",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.FileLinePositionSpan.HasMappedPath\">\r\n    <summary>\r\n    True if the <see cref=\"P:Microsoft.CodeAnalysis.FileLinePositionSpan.Path\"/> is a mapped path.\r\n    </summary>\r\n    <remarks>\r\n    A mapped path is a path specified in source via <code>#line</code> (C#) or <code>#ExternalSource</code> (VB) directives.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 32
              },
              "Id": "P:Microsoft.CodeAnalysis.FileLinePositionSpan.HasMappedPath",
              "Parent": "T:Microsoft.CodeAnalysis.FileLinePositionSpan",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.FileLinePositionSpan.HasMappedPath\">\r\n    <summary>\r\n    True if the <see cref=\"P:Microsoft.CodeAnalysis.FileLinePositionSpan.Path\"/> is a mapped path.\r\n    </summary>\r\n    <remarks>\r\n    A mapped path is a path specified in source via <code>#line</code> (C#) or <code>#ExternalSource</code> (VB) directives.\r\n    </remarks>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool IsValid",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.FileLinePositionSpan.IsValid\">\r\n    <summary>\r\n    Returns true if the span represents a valid location.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 97
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool IsValid",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.FileLinePositionSpan.IsValid\">\r\n    <summary>\r\n    Returns true if the span represents a valid location.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 97
              },
              "Id": "P:Microsoft.CodeAnalysis.FileLinePositionSpan.IsValid",
              "Parent": "T:Microsoft.CodeAnalysis.FileLinePositionSpan",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.FileLinePositionSpan.IsValid\">\r\n    <summary>\r\n    Returns true if the span represents a valid location.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.String",
                "Content": "public string Path",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.FileLinePositionSpan.Path\">\r\n    <summary>\r\n    Path, or null if the span represents an invalid value.\r\n    </summary>\r\n    <remarks>\r\n    Path may be <see cref=\"F:System.String.Empty\"/> if not available.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 24
              },
              "Syntax": {
                "PropertyType": "T:System.String",
                "Content": "public string Path",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.FileLinePositionSpan.Path\">\r\n    <summary>\r\n    Path, or null if the span represents an invalid value.\r\n    </summary>\r\n    <remarks>\r\n    Path may be <see cref=\"F:System.String.Empty\"/> if not available.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 24
              },
              "Id": "P:Microsoft.CodeAnalysis.FileLinePositionSpan.Path",
              "Parent": "T:Microsoft.CodeAnalysis.FileLinePositionSpan",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.FileLinePositionSpan.Path\">\r\n    <summary>\r\n    Path, or null if the span represents an invalid value.\r\n    </summary>\r\n    <remarks>\r\n    Path may be <see cref=\"F:System.String.Empty\"/> if not available.\r\n    </remarks>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Text.LinePositionSpan",
                "Content": "public LinePositionSpan Span",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.FileLinePositionSpan.Span\">\r\n    <summary>\r\n    Gets the span.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 49
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Text.LinePositionSpan",
                "Content": "public LinePositionSpan Span",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.FileLinePositionSpan.Span\">\r\n    <summary>\r\n    Gets the span.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 49
              },
              "Id": "P:Microsoft.CodeAnalysis.FileLinePositionSpan.Span",
              "Parent": "T:Microsoft.CodeAnalysis.FileLinePositionSpan",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.FileLinePositionSpan.Span\">\r\n    <summary>\r\n    Gets the span.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Text.LinePosition",
                "Content": "public LinePosition StartLinePosition",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.FileLinePositionSpan.StartLinePosition\">\r\n    <summary>\r\n    Gets the <see cref=\"T:Microsoft.CodeAnalysis.Text.LinePosition\"/> of the start of the span.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n",
                "StartLine": 38
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Text.LinePosition",
                "Content": "public LinePosition StartLinePosition",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.FileLinePositionSpan.StartLinePosition\">\r\n    <summary>\r\n    Gets the <see cref=\"T:Microsoft.CodeAnalysis.Text.LinePosition\"/> of the start of the span.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n",
                "StartLine": 38
              },
              "Id": "P:Microsoft.CodeAnalysis.FileLinePositionSpan.StartLinePosition",
              "Parent": "T:Microsoft.CodeAnalysis.FileLinePositionSpan",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.FileLinePositionSpan.StartLinePosition\">\r\n    <summary>\r\n    Gets the <see cref=\"T:Microsoft.CodeAnalysis.Text.LinePosition\"/> of the start of the span.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
            }
          ],
          "Constructors": [
            {
              "ConstructorSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.LinePosition : end": "",
                  "T:Microsoft.CodeAnalysis.Text.LinePosition : start": "",
                  "T:System.String : path": ""
                },
                "Content": "public FileLinePositionSpan(string path, LinePosition start, LinePosition end): this (path, new LinePositionSpan(start, end))",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.FileLinePositionSpan.#ctor(System.String,Microsoft.CodeAnalysis.Text.LinePosition,Microsoft.CodeAnalysis.Text.LinePosition)\">\r\n    <summary>\r\n    Initializes the <see cref=\"T:Microsoft.CodeAnalysis.FileLinePositionSpan\"/> instance.\r\n    </summary>\r\n    <param name=\"path\">The file identifier - typically a relative or absolute path.</param>\r\n    <param name=\"start\">The start line position.</param>\r\n    <param name=\"end\">The end line position.</param>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"path\"/> is null.</exception>\r\n</member>\r\n",
                "StartLine": 64
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.LinePosition : end": "",
                  "T:Microsoft.CodeAnalysis.Text.LinePosition : start": "",
                  "T:System.String : path": ""
                },
                "Content": "public FileLinePositionSpan(string path, LinePosition start, LinePosition end): this (path, new LinePositionSpan(start, end))",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.FileLinePositionSpan.#ctor(System.String,Microsoft.CodeAnalysis.Text.LinePosition,Microsoft.CodeAnalysis.Text.LinePosition)\">\r\n    <summary>\r\n    Initializes the <see cref=\"T:Microsoft.CodeAnalysis.FileLinePositionSpan\"/> instance.\r\n    </summary>\r\n    <param name=\"path\">The file identifier - typically a relative or absolute path.</param>\r\n    <param name=\"start\">The start line position.</param>\r\n    <param name=\"end\">The end line position.</param>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"path\"/> is null.</exception>\r\n</member>\r\n",
                "StartLine": 64
              },
              "Id": "M:Microsoft.CodeAnalysis.FileLinePositionSpan.#ctor(System.String,Microsoft.CodeAnalysis.Text.LinePosition,Microsoft.CodeAnalysis.Text.LinePosition)",
              "Parent": "T:Microsoft.CodeAnalysis.FileLinePositionSpan",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.FileLinePositionSpan.#ctor(System.String,Microsoft.CodeAnalysis.Text.LinePosition,Microsoft.CodeAnalysis.Text.LinePosition)\">\r\n    <summary>\r\n    Initializes the <see cref=\"T:Microsoft.CodeAnalysis.FileLinePositionSpan\"/> instance.\r\n    </summary>\r\n    <param name=\"path\">The file identifier - typically a relative or absolute path.</param>\r\n    <param name=\"start\">The start line position.</param>\r\n    <param name=\"end\">The end line position.</param>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"path\"/> is null.</exception>\r\n</member>\r\n"
            },
            {
              "ConstructorSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.LinePositionSpan : span": "",
                  "T:System.String : path": ""
                },
                "Content": "public FileLinePositionSpan(string path, LinePositionSpan span)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.FileLinePositionSpan.#ctor(System.String,Microsoft.CodeAnalysis.Text.LinePositionSpan)\">\r\n    <summary>\r\n    Initializes the <see cref=\"T:Microsoft.CodeAnalysis.FileLinePositionSpan\"/> instance.\r\n    </summary>\r\n    <param name=\"path\">The file identifier - typically a relative or absolute path.</param>\r\n    <param name=\"span\">The span.</param>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"path\"/> is null.</exception>\r\n</member>\r\n",
                "StartLine": 75
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.LinePositionSpan : span": "",
                  "T:System.String : path": ""
                },
                "Content": "public FileLinePositionSpan(string path, LinePositionSpan span)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.FileLinePositionSpan.#ctor(System.String,Microsoft.CodeAnalysis.Text.LinePositionSpan)\">\r\n    <summary>\r\n    Initializes the <see cref=\"T:Microsoft.CodeAnalysis.FileLinePositionSpan\"/> instance.\r\n    </summary>\r\n    <param name=\"path\">The file identifier - typically a relative or absolute path.</param>\r\n    <param name=\"span\">The span.</param>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"path\"/> is null.</exception>\r\n</member>\r\n",
                "StartLine": 75
              },
              "Id": "M:Microsoft.CodeAnalysis.FileLinePositionSpan.#ctor(System.String,Microsoft.CodeAnalysis.Text.LinePositionSpan)",
              "Parent": "T:Microsoft.CodeAnalysis.FileLinePositionSpan",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.FileLinePositionSpan.#ctor(System.String,Microsoft.CodeAnalysis.Text.LinePositionSpan)\">\r\n    <summary>\r\n    Initializes the <see cref=\"T:Microsoft.CodeAnalysis.FileLinePositionSpan\"/> instance.\r\n    </summary>\r\n    <param name=\"path\">The file identifier - typically a relative or absolute path.</param>\r\n    <param name=\"span\">The span.</param>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"path\"/> is null.</exception>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Diagnostic\\FileLinePositionSpan.cs",
          "InheritanceHierarchy": [
            "T:System.Object",
            "T:System.ValueType"
          ],
          "Syntax": {
            "Content": "public struct FileLinePositionSpan",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.FileLinePositionSpan\">\r\n    <summary>\r\n    Represents a span of text in a source code file in terms of file name, line number, and offset within line.\r\n    However, the file is actually whatever was passed in when asked to parse; there may not really be a file.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.FileLinePositionSpan",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.FileLinePositionSpan\">\r\n    <summary>\r\n    Represents a span of text in a source code file in terms of file name, line number, and offset within line.\r\n    However, the file is actually whatever was passed in when asked to parse; there may not really be a file.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.MetadataReferenceProperties : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool Equals(MetadataReferenceProperties other)",
                "XmlDocumentation": "",
                "StartLine": 147
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.MetadataReferenceProperties : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool Equals(MetadataReferenceProperties other)",
                "XmlDocumentation": "",
                "StartLine": 147
              },
              "Id": "M:Microsoft.CodeAnalysis.MetadataReferenceProperties.Equals(Microsoft.CodeAnalysis.MetadataReferenceProperties)",
              "Parent": "T:Microsoft.CodeAnalysis.MetadataReferenceProperties",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Object : obj": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public override bool Equals(object obj)",
                "XmlDocumentation": "",
                "StartLine": 142
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Object : obj": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public override bool Equals(object obj)",
                "XmlDocumentation": "",
                "StartLine": 142
              },
              "Id": "M:Microsoft.CodeAnalysis.MetadataReferenceProperties.Equals(System.Object)",
              "Parent": "T:Microsoft.CodeAnalysis.MetadataReferenceProperties",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public override int GetHashCode()",
                "XmlDocumentation": "",
                "StartLine": 154
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public override int GetHashCode()",
                "XmlDocumentation": "",
                "StartLine": 154
              },
              "Id": "M:Microsoft.CodeAnalysis.MetadataReferenceProperties.GetHashCode",
              "Parent": "T:Microsoft.CodeAnalysis.MetadataReferenceProperties",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{System.String} : aliases": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.MetadataReferenceProperties": ""
                },
                "Content": "public MetadataReferenceProperties WithAliases(IEnumerable<string> aliases)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.MetadataReferenceProperties.WithAliases(System.Collections.Generic.IEnumerable{System.String})\">\r\n    <summary>\r\n    Returns <see cref=\"T:Microsoft.CodeAnalysis.MetadataReferenceProperties\"/> with specified aliases.\r\n    </summary>\r\n    <exception cref=\"T:System.ArgumentException\">\r\n    <see cref=\"P:Microsoft.CodeAnalysis.MetadataReferenceProperties.Kind\"/> is <see cref=\"F:Microsoft.CodeAnalysis.MetadataImageKind.Module\"/>, as modules can't be aliased.\r\n    </exception>\r\n</member>\r\n",
                "StartLine": 78
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{System.String} : aliases": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.MetadataReferenceProperties": ""
                },
                "Content": "public MetadataReferenceProperties WithAliases(IEnumerable<string> aliases)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.MetadataReferenceProperties.WithAliases(System.Collections.Generic.IEnumerable{System.String})\">\r\n    <summary>\r\n    Returns <see cref=\"T:Microsoft.CodeAnalysis.MetadataReferenceProperties\"/> with specified aliases.\r\n    </summary>\r\n    <exception cref=\"T:System.ArgumentException\">\r\n    <see cref=\"P:Microsoft.CodeAnalysis.MetadataReferenceProperties.Kind\"/> is <see cref=\"F:Microsoft.CodeAnalysis.MetadataImageKind.Module\"/>, as modules can't be aliased.\r\n    </exception>\r\n</member>\r\n",
                "StartLine": 78
              },
              "Id": "M:Microsoft.CodeAnalysis.MetadataReferenceProperties.WithAliases(System.Collections.Generic.IEnumerable{System.String})",
              "Parent": "T:Microsoft.CodeAnalysis.MetadataReferenceProperties",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.MetadataReferenceProperties.WithAliases(System.Collections.Generic.IEnumerable{System.String})\">\r\n    <summary>\r\n    Returns <see cref=\"T:Microsoft.CodeAnalysis.MetadataReferenceProperties\"/> with specified aliases.\r\n    </summary>\r\n    <exception cref=\"T:System.ArgumentException\">\r\n    <see cref=\"P:Microsoft.CodeAnalysis.MetadataReferenceProperties.Kind\"/> is <see cref=\"F:Microsoft.CodeAnalysis.MetadataImageKind.Module\"/>, as modules can't be aliased.\r\n    </exception>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Collections.Immutable.ImmutableArray{System.String} : aliases": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.MetadataReferenceProperties": ""
                },
                "Content": "public MetadataReferenceProperties WithAliases(ImmutableArray<string> aliases)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.MetadataReferenceProperties.WithAliases(System.Collections.Immutable.ImmutableArray{System.String})\">\r\n    <summary>\r\n    Returns <see cref=\"T:Microsoft.CodeAnalysis.MetadataReferenceProperties\"/> with specified aliases.\r\n    </summary>\r\n    <exception cref=\"T:System.ArgumentException\">\r\n    <see cref=\"P:Microsoft.CodeAnalysis.MetadataReferenceProperties.Kind\"/> is <see cref=\"F:Microsoft.CodeAnalysis.MetadataImageKind.Module\"/>, as modules can't be aliased.\r\n    </exception>\r\n</member>\r\n",
                "StartLine": 89
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Collections.Immutable.ImmutableArray{System.String} : aliases": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.MetadataReferenceProperties": ""
                },
                "Content": "public MetadataReferenceProperties WithAliases(ImmutableArray<string> aliases)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.MetadataReferenceProperties.WithAliases(System.Collections.Immutable.ImmutableArray{System.String})\">\r\n    <summary>\r\n    Returns <see cref=\"T:Microsoft.CodeAnalysis.MetadataReferenceProperties\"/> with specified aliases.\r\n    </summary>\r\n    <exception cref=\"T:System.ArgumentException\">\r\n    <see cref=\"P:Microsoft.CodeAnalysis.MetadataReferenceProperties.Kind\"/> is <see cref=\"F:Microsoft.CodeAnalysis.MetadataImageKind.Module\"/>, as modules can't be aliased.\r\n    </exception>\r\n</member>\r\n",
                "StartLine": 89
              },
              "Id": "M:Microsoft.CodeAnalysis.MetadataReferenceProperties.WithAliases(System.Collections.Immutable.ImmutableArray{System.String})",
              "Parent": "T:Microsoft.CodeAnalysis.MetadataReferenceProperties",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.MetadataReferenceProperties.WithAliases(System.Collections.Immutable.ImmutableArray{System.String})\">\r\n    <summary>\r\n    Returns <see cref=\"T:Microsoft.CodeAnalysis.MetadataReferenceProperties\"/> with specified aliases.\r\n    </summary>\r\n    <exception cref=\"T:System.ArgumentException\">\r\n    <see cref=\"P:Microsoft.CodeAnalysis.MetadataReferenceProperties.Kind\"/> is <see cref=\"F:Microsoft.CodeAnalysis.MetadataImageKind.Module\"/>, as modules can't be aliased.\r\n    </exception>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Boolean : embedInteropTypes": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.MetadataReferenceProperties": ""
                },
                "Content": "public MetadataReferenceProperties WithEmbedInteropTypes(bool embedInteropTypes)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.MetadataReferenceProperties.WithEmbedInteropTypes(System.Boolean)\">\r\n    <summary>\r\n    Returns <see cref=\"T:Microsoft.CodeAnalysis.MetadataReferenceProperties\"/> with <see cref=\"P:Microsoft.CodeAnalysis.MetadataReferenceProperties.EmbedInteropTypes\"/> set to specified value.\r\n    </summary>\r\n    <exception cref=\"T:System.ArgumentException\"><see cref=\"P:Microsoft.CodeAnalysis.MetadataReferenceProperties.Kind\"/> is <see cref=\"F:Microsoft.CodeAnalysis.MetadataImageKind.Module\"/>, as interop types can't be embedded from modules.</exception>\r\n</member>\r\n",
                "StartLine": 98
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Boolean : embedInteropTypes": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.MetadataReferenceProperties": ""
                },
                "Content": "public MetadataReferenceProperties WithEmbedInteropTypes(bool embedInteropTypes)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.MetadataReferenceProperties.WithEmbedInteropTypes(System.Boolean)\">\r\n    <summary>\r\n    Returns <see cref=\"T:Microsoft.CodeAnalysis.MetadataReferenceProperties\"/> with <see cref=\"P:Microsoft.CodeAnalysis.MetadataReferenceProperties.EmbedInteropTypes\"/> set to specified value.\r\n    </summary>\r\n    <exception cref=\"T:System.ArgumentException\"><see cref=\"P:Microsoft.CodeAnalysis.MetadataReferenceProperties.Kind\"/> is <see cref=\"F:Microsoft.CodeAnalysis.MetadataImageKind.Module\"/>, as interop types can't be embedded from modules.</exception>\r\n</member>\r\n",
                "StartLine": 98
              },
              "Id": "M:Microsoft.CodeAnalysis.MetadataReferenceProperties.WithEmbedInteropTypes(System.Boolean)",
              "Parent": "T:Microsoft.CodeAnalysis.MetadataReferenceProperties",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.MetadataReferenceProperties.WithEmbedInteropTypes(System.Boolean)\">\r\n    <summary>\r\n    Returns <see cref=\"T:Microsoft.CodeAnalysis.MetadataReferenceProperties\"/> with <see cref=\"P:Microsoft.CodeAnalysis.MetadataReferenceProperties.EmbedInteropTypes\"/> set to specified value.\r\n    </summary>\r\n    <exception cref=\"T:System.ArgumentException\"><see cref=\"P:Microsoft.CodeAnalysis.MetadataReferenceProperties.Kind\"/> is <see cref=\"F:Microsoft.CodeAnalysis.MetadataImageKind.Module\"/>, as interop types can't be embedded from modules.</exception>\r\n</member>\r\n"
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "Assembly",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.MetadataReferenceProperties.Assembly\">\r\n    <summary>\r\n    Default properties for an assembly reference.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 28
              },
              "Id": "F:Microsoft.CodeAnalysis.MetadataReferenceProperties.Assembly",
              "Parent": "T:Microsoft.CodeAnalysis.MetadataReferenceProperties",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.MetadataReferenceProperties.Assembly\">\r\n    <summary>\r\n    Default properties for an assembly reference.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "GlobalAlias",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.MetadataReferenceProperties.GlobalAlias\">\r\n    <summary>\r\n    Alias that represents a global declaration space.\r\n    </summary>\r\n    <remarks>\r\n    Namespaces in references whose <see cref=\"P:Microsoft.CodeAnalysis.MetadataReferenceProperties.Aliases\"/> contain <see cref=\"F:Microsoft.CodeAnalysis.MetadataReferenceProperties.GlobalAlias\"/> are available in global declaration space.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 117
              },
              "Id": "F:Microsoft.CodeAnalysis.MetadataReferenceProperties.GlobalAlias",
              "Parent": "T:Microsoft.CodeAnalysis.MetadataReferenceProperties",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.MetadataReferenceProperties.GlobalAlias\">\r\n    <summary>\r\n    Alias that represents a global declaration space.\r\n    </summary>\r\n    <remarks>\r\n    Namespaces in references whose <see cref=\"P:Microsoft.CodeAnalysis.MetadataReferenceProperties.Aliases\"/> contain <see cref=\"F:Microsoft.CodeAnalysis.MetadataReferenceProperties.GlobalAlias\"/> are available in global declaration space.\r\n    </remarks>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "Module",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.MetadataReferenceProperties.Module\">\r\n    <summary>\r\n    Default properties for a module reference.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 23
              },
              "Id": "F:Microsoft.CodeAnalysis.MetadataReferenceProperties.Module",
              "Parent": "T:Microsoft.CodeAnalysis.MetadataReferenceProperties",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.MetadataReferenceProperties.Module\">\r\n    <summary>\r\n    Default properties for a module reference.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{System.String}",
                "Content": "public ImmutableArray<string> Aliases",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.MetadataReferenceProperties.Aliases\">\r\n    <summary>\r\n    Aliases for the metadata reference. Empty if the reference has no aliases.\r\n    </summary>\r\n    <remarks>\r\n    In C# these aliases can be used in \"extern alias\" syntax to disambiguate type names. \r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 125
              },
              "Syntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{System.String}",
                "Content": "public ImmutableArray<string> Aliases",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.MetadataReferenceProperties.Aliases\">\r\n    <summary>\r\n    Aliases for the metadata reference. Empty if the reference has no aliases.\r\n    </summary>\r\n    <remarks>\r\n    In C# these aliases can be used in \"extern alias\" syntax to disambiguate type names. \r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 125
              },
              "Id": "P:Microsoft.CodeAnalysis.MetadataReferenceProperties.Aliases",
              "Parent": "T:Microsoft.CodeAnalysis.MetadataReferenceProperties",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.MetadataReferenceProperties.Aliases\">\r\n    <summary>\r\n    Aliases for the metadata reference. Empty if the reference has no aliases.\r\n    </summary>\r\n    <remarks>\r\n    In C# these aliases can be used in \"extern alias\" syntax to disambiguate type names. \r\n    </remarks>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool EmbedInteropTypes",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.MetadataReferenceProperties.EmbedInteropTypes\">\r\n    <summary>\r\n    True if interop types defined in the referenced metadata should be embedded into the compilation referencing the metadata.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 137
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool EmbedInteropTypes",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.MetadataReferenceProperties.EmbedInteropTypes\">\r\n    <summary>\r\n    True if interop types defined in the referenced metadata should be embedded into the compilation referencing the metadata.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 137
              },
              "Id": "P:Microsoft.CodeAnalysis.MetadataReferenceProperties.EmbedInteropTypes",
              "Parent": "T:Microsoft.CodeAnalysis.MetadataReferenceProperties",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.MetadataReferenceProperties.EmbedInteropTypes\">\r\n    <summary>\r\n    True if interop types defined in the referenced metadata should be embedded into the compilation referencing the metadata.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.MetadataImageKind",
                "Content": "public MetadataImageKind Kind",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.MetadataReferenceProperties.Kind\">\r\n    <summary>\r\n    The image kind (assembly or module) the reference refers to.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 106
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.MetadataImageKind",
                "Content": "public MetadataImageKind Kind",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.MetadataReferenceProperties.Kind\">\r\n    <summary>\r\n    The image kind (assembly or module) the reference refers to.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 106
              },
              "Id": "P:Microsoft.CodeAnalysis.MetadataReferenceProperties.Kind",
              "Parent": "T:Microsoft.CodeAnalysis.MetadataReferenceProperties",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.MetadataReferenceProperties.Kind\">\r\n    <summary>\r\n    The image kind (assembly or module) the reference refers to.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Constructors": [
            {
              "ConstructorSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.MetadataImageKind : kind": "",
                  "T:System.Boolean : embedInteropTypes": "",
                  "T:System.Collections.Immutable.ImmutableArray{System.String} : aliases": ""
                },
                "Content": "public MetadataReferenceProperties(MetadataImageKind kind = MetadataImageKind.Assembly, ImmutableArray<string> aliases = default (ImmutableArray<string>), bool embedInteropTypes = false)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.MetadataReferenceProperties.#ctor(Microsoft.CodeAnalysis.MetadataImageKind,System.Collections.Immutable.ImmutableArray{System.String},System.Boolean)\">\r\n    <summary>\r\n    Initializes reference properties.\r\n    </summary>\r\n    <param name=\"kind\">The image kind - assembly or module.</param>\r\n    <param name=\"aliases\">Assembly aliases. Can't be set for a module.</param>\r\n    <param name=\"embedInteropTypes\">True to embed interop types from the referenced assembly to the referencing compilation. Must be false for a module.</param>\r\n</member>\r\n",
                "StartLine": 36
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.MetadataImageKind : kind": "",
                  "T:System.Boolean : embedInteropTypes": "",
                  "T:System.Collections.Immutable.ImmutableArray{System.String} : aliases": ""
                },
                "Content": "public MetadataReferenceProperties(MetadataImageKind kind = MetadataImageKind.Assembly, ImmutableArray<string> aliases = default (ImmutableArray<string>), bool embedInteropTypes = false)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.MetadataReferenceProperties.#ctor(Microsoft.CodeAnalysis.MetadataImageKind,System.Collections.Immutable.ImmutableArray{System.String},System.Boolean)\">\r\n    <summary>\r\n    Initializes reference properties.\r\n    </summary>\r\n    <param name=\"kind\">The image kind - assembly or module.</param>\r\n    <param name=\"aliases\">Assembly aliases. Can't be set for a module.</param>\r\n    <param name=\"embedInteropTypes\">True to embed interop types from the referenced assembly to the referencing compilation. Must be false for a module.</param>\r\n</member>\r\n",
                "StartLine": 36
              },
              "Id": "M:Microsoft.CodeAnalysis.MetadataReferenceProperties.#ctor(Microsoft.CodeAnalysis.MetadataImageKind,System.Collections.Immutable.ImmutableArray{System.String},System.Boolean)",
              "Parent": "T:Microsoft.CodeAnalysis.MetadataReferenceProperties",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.MetadataReferenceProperties.#ctor(Microsoft.CodeAnalysis.MetadataImageKind,System.Collections.Immutable.ImmutableArray{System.String},System.Boolean)\">\r\n    <summary>\r\n    Initializes reference properties.\r\n    </summary>\r\n    <param name=\"kind\">The image kind - assembly or module.</param>\r\n    <param name=\"aliases\">Assembly aliases. Can't be set for a module.</param>\r\n    <param name=\"embedInteropTypes\">True to embed interop types from the referenced assembly to the referencing compilation. Must be false for a module.</param>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\MetadataReference\\MetadataReferenceProperties.cs",
          "InheritanceHierarchy": [
            "T:System.Object",
            "T:System.ValueType"
          ],
          "Syntax": {
            "Content": "public struct MetadataReferenceProperties",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.MetadataReferenceProperties\">\r\n    <summary>\r\n    Information about a metadata reference.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.MetadataReferenceProperties",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.MetadataReferenceProperties\">\r\n    <summary>\r\n    Information about a metadata reference.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool HasValue",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Optional`1.HasValue\">\r\n    <summary>\r\n    Gets a value indicating whether the current object has a value.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n",
                "StartLine": 27
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool HasValue",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Optional`1.HasValue\">\r\n    <summary>\r\n    Gets a value indicating whether the current object has a value.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n",
                "StartLine": 27
              },
              "Id": "P:Microsoft.CodeAnalysis.Optional`1.HasValue",
              "Parent": "T:Microsoft.CodeAnalysis.Optional`1",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Optional`1.HasValue\">\r\n    <summary>\r\n    Gets a value indicating whether the current object has a value.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "!:T",
                "Content": "public T Value",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Optional`1.Value\">\r\n    <summary>\r\n    Gets the value of the current object.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n",
                "StartLine": 36
              },
              "Syntax": {
                "PropertyType": "!:T",
                "Content": "public T Value",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Optional`1.Value\">\r\n    <summary>\r\n    Gets the value of the current object.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n",
                "StartLine": 36
              },
              "Id": "P:Microsoft.CodeAnalysis.Optional`1.Value",
              "Parent": "T:Microsoft.CodeAnalysis.Optional`1",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Optional`1.Value\">\r\n    <summary>\r\n    Gets the value of the current object.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
            }
          ],
          "Constructors": [
            {
              "ConstructorSyntax": {
                "Parameters": {
                  "!:T : value": ""
                },
                "Content": "public Optional(T value)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Optional`1.#ctor(`0)\">\r\n    <summary>\r\n    Initializes a new instance to the specified value.\r\n    </summary>\r\n    <param name=\"value\"></param>\r\n</member>\r\n",
                "StartLine": 17
              },
              "Syntax": {
                "Parameters": {
                  "!:T : value": ""
                },
                "Content": "public Optional(T value)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Optional`1.#ctor(`0)\">\r\n    <summary>\r\n    Initializes a new instance to the specified value.\r\n    </summary>\r\n    <param name=\"value\"></param>\r\n</member>\r\n",
                "StartLine": 17
              },
              "Id": "M:Microsoft.CodeAnalysis.Optional`1.#ctor(`0)",
              "Parent": "T:Microsoft.CodeAnalysis.Optional`1",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Optional`1.#ctor(`0)\">\r\n    <summary>\r\n    Initializes a new instance to the specified value.\r\n    </summary>\r\n    <param name=\"value\"></param>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Optional.cs",
          "InheritanceHierarchy": [
            "T:System.Object",
            "T:System.ValueType"
          ],
          "Syntax": {
            "Content": "public struct Optional<T>",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.Optional`1\">\r\n    <summary>\r\n    Represents a value type that can be assigned null.\r\n    </summary>\r\n    <typeparam name=\"T\"></typeparam>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.Optional`1",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.Optional`1\">\r\n    <summary>\r\n    Represents a value type that can be assigned null.\r\n    </summary>\r\n    <typeparam name=\"T\"></typeparam>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.PreprocessingSymbolInfo : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool Equals(PreprocessingSymbolInfo other)",
                "XmlDocumentation": "",
                "StartLine": 28
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.PreprocessingSymbolInfo : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool Equals(PreprocessingSymbolInfo other)",
                "XmlDocumentation": "",
                "StartLine": 28
              },
              "Id": "M:Microsoft.CodeAnalysis.PreprocessingSymbolInfo.Equals(Microsoft.CodeAnalysis.PreprocessingSymbolInfo)",
              "Parent": "T:Microsoft.CodeAnalysis.PreprocessingSymbolInfo",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Object : obj": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public override bool Equals(object obj)",
                "XmlDocumentation": "",
                "StartLine": 34
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Object : obj": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public override bool Equals(object obj)",
                "XmlDocumentation": "",
                "StartLine": 34
              },
              "Id": "M:Microsoft.CodeAnalysis.PreprocessingSymbolInfo.Equals(System.Object)",
              "Parent": "T:Microsoft.CodeAnalysis.PreprocessingSymbolInfo",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public override int GetHashCode()",
                "XmlDocumentation": "",
                "StartLine": 39
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public override int GetHashCode()",
                "XmlDocumentation": "",
                "StartLine": 39
              },
              "Id": "M:Microsoft.CodeAnalysis.PreprocessingSymbolInfo.GetHashCode",
              "Parent": "T:Microsoft.CodeAnalysis.PreprocessingSymbolInfo",
              "XmlDocumentation": ""
            }
          ],
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool IsDefined",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.PreprocessingSymbolInfo.IsDefined\">\r\n    <summary>\r\n    Returns true if this preprocessing symbol is defined at the identifier position.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 19
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool IsDefined",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.PreprocessingSymbolInfo.IsDefined\">\r\n    <summary>\r\n    Returns true if this preprocessing symbol is defined at the identifier position.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 19
              },
              "Id": "P:Microsoft.CodeAnalysis.PreprocessingSymbolInfo.IsDefined",
              "Parent": "T:Microsoft.CodeAnalysis.PreprocessingSymbolInfo",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.PreprocessingSymbolInfo.IsDefined\">\r\n    <summary>\r\n    Returns true if this preprocessing symbol is defined at the identifier position.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.IPreprocessingSymbol",
                "Content": "public IPreprocessingSymbol Symbol",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.PreprocessingSymbolInfo.Symbol\">\r\n    <summary>\r\n    The symbol that was referred to by the identifier, if any. \r\n    </summary>\r\n</member>\r\n",
                "StartLine": 14
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.IPreprocessingSymbol",
                "Content": "public IPreprocessingSymbol Symbol",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.PreprocessingSymbolInfo.Symbol\">\r\n    <summary>\r\n    The symbol that was referred to by the identifier, if any. \r\n    </summary>\r\n</member>\r\n",
                "StartLine": 14
              },
              "Id": "P:Microsoft.CodeAnalysis.PreprocessingSymbolInfo.Symbol",
              "Parent": "T:Microsoft.CodeAnalysis.PreprocessingSymbolInfo",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.PreprocessingSymbolInfo.Symbol\">\r\n    <summary>\r\n    The symbol that was referred to by the identifier, if any. \r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Compilation\\PreprocessingSymbolInfo.cs",
          "InheritanceHierarchy": [
            "T:System.Object",
            "T:System.ValueType"
          ],
          "Syntax": {
            "Content": "public struct PreprocessingSymbolInfo",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.CodeAnalysis.PreprocessingSymbolInfo",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "!:TNode : node": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SeparatedSyntaxList`1": ""
                },
                "Content": "public SeparatedSyntaxList<TNode> Add(TNode node)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.Add(`0)\">\r\n    <summary>\r\n    Creates a new list with the specified node added to the end.\r\n    </summary>\r\n    <param name=\"node\">The node to add.</param>\r\n</member>\r\n",
                "StartLine": 322
              },
              "Syntax": {
                "Parameters": {
                  "!:TNode : node": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SeparatedSyntaxList`1": ""
                },
                "Content": "public SeparatedSyntaxList<TNode> Add(TNode node)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.Add(`0)\">\r\n    <summary>\r\n    Creates a new list with the specified node added to the end.\r\n    </summary>\r\n    <param name=\"node\">The node to add.</param>\r\n</member>\r\n",
                "StartLine": 322
              },
              "Id": "M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.Add(`0)",
              "Parent": "T:Microsoft.CodeAnalysis.SeparatedSyntaxList`1",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.Add(`0)\">\r\n    <summary>\r\n    Creates a new list with the specified node added to the end.\r\n    </summary>\r\n    <param name=\"node\">The node to add.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{`0} : nodes": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SeparatedSyntaxList`1": ""
                },
                "Content": "public SeparatedSyntaxList<TNode> AddRange(IEnumerable<TNode> nodes)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.AddRange(System.Collections.Generic.IEnumerable{`0})\">\r\n    <summary>\r\n    Creates a new list with the specified nodes added to the end.\r\n    </summary>\r\n    <param name=\"nodes\">The nodes to add.</param>\r\n</member>\r\n",
                "StartLine": 331
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{`0} : nodes": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SeparatedSyntaxList`1": ""
                },
                "Content": "public SeparatedSyntaxList<TNode> AddRange(IEnumerable<TNode> nodes)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.AddRange(System.Collections.Generic.IEnumerable{`0})\">\r\n    <summary>\r\n    Creates a new list with the specified nodes added to the end.\r\n    </summary>\r\n    <param name=\"nodes\">The nodes to add.</param>\r\n</member>\r\n",
                "StartLine": 331
              },
              "Id": "M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.AddRange(System.Collections.Generic.IEnumerable{`0})",
              "Parent": "T:Microsoft.CodeAnalysis.SeparatedSyntaxList`1",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.AddRange(System.Collections.Generic.IEnumerable{`0})\">\r\n    <summary>\r\n    Creates a new list with the specified nodes added to the end.\r\n    </summary>\r\n    <param name=\"nodes\">The nodes to add.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool Any()",
                "XmlDocumentation": "",
                "StartLine": 283
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool Any()",
                "XmlDocumentation": "",
                "StartLine": 283
              },
              "Id": "M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.Any",
              "Parent": "T:Microsoft.CodeAnalysis.SeparatedSyntaxList`1",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "!:TNode : node": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool Contains(TNode node)",
                "XmlDocumentation": "",
                "StartLine": 213
              },
              "Syntax": {
                "Parameters": {
                  "!:TNode : node": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool Contains(TNode node)",
                "XmlDocumentation": "",
                "StartLine": 213
              },
              "Id": "M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.Contains(`0)",
              "Parent": "T:Microsoft.CodeAnalysis.SeparatedSyntaxList`1",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SeparatedSyntaxList`1 : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool Equals(SeparatedSyntaxList<TNode> other)",
                "XmlDocumentation": "",
                "StartLine": 303
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SeparatedSyntaxList`1 : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool Equals(SeparatedSyntaxList<TNode> other)",
                "XmlDocumentation": "",
                "StartLine": 303
              },
              "Id": "M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.Equals(Microsoft.CodeAnalysis.SeparatedSyntaxList{`0})",
              "Parent": "T:Microsoft.CodeAnalysis.SeparatedSyntaxList`1",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Object : obj": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public override bool Equals(object obj)",
                "XmlDocumentation": "",
                "StartLine": 308
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Object : obj": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public override bool Equals(object obj)",
                "XmlDocumentation": "",
                "StartLine": 308
              },
              "Id": "M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.Equals(System.Object)",
              "Parent": "T:Microsoft.CodeAnalysis.SeparatedSyntaxList`1",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "!:TNode": ""
                },
                "Content": "public TNode First()",
                "XmlDocumentation": "",
                "StartLine": 179
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "!:TNode": ""
                },
                "Content": "public TNode First()",
                "XmlDocumentation": "",
                "StartLine": 179
              },
              "Id": "M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.First",
              "Parent": "T:Microsoft.CodeAnalysis.SeparatedSyntaxList`1",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "!:TNode": ""
                },
                "Content": "public TNode FirstOrDefault()",
                "XmlDocumentation": "",
                "StartLine": 184
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "!:TNode": ""
                },
                "Content": "public TNode FirstOrDefault()",
                "XmlDocumentation": "",
                "StartLine": 184
              },
              "Id": "M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.FirstOrDefault",
              "Parent": "T:Microsoft.CodeAnalysis.SeparatedSyntaxList`1",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.Enumerator": ""
                },
                "Content": "public Enumerator GetEnumerator()",
                "XmlDocumentation": "",
                "StartLine": 563
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.Enumerator": ""
                },
                "Content": "public Enumerator GetEnumerator()",
                "XmlDocumentation": "",
                "StartLine": 563
              },
              "Id": "M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.GetEnumerator",
              "Parent": "T:Microsoft.CodeAnalysis.SeparatedSyntaxList`1",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public override int GetHashCode()",
                "XmlDocumentation": "",
                "StartLine": 313
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public override int GetHashCode()",
                "XmlDocumentation": "",
                "StartLine": 313
              },
              "Id": "M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.GetHashCode",
              "Parent": "T:Microsoft.CodeAnalysis.SeparatedSyntaxList`1",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Int32 : index": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxToken": ""
                },
                "Content": "public SyntaxToken GetSeparator(int index)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.GetSeparator(System.Int32)\">\r\n    <summary>\r\n    Gets the separator at the given index in this list.\r\n    </summary>\r\n    <param name=\"index\">The index.</param>\r\n    <returns></returns>\r\n</member>\r\n",
                "StartLine": 111
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Int32 : index": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxToken": ""
                },
                "Content": "public SyntaxToken GetSeparator(int index)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.GetSeparator(System.Int32)\">\r\n    <summary>\r\n    Gets the separator at the given index in this list.\r\n    </summary>\r\n    <param name=\"index\">The index.</param>\r\n    <returns></returns>\r\n</member>\r\n",
                "StartLine": 111
              },
              "Id": "M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.GetSeparator(System.Int32)",
              "Parent": "T:Microsoft.CodeAnalysis.SeparatedSyntaxList`1",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.GetSeparator(System.Int32)\">\r\n    <summary>\r\n    Gets the separator at the given index in this list.\r\n    </summary>\r\n    <param name=\"index\">The index.</param>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken}": ""
                },
                "Content": "public IEnumerable<SyntaxToken> GetSeparators()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.GetSeparators\">\r\n    <summary>\r\n    Returns the sequence of just the separator tokens.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 132
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken}": ""
                },
                "Content": "public IEnumerable<SyntaxToken> GetSeparators()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.GetSeparators\">\r\n    <summary>\r\n    Returns the sequence of just the separator tokens.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 132
              },
              "Id": "M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.GetSeparators",
              "Parent": "T:Microsoft.CodeAnalysis.SeparatedSyntaxList`1",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.GetSeparators\">\r\n    <summary>\r\n    Returns the sequence of just the separator tokens.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList": ""
                },
                "Content": "public SyntaxNodeOrTokenList GetWithSeparators()",
                "XmlDocumentation": "",
                "StartLine": 288
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList": ""
                },
                "Content": "public SyntaxNodeOrTokenList GetWithSeparators()",
                "XmlDocumentation": "",
                "StartLine": 288
              },
              "Id": "M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.GetWithSeparators",
              "Parent": "T:Microsoft.CodeAnalysis.SeparatedSyntaxList`1",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "!:TNode : node": ""
                },
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public int IndexOf(TNode node)",
                "XmlDocumentation": "",
                "StartLine": 218
              },
              "Syntax": {
                "Parameters": {
                  "!:TNode : node": ""
                },
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public int IndexOf(TNode node)",
                "XmlDocumentation": "",
                "StartLine": 218
              },
              "Id": "M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.IndexOf(`0)",
              "Parent": "T:Microsoft.CodeAnalysis.SeparatedSyntaxList`1",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Func{`0,System.Boolean} : predicate": ""
                },
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public int IndexOf(Func<TNode, bool> predicate)",
                "XmlDocumentation": "",
                "StartLine": 231
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Func{`0,System.Boolean} : predicate": ""
                },
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public int IndexOf(Func<TNode, bool> predicate)",
                "XmlDocumentation": "",
                "StartLine": 231
              },
              "Id": "M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.IndexOf(System.Func{`0,System.Boolean})",
              "Parent": "T:Microsoft.CodeAnalysis.SeparatedSyntaxList`1",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "!:TNode : node": "",
                  "T:System.Int32 : index": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SeparatedSyntaxList`1": ""
                },
                "Content": "public SeparatedSyntaxList<TNode> Insert(int index, TNode node)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.Insert(System.Int32,`0)\">\r\n    <summary>\r\n    Creates a new list with the specified node inserted at the index.\r\n    </summary>\r\n    <param name=\"index\">The index to insert at.</param>\r\n    <param name=\"node\">The node to insert.</param>\r\n</member>\r\n",
                "StartLine": 341
              },
              "Syntax": {
                "Parameters": {
                  "!:TNode : node": "",
                  "T:System.Int32 : index": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SeparatedSyntaxList`1": ""
                },
                "Content": "public SeparatedSyntaxList<TNode> Insert(int index, TNode node)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.Insert(System.Int32,`0)\">\r\n    <summary>\r\n    Creates a new list with the specified node inserted at the index.\r\n    </summary>\r\n    <param name=\"index\">The index to insert at.</param>\r\n    <param name=\"node\">The node to insert.</param>\r\n</member>\r\n",
                "StartLine": 341
              },
              "Id": "M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.Insert(System.Int32,`0)",
              "Parent": "T:Microsoft.CodeAnalysis.SeparatedSyntaxList`1",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.Insert(System.Int32,`0)\">\r\n    <summary>\r\n    Creates a new list with the specified node inserted at the index.\r\n    </summary>\r\n    <param name=\"index\">The index to insert at.</param>\r\n    <param name=\"node\">The node to insert.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{`0} : nodes": "",
                  "T:System.Int32 : index": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SeparatedSyntaxList`1": ""
                },
                "Content": "public SeparatedSyntaxList<TNode> InsertRange(int index, IEnumerable<TNode> nodes)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})\">\r\n    <summary>\r\n    Creates a new list with the specified nodes inserted at the index.\r\n    </summary>\r\n    <param name=\"index\">The index to insert at.</param>\r\n    <param name=\"nodes\">The nodes to insert.</param>\r\n</member>\r\n",
                "StartLine": 356
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{`0} : nodes": "",
                  "T:System.Int32 : index": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SeparatedSyntaxList`1": ""
                },
                "Content": "public SeparatedSyntaxList<TNode> InsertRange(int index, IEnumerable<TNode> nodes)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})\">\r\n    <summary>\r\n    Creates a new list with the specified nodes inserted at the index.\r\n    </summary>\r\n    <param name=\"index\">The index to insert at.</param>\r\n    <param name=\"nodes\">The nodes to insert.</param>\r\n</member>\r\n",
                "StartLine": 356
              },
              "Id": "M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})",
              "Parent": "T:Microsoft.CodeAnalysis.SeparatedSyntaxList`1",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})\">\r\n    <summary>\r\n    Creates a new list with the specified nodes inserted at the index.\r\n    </summary>\r\n    <param name=\"index\">The index to insert at.</param>\r\n    <param name=\"nodes\">The nodes to insert.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "!:TNode": ""
                },
                "Content": "public TNode Last()",
                "XmlDocumentation": "",
                "StartLine": 196
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "!:TNode": ""
                },
                "Content": "public TNode Last()",
                "XmlDocumentation": "",
                "StartLine": 196
              },
              "Id": "M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.Last",
              "Parent": "T:Microsoft.CodeAnalysis.SeparatedSyntaxList`1",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "!:TNode : node": ""
                },
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public int LastIndexOf(TNode node)",
                "XmlDocumentation": "",
                "StartLine": 257
              },
              "Syntax": {
                "Parameters": {
                  "!:TNode : node": ""
                },
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public int LastIndexOf(TNode node)",
                "XmlDocumentation": "",
                "StartLine": 257
              },
              "Id": "M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.LastIndexOf(`0)",
              "Parent": "T:Microsoft.CodeAnalysis.SeparatedSyntaxList`1",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Func{`0,System.Boolean} : predicate": ""
                },
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public int LastIndexOf(Func<TNode, bool> predicate)",
                "XmlDocumentation": "",
                "StartLine": 270
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Func{`0,System.Boolean} : predicate": ""
                },
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public int LastIndexOf(Func<TNode, bool> predicate)",
                "XmlDocumentation": "",
                "StartLine": 270
              },
              "Id": "M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.LastIndexOf(System.Func{`0,System.Boolean})",
              "Parent": "T:Microsoft.CodeAnalysis.SeparatedSyntaxList`1",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "!:TNode": ""
                },
                "Content": "public TNode LastOrDefault()",
                "XmlDocumentation": "",
                "StartLine": 201
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "!:TNode": ""
                },
                "Content": "public TNode LastOrDefault()",
                "XmlDocumentation": "",
                "StartLine": 201
              },
              "Id": "M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.LastOrDefault",
              "Parent": "T:Microsoft.CodeAnalysis.SeparatedSyntaxList`1",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "!:TNode : node": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SeparatedSyntaxList`1": ""
                },
                "Content": "public SeparatedSyntaxList<TNode> Remove(TNode node)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.Remove(`0)\">\r\n    <summary>\r\n    Creates a new list with specified element removed.\r\n    </summary>\r\n    <param name=\"node\">The element to remove.</param>\r\n</member>\r\n",
                "StartLine": 440
              },
              "Syntax": {
                "Parameters": {
                  "!:TNode : node": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SeparatedSyntaxList`1": ""
                },
                "Content": "public SeparatedSyntaxList<TNode> Remove(TNode node)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.Remove(`0)\">\r\n    <summary>\r\n    Creates a new list with specified element removed.\r\n    </summary>\r\n    <param name=\"node\">The element to remove.</param>\r\n</member>\r\n",
                "StartLine": 440
              },
              "Id": "M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.Remove(`0)",
              "Parent": "T:Microsoft.CodeAnalysis.SeparatedSyntaxList`1",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.Remove(`0)\">\r\n    <summary>\r\n    Creates a new list with specified element removed.\r\n    </summary>\r\n    <param name=\"node\">The element to remove.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Int32 : index": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SeparatedSyntaxList`1": ""
                },
                "Content": "public SeparatedSyntaxList<TNode> RemoveAt(int index)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.RemoveAt(System.Int32)\">\r\n    <summary>\r\n    Creates a new list with the element at the specified index removed.\r\n    </summary>\r\n    <param name=\"index\">The index of the element to remove.</param>\r\n</member>\r\n",
                "StartLine": 426
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Int32 : index": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SeparatedSyntaxList`1": ""
                },
                "Content": "public SeparatedSyntaxList<TNode> RemoveAt(int index)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.RemoveAt(System.Int32)\">\r\n    <summary>\r\n    Creates a new list with the element at the specified index removed.\r\n    </summary>\r\n    <param name=\"index\">The index of the element to remove.</param>\r\n</member>\r\n",
                "StartLine": 426
              },
              "Id": "M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.RemoveAt(System.Int32)",
              "Parent": "T:Microsoft.CodeAnalysis.SeparatedSyntaxList`1",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.RemoveAt(System.Int32)\">\r\n    <summary>\r\n    Creates a new list with the element at the specified index removed.\r\n    </summary>\r\n    <param name=\"index\">The index of the element to remove.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "!:TNode : newNode": "",
                  "!:TNode : nodeInList": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SeparatedSyntaxList`1": ""
                },
                "Content": "public SeparatedSyntaxList<TNode> Replace(TNode nodeInList, TNode newNode)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.Replace(`0,`0)\">\r\n    <summary>\r\n    Creates a new list with the specified element replaced by the new node.\r\n    </summary>\r\n    <param name=\"nodeInList\">The element to replace.</param>\r\n    <param name=\"newNode\">The new node.</param>\r\n</member>\r\n",
                "StartLine": 472
              },
              "Syntax": {
                "Parameters": {
                  "!:TNode : newNode": "",
                  "!:TNode : nodeInList": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SeparatedSyntaxList`1": ""
                },
                "Content": "public SeparatedSyntaxList<TNode> Replace(TNode nodeInList, TNode newNode)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.Replace(`0,`0)\">\r\n    <summary>\r\n    Creates a new list with the specified element replaced by the new node.\r\n    </summary>\r\n    <param name=\"nodeInList\">The element to replace.</param>\r\n    <param name=\"newNode\">The new node.</param>\r\n</member>\r\n",
                "StartLine": 472
              },
              "Id": "M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.Replace(`0,`0)",
              "Parent": "T:Microsoft.CodeAnalysis.SeparatedSyntaxList`1",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.Replace(`0,`0)\">\r\n    <summary>\r\n    Creates a new list with the specified element replaced by the new node.\r\n    </summary>\r\n    <param name=\"nodeInList\">The element to replace.</param>\r\n    <param name=\"newNode\">The new node.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "!:TNode : nodeInList": "",
                  "T:System.Collections.Generic.IEnumerable{`0} : newNodes": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SeparatedSyntaxList`1": ""
                },
                "Content": "public SeparatedSyntaxList<TNode> ReplaceRange(TNode nodeInList, IEnumerable<TNode> newNodes)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.ReplaceRange(`0,System.Collections.Generic.IEnumerable{`0})\">\r\n    <summary>\r\n    Creates a new list with the specified element replaced by the new nodes.\r\n    </summary>\r\n    <param name=\"nodeInList\">The element to replace.</param>\r\n    <param name=\"newNodes\">The new nodes.</param>\r\n</member>\r\n",
                "StartLine": 495
              },
              "Syntax": {
                "Parameters": {
                  "!:TNode : nodeInList": "",
                  "T:System.Collections.Generic.IEnumerable{`0} : newNodes": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SeparatedSyntaxList`1": ""
                },
                "Content": "public SeparatedSyntaxList<TNode> ReplaceRange(TNode nodeInList, IEnumerable<TNode> newNodes)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.ReplaceRange(`0,System.Collections.Generic.IEnumerable{`0})\">\r\n    <summary>\r\n    Creates a new list with the specified element replaced by the new nodes.\r\n    </summary>\r\n    <param name=\"nodeInList\">The element to replace.</param>\r\n    <param name=\"newNodes\">The new nodes.</param>\r\n</member>\r\n",
                "StartLine": 495
              },
              "Id": "M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.ReplaceRange(`0,System.Collections.Generic.IEnumerable{`0})",
              "Parent": "T:Microsoft.CodeAnalysis.SeparatedSyntaxList`1",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.ReplaceRange(`0,System.Collections.Generic.IEnumerable{`0})\">\r\n    <summary>\r\n    Creates a new list with the specified element replaced by the new nodes.\r\n    </summary>\r\n    <param name=\"nodeInList\">The element to replace.</param>\r\n    <param name=\"newNodes\">The new nodes.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxToken : newSeparator": "",
                  "T:Microsoft.CodeAnalysis.SyntaxToken : separatorToken": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SeparatedSyntaxList`1": ""
                },
                "Content": "public SeparatedSyntaxList<TNode> ReplaceSeparator(SyntaxToken separatorToken, SyntaxToken newSeparator)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.ReplaceSeparator(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)\">\r\n    <summary>\r\n    Creates a new list with the specified separator token replaced with the new separator.\r\n    </summary>\r\n    <param name=\"separatorToken\">The separator token to be replaced.</param>\r\n    <param name=\"newSeparator\">The new separator token.</param>\r\n</member>\r\n",
                "StartLine": 534
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxToken : newSeparator": "",
                  "T:Microsoft.CodeAnalysis.SyntaxToken : separatorToken": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SeparatedSyntaxList`1": ""
                },
                "Content": "public SeparatedSyntaxList<TNode> ReplaceSeparator(SyntaxToken separatorToken, SyntaxToken newSeparator)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.ReplaceSeparator(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)\">\r\n    <summary>\r\n    Creates a new list with the specified separator token replaced with the new separator.\r\n    </summary>\r\n    <param name=\"separatorToken\">The separator token to be replaced.</param>\r\n    <param name=\"newSeparator\">The new separator token.</param>\r\n</member>\r\n",
                "StartLine": 534
              },
              "Id": "M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.ReplaceSeparator(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)",
              "Parent": "T:Microsoft.CodeAnalysis.SeparatedSyntaxList`1",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.ReplaceSeparator(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)\">\r\n    <summary>\r\n    Creates a new list with the specified separator token replaced with the new separator.\r\n    </summary>\r\n    <param name=\"separatorToken\">The separator token to be replaced.</param>\r\n    <param name=\"newSeparator\">The new separator token.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public string ToFullString()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.ToFullString\">\r\n    <summary>\r\n    Returns the full string representation of the nodes in this list including separators, \r\n    the first node's leading trivia, and the last node or token's trailing trivia.\r\n    </summary>\r\n    <returns>\r\n    The full string representation of the nodes in this list including separators including separators,\r\n    the first node's leading trivia, and the last node or token's trailing trivia.\r\n    </returns>\r\n</member>\r\n",
                "StartLine": 174
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public string ToFullString()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.ToFullString\">\r\n    <summary>\r\n    Returns the full string representation of the nodes in this list including separators, \r\n    the first node's leading trivia, and the last node or token's trailing trivia.\r\n    </summary>\r\n    <returns>\r\n    The full string representation of the nodes in this list including separators including separators,\r\n    the first node's leading trivia, and the last node or token's trailing trivia.\r\n    </returns>\r\n</member>\r\n",
                "StartLine": 174
              },
              "Id": "M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.ToFullString",
              "Parent": "T:Microsoft.CodeAnalysis.SeparatedSyntaxList`1",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.ToFullString\">\r\n    <summary>\r\n    Returns the full string representation of the nodes in this list including separators, \r\n    the first node's leading trivia, and the last node or token's trailing trivia.\r\n    </summary>\r\n    <returns>\r\n    The full string representation of the nodes in this list including separators including separators,\r\n    the first node's leading trivia, and the last node or token's trailing trivia.\r\n    </returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public override string ToString()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.ToString\">\r\n    <summary>\r\n    Returns the string representation of the nodes in this list including separators but not including \r\n    the first node's leading trivia and the last node or token's trailing trivia.\r\n    </summary>\r\n    <returns>\r\n    The string representation of the nodes in this list including separators but not including \r\n    the first node's leading trivia and the last node or token's trailing trivia.\r\n    </returns>\r\n</member>\r\n",
                "StartLine": 161
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public override string ToString()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.ToString\">\r\n    <summary>\r\n    Returns the string representation of the nodes in this list including separators but not including \r\n    the first node's leading trivia and the last node or token's trailing trivia.\r\n    </summary>\r\n    <returns>\r\n    The string representation of the nodes in this list including separators but not including \r\n    the first node's leading trivia and the last node or token's trailing trivia.\r\n    </returns>\r\n</member>\r\n",
                "StartLine": 161
              },
              "Id": "M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.ToString",
              "Parent": "T:Microsoft.CodeAnalysis.SeparatedSyntaxList`1",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.ToString\">\r\n    <summary>\r\n    Returns the string representation of the nodes in this list including separators but not including \r\n    the first node's leading trivia and the last node or token's trailing trivia.\r\n    </summary>\r\n    <returns>\r\n    The string representation of the nodes in this list including separators but not including \r\n    the first node's leading trivia and the last node or token's trailing trivia.\r\n    </returns>\r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Int32",
                "Content": "public int Count",
                "XmlDocumentation": "",
                "StartLine": 63
              },
              "Syntax": {
                "PropertyType": "T:System.Int32",
                "Content": "public int Count",
                "XmlDocumentation": "",
                "StartLine": 63
              },
              "Id": "P:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.Count",
              "Parent": "T:Microsoft.CodeAnalysis.SeparatedSyntaxList`1",
              "XmlDocumentation": ""
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Text.TextSpan",
                "Content": "public TextSpan FullSpan",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.FullSpan\">\r\n    <summary>\r\n    The absolute span of the list elements in characters, including the leading and trailing trivia of the first and last elements.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 140
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Text.TextSpan",
                "Content": "public TextSpan FullSpan",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.FullSpan\">\r\n    <summary>\r\n    The absolute span of the list elements in characters, including the leading and trailing trivia of the first and last elements.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 140
              },
              "Id": "P:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.FullSpan",
              "Parent": "T:Microsoft.CodeAnalysis.SeparatedSyntaxList`1",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.FullSpan\">\r\n    <summary>\r\n    The absolute span of the list elements in characters, including the leading and trailing trivia of the first and last elements.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Int32",
                "Content": "public int SeparatorCount",
                "XmlDocumentation": "",
                "StartLine": 71
              },
              "Syntax": {
                "PropertyType": "T:System.Int32",
                "Content": "public int SeparatorCount",
                "XmlDocumentation": "",
                "StartLine": 71
              },
              "Id": "P:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.SeparatorCount",
              "Parent": "T:Microsoft.CodeAnalysis.SeparatedSyntaxList`1",
              "XmlDocumentation": ""
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Text.TextSpan",
                "Content": "public TextSpan Span",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.Span\">\r\n    <summary>\r\n    The absolute span of the list elements in characters, not including the leading and trailing trivia of the first and last elements.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 148
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Text.TextSpan",
                "Content": "public TextSpan Span",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.Span\">\r\n    <summary>\r\n    The absolute span of the list elements in characters, not including the leading and trailing trivia of the first and last elements.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 148
              },
              "Id": "P:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.Span",
              "Parent": "T:Microsoft.CodeAnalysis.SeparatedSyntaxList`1",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SeparatedSyntaxList`1.Span\">\r\n    <summary>\r\n    The absolute span of the list elements in characters, not including the leading and trailing trivia of the first and last elements.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Syntax\\SeparatedSyntaxList.cs",
          "InheritanceHierarchy": [
            "T:System.Object",
            "T:System.ValueType"
          ],
          "Syntax": {
            "Content": "public partial struct SeparatedSyntaxList<TNode>\r\n    where TNode : SyntaxNode",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.CodeAnalysis.SeparatedSyntaxList`1",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Int32 : major": "",
                  "T:System.Int32 : minor": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SubsystemVersion": ""
                },
                "Content": "public static SubsystemVersion Create(int major, int minor)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SubsystemVersion.Create(System.Int32,System.Int32)\">\r\n    <summary>\r\n    Create a new instance of subsystem version with specified major and minor values.\r\n    </summary>\r\n    <param name=\"major\">major subsystem version</param>\r\n    <param name=\"minor\">minor subsystem version</param>\r\n    <returns>subsystem version with provided major and minor</returns>\r\n</member>\r\n",
                "StartLine": 140
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Int32 : major": "",
                  "T:System.Int32 : minor": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SubsystemVersion": ""
                },
                "Content": "public static SubsystemVersion Create(int major, int minor)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SubsystemVersion.Create(System.Int32,System.Int32)\">\r\n    <summary>\r\n    Create a new instance of subsystem version with specified major and minor values.\r\n    </summary>\r\n    <param name=\"major\">major subsystem version</param>\r\n    <param name=\"minor\">minor subsystem version</param>\r\n    <returns>subsystem version with provided major and minor</returns>\r\n</member>\r\n",
                "StartLine": 140
              },
              "Id": "M:Microsoft.CodeAnalysis.SubsystemVersion.Create(System.Int32,System.Int32)",
              "Parent": "T:Microsoft.CodeAnalysis.SubsystemVersion",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SubsystemVersion.Create(System.Int32,System.Int32)\">\r\n    <summary>\r\n    Create a new instance of subsystem version with specified major and minor values.\r\n    </summary>\r\n    <param name=\"major\">major subsystem version</param>\r\n    <param name=\"minor\">minor subsystem version</param>\r\n    <returns>subsystem version with provided major and minor</returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SubsystemVersion : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool Equals(SubsystemVersion other)",
                "XmlDocumentation": "",
                "StartLine": 195
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SubsystemVersion : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool Equals(SubsystemVersion other)",
                "XmlDocumentation": "",
                "StartLine": 195
              },
              "Id": "M:Microsoft.CodeAnalysis.SubsystemVersion.Equals(Microsoft.CodeAnalysis.SubsystemVersion)",
              "Parent": "T:Microsoft.CodeAnalysis.SubsystemVersion",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Object : obj": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public override bool Equals(object obj)",
                "XmlDocumentation": "",
                "StartLine": 185
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Object : obj": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public override bool Equals(object obj)",
                "XmlDocumentation": "",
                "StartLine": 185
              },
              "Id": "M:Microsoft.CodeAnalysis.SubsystemVersion.Equals(System.Object)",
              "Parent": "T:Microsoft.CodeAnalysis.SubsystemVersion",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public override int GetHashCode()",
                "XmlDocumentation": "",
                "StartLine": 190
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public override int GetHashCode()",
                "XmlDocumentation": "",
                "StartLine": 190
              },
              "Id": "M:Microsoft.CodeAnalysis.SubsystemVersion.GetHashCode",
              "Parent": "T:Microsoft.CodeAnalysis.SubsystemVersion",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public override string ToString()",
                "XmlDocumentation": "",
                "StartLine": 200
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public override string ToString()",
                "XmlDocumentation": "",
                "StartLine": 200
              },
              "Id": "M:Microsoft.CodeAnalysis.SubsystemVersion.ToString",
              "Parent": "T:Microsoft.CodeAnalysis.SubsystemVersion",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SubsystemVersion : version": "",
                  "T:System.String : str": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public static bool TryParse(string str, out SubsystemVersion version)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SubsystemVersion.TryParse(System.String,Microsoft.CodeAnalysis.SubsystemVersion@)\">\r\n    <summary>\r\n    Try parse subsystem version in \"x.y\" format. Note, no spaces are allowed in string representation.\r\n    </summary>\r\n    <param name=\"str\">String to parse</param>\r\n    <param name=\"version\">the value if successfully parsed or None otherwise</param>\r\n    <returns>true if parsed successfully, false otherwise</returns>\r\n</member>\r\n",
                "StartLine": 79
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SubsystemVersion : version": "",
                  "T:System.String : str": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public static bool TryParse(string str, out SubsystemVersion version)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SubsystemVersion.TryParse(System.String,Microsoft.CodeAnalysis.SubsystemVersion@)\">\r\n    <summary>\r\n    Try parse subsystem version in \"x.y\" format. Note, no spaces are allowed in string representation.\r\n    </summary>\r\n    <param name=\"str\">String to parse</param>\r\n    <param name=\"version\">the value if successfully parsed or None otherwise</param>\r\n    <returns>true if parsed successfully, false otherwise</returns>\r\n</member>\r\n",
                "StartLine": 79
              },
              "Id": "M:Microsoft.CodeAnalysis.SubsystemVersion.TryParse(System.String,Microsoft.CodeAnalysis.SubsystemVersion@)",
              "Parent": "T:Microsoft.CodeAnalysis.SubsystemVersion",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SubsystemVersion.TryParse(System.String,Microsoft.CodeAnalysis.SubsystemVersion@)\">\r\n    <summary>\r\n    Try parse subsystem version in \"x.y\" format. Note, no spaces are allowed in string representation.\r\n    </summary>\r\n    <param name=\"str\">String to parse</param>\r\n    <param name=\"version\">the value if successfully parsed or None otherwise</param>\r\n    <returns>true if parsed successfully, false otherwise</returns>\r\n</member>\r\n"
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "Major",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.SubsystemVersion.Major\">\r\n    <summary>\r\n    Major subsystem version\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 30
              },
              "Id": "F:Microsoft.CodeAnalysis.SubsystemVersion.Major",
              "Parent": "T:Microsoft.CodeAnalysis.SubsystemVersion",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.SubsystemVersion.Major\">\r\n    <summary>\r\n    Major subsystem version\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "Minor",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.SubsystemVersion.Minor\">\r\n    <summary>\r\n    Minor subsystem version\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 35
              },
              "Id": "F:Microsoft.CodeAnalysis.SubsystemVersion.Minor",
              "Parent": "T:Microsoft.CodeAnalysis.SubsystemVersion",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.SubsystemVersion.Minor\">\r\n    <summary>\r\n    Minor subsystem version\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "None",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.SubsystemVersion.None\">\r\n    <summary>\r\n    Subsystem version not specified\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 40
              },
              "Id": "F:Microsoft.CodeAnalysis.SubsystemVersion.None",
              "Parent": "T:Microsoft.CodeAnalysis.SubsystemVersion",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.SubsystemVersion.None\">\r\n    <summary>\r\n    Subsystem version not specified\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "Windows2000",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.SubsystemVersion.Windows2000\">\r\n    <summary>\r\n    Subsystem version: Windows 2000\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 45
              },
              "Id": "F:Microsoft.CodeAnalysis.SubsystemVersion.Windows2000",
              "Parent": "T:Microsoft.CodeAnalysis.SubsystemVersion",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.SubsystemVersion.Windows2000\">\r\n    <summary>\r\n    Subsystem version: Windows 2000\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "Windows7",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.SubsystemVersion.Windows7\">\r\n    <summary>\r\n    Subsystem version: Windows 7\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 60
              },
              "Id": "F:Microsoft.CodeAnalysis.SubsystemVersion.Windows7",
              "Parent": "T:Microsoft.CodeAnalysis.SubsystemVersion",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.SubsystemVersion.Windows7\">\r\n    <summary>\r\n    Subsystem version: Windows 7\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "Windows8",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.SubsystemVersion.Windows8\">\r\n    <summary>\r\n    Subsystem version: Windows 8\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 65
              },
              "Id": "F:Microsoft.CodeAnalysis.SubsystemVersion.Windows8",
              "Parent": "T:Microsoft.CodeAnalysis.SubsystemVersion",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.SubsystemVersion.Windows8\">\r\n    <summary>\r\n    Subsystem version: Windows 8\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "WindowsVista",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.SubsystemVersion.WindowsVista\">\r\n    <summary>\r\n    Subsystem version: Windows Vista\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 55
              },
              "Id": "F:Microsoft.CodeAnalysis.SubsystemVersion.WindowsVista",
              "Parent": "T:Microsoft.CodeAnalysis.SubsystemVersion",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.SubsystemVersion.WindowsVista\">\r\n    <summary>\r\n    Subsystem version: Windows Vista\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "WindowsXP",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.SubsystemVersion.WindowsXP\">\r\n    <summary>\r\n    Subsystem version: Windows XP \r\n    </summary>\r\n</member>\r\n",
                "StartLine": 50
              },
              "Id": "F:Microsoft.CodeAnalysis.SubsystemVersion.WindowsXP",
              "Parent": "T:Microsoft.CodeAnalysis.SubsystemVersion",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.SubsystemVersion.WindowsXP\">\r\n    <summary>\r\n    Subsystem version: Windows XP \r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool IsValid",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SubsystemVersion.IsValid\">\r\n    <summary>\r\n    True if the subsystem version has a valid value\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 175
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool IsValid",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SubsystemVersion.IsValid\">\r\n    <summary>\r\n    True if the subsystem version has a valid value\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 175
              },
              "Id": "P:Microsoft.CodeAnalysis.SubsystemVersion.IsValid",
              "Parent": "T:Microsoft.CodeAnalysis.SubsystemVersion",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SubsystemVersion.IsValid\">\r\n    <summary>\r\n    True if the subsystem version has a valid value\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Compilation\\SubsystemVersion.cs",
          "InheritanceHierarchy": [
            "T:System.Object",
            "T:System.ValueType"
          ],
          "Syntax": {
            "Content": "public struct SubsystemVersion",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.SubsystemVersion\">\r\n    <summary>\r\n    Represents subsystem version, see /subsystemversion command line \r\n    option for details and valid values.\r\n    \r\n    The following table lists common subsystem versions of Windows.\r\n    \r\n    Windows version             Subsystem version\r\n      - Windows 2000                5.00\r\n      - Windows XP                  5.01\r\n      - Windows Vista               6.00\r\n      - Windows 7                   6.01\r\n      - Windows 8 Release Preview   6.02\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.SubsystemVersion",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.SubsystemVersion\">\r\n    <summary>\r\n    Represents subsystem version, see /subsystemversion command line \r\n    option for details and valid values.\r\n    \r\n    The following table lists common subsystem versions of Windows.\r\n    \r\n    Windows version             Subsystem version\r\n      - Windows 2000                5.00\r\n      - Windows XP                  5.01\r\n      - Windows Vista               6.00\r\n      - Windows 7                   6.01\r\n      - Windows 8 Release Preview   6.02\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public override string ToString()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SymbolDisplayPart.ToString\">\r\n    <summary>\r\n    Returns the string value of this symbol display part.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 60
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public override string ToString()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SymbolDisplayPart.ToString\">\r\n    <summary>\r\n    Returns the string value of this symbol display part.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 60
              },
              "Id": "M:Microsoft.CodeAnalysis.SymbolDisplayPart.ToString",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolDisplayPart",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SymbolDisplayPart.ToString\">\r\n    <summary>\r\n    Returns the string value of this symbol display part.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SymbolDisplayPartKind",
                "Content": "public SymbolDisplayPartKind Kind",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SymbolDisplayPart.Kind\">\r\n    <summary>\r\n    Gets the kind of this display part.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 25
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SymbolDisplayPartKind",
                "Content": "public SymbolDisplayPartKind Kind",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SymbolDisplayPart.Kind\">\r\n    <summary>\r\n    Gets the kind of this display part.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 25
              },
              "Id": "P:Microsoft.CodeAnalysis.SymbolDisplayPart.Kind",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolDisplayPart",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SymbolDisplayPart.Kind\">\r\n    <summary>\r\n    Gets the kind of this display part.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.ISymbol",
                "Content": "public ISymbol Symbol",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SymbolDisplayPart.Symbol\">\r\n    <summary>\r\n    Gets the symbol associated with this display part, if there is one.\r\n    For example, the <see cref=\"T:Microsoft.CodeAnalysis.ITypeSymbol\"/> associated with a class name.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n",
                "StartLine": 32
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.ISymbol",
                "Content": "public ISymbol Symbol",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SymbolDisplayPart.Symbol\">\r\n    <summary>\r\n    Gets the symbol associated with this display part, if there is one.\r\n    For example, the <see cref=\"T:Microsoft.CodeAnalysis.ITypeSymbol\"/> associated with a class name.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n",
                "StartLine": 32
              },
              "Id": "P:Microsoft.CodeAnalysis.SymbolDisplayPart.Symbol",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolDisplayPart",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SymbolDisplayPart.Symbol\">\r\n    <summary>\r\n    Gets the symbol associated with this display part, if there is one.\r\n    For example, the <see cref=\"T:Microsoft.CodeAnalysis.ITypeSymbol\"/> associated with a class name.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
            }
          ],
          "Constructors": [
            {
              "ConstructorSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.ISymbol : symbol": "",
                  "T:Microsoft.CodeAnalysis.SymbolDisplayPartKind : kind": "",
                  "T:System.String : text": ""
                },
                "Content": "public SymbolDisplayPart(SymbolDisplayPartKind kind, ISymbol symbol, string text)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SymbolDisplayPart.#ctor(Microsoft.CodeAnalysis.SymbolDisplayPartKind,Microsoft.CodeAnalysis.ISymbol,System.String)\">\r\n    <summary>\r\n    Construct a non-formattable <see cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayPart\"/> (i.e. with a fixed string value).\r\n    </summary>\r\n    <param name=\"kind\">The kind of the display part.</param>\r\n    <param name=\"symbol\">An optional associated symbol.</param>\r\n    <param name=\"text\">The fixed string value of the part.</param>\r\n</member>\r\n",
                "StartLine": 40
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.ISymbol : symbol": "",
                  "T:Microsoft.CodeAnalysis.SymbolDisplayPartKind : kind": "",
                  "T:System.String : text": ""
                },
                "Content": "public SymbolDisplayPart(SymbolDisplayPartKind kind, ISymbol symbol, string text)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SymbolDisplayPart.#ctor(Microsoft.CodeAnalysis.SymbolDisplayPartKind,Microsoft.CodeAnalysis.ISymbol,System.String)\">\r\n    <summary>\r\n    Construct a non-formattable <see cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayPart\"/> (i.e. with a fixed string value).\r\n    </summary>\r\n    <param name=\"kind\">The kind of the display part.</param>\r\n    <param name=\"symbol\">An optional associated symbol.</param>\r\n    <param name=\"text\">The fixed string value of the part.</param>\r\n</member>\r\n",
                "StartLine": 40
              },
              "Id": "M:Microsoft.CodeAnalysis.SymbolDisplayPart.#ctor(Microsoft.CodeAnalysis.SymbolDisplayPartKind,Microsoft.CodeAnalysis.ISymbol,System.String)",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolDisplayPart",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SymbolDisplayPart.#ctor(Microsoft.CodeAnalysis.SymbolDisplayPartKind,Microsoft.CodeAnalysis.ISymbol,System.String)\">\r\n    <summary>\r\n    Construct a non-formattable <see cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayPart\"/> (i.e. with a fixed string value).\r\n    </summary>\r\n    <param name=\"kind\">The kind of the display part.</param>\r\n    <param name=\"symbol\">An optional associated symbol.</param>\r\n    <param name=\"text\">The fixed string value of the part.</param>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\SymbolDisplay\\SymbolDisplayPart.cs",
          "InheritanceHierarchy": [
            "T:System.Object",
            "T:System.ValueType"
          ],
          "Syntax": {
            "Content": "public struct SymbolDisplayPart",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.SymbolDisplayPart\">\r\n    <summary>\r\n    A single element of a symbol description.  For example, a keyword, a punctuation character or\r\n    a class name.\r\n    </summary>\r\n    <seealso cref=\"M:Microsoft.CodeAnalysis.ISymbol.ToDisplayParts(Microsoft.CodeAnalysis.SymbolDisplayFormat)\"/>\r\n    <seealso cref=\"M:Microsoft.CodeAnalysis.ISymbol.ToMinimalDisplayParts(Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.SymbolDisplayFormat)\"/>\r\n    <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayPartKind\"/>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.SymbolDisplayPart",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.SymbolDisplayPart\">\r\n    <summary>\r\n    A single element of a symbol description.  For example, a keyword, a punctuation character or\r\n    a class name.\r\n    </summary>\r\n    <seealso cref=\"M:Microsoft.CodeAnalysis.ISymbol.ToDisplayParts(Microsoft.CodeAnalysis.SymbolDisplayFormat)\"/>\r\n    <seealso cref=\"M:Microsoft.CodeAnalysis.ISymbol.ToMinimalDisplayParts(Microsoft.CodeAnalysis.SemanticModel,System.Int32,Microsoft.CodeAnalysis.SymbolDisplayFormat)\"/>\r\n    <seealso cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayPartKind\"/>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SymbolInfo : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool Equals(SymbolInfo other)",
                "XmlDocumentation": "",
                "StartLine": 96
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SymbolInfo : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool Equals(SymbolInfo other)",
                "XmlDocumentation": "",
                "StartLine": 96
              },
              "Id": "M:Microsoft.CodeAnalysis.SymbolInfo.Equals(Microsoft.CodeAnalysis.SymbolInfo)",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolInfo",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Object : obj": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public override bool Equals(object obj)",
                "XmlDocumentation": "",
                "StartLine": 91
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Object : obj": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public override bool Equals(object obj)",
                "XmlDocumentation": "",
                "StartLine": 91
              },
              "Id": "M:Microsoft.CodeAnalysis.SymbolInfo.Equals(System.Object)",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolInfo",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public override int GetHashCode()",
                "XmlDocumentation": "",
                "StartLine": 103
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public override int GetHashCode()",
                "XmlDocumentation": "",
                "StartLine": 103
              },
              "Id": "M:Microsoft.CodeAnalysis.SymbolInfo.GetHashCode",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolInfo",
              "XmlDocumentation": ""
            }
          ],
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.CandidateReason",
                "Content": "public CandidateReason CandidateReason",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SymbolInfo.CandidateReason\">\r\n    <summary>\r\n     If the expression did not successfully resolve to a symbol, but there were one or more\r\n     symbols that may have been considered but discarded, this property describes why those\r\n     symbol or symbols were not considered suitable.\r\n     </summary>\r\n</member>\r\n",
                "StartLine": 56
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.CandidateReason",
                "Content": "public CandidateReason CandidateReason",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SymbolInfo.CandidateReason\">\r\n    <summary>\r\n     If the expression did not successfully resolve to a symbol, but there were one or more\r\n     symbols that may have been considered but discarded, this property describes why those\r\n     symbol or symbols were not considered suitable.\r\n     </summary>\r\n</member>\r\n",
                "StartLine": 56
              },
              "Id": "P:Microsoft.CodeAnalysis.SymbolInfo.CandidateReason",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolInfo",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SymbolInfo.CandidateReason\">\r\n    <summary>\r\n     If the expression did not successfully resolve to a symbol, but there were one or more\r\n     symbols that may have been considered but discarded, this property describes why those\r\n     symbol or symbols were not considered suitable.\r\n     </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ISymbol}",
                "Content": "public ImmutableArray<ISymbol> CandidateSymbols",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SymbolInfo.CandidateSymbols\">\r\n    <summary>\r\n    If the expression did not successfully resolve to a symbol, but there were one or more\r\n    symbols that may have been considered but discarded, this property returns those\r\n    symbols. The reason that the symbols did not successfully resolve to a symbol are\r\n    available in the CandidateReason property. For example, if the symbol was inaccessible,\r\n    ambiguous, or used in the wrong context.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 31
              },
              "Syntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.ISymbol}",
                "Content": "public ImmutableArray<ISymbol> CandidateSymbols",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SymbolInfo.CandidateSymbols\">\r\n    <summary>\r\n    If the expression did not successfully resolve to a symbol, but there were one or more\r\n    symbols that may have been considered but discarded, this property returns those\r\n    symbols. The reason that the symbols did not successfully resolve to a symbol are\r\n    available in the CandidateReason property. For example, if the symbol was inaccessible,\r\n    ambiguous, or used in the wrong context.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 31
              },
              "Id": "P:Microsoft.CodeAnalysis.SymbolInfo.CandidateSymbols",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolInfo",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SymbolInfo.CandidateSymbols\">\r\n    <summary>\r\n    If the expression did not successfully resolve to a symbol, but there were one or more\r\n    symbols that may have been considered but discarded, this property returns those\r\n    symbols. The reason that the symbols did not successfully resolve to a symbol are\r\n    available in the CandidateReason property. For example, if the symbol was inaccessible,\r\n    ambiguous, or used in the wrong context.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.ISymbol",
                "Content": "public ISymbol Symbol",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SymbolInfo.Symbol\">\r\n    <summary>\r\n    The symbol that was referred to by the syntax node, if any. Returns null if the given\r\n    expression did not bind successfully to a single symbol. If null is returned, it may\r\n    still be that case that we have one or more \"best guesses\" as to what symbol was\r\n    intended. These best guesses are available via the CandidateSymbols property.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 22
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.ISymbol",
                "Content": "public ISymbol Symbol",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SymbolInfo.Symbol\">\r\n    <summary>\r\n    The symbol that was referred to by the syntax node, if any. Returns null if the given\r\n    expression did not bind successfully to a single symbol. If null is returned, it may\r\n    still be that case that we have one or more \"best guesses\" as to what symbol was\r\n    intended. These best guesses are available via the CandidateSymbols property.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 22
              },
              "Id": "P:Microsoft.CodeAnalysis.SymbolInfo.Symbol",
              "Parent": "T:Microsoft.CodeAnalysis.SymbolInfo",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SymbolInfo.Symbol\">\r\n    <summary>\r\n    The symbol that was referred to by the syntax node, if any. Returns null if the given\r\n    expression did not bind successfully to a single symbol. If null is returned, it may\r\n    still be that case that we have one or more \"best guesses\" as to what symbol was\r\n    intended. These best guesses are available via the CandidateSymbols property.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Compilation\\SymbolInfo.cs",
          "InheritanceHierarchy": [
            "T:System.Object",
            "T:System.ValueType"
          ],
          "Syntax": {
            "Content": "public struct SymbolInfo",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.CodeAnalysis.SymbolInfo",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "!:TNode : node": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxList`1": ""
                },
                "Content": "public SyntaxList<TNode> Add(TNode node)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxList`1.Add(`0)\">\r\n    <summary>\r\n    Creates a new list with the specified node added at the end.\r\n    </summary>\r\n    <param name=\"node\">The node to add.</param>\r\n</member>\r\n",
                "StartLine": 148
              },
              "Syntax": {
                "Parameters": {
                  "!:TNode : node": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxList`1": ""
                },
                "Content": "public SyntaxList<TNode> Add(TNode node)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxList`1.Add(`0)\">\r\n    <summary>\r\n    Creates a new list with the specified node added at the end.\r\n    </summary>\r\n    <param name=\"node\">The node to add.</param>\r\n</member>\r\n",
                "StartLine": 148
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxList`1.Add(`0)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxList`1",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxList`1.Add(`0)\">\r\n    <summary>\r\n    Creates a new list with the specified node added at the end.\r\n    </summary>\r\n    <param name=\"node\">The node to add.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{`0} : nodes": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxList`1": ""
                },
                "Content": "public SyntaxList<TNode> AddRange(IEnumerable<TNode> nodes)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxList`1.AddRange(System.Collections.Generic.IEnumerable{`0})\">\r\n    <summary>\r\n    Creates a new list with the specified nodes added at the end.\r\n    </summary>\r\n    <param name=\"nodes\">The nodes to add.</param>\r\n</member>\r\n",
                "StartLine": 157
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{`0} : nodes": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxList`1": ""
                },
                "Content": "public SyntaxList<TNode> AddRange(IEnumerable<TNode> nodes)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxList`1.AddRange(System.Collections.Generic.IEnumerable{`0})\">\r\n    <summary>\r\n    Creates a new list with the specified nodes added at the end.\r\n    </summary>\r\n    <param name=\"nodes\">The nodes to add.</param>\r\n</member>\r\n",
                "StartLine": 157
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxList`1.AddRange(System.Collections.Generic.IEnumerable{`0})",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxList`1",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxList`1.AddRange(System.Collections.Generic.IEnumerable{`0})\">\r\n    <summary>\r\n    Creates a new list with the specified nodes added at the end.\r\n    </summary>\r\n    <param name=\"nodes\">The nodes to add.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool Any()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxList`1.Any\">\r\n    <summary>\r\n    True if the list has at least one node.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 343
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool Any()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxList`1.Any\">\r\n    <summary>\r\n    True if the list has at least one node.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 343
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxList`1.Any",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxList`1",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxList`1.Any\">\r\n    <summary>\r\n    True if the list has at least one node.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxList`1 : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool Equals(SyntaxList<TNode> other)",
                "XmlDocumentation": "",
                "StartLine": 393
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxList`1 : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool Equals(SyntaxList<TNode> other)",
                "XmlDocumentation": "",
                "StartLine": 393
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxList`1.Equals(Microsoft.CodeAnalysis.SyntaxList{`0})",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxList`1",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Object : obj": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public override bool Equals(object obj)",
                "XmlDocumentation": "",
                "StartLine": 398
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Object : obj": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public override bool Equals(object obj)",
                "XmlDocumentation": "",
                "StartLine": 398
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxList`1.Equals(System.Object)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxList`1",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "!:TNode": ""
                },
                "Content": "public TNode First()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxList`1.First\">\r\n    <summary>\r\n    The first node in the list.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 297
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "!:TNode": ""
                },
                "Content": "public TNode First()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxList`1.First\">\r\n    <summary>\r\n    The first node in the list.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 297
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxList`1.First",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxList`1",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxList`1.First\">\r\n    <summary>\r\n    The first node in the list.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "!:TNode": ""
                },
                "Content": "public TNode FirstOrDefault()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxList`1.FirstOrDefault\">\r\n    <summary>\r\n    The first node in the list or default if the list is empty.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 305
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "!:TNode": ""
                },
                "Content": "public TNode FirstOrDefault()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxList`1.FirstOrDefault\">\r\n    <summary>\r\n    The first node in the list or default if the list is empty.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 305
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxList`1.FirstOrDefault",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxList`1",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxList`1.FirstOrDefault\">\r\n    <summary>\r\n    The first node in the list or default if the list is empty.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxList`1.Enumerator": ""
                },
                "Content": "public Enumerator GetEnumerator()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxList`1.GetEnumerator\">\r\n    <summary>\r\n    Get's the enumerator for this list.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 358
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxList`1.Enumerator": ""
                },
                "Content": "public Enumerator GetEnumerator()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxList`1.GetEnumerator\">\r\n    <summary>\r\n    Get's the enumerator for this list.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 358
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxList`1.GetEnumerator",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxList`1",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxList`1.GetEnumerator\">\r\n    <summary>\r\n    Get's the enumerator for this list.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public override int GetHashCode()",
                "XmlDocumentation": "",
                "StartLine": 403
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public override int GetHashCode()",
                "XmlDocumentation": "",
                "StartLine": 403
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxList`1.GetHashCode",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxList`1",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "!:TNode : node": ""
                },
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public int IndexOf(TNode node)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxList`1.IndexOf(`0)\">\r\n    <summary>\r\n    The index of the node in this list, or -1 if the node is not in the list.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 421
              },
              "Syntax": {
                "Parameters": {
                  "!:TNode : node": ""
                },
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public int IndexOf(TNode node)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxList`1.IndexOf(`0)\">\r\n    <summary>\r\n    The index of the node in this list, or -1 if the node is not in the list.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 421
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxList`1.IndexOf(`0)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxList`1",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxList`1.IndexOf(`0)\">\r\n    <summary>\r\n    The index of the node in this list, or -1 if the node is not in the list.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Func{`0,System.Boolean} : predicate": ""
                },
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public int IndexOf(Func<TNode, bool> predicate)",
                "XmlDocumentation": "",
                "StartLine": 437
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Func{`0,System.Boolean} : predicate": ""
                },
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public int IndexOf(Func<TNode, bool> predicate)",
                "XmlDocumentation": "",
                "StartLine": 437
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxList`1.IndexOf(System.Func{`0,System.Boolean})",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxList`1",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "!:TNode : node": "",
                  "T:System.Int32 : index": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxList`1": ""
                },
                "Content": "public SyntaxList<TNode> Insert(int index, TNode node)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxList`1.Insert(System.Int32,`0)\">\r\n    <summary>\r\n    Creates a new list with the specified node inserted at the index.\r\n    </summary>\r\n    <param name=\"index\">The index to insert at.</param>\r\n    <param name=\"node\">The node to insert.</param>\r\n</member>\r\n",
                "StartLine": 167
              },
              "Syntax": {
                "Parameters": {
                  "!:TNode : node": "",
                  "T:System.Int32 : index": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxList`1": ""
                },
                "Content": "public SyntaxList<TNode> Insert(int index, TNode node)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxList`1.Insert(System.Int32,`0)\">\r\n    <summary>\r\n    Creates a new list with the specified node inserted at the index.\r\n    </summary>\r\n    <param name=\"index\">The index to insert at.</param>\r\n    <param name=\"node\">The node to insert.</param>\r\n</member>\r\n",
                "StartLine": 167
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxList`1.Insert(System.Int32,`0)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxList`1",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxList`1.Insert(System.Int32,`0)\">\r\n    <summary>\r\n    Creates a new list with the specified node inserted at the index.\r\n    </summary>\r\n    <param name=\"index\">The index to insert at.</param>\r\n    <param name=\"node\">The node to insert.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{`0} : nodes": "",
                  "T:System.Int32 : index": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxList`1": ""
                },
                "Content": "public SyntaxList<TNode> InsertRange(int index, IEnumerable<TNode> nodes)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})\">\r\n    <summary>\r\n    Creates a new list with the specified nodes inserted at the index.\r\n    </summary>\r\n    <param name=\"index\">The index to insert at.</param>\r\n    <param name=\"nodes\">The nodes to insert.</param>\r\n</member>\r\n",
                "StartLine": 182
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{`0} : nodes": "",
                  "T:System.Int32 : index": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxList`1": ""
                },
                "Content": "public SyntaxList<TNode> InsertRange(int index, IEnumerable<TNode> nodes)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})\">\r\n    <summary>\r\n    Creates a new list with the specified nodes inserted at the index.\r\n    </summary>\r\n    <param name=\"index\">The index to insert at.</param>\r\n    <param name=\"nodes\">The nodes to insert.</param>\r\n</member>\r\n",
                "StartLine": 182
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxList`1",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})\">\r\n    <summary>\r\n    Creates a new list with the specified nodes inserted at the index.\r\n    </summary>\r\n    <param name=\"index\">The index to insert at.</param>\r\n    <param name=\"nodes\">The nodes to insert.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "!:TNode": ""
                },
                "Content": "public TNode Last()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxList`1.Last\">\r\n    <summary>\r\n    The last node in the list.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 320
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "!:TNode": ""
                },
                "Content": "public TNode Last()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxList`1.Last\">\r\n    <summary>\r\n    The last node in the list.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 320
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxList`1.Last",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxList`1",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxList`1.Last\">\r\n    <summary>\r\n    The last node in the list.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "!:TNode : node": ""
                },
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public int LastIndexOf(TNode node)",
                "XmlDocumentation": "",
                "StartLine": 469
              },
              "Syntax": {
                "Parameters": {
                  "!:TNode : node": ""
                },
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public int LastIndexOf(TNode node)",
                "XmlDocumentation": "",
                "StartLine": 469
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxList`1.LastIndexOf(`0)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxList`1",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Func{`0,System.Boolean} : predicate": ""
                },
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public int LastIndexOf(Func<TNode, bool> predicate)",
                "XmlDocumentation": "",
                "StartLine": 482
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Func{`0,System.Boolean} : predicate": ""
                },
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public int LastIndexOf(Func<TNode, bool> predicate)",
                "XmlDocumentation": "",
                "StartLine": 482
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxList`1.LastIndexOf(System.Func{`0,System.Boolean})",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxList`1",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "!:TNode": ""
                },
                "Content": "public TNode LastOrDefault()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxList`1.LastOrDefault\">\r\n    <summary>\r\n    The last node in the list or default if the list is empty.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 328
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "!:TNode": ""
                },
                "Content": "public TNode LastOrDefault()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxList`1.LastOrDefault\">\r\n    <summary>\r\n    The last node in the list or default if the list is empty.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 328
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxList`1.LastOrDefault",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxList`1",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxList`1.LastOrDefault\">\r\n    <summary>\r\n    The last node in the list or default if the list is empty.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "!:TNode : node": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxList`1": ""
                },
                "Content": "public SyntaxList<TNode> Remove(TNode node)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxList`1.Remove(`0)\">\r\n    <summary>\r\n    Creates a new list with the element removed.\r\n    </summary>\r\n    <param name=\"node\">The element to remove.</param>\r\n</member>\r\n",
                "StartLine": 225
              },
              "Syntax": {
                "Parameters": {
                  "!:TNode : node": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxList`1": ""
                },
                "Content": "public SyntaxList<TNode> Remove(TNode node)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxList`1.Remove(`0)\">\r\n    <summary>\r\n    Creates a new list with the element removed.\r\n    </summary>\r\n    <param name=\"node\">The element to remove.</param>\r\n</member>\r\n",
                "StartLine": 225
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxList`1.Remove(`0)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxList`1",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxList`1.Remove(`0)\">\r\n    <summary>\r\n    Creates a new list with the element removed.\r\n    </summary>\r\n    <param name=\"node\">The element to remove.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Int32 : index": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxList`1": ""
                },
                "Content": "public SyntaxList<TNode> RemoveAt(int index)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxList`1.RemoveAt(System.Int32)\">\r\n    <summary>\r\n    Creates a new list with the element at specified index removed.\r\n    </summary>\r\n    <param name=\"index\">The index of the element to remove.</param>\r\n</member>\r\n",
                "StartLine": 211
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Int32 : index": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxList`1": ""
                },
                "Content": "public SyntaxList<TNode> RemoveAt(int index)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxList`1.RemoveAt(System.Int32)\">\r\n    <summary>\r\n    Creates a new list with the element at specified index removed.\r\n    </summary>\r\n    <param name=\"index\">The index of the element to remove.</param>\r\n</member>\r\n",
                "StartLine": 211
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxList`1.RemoveAt(System.Int32)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxList`1",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxList`1.RemoveAt(System.Int32)\">\r\n    <summary>\r\n    Creates a new list with the element at specified index removed.\r\n    </summary>\r\n    <param name=\"index\">The index of the element to remove.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "!:TNode : newNode": "",
                  "!:TNode : nodeInList": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxList`1": ""
                },
                "Content": "public SyntaxList<TNode> Replace(TNode nodeInList, TNode newNode)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxList`1.Replace(`0,`0)\">\r\n    <summary>\r\n    Creates a new list with the specified element replaced with the new node.\r\n    </summary>\r\n    <param name=\"nodeInList\">The element to replace.</param>\r\n    <param name=\"newNode\">The new node.</param>\r\n</member>\r\n",
                "StartLine": 235
              },
              "Syntax": {
                "Parameters": {
                  "!:TNode : newNode": "",
                  "!:TNode : nodeInList": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxList`1": ""
                },
                "Content": "public SyntaxList<TNode> Replace(TNode nodeInList, TNode newNode)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxList`1.Replace(`0,`0)\">\r\n    <summary>\r\n    Creates a new list with the specified element replaced with the new node.\r\n    </summary>\r\n    <param name=\"nodeInList\">The element to replace.</param>\r\n    <param name=\"newNode\">The new node.</param>\r\n</member>\r\n",
                "StartLine": 235
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxList`1.Replace(`0,`0)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxList`1",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxList`1.Replace(`0,`0)\">\r\n    <summary>\r\n    Creates a new list with the specified element replaced with the new node.\r\n    </summary>\r\n    <param name=\"nodeInList\">The element to replace.</param>\r\n    <param name=\"newNode\">The new node.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "!:TNode : nodeInList": "",
                  "T:System.Collections.Generic.IEnumerable{`0} : newNodes": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxList`1": ""
                },
                "Content": "public SyntaxList<TNode> ReplaceRange(TNode nodeInList, IEnumerable<TNode> newNodes)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxList`1.ReplaceRange(`0,System.Collections.Generic.IEnumerable{`0})\">\r\n    <summary>\r\n    Creates a new list with the specified element replaced with new nodes.\r\n    </summary>\r\n    <param name=\"nodeInList\">The element to replace.</param>\r\n    <param name=\"newNodes\">The new nodes.</param>\r\n</member>\r\n",
                "StartLine": 245
              },
              "Syntax": {
                "Parameters": {
                  "!:TNode : nodeInList": "",
                  "T:System.Collections.Generic.IEnumerable{`0} : newNodes": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxList`1": ""
                },
                "Content": "public SyntaxList<TNode> ReplaceRange(TNode nodeInList, IEnumerable<TNode> newNodes)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxList`1.ReplaceRange(`0,System.Collections.Generic.IEnumerable{`0})\">\r\n    <summary>\r\n    Creates a new list with the specified element replaced with new nodes.\r\n    </summary>\r\n    <param name=\"nodeInList\">The element to replace.</param>\r\n    <param name=\"newNodes\">The new nodes.</param>\r\n</member>\r\n",
                "StartLine": 245
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxList`1.ReplaceRange(`0,System.Collections.Generic.IEnumerable{`0})",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxList`1",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxList`1.ReplaceRange(`0,System.Collections.Generic.IEnumerable{`0})\">\r\n    <summary>\r\n    Creates a new list with the specified element replaced with new nodes.\r\n    </summary>\r\n    <param name=\"nodeInList\">The element to replace.</param>\r\n    <param name=\"newNodes\">The new nodes.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public string ToFullString()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxList`1.ToFullString\">\r\n    <summary>\r\n    Returns the full string representation of the nodes in this list including \r\n    the first node's leading trivia and the last node's trailing trivia.\r\n    </summary>\r\n    <returns>\r\n    The full string representation of the nodes in this list including \r\n    the first node's leading trivia and the last node's trailing trivia.\r\n    </returns>\r\n</member>\r\n",
                "StartLine": 139
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public string ToFullString()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxList`1.ToFullString\">\r\n    <summary>\r\n    Returns the full string representation of the nodes in this list including \r\n    the first node's leading trivia and the last node's trailing trivia.\r\n    </summary>\r\n    <returns>\r\n    The full string representation of the nodes in this list including \r\n    the first node's leading trivia and the last node's trailing trivia.\r\n    </returns>\r\n</member>\r\n",
                "StartLine": 139
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxList`1.ToFullString",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxList`1",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxList`1.ToFullString\">\r\n    <summary>\r\n    Returns the full string representation of the nodes in this list including \r\n    the first node's leading trivia and the last node's trailing trivia.\r\n    </summary>\r\n    <returns>\r\n    The full string representation of the nodes in this list including \r\n    the first node's leading trivia and the last node's trailing trivia.\r\n    </returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public override string ToString()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxList`1.ToString\">\r\n    <summary>\r\n    Returns the string representation of the nodes in this list, not including \r\n    the first node's leading trivia and the last node's trailing trivia.\r\n    </summary>\r\n    <returns>\r\n    The string representation of the nodes in this list, not including \r\n    the first node's leading trivia and the last node's trailing trivia.\r\n    </returns>\r\n</member>\r\n",
                "StartLine": 126
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public override string ToString()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxList`1.ToString\">\r\n    <summary>\r\n    Returns the string representation of the nodes in this list, not including \r\n    the first node's leading trivia and the last node's trailing trivia.\r\n    </summary>\r\n    <returns>\r\n    The string representation of the nodes in this list, not including \r\n    the first node's leading trivia and the last node's trailing trivia.\r\n    </returns>\r\n</member>\r\n",
                "StartLine": 126
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxList`1.ToString",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxList`1",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxList`1.ToString\">\r\n    <summary>\r\n    Returns the string representation of the nodes in this list, not including \r\n    the first node's leading trivia and the last node's trailing trivia.\r\n    </summary>\r\n    <returns>\r\n    The string representation of the nodes in this list, not including \r\n    the first node's leading trivia and the last node's trailing trivia.\r\n    </returns>\r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Int32",
                "Content": "public int Count",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxList`1.Count\">\r\n    <summary>\r\n    The number of nodes in the list.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 36
              },
              "Syntax": {
                "PropertyType": "T:System.Int32",
                "Content": "public int Count",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxList`1.Count\">\r\n    <summary>\r\n    The number of nodes in the list.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 36
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxList`1.Count",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxList`1",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxList`1.Count\">\r\n    <summary>\r\n    The number of nodes in the list.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Text.TextSpan",
                "Content": "public TextSpan FullSpan",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxList`1.FullSpan\">\r\n    <summary>\r\n    The absolute span of the list elements in characters, including the leading and trailing trivia of the first and last elements.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 85
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Text.TextSpan",
                "Content": "public TextSpan FullSpan",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxList`1.FullSpan\">\r\n    <summary>\r\n    The absolute span of the list elements in characters, including the leading and trailing trivia of the first and last elements.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 85
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxList`1.FullSpan",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxList`1",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxList`1.FullSpan\">\r\n    <summary>\r\n    The absolute span of the list elements in characters, including the leading and trailing trivia of the first and last elements.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Text.TextSpan",
                "Content": "public TextSpan Span",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxList`1.Span\">\r\n    <summary>\r\n    The absolute span of the list elements in characters, not including the leading and trailing trivia of the first and last elements.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 103
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Text.TextSpan",
                "Content": "public TextSpan Span",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxList`1.Span\">\r\n    <summary>\r\n    The absolute span of the list elements in characters, not including the leading and trailing trivia of the first and last elements.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 103
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxList`1.Span",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxList`1",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxList`1.Span\">\r\n    <summary>\r\n    The absolute span of the list elements in characters, not including the leading and trailing trivia of the first and last elements.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Syntax\\SyntaxList`1.cs",
          "InheritanceHierarchy": [
            "T:System.Object",
            "T:System.ValueType"
          ],
          "Syntax": {
            "Content": "public partial struct SyntaxList<TNode>\r\n    where TNode : SyntaxNode",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.SyntaxList`1\">\r\n    <summary>\r\n    A list of <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/>.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.SyntaxList`1",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.SyntaxList`1\">\r\n    <summary>\r\n    A list of <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/>.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxNode": ""
                },
                "Content": "public SyntaxNode AsNode()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.AsNode\">\r\n    <summary>\r\n    Returns the underlying node if this <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNodeOrToken\"/> is wrapping a\r\n    node.\r\n    </summary>\r\n    <returns>\r\n    The underlying node if this <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNodeOrToken\"/> is wrapping a node.\r\n    </returns>\r\n</member>\r\n",
                "StartLine": 251
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxNode": ""
                },
                "Content": "public SyntaxNode AsNode()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.AsNode\">\r\n    <summary>\r\n    Returns the underlying node if this <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNodeOrToken\"/> is wrapping a\r\n    node.\r\n    </summary>\r\n    <returns>\r\n    The underlying node if this <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNodeOrToken\"/> is wrapping a node.\r\n    </returns>\r\n</member>\r\n",
                "StartLine": 251
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.AsNode",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.AsNode\">\r\n    <summary>\r\n    Returns the underlying node if this <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNodeOrToken\"/> is wrapping a\r\n    node.\r\n    </summary>\r\n    <returns>\r\n    The underlying node if this <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNodeOrToken\"/> is wrapping a node.\r\n    </returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxToken": ""
                },
                "Content": "public SyntaxToken AsToken()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.AsToken\">\r\n    <summary>\r\n    Returns the underlying token if this <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNodeOrToken\"/> is wrapping a\r\n    token.\r\n    </summary>\r\n    <returns>\r\n    The underlying token if this <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNodeOrToken\"/> is wrapping a token.\r\n    </returns>\r\n</member>\r\n",
                "StartLine": 234
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxToken": ""
                },
                "Content": "public SyntaxToken AsToken()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.AsToken\">\r\n    <summary>\r\n    Returns the underlying token if this <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNodeOrToken\"/> is wrapping a\r\n    token.\r\n    </summary>\r\n    <returns>\r\n    The underlying token if this <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNodeOrToken\"/> is wrapping a token.\r\n    </returns>\r\n</member>\r\n",
                "StartLine": 234
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.AsToken",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.AsToken\">\r\n    <summary>\r\n    Returns the underlying token if this <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNodeOrToken\"/> is wrapping a\r\n    token.\r\n    </summary>\r\n    <returns>\r\n    The underlying token if this <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNodeOrToken\"/> is wrapping a token.\r\n    </returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.ChildSyntaxList": ""
                },
                "Content": "public ChildSyntaxList ChildNodesAndTokens()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.ChildNodesAndTokens\">\r\n    <summary>\r\n    The list of child nodes and tokens of the underlying node or token.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 264
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.ChildSyntaxList": ""
                },
                "Content": "public ChildSyntaxList ChildNodesAndTokens()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.ChildNodesAndTokens\">\r\n    <summary>\r\n    The list of child nodes and tokens of the underlying node or token.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 264
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.ChildNodesAndTokens",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.ChildNodesAndTokens\">\r\n    <summary>\r\n    The list of child nodes and tokens of the underlying node or token.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool Equals(SyntaxNodeOrToken other)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.Equals(Microsoft.CodeAnalysis.SyntaxNodeOrToken)\">\r\n    <summary>\r\n    Determines whether the supplied <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNodeOrToken\"/> is equal to this\r\n    <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNodeOrToken\"/>.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 761
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool Equals(SyntaxNodeOrToken other)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.Equals(Microsoft.CodeAnalysis.SyntaxNodeOrToken)\">\r\n    <summary>\r\n    Determines whether the supplied <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNodeOrToken\"/> is equal to this\r\n    <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNodeOrToken\"/>.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 761
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.Equals(Microsoft.CodeAnalysis.SyntaxNodeOrToken)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.Equals(Microsoft.CodeAnalysis.SyntaxNodeOrToken)\">\r\n    <summary>\r\n    Determines whether the supplied <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNodeOrToken\"/> is equal to this\r\n    <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNodeOrToken\"/>.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Object : obj": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public override bool Equals(object obj)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.Equals(System.Object)\">\r\n    <summary>\r\n    Determines whether the supplied <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNodeOrToken\"/> is equal to this\r\n    <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNodeOrToken\"/>.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 793
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Object : obj": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public override bool Equals(object obj)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.Equals(System.Object)\">\r\n    <summary>\r\n    Determines whether the supplied <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNodeOrToken\"/> is equal to this\r\n    <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNodeOrToken\"/>.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 793
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.Equals(System.Object)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.Equals(System.Object)\">\r\n    <summary>\r\n    Determines whether the supplied <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNodeOrToken\"/> is equal to this\r\n    <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNodeOrToken\"/>.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{System.String} : annotationKinds": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation}": ""
                },
                "Content": "public IEnumerable<SyntaxAnnotation> GetAnnotations(IEnumerable<string> annotationKinds)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.GetAnnotations(System.Collections.Generic.IEnumerable{System.String})\">\r\n    <summary>\r\n    Gets all annotations of the specified annotation kind.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 659
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{System.String} : annotationKinds": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation}": ""
                },
                "Content": "public IEnumerable<SyntaxAnnotation> GetAnnotations(IEnumerable<string> annotationKinds)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.GetAnnotations(System.Collections.Generic.IEnumerable{System.String})\">\r\n    <summary>\r\n    Gets all annotations of the specified annotation kind.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 659
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.GetAnnotations(System.Collections.Generic.IEnumerable{System.String})",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.GetAnnotations(System.Collections.Generic.IEnumerable{System.String})\">\r\n    <summary>\r\n    Gets all annotations of the specified annotation kind.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.String : annotationKind": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation}": ""
                },
                "Content": "public IEnumerable<SyntaxAnnotation> GetAnnotations(string annotationKind)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.GetAnnotations(System.String)\">\r\n    <summary>\r\n    Gets all annotations of the specified annotation kind.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 641
              },
              "Syntax": {
                "Parameters": {
                  "T:System.String : annotationKind": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation}": ""
                },
                "Content": "public IEnumerable<SyntaxAnnotation> GetAnnotations(string annotationKind)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.GetAnnotations(System.String)\">\r\n    <summary>\r\n    Gets all annotations of the specified annotation kind.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 641
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.GetAnnotations(System.String)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.GetAnnotations(System.String)\">\r\n    <summary>\r\n    Gets all annotations of the specified annotation kind.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Diagnostic}": ""
                },
                "Content": "public IEnumerable<Diagnostic> GetDiagnostics()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.GetDiagnostics\">\r\n    <summary>\r\n    Gets a list of all the diagnostics in either the sub tree that has this node as its root or\r\n    associated with this token and its related trivia. \r\n    This method does not filter diagnostics based on #pragmas and compiler options\r\n    like nowarn, warnaserror etc.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 525
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Diagnostic}": ""
                },
                "Content": "public IEnumerable<Diagnostic> GetDiagnostics()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.GetDiagnostics\">\r\n    <summary>\r\n    Gets a list of all the diagnostics in either the sub tree that has this node as its root or\r\n    associated with this token and its related trivia. \r\n    This method does not filter diagnostics based on #pragmas and compiler options\r\n    like nowarn, warnaserror etc.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 525
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.GetDiagnostics",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.GetDiagnostics\">\r\n    <summary>\r\n    Gets a list of all the diagnostics in either the sub tree that has this node as its root or\r\n    associated with this token and its related trivia. \r\n    This method does not filter diagnostics based on #pragmas and compiler options\r\n    like nowarn, warnaserror etc.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxNode : node": "",
                  "T:System.Int32 : position": ""
                },
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public static int GetFirstChildIndexSpanningPosition(SyntaxNode node, int position)",
                "XmlDocumentation": "",
                "StartLine": 1025
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxNode : node": "",
                  "T:System.Int32 : position": ""
                },
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public static int GetFirstChildIndexSpanningPosition(SyntaxNode node, int position)",
                "XmlDocumentation": "",
                "StartLine": 1025
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.GetFirstChildIndexSpanningPosition(Microsoft.CodeAnalysis.SyntaxNode,System.Int32)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public override int GetHashCode()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.GetHashCode\">\r\n    <summary>\r\n    Serves as hash function for <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNodeOrToken\"/>.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 801
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public override int GetHashCode()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.GetHashCode\">\r\n    <summary>\r\n    Serves as hash function for <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNodeOrToken\"/>.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 801
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.GetHashCode",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.GetHashCode\">\r\n    <summary>\r\n    Serves as hash function for <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNodeOrToken\"/>.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTriviaList": ""
                },
                "Content": "public SyntaxTriviaList GetLeadingTrivia()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.GetLeadingTrivia\">\r\n    <summary>\r\n    The list of trivia that appear before the underlying node or token in the source code and are attached to a\r\n    token that is a descendant of the underlying node or token.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 412
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTriviaList": ""
                },
                "Content": "public SyntaxTriviaList GetLeadingTrivia()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.GetLeadingTrivia\">\r\n    <summary>\r\n    The list of trivia that appear before the underlying node or token in the source code and are attached to a\r\n    token that is a descendant of the underlying node or token.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 412
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.GetLeadingTrivia",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.GetLeadingTrivia\">\r\n    <summary>\r\n    The list of trivia that appear before the underlying node or token in the source code and are attached to a\r\n    token that is a descendant of the underlying node or token.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Location": ""
                },
                "Content": "public Location GetLocation()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.GetLocation\">\r\n    <summary>\r\n    Get the location of this node or token.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 893
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Location": ""
                },
                "Content": "public Location GetLocation()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.GetLocation\">\r\n    <summary>\r\n    Get the location of this node or token.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 893
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.GetLocation",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.GetLocation\">\r\n    <summary>\r\n    Get the location of this node or token.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken": ""
                },
                "Content": "public SyntaxNodeOrToken GetNextSibling()",
                "XmlDocumentation": "",
                "StartLine": 1074
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken": ""
                },
                "Content": "public SyntaxNodeOrToken GetNextSibling()",
                "XmlDocumentation": "",
                "StartLine": 1074
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.GetNextSibling",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken": ""
                },
                "Content": "public SyntaxNodeOrToken GetPreviousSibling()",
                "XmlDocumentation": "",
                "StartLine": 1089
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken": ""
                },
                "Content": "public SyntaxNodeOrToken GetPreviousSibling()",
                "XmlDocumentation": "",
                "StartLine": 1089
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.GetPreviousSibling",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTriviaList": ""
                },
                "Content": "public SyntaxTriviaList GetTrailingTrivia()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.GetTrailingTrivia\">\r\n    <summary>\r\n    The list of trivia that appear after the underlying node or token in the source code and are attached to a\r\n    token that is a descendant of the underlying node or token.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 442
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTriviaList": ""
                },
                "Content": "public SyntaxTriviaList GetTrailingTrivia()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.GetTrailingTrivia\">\r\n    <summary>\r\n    The list of trivia that appear after the underlying node or token in the source code and are attached to a\r\n    token that is a descendant of the underlying node or token.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 442
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.GetTrailingTrivia",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.GetTrailingTrivia\">\r\n    <summary>\r\n    The list of trivia that appear after the underlying node or token in the source code and are attached to a\r\n    token that is a descendant of the underlying node or token.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxAnnotation : annotation": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool HasAnnotation(SyntaxAnnotation annotation)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.HasAnnotation(Microsoft.CodeAnalysis.SyntaxAnnotation)\">\r\n    <summary>\r\n    Determines if this node or token has the specific annotation.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 623
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxAnnotation : annotation": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool HasAnnotation(SyntaxAnnotation annotation)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.HasAnnotation(Microsoft.CodeAnalysis.SyntaxAnnotation)\">\r\n    <summary>\r\n    Determines if this node or token has the specific annotation.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 623
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.HasAnnotation(Microsoft.CodeAnalysis.SyntaxAnnotation)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.HasAnnotation(Microsoft.CodeAnalysis.SyntaxAnnotation)\">\r\n    <summary>\r\n    Determines if this node or token has the specific annotation.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{System.String} : annotationKinds": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool HasAnnotations(IEnumerable<string> annotationKinds)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.HasAnnotations(System.Collections.Generic.IEnumerable{System.String})\">\r\n    <summary>\r\n    Determines whether this node or token has annotations of the specified kind.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 605
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{System.String} : annotationKinds": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool HasAnnotations(IEnumerable<string> annotationKinds)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.HasAnnotations(System.Collections.Generic.IEnumerable{System.String})\">\r\n    <summary>\r\n    Determines whether this node or token has annotations of the specified kind.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 605
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.HasAnnotations(System.Collections.Generic.IEnumerable{System.String})",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.HasAnnotations(System.Collections.Generic.IEnumerable{System.String})\">\r\n    <summary>\r\n    Determines whether this node or token has annotations of the specified kind.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.String : annotationKind": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool HasAnnotations(string annotationKind)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.HasAnnotations(System.String)\">\r\n    <summary>\r\n    Determines whether this node or token has annotations of the specified kind.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 587
              },
              "Syntax": {
                "Parameters": {
                  "T:System.String : annotationKind": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool HasAnnotations(string annotationKind)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.HasAnnotations(System.String)\">\r\n    <summary>\r\n    Determines whether this node or token has annotations of the specified kind.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 587
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.HasAnnotations(System.String)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.HasAnnotations(System.String)\">\r\n    <summary>\r\n    Determines whether this node or token has annotations of the specified kind.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool IsEquivalentTo(SyntaxNodeOrToken other)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.IsEquivalentTo(Microsoft.CodeAnalysis.SyntaxNodeOrToken)\">\r\n    <summary>\r\n    Determines if the two nodes or tokens are equivalent.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 809
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool IsEquivalentTo(SyntaxNodeOrToken other)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.IsEquivalentTo(Microsoft.CodeAnalysis.SyntaxNodeOrToken)\">\r\n    <summary>\r\n    Determines if the two nodes or tokens are equivalent.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 809
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.IsEquivalentTo(Microsoft.CodeAnalysis.SyntaxNodeOrToken)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.IsEquivalentTo(Microsoft.CodeAnalysis.SyntaxNodeOrToken)\">\r\n    <summary>\r\n    Determines if the two nodes or tokens are equivalent.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public string ToFullString()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.ToFullString\">\r\n    <summary>\r\n    Returns the full string representation of this node or token including its leading and trailing trivia.\r\n    </summary>\r\n    <returns>The full string representation of this node or token including its leading and trailing\r\n    trivia.</returns>\r\n    <remarks>The length of the returned string is always the same as FullSpan.Length</remarks>\r\n</member>\r\n",
                "StartLine": 367
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public string ToFullString()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.ToFullString\">\r\n    <summary>\r\n    Returns the full string representation of this node or token including its leading and trailing trivia.\r\n    </summary>\r\n    <returns>The full string representation of this node or token including its leading and trailing\r\n    trivia.</returns>\r\n    <remarks>The length of the returned string is always the same as FullSpan.Length</remarks>\r\n</member>\r\n",
                "StartLine": 367
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.ToFullString",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.ToFullString\">\r\n    <summary>\r\n    Returns the full string representation of this node or token including its leading and trailing trivia.\r\n    </summary>\r\n    <returns>The full string representation of this node or token including its leading and trailing\r\n    trivia.</returns>\r\n    <remarks>The length of the returned string is always the same as FullSpan.Length</remarks>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public override string ToString()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.ToString\">\r\n    <summary>\r\n    Returns the string representation of this node or token, not including its leading and trailing\r\n    trivia.\r\n    </summary>\r\n    <returns>The string representation of this node or token, not including its leading and trailing\r\n    trivia.</returns>\r\n    <remarks>The length of the returned string is always the same as Span.Length</remarks>\r\n</member>\r\n",
                "StartLine": 346
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public override string ToString()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.ToString\">\r\n    <summary>\r\n    Returns the string representation of this node or token, not including its leading and trailing\r\n    trivia.\r\n    </summary>\r\n    <returns>The string representation of this node or token, not including its leading and trailing\r\n    trivia.</returns>\r\n    <remarks>The length of the returned string is always the same as Span.Length</remarks>\r\n</member>\r\n",
                "StartLine": 346
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.ToString",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.ToString\">\r\n    <summary>\r\n    Returns the string representation of this node or token, not including its leading and trailing\r\n    trivia.\r\n    </summary>\r\n    <returns>The string representation of this node or token, not including its leading and trailing\r\n    trivia.</returns>\r\n    <remarks>The length of the returned string is always the same as Span.Length</remarks>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Array : annotations": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken": ""
                },
                "Content": "public SyntaxNodeOrToken WithAdditionalAnnotations(params SyntaxAnnotation[] annotations)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.WithAdditionalAnnotations(Microsoft.CodeAnalysis.SyntaxAnnotation[])\">\r\n    <summary>\r\n    Creates a new node or token identical to this one with the specified annotations.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 677
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Array : annotations": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken": ""
                },
                "Content": "public SyntaxNodeOrToken WithAdditionalAnnotations(params SyntaxAnnotation[] annotations)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.WithAdditionalAnnotations(Microsoft.CodeAnalysis.SyntaxAnnotation[])\">\r\n    <summary>\r\n    Creates a new node or token identical to this one with the specified annotations.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 677
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.WithAdditionalAnnotations(Microsoft.CodeAnalysis.SyntaxAnnotation[])",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.WithAdditionalAnnotations(Microsoft.CodeAnalysis.SyntaxAnnotation[])\">\r\n    <summary>\r\n    Creates a new node or token identical to this one with the specified annotations.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation} : annotations": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken": ""
                },
                "Content": "public SyntaxNodeOrToken WithAdditionalAnnotations(IEnumerable<SyntaxAnnotation> annotations)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.WithAdditionalAnnotations(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation})\">\r\n    <summary>\r\n    Creates a new node or token identical to this one with the specified annotations.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 685
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation} : annotations": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken": ""
                },
                "Content": "public SyntaxNodeOrToken WithAdditionalAnnotations(IEnumerable<SyntaxAnnotation> annotations)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.WithAdditionalAnnotations(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation})\">\r\n    <summary>\r\n    Creates a new node or token identical to this one with the specified annotations.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 685
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.WithAdditionalAnnotations(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation})",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.WithAdditionalAnnotations(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation})\">\r\n    <summary>\r\n    Creates a new node or token identical to this one with the specified annotations.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Array : trivia": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken": ""
                },
                "Content": "public SyntaxNodeOrToken WithLeadingTrivia(params SyntaxTrivia[] trivia)",
                "XmlDocumentation": "",
                "StartLine": 472
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Array : trivia": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken": ""
                },
                "Content": "public SyntaxNodeOrToken WithLeadingTrivia(params SyntaxTrivia[] trivia)",
                "XmlDocumentation": "",
                "StartLine": 472
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.WithLeadingTrivia(Microsoft.CodeAnalysis.SyntaxTrivia[])",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia} : trivia": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken": ""
                },
                "Content": "public SyntaxNodeOrToken WithLeadingTrivia(IEnumerable<SyntaxTrivia> trivia)",
                "XmlDocumentation": "",
                "StartLine": 457
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia} : trivia": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken": ""
                },
                "Content": "public SyntaxNodeOrToken WithLeadingTrivia(IEnumerable<SyntaxTrivia> trivia)",
                "XmlDocumentation": "",
                "StartLine": 457
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.WithLeadingTrivia(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Array : annotations": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken": ""
                },
                "Content": "public SyntaxNodeOrToken WithoutAnnotations(params SyntaxAnnotation[] annotations)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.WithoutAnnotations(Microsoft.CodeAnalysis.SyntaxAnnotation[])\">\r\n    <summary>\r\n    Creates a new node or token identical to this one without the specified annotations.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 708
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Array : annotations": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken": ""
                },
                "Content": "public SyntaxNodeOrToken WithoutAnnotations(params SyntaxAnnotation[] annotations)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.WithoutAnnotations(Microsoft.CodeAnalysis.SyntaxAnnotation[])\">\r\n    <summary>\r\n    Creates a new node or token identical to this one without the specified annotations.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 708
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.WithoutAnnotations(Microsoft.CodeAnalysis.SyntaxAnnotation[])",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.WithoutAnnotations(Microsoft.CodeAnalysis.SyntaxAnnotation[])\">\r\n    <summary>\r\n    Creates a new node or token identical to this one without the specified annotations.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation} : annotations": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken": ""
                },
                "Content": "public SyntaxNodeOrToken WithoutAnnotations(IEnumerable<SyntaxAnnotation> annotations)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.WithoutAnnotations(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation})\">\r\n    <summary>\r\n    Creates a new node or token identical to this one without the specified annotations.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 716
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation} : annotations": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken": ""
                },
                "Content": "public SyntaxNodeOrToken WithoutAnnotations(IEnumerable<SyntaxAnnotation> annotations)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.WithoutAnnotations(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation})\">\r\n    <summary>\r\n    Creates a new node or token identical to this one without the specified annotations.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 716
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.WithoutAnnotations(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation})",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.WithoutAnnotations(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation})\">\r\n    <summary>\r\n    Creates a new node or token identical to this one without the specified annotations.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.String : annotationKind": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken": ""
                },
                "Content": "public SyntaxNodeOrToken WithoutAnnotations(string annotationKind)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.WithoutAnnotations(System.String)\">\r\n    <summary>\r\n    Creates a new node or token identical to this one without annotations of the specified kind.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 739
              },
              "Syntax": {
                "Parameters": {
                  "T:System.String : annotationKind": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken": ""
                },
                "Content": "public SyntaxNodeOrToken WithoutAnnotations(string annotationKind)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.WithoutAnnotations(System.String)\">\r\n    <summary>\r\n    Creates a new node or token identical to this one without annotations of the specified kind.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 739
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.WithoutAnnotations(System.String)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.WithoutAnnotations(System.String)\">\r\n    <summary>\r\n    Creates a new node or token identical to this one without annotations of the specified kind.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Array : trivia": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken": ""
                },
                "Content": "public SyntaxNodeOrToken WithTrailingTrivia(params SyntaxTrivia[] trivia)",
                "XmlDocumentation": "",
                "StartLine": 492
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Array : trivia": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken": ""
                },
                "Content": "public SyntaxNodeOrToken WithTrailingTrivia(params SyntaxTrivia[] trivia)",
                "XmlDocumentation": "",
                "StartLine": 492
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.WithTrailingTrivia(Microsoft.CodeAnalysis.SyntaxTrivia[])",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia} : trivia": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken": ""
                },
                "Content": "public SyntaxNodeOrToken WithTrailingTrivia(IEnumerable<SyntaxTrivia> trivia)",
                "XmlDocumentation": "",
                "StartLine": 477
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia} : trivia": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken": ""
                },
                "Content": "public SyntaxNodeOrToken WithTrailingTrivia(IEnumerable<SyntaxTrivia> trivia)",
                "XmlDocumentation": "",
                "StartLine": 477
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.WithTrailingTrivia(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.IO.TextWriter : writer": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public void WriteTo(System.IO.TextWriter writer)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.WriteTo(System.IO.TextWriter)\">\r\n    <summary>\r\n    Writes the full text of this node or token to the specified TextWriter.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 385
              },
              "Syntax": {
                "Parameters": {
                  "T:System.IO.TextWriter : writer": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public void WriteTo(System.IO.TextWriter writer)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.WriteTo(System.IO.TextWriter)\">\r\n    <summary>\r\n    Writes the full text of this node or token to the specified TextWriter.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 385
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.WriteTo(System.IO.TextWriter)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrToken.WriteTo(System.IO.TextWriter)\">\r\n    <summary>\r\n    Writes the full text of this node or token to the specified TextWriter.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool ContainsAnnotations",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNodeOrToken.ContainsAnnotations\">\r\n    <summary>\r\n    Determines whether this node or token (or any sub node, token or trivia) as annotations.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 566
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool ContainsAnnotations",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNodeOrToken.ContainsAnnotations\">\r\n    <summary>\r\n    Determines whether this node or token (or any sub node, token or trivia) as annotations.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 566
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxNodeOrToken.ContainsAnnotations",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNodeOrToken.ContainsAnnotations\">\r\n    <summary>\r\n    Determines whether this node or token (or any sub node, token or trivia) as annotations.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool ContainsDiagnostics",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNodeOrToken.ContainsDiagnostics\">\r\n    <summary>\r\n    Determines whether the underlying node or token or any of its descendant nodes, tokens or trivia have any\r\n    diagnostics on them. \r\n    </summary>\r\n</member>\r\n",
                "StartLine": 501
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool ContainsDiagnostics",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNodeOrToken.ContainsDiagnostics\">\r\n    <summary>\r\n    Determines whether the underlying node or token or any of its descendant nodes, tokens or trivia have any\r\n    diagnostics on them. \r\n    </summary>\r\n</member>\r\n",
                "StartLine": 501
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxNodeOrToken.ContainsDiagnostics",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNodeOrToken.ContainsDiagnostics\">\r\n    <summary>\r\n    Determines whether the underlying node or token or any of its descendant nodes, tokens or trivia have any\r\n    diagnostics on them. \r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool ContainsDirectives",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNodeOrToken.ContainsDirectives\">\r\n    <summary>\r\n    Determines whether the underlying node or token has any descendant preprocessor directives.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 544
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool ContainsDirectives",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNodeOrToken.ContainsDirectives\">\r\n    <summary>\r\n    Determines whether the underlying node or token has any descendant preprocessor directives.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 544
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxNodeOrToken.ContainsDirectives",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNodeOrToken.ContainsDirectives\">\r\n    <summary>\r\n    Determines whether the underlying node or token has any descendant preprocessor directives.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Text.TextSpan",
                "Content": "public TextSpan FullSpan",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNodeOrToken.FullSpan\">\r\n    <summary>\r\n    The absolute span of the underlying node or token in characters, including its leading and trailing trivia.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 321
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Text.TextSpan",
                "Content": "public TextSpan FullSpan",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNodeOrToken.FullSpan\">\r\n    <summary>\r\n    The absolute span of the underlying node or token in characters, including its leading and trailing trivia.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 321
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxNodeOrToken.FullSpan",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNodeOrToken.FullSpan\">\r\n    <summary>\r\n    The absolute span of the underlying node or token in characters, including its leading and trailing trivia.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool HasLeadingTrivia",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNodeOrToken.HasLeadingTrivia\">\r\n    <summary>\r\n    Determines whether the underlying node or token has any leading trivia.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 400
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool HasLeadingTrivia",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNodeOrToken.HasLeadingTrivia\">\r\n    <summary>\r\n    Determines whether the underlying node or token has any leading trivia.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 400
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxNodeOrToken.HasLeadingTrivia",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNodeOrToken.HasLeadingTrivia\">\r\n    <summary>\r\n    Determines whether the underlying node or token has any leading trivia.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool HasTrailingTrivia",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNodeOrToken.HasTrailingTrivia\">\r\n    <summary>\r\n    Determines whether the underlying node or token has any trailing trivia.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 430
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool HasTrailingTrivia",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNodeOrToken.HasTrailingTrivia\">\r\n    <summary>\r\n    Determines whether the underlying node or token has any trailing trivia.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 430
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxNodeOrToken.HasTrailingTrivia",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNodeOrToken.HasTrailingTrivia\">\r\n    <summary>\r\n    Determines whether the underlying node or token has any trailing trivia.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool IsMissing",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNodeOrToken.IsMissing\">\r\n    <summary>\r\n    Determines whether the underlying node or token represents a language construct that was actually parsed\r\n    from source code. Missing nodes and tokens are typically generated by the parser in error scenarios to\r\n    represent constructs that should have been present in the source code for the source code to compile\r\n    successfully but were actually missing.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 137
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool IsMissing",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNodeOrToken.IsMissing\">\r\n    <summary>\r\n    Determines whether the underlying node or token represents a language construct that was actually parsed\r\n    from source code. Missing nodes and tokens are typically generated by the parser in error scenarios to\r\n    represent constructs that should have been present in the source code for the source code to compile\r\n    successfully but were actually missing.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 137
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxNodeOrToken.IsMissing",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNodeOrToken.IsMissing\">\r\n    <summary>\r\n    Determines whether the underlying node or token represents a language construct that was actually parsed\r\n    from source code. Missing nodes and tokens are typically generated by the parser in error scenarios to\r\n    represent constructs that should have been present in the source code for the source code to compile\r\n    successfully but were actually missing.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool IsNode",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNodeOrToken.IsNode\">\r\n    <summary>\r\n    Determines whether this <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNodeOrToken\"/> is wrapping a node.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 219
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool IsNode",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNodeOrToken.IsNode\">\r\n    <summary>\r\n    Determines whether this <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNodeOrToken\"/> is wrapping a node.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 219
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxNodeOrToken.IsNode",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNodeOrToken.IsNode\">\r\n    <summary>\r\n    Determines whether this <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNodeOrToken\"/> is wrapping a node.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool IsToken",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNodeOrToken.IsToken\">\r\n    <summary>\r\n    Determines whether this <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNodeOrToken\"/> is wrapping a token.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 208
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool IsToken",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNodeOrToken.IsToken\">\r\n    <summary>\r\n    Determines whether this <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNodeOrToken\"/> is wrapping a token.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 208
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxNodeOrToken.IsToken",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNodeOrToken.IsToken\">\r\n    <summary>\r\n    Determines whether this <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNodeOrToken\"/> is wrapping a token.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.String",
                "Content": "public string Language",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNodeOrToken.Language\">\r\n    <summary>\r\n    The language name that this node or token is syntax of.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 112
              },
              "Syntax": {
                "PropertyType": "T:System.String",
                "Content": "public string Language",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNodeOrToken.Language\">\r\n    <summary>\r\n    The language name that this node or token is syntax of.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 112
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxNodeOrToken.Language",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNodeOrToken.Language\">\r\n    <summary>\r\n    The language name that this node or token is syntax of.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SyntaxNode",
                "Content": "public SyntaxNode Parent",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNodeOrToken.Parent\">\r\n    <summary>\r\n    The node that contains the underlying node or token in its Children collection.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 159
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SyntaxNode",
                "Content": "public SyntaxNode Parent",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNodeOrToken.Parent\">\r\n    <summary>\r\n    The node that contains the underlying node or token in its Children collection.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 159
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxNodeOrToken.Parent",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNodeOrToken.Parent\">\r\n    <summary>\r\n    The node that contains the underlying node or token in its Children collection.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Int32",
                "Content": "public int RawKind",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNodeOrToken.RawKind\">\r\n    <summary>\r\n    An integer representing the language specific kind of the underlying node or token.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 90
              },
              "Syntax": {
                "PropertyType": "T:System.Int32",
                "Content": "public int RawKind",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNodeOrToken.RawKind\">\r\n    <summary>\r\n    An integer representing the language specific kind of the underlying node or token.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 90
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxNodeOrToken.RawKind",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNodeOrToken.RawKind\">\r\n    <summary>\r\n    An integer representing the language specific kind of the underlying node or token.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Text.TextSpan",
                "Content": "public TextSpan Span",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNodeOrToken.Span\">\r\n    <summary>\r\n    The absolute span of the underlying node or token in characters, not including its leading and trailing\r\n    trivia.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 275
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Text.TextSpan",
                "Content": "public TextSpan Span",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNodeOrToken.Span\">\r\n    <summary>\r\n    The absolute span of the underlying node or token in characters, not including its leading and trailing\r\n    trivia.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 275
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxNodeOrToken.Span",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNodeOrToken.Span\">\r\n    <summary>\r\n    The absolute span of the underlying node or token in characters, not including its leading and trailing\r\n    trivia.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Int32",
                "Content": "public int SpanStart",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNodeOrToken.SpanStart\">\r\n    <summary>\r\n    Same as accessing <see cref=\"P:Microsoft.CodeAnalysis.Text.TextSpan.Start\"/> on <see cref=\"P:Microsoft.CodeAnalysis.SyntaxNodeOrToken.Span\"/>.\r\n    </summary>\r\n    <remarks>\r\n    Slight performance improvement.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 299
              },
              "Syntax": {
                "PropertyType": "T:System.Int32",
                "Content": "public int SpanStart",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNodeOrToken.SpanStart\">\r\n    <summary>\r\n    Same as accessing <see cref=\"P:Microsoft.CodeAnalysis.Text.TextSpan.Start\"/> on <see cref=\"P:Microsoft.CodeAnalysis.SyntaxNodeOrToken.Span\"/>.\r\n    </summary>\r\n    <remarks>\r\n    Slight performance improvement.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 299
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxNodeOrToken.SpanStart",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNodeOrToken.SpanStart\">\r\n    <summary>\r\n    Same as accessing <see cref=\"P:Microsoft.CodeAnalysis.Text.TextSpan.Start\"/> on <see cref=\"P:Microsoft.CodeAnalysis.SyntaxNodeOrToken.Span\"/>.\r\n    </summary>\r\n    <remarks>\r\n    Slight performance improvement.\r\n    </remarks>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SyntaxTree",
                "Content": "public SyntaxTree SyntaxTree",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNodeOrToken.SyntaxTree\">\r\n    <summary>\r\n    SyntaxTree which contains current SyntaxNodeOrToken.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 877
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SyntaxTree",
                "Content": "public SyntaxTree SyntaxTree",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNodeOrToken.SyntaxTree\">\r\n    <summary>\r\n    SyntaxTree which contains current SyntaxNodeOrToken.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 877
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxNodeOrToken.SyntaxTree",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNodeOrToken.SyntaxTree\">\r\n    <summary>\r\n    SyntaxTree which contains current SyntaxNodeOrToken.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Syntax\\SyntaxNodeOrToken.cs",
          "InheritanceHierarchy": [
            "T:System.Object",
            "T:System.ValueType"
          ],
          "Syntax": {
            "Content": "public struct SyntaxNodeOrToken",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.SyntaxNodeOrToken\">\r\n    <summary>\r\n    A wrapper for either a syntax node (<see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/>) or a syntax token (<see\r\n    cref=\"T:Microsoft.CodeAnalysis.SyntaxToken\"/>).\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.SyntaxNodeOrToken\">\r\n    <summary>\r\n    A wrapper for either a syntax node (<see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/>) or a syntax token (<see\r\n    cref=\"T:Microsoft.CodeAnalysis.SyntaxToken\"/>).\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken : nodeOrToken": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList": ""
                },
                "Content": "public SyntaxNodeOrTokenList Add(SyntaxNodeOrToken nodeOrToken)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Add(Microsoft.CodeAnalysis.SyntaxNodeOrToken)\">\r\n    <summary>\r\n    Creates a new <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList\"/> with the specified node or token added to the end.\r\n    </summary>\r\n    <param name=\"nodeOrToken\">The node or token to add.</param>\r\n</member>\r\n",
                "StartLine": 272
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken : nodeOrToken": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList": ""
                },
                "Content": "public SyntaxNodeOrTokenList Add(SyntaxNodeOrToken nodeOrToken)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Add(Microsoft.CodeAnalysis.SyntaxNodeOrToken)\">\r\n    <summary>\r\n    Creates a new <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList\"/> with the specified node or token added to the end.\r\n    </summary>\r\n    <param name=\"nodeOrToken\">The node or token to add.</param>\r\n</member>\r\n",
                "StartLine": 272
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Add(Microsoft.CodeAnalysis.SyntaxNodeOrToken)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Add(Microsoft.CodeAnalysis.SyntaxNodeOrToken)\">\r\n    <summary>\r\n    Creates a new <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList\"/> with the specified node or token added to the end.\r\n    </summary>\r\n    <param name=\"nodeOrToken\">The node or token to add.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNodeOrToken} : nodesOrTokens": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList": ""
                },
                "Content": "public SyntaxNodeOrTokenList AddRange(IEnumerable<SyntaxNodeOrToken> nodesOrTokens)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.AddRange(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNodeOrToken})\">\r\n    <summary>\r\n    Creates a new <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList\"/> with the specified nodes or tokens added to the end.\r\n    </summary>\r\n    <param name=\"nodesOrTokens\">The nodes or tokens to add.</param>\r\n</member>\r\n",
                "StartLine": 281
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNodeOrToken} : nodesOrTokens": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList": ""
                },
                "Content": "public SyntaxNodeOrTokenList AddRange(IEnumerable<SyntaxNodeOrToken> nodesOrTokens)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.AddRange(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNodeOrToken})\">\r\n    <summary>\r\n    Creates a new <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList\"/> with the specified nodes or tokens added to the end.\r\n    </summary>\r\n    <param name=\"nodesOrTokens\">The nodes or tokens to add.</param>\r\n</member>\r\n",
                "StartLine": 281
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.AddRange(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNodeOrToken})",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.AddRange(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNodeOrToken})\">\r\n    <summary>\r\n    Creates a new <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList\"/> with the specified nodes or tokens added to the end.\r\n    </summary>\r\n    <param name=\"nodesOrTokens\">The nodes or tokens to add.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool Any()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Any\">\r\n    <summary>\r\n    Indicates whether there is any element in the list.\r\n    </summary>\r\n    <returns><c>true</c> if there are any elements in the list, else <c>false</c>.</returns>\r\n</member>\r\n",
                "StartLine": 248
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool Any()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Any\">\r\n    <summary>\r\n    Indicates whether there is any element in the list.\r\n    </summary>\r\n    <returns><c>true</c> if there are any elements in the list, else <c>false</c>.</returns>\r\n</member>\r\n",
                "StartLine": 248
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Any",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Any\">\r\n    <summary>\r\n    Indicates whether there is any element in the list.\r\n    </summary>\r\n    <returns><c>true</c> if there are any elements in the list, else <c>false</c>.</returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool Equals(SyntaxNodeOrTokenList other)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Equals(Microsoft.CodeAnalysis.SyntaxNodeOrTokenList)\">\r\n    <summary>\r\n    Indicates whether the current object is equal to another object of the same type.\r\n    </summary>\r\n    <param name=\"other\">An object to compare with this object.</param>\r\n    <returns>\r\n    <c>true</c> if the current object is equal to the <paramref name=\"other\"/> parameter; otherwise,\r\n    <c>false</c>.\r\n    </returns>\r\n</member>\r\n",
                "StartLine": 484
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool Equals(SyntaxNodeOrTokenList other)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Equals(Microsoft.CodeAnalysis.SyntaxNodeOrTokenList)\">\r\n    <summary>\r\n    Indicates whether the current object is equal to another object of the same type.\r\n    </summary>\r\n    <param name=\"other\">An object to compare with this object.</param>\r\n    <returns>\r\n    <c>true</c> if the current object is equal to the <paramref name=\"other\"/> parameter; otherwise,\r\n    <c>false</c>.\r\n    </returns>\r\n</member>\r\n",
                "StartLine": 484
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Equals(Microsoft.CodeAnalysis.SyntaxNodeOrTokenList)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Equals(Microsoft.CodeAnalysis.SyntaxNodeOrTokenList)\">\r\n    <summary>\r\n    Indicates whether the current object is equal to another object of the same type.\r\n    </summary>\r\n    <param name=\"other\">An object to compare with this object.</param>\r\n    <returns>\r\n    <c>true</c> if the current object is equal to the <paramref name=\"other\"/> parameter; otherwise,\r\n    <c>false</c>.\r\n    </returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Object : obj": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public override bool Equals(object obj)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Equals(System.Object)\">\r\n    <summary>\r\n    Determines whether the specified <see cref=\"T:System.Object\"/> is equal to this instance.\r\n    </summary>\r\n    <param name=\"obj\">The <see cref=\"T:System.Object\"/> to compare with this instance.</param>\r\n    <returns>\r\n      <c>true</c> if the specified <see cref=\"T:System.Object\"/> is equal to this instance; otherwise, <c>false</c>.\r\n    </returns>\r\n</member>\r\n",
                "StartLine": 496
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Object : obj": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public override bool Equals(object obj)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Equals(System.Object)\">\r\n    <summary>\r\n    Determines whether the specified <see cref=\"T:System.Object\"/> is equal to this instance.\r\n    </summary>\r\n    <param name=\"obj\">The <see cref=\"T:System.Object\"/> to compare with this instance.</param>\r\n    <returns>\r\n      <c>true</c> if the specified <see cref=\"T:System.Object\"/> is equal to this instance; otherwise, <c>false</c>.\r\n    </returns>\r\n</member>\r\n",
                "StartLine": 496
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Equals(System.Object)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Equals(System.Object)\">\r\n    <summary>\r\n    Determines whether the specified <see cref=\"T:System.Object\"/> is equal to this instance.\r\n    </summary>\r\n    <param name=\"obj\">The <see cref=\"T:System.Object\"/> to compare with this instance.</param>\r\n    <returns>\r\n      <c>true</c> if the specified <see cref=\"T:System.Object\"/> is equal to this instance; otherwise, <c>false</c>.\r\n    </returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken": ""
                },
                "Content": "public SyntaxNodeOrToken First()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.First\">\r\n    <summary>\r\n    Gets the first SyntaxNodeOrToken structure from this list.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 180
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken": ""
                },
                "Content": "public SyntaxNodeOrToken First()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.First\">\r\n    <summary>\r\n    Gets the first SyntaxNodeOrToken structure from this list.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 180
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.First",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.First\">\r\n    <summary>\r\n    Gets the first SyntaxNodeOrToken structure from this list.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken": ""
                },
                "Content": "public SyntaxNodeOrToken FirstOrDefault()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.FirstOrDefault\">\r\n    <summary>\r\n    Gets the first SyntaxNodeOrToken structure from this list if present, else default(SyntaxNodeOrToken).\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 188
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken": ""
                },
                "Content": "public SyntaxNodeOrToken FirstOrDefault()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.FirstOrDefault\">\r\n    <summary>\r\n    Gets the first SyntaxNodeOrToken structure from this list if present, else default(SyntaxNodeOrToken).\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 188
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.FirstOrDefault",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.FirstOrDefault\">\r\n    <summary>\r\n    Gets the first SyntaxNodeOrToken structure from this list if present, else default(SyntaxNodeOrToken).\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Enumerator": ""
                },
                "Content": "public Enumerator GetEnumerator()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.GetEnumerator\">\r\n    <summary>\r\n    Gets the enumerator.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 423
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Enumerator": ""
                },
                "Content": "public Enumerator GetEnumerator()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.GetEnumerator\">\r\n    <summary>\r\n    Gets the enumerator.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 423
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.GetEnumerator",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.GetEnumerator\">\r\n    <summary>\r\n    Gets the enumerator.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public override int GetHashCode()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.GetHashCode\">\r\n    <summary>\r\n    Returns a hash code for this instance.\r\n    </summary>\r\n    <returns>\r\n    A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. \r\n    </returns>\r\n</member>\r\n",
                "StartLine": 507
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public override int GetHashCode()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.GetHashCode\">\r\n    <summary>\r\n    Returns a hash code for this instance.\r\n    </summary>\r\n    <returns>\r\n    A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. \r\n    </returns>\r\n</member>\r\n",
                "StartLine": 507
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.GetHashCode",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.GetHashCode\">\r\n    <summary>\r\n    Returns a hash code for this instance.\r\n    </summary>\r\n    <returns>\r\n    A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. \r\n    </returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken : nodeOrToken": ""
                },
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public int IndexOf(SyntaxNodeOrToken nodeOrToken)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.IndexOf(Microsoft.CodeAnalysis.SyntaxNodeOrToken)\">\r\n    <summary>\r\n    Returns the index from the list for the given <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNodeOrToken\"/>.\r\n    </summary>\r\n    <param name=\"nodeOrToken\">The node or token to search for in the list.</param>\r\n    <returns>The index of the found nodeOrToken, or -1 if it wasn't found</returns>\r\n</member>\r\n",
                "StartLine": 228
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken : nodeOrToken": ""
                },
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public int IndexOf(SyntaxNodeOrToken nodeOrToken)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.IndexOf(Microsoft.CodeAnalysis.SyntaxNodeOrToken)\">\r\n    <summary>\r\n    Returns the index from the list for the given <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNodeOrToken\"/>.\r\n    </summary>\r\n    <param name=\"nodeOrToken\">The node or token to search for in the list.</param>\r\n    <returns>The index of the found nodeOrToken, or -1 if it wasn't found</returns>\r\n</member>\r\n",
                "StartLine": 228
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.IndexOf(Microsoft.CodeAnalysis.SyntaxNodeOrToken)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.IndexOf(Microsoft.CodeAnalysis.SyntaxNodeOrToken)\">\r\n    <summary>\r\n    Returns the index from the list for the given <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNodeOrToken\"/>.\r\n    </summary>\r\n    <param name=\"nodeOrToken\">The node or token to search for in the list.</param>\r\n    <returns>The index of the found nodeOrToken, or -1 if it wasn't found</returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken : nodeOrToken": "",
                  "T:System.Int32 : index": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList": ""
                },
                "Content": "public SyntaxNodeOrTokenList Insert(int index, SyntaxNodeOrToken nodeOrToken)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Insert(System.Int32,Microsoft.CodeAnalysis.SyntaxNodeOrToken)\">\r\n    <summary>\r\n    Creates a new <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList\"/> with the specified node or token inserted at the index.\r\n    </summary>\r\n    <param name=\"index\">The index to insert at.</param>\r\n    <param name=\"nodeOrToken\">The node or token to insert.</param>\r\n</member>\r\n",
                "StartLine": 291
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken : nodeOrToken": "",
                  "T:System.Int32 : index": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList": ""
                },
                "Content": "public SyntaxNodeOrTokenList Insert(int index, SyntaxNodeOrToken nodeOrToken)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Insert(System.Int32,Microsoft.CodeAnalysis.SyntaxNodeOrToken)\">\r\n    <summary>\r\n    Creates a new <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList\"/> with the specified node or token inserted at the index.\r\n    </summary>\r\n    <param name=\"index\">The index to insert at.</param>\r\n    <param name=\"nodeOrToken\">The node or token to insert.</param>\r\n</member>\r\n",
                "StartLine": 291
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Insert(System.Int32,Microsoft.CodeAnalysis.SyntaxNodeOrToken)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Insert(System.Int32,Microsoft.CodeAnalysis.SyntaxNodeOrToken)\">\r\n    <summary>\r\n    Creates a new <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList\"/> with the specified node or token inserted at the index.\r\n    </summary>\r\n    <param name=\"index\">The index to insert at.</param>\r\n    <param name=\"nodeOrToken\">The node or token to insert.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNodeOrToken} : nodesAndTokens": "",
                  "T:System.Int32 : index": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList": ""
                },
                "Content": "public SyntaxNodeOrTokenList InsertRange(int index, IEnumerable<SyntaxNodeOrToken> nodesAndTokens)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNodeOrToken})\">\r\n    <summary>\r\n    Creates a new <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList\"/> with the specified nodes or tokens inserted at the index.\r\n    </summary>\r\n    <param name=\"index\">The index to insert at.</param>\r\n    <param name=\"nodesAndTokens\">The nodes or tokens to insert.</param>\r\n</member>\r\n",
                "StartLine": 306
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNodeOrToken} : nodesAndTokens": "",
                  "T:System.Int32 : index": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList": ""
                },
                "Content": "public SyntaxNodeOrTokenList InsertRange(int index, IEnumerable<SyntaxNodeOrToken> nodesAndTokens)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNodeOrToken})\">\r\n    <summary>\r\n    Creates a new <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList\"/> with the specified nodes or tokens inserted at the index.\r\n    </summary>\r\n    <param name=\"index\">The index to insert at.</param>\r\n    <param name=\"nodesAndTokens\">The nodes or tokens to insert.</param>\r\n</member>\r\n",
                "StartLine": 306
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNodeOrToken})",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNodeOrToken})\">\r\n    <summary>\r\n    Creates a new <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList\"/> with the specified nodes or tokens inserted at the index.\r\n    </summary>\r\n    <param name=\"index\">The index to insert at.</param>\r\n    <param name=\"nodesAndTokens\">The nodes or tokens to insert.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken": ""
                },
                "Content": "public SyntaxNodeOrToken Last()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Last\">\r\n    <summary>\r\n    Gets the last SyntaxNodeOrToken structure from this list.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 203
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken": ""
                },
                "Content": "public SyntaxNodeOrToken Last()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Last\">\r\n    <summary>\r\n    Gets the last SyntaxNodeOrToken structure from this list.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 203
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Last",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Last\">\r\n    <summary>\r\n    Gets the last SyntaxNodeOrToken structure from this list.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken": ""
                },
                "Content": "public SyntaxNodeOrToken LastOrDefault()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.LastOrDefault\">\r\n    <summary>\r\n    Gets the last SyntaxNodeOrToken structure from this list if present, else default(SyntaxNodeOrToken).\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 211
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken": ""
                },
                "Content": "public SyntaxNodeOrToken LastOrDefault()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.LastOrDefault\">\r\n    <summary>\r\n    Gets the last SyntaxNodeOrToken structure from this list if present, else default(SyntaxNodeOrToken).\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 211
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.LastOrDefault",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.LastOrDefault\">\r\n    <summary>\r\n    Gets the last SyntaxNodeOrToken structure from this list if present, else default(SyntaxNodeOrToken).\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken : nodeOrTokenInList": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList": ""
                },
                "Content": "public SyntaxNodeOrTokenList Remove(SyntaxNodeOrToken nodeOrTokenInList)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Remove(Microsoft.CodeAnalysis.SyntaxNodeOrToken)\">\r\n    <summary>\r\n    Creates a new <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList\"/> with the specified element removed.\r\n    </summary>\r\n    <param name=\"nodeOrTokenInList\">The element to remove.</param>\r\n</member>\r\n",
                "StartLine": 365
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken : nodeOrTokenInList": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList": ""
                },
                "Content": "public SyntaxNodeOrTokenList Remove(SyntaxNodeOrToken nodeOrTokenInList)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Remove(Microsoft.CodeAnalysis.SyntaxNodeOrToken)\">\r\n    <summary>\r\n    Creates a new <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList\"/> with the specified element removed.\r\n    </summary>\r\n    <param name=\"nodeOrTokenInList\">The element to remove.</param>\r\n</member>\r\n",
                "StartLine": 365
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Remove(Microsoft.CodeAnalysis.SyntaxNodeOrToken)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Remove(Microsoft.CodeAnalysis.SyntaxNodeOrToken)\">\r\n    <summary>\r\n    Creates a new <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList\"/> with the specified element removed.\r\n    </summary>\r\n    <param name=\"nodeOrTokenInList\">The element to remove.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Int32 : index": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList": ""
                },
                "Content": "public SyntaxNodeOrTokenList RemoveAt(int index)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.RemoveAt(System.Int32)\">\r\n    <summary>\r\n    Creates a new <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList\"/> with the element at the specified index removed.\r\n    </summary>\r\n    <param name=\"index\">The index of the element to remove.</param>\r\n</member>\r\n",
                "StartLine": 348
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Int32 : index": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList": ""
                },
                "Content": "public SyntaxNodeOrTokenList RemoveAt(int index)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.RemoveAt(System.Int32)\">\r\n    <summary>\r\n    Creates a new <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList\"/> with the element at the specified index removed.\r\n    </summary>\r\n    <param name=\"index\">The index of the element to remove.</param>\r\n</member>\r\n",
                "StartLine": 348
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.RemoveAt(System.Int32)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.RemoveAt(System.Int32)\">\r\n    <summary>\r\n    Creates a new <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList\"/> with the element at the specified index removed.\r\n    </summary>\r\n    <param name=\"index\">The index of the element to remove.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken : newNodeOrToken": "",
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken : nodeOrTokenInList": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList": ""
                },
                "Content": "public SyntaxNodeOrTokenList Replace(SyntaxNodeOrToken nodeOrTokenInList, SyntaxNodeOrToken newNodeOrToken)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Replace(Microsoft.CodeAnalysis.SyntaxNodeOrToken,Microsoft.CodeAnalysis.SyntaxNodeOrToken)\">\r\n    <summary>\r\n    Creates a new <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList\"/> with the specified element replaced with a new node or token.\r\n    </summary>\r\n    <param name=\"nodeOrTokenInList\">The element to replace.</param>\r\n    <param name=\"newNodeOrToken\">The new node or token.</param>\r\n</member>\r\n",
                "StartLine": 383
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken : newNodeOrToken": "",
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken : nodeOrTokenInList": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList": ""
                },
                "Content": "public SyntaxNodeOrTokenList Replace(SyntaxNodeOrToken nodeOrTokenInList, SyntaxNodeOrToken newNodeOrToken)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Replace(Microsoft.CodeAnalysis.SyntaxNodeOrToken,Microsoft.CodeAnalysis.SyntaxNodeOrToken)\">\r\n    <summary>\r\n    Creates a new <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList\"/> with the specified element replaced with a new node or token.\r\n    </summary>\r\n    <param name=\"nodeOrTokenInList\">The element to replace.</param>\r\n    <param name=\"newNodeOrToken\">The new node or token.</param>\r\n</member>\r\n",
                "StartLine": 383
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Replace(Microsoft.CodeAnalysis.SyntaxNodeOrToken,Microsoft.CodeAnalysis.SyntaxNodeOrToken)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Replace(Microsoft.CodeAnalysis.SyntaxNodeOrToken,Microsoft.CodeAnalysis.SyntaxNodeOrToken)\">\r\n    <summary>\r\n    Creates a new <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList\"/> with the specified element replaced with a new node or token.\r\n    </summary>\r\n    <param name=\"nodeOrTokenInList\">The element to replace.</param>\r\n    <param name=\"newNodeOrToken\">The new node or token.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken : nodeOrTokenInList": "",
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNodeOrToken} : newNodesAndTokens": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList": ""
                },
                "Content": "public SyntaxNodeOrTokenList ReplaceRange(SyntaxNodeOrToken nodeOrTokenInList, IEnumerable<SyntaxNodeOrToken> newNodesAndTokens)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.ReplaceRange(Microsoft.CodeAnalysis.SyntaxNodeOrToken,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNodeOrToken})\">\r\n    <summary>\r\n    Creates a new <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList\"/> with the specified element replaced with a new nodes and tokens.\r\n    </summary>\r\n    <param name=\"nodeOrTokenInList\">The element to replace.</param>\r\n    <param name=\"newNodesAndTokens\">The new nodes and tokens.</param>\r\n</member>\r\n",
                "StartLine": 398
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrToken : nodeOrTokenInList": "",
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNodeOrToken} : newNodesAndTokens": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList": ""
                },
                "Content": "public SyntaxNodeOrTokenList ReplaceRange(SyntaxNodeOrToken nodeOrTokenInList, IEnumerable<SyntaxNodeOrToken> newNodesAndTokens)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.ReplaceRange(Microsoft.CodeAnalysis.SyntaxNodeOrToken,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNodeOrToken})\">\r\n    <summary>\r\n    Creates a new <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList\"/> with the specified element replaced with a new nodes and tokens.\r\n    </summary>\r\n    <param name=\"nodeOrTokenInList\">The element to replace.</param>\r\n    <param name=\"newNodesAndTokens\">The new nodes and tokens.</param>\r\n</member>\r\n",
                "StartLine": 398
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.ReplaceRange(Microsoft.CodeAnalysis.SyntaxNodeOrToken,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNodeOrToken})",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.ReplaceRange(Microsoft.CodeAnalysis.SyntaxNodeOrToken,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxNodeOrToken})\">\r\n    <summary>\r\n    Creates a new <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList\"/> with the specified element replaced with a new nodes and tokens.\r\n    </summary>\r\n    <param name=\"nodeOrTokenInList\">The element to replace.</param>\r\n    <param name=\"newNodesAndTokens\">The new nodes and tokens.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public string ToFullString()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.ToFullString\">\r\n    <summary>\r\n    Returns the full string representation of the nodes and tokens in this list including the first node or token's leading trivia \r\n    and the last node or token's trailing trivia.\r\n    </summary>\r\n    <returns>\r\n    The full string representation of the nodes and tokens in this list including the first node or token's leading trivia \r\n    and the last node or token's trailing trivia.\r\n    </returns>\r\n</member>\r\n",
                "StartLine": 172
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public string ToFullString()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.ToFullString\">\r\n    <summary>\r\n    Returns the full string representation of the nodes and tokens in this list including the first node or token's leading trivia \r\n    and the last node or token's trailing trivia.\r\n    </summary>\r\n    <returns>\r\n    The full string representation of the nodes and tokens in this list including the first node or token's leading trivia \r\n    and the last node or token's trailing trivia.\r\n    </returns>\r\n</member>\r\n",
                "StartLine": 172
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.ToFullString",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.ToFullString\">\r\n    <summary>\r\n    Returns the full string representation of the nodes and tokens in this list including the first node or token's leading trivia \r\n    and the last node or token's trailing trivia.\r\n    </summary>\r\n    <returns>\r\n    The full string representation of the nodes and tokens in this list including the first node or token's leading trivia \r\n    and the last node or token's trailing trivia.\r\n    </returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public override string ToString()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.ToString\">\r\n    <summary>\r\n    Returns the string representation of the nodes and tokens in this list, not including the first node or token's leading trivia \r\n    and the last node or token's trailing trivia.\r\n    </summary>\r\n    <returns>\r\n    The string representation of the nodes and tokens in this list, not including the first node or token's leading trivia \r\n    and the last node or token's trailing trivia.\r\n    </returns>\r\n</member>\r\n",
                "StartLine": 159
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public override string ToString()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.ToString\">\r\n    <summary>\r\n    Returns the string representation of the nodes and tokens in this list, not including the first node or token's leading trivia \r\n    and the last node or token's trailing trivia.\r\n    </summary>\r\n    <returns>\r\n    The string representation of the nodes and tokens in this list, not including the first node or token's leading trivia \r\n    and the last node or token's trailing trivia.\r\n    </returns>\r\n</member>\r\n",
                "StartLine": 159
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.ToString",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.ToString\">\r\n    <summary>\r\n    Returns the string representation of the nodes and tokens in this list, not including the first node or token's leading trivia \r\n    and the last node or token's trailing trivia.\r\n    </summary>\r\n    <returns>\r\n    The string representation of the nodes and tokens in this list, not including the first node or token's leading trivia \r\n    and the last node or token's trailing trivia.\r\n    </returns>\r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Int32",
                "Content": "public int Count",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Count\">\r\n    <summary>\r\n    Gets the count of nodes in this list\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 71
              },
              "Syntax": {
                "PropertyType": "T:System.Int32",
                "Content": "public int Count",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Count\">\r\n    <summary>\r\n    Gets the count of nodes in this list\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 71
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Count",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Count\">\r\n    <summary>\r\n    Gets the count of nodes in this list\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Text.TextSpan",
                "Content": "public TextSpan FullSpan",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.FullSpan\">\r\n    <summary>\r\n    The absolute span of the list elements in characters, including the leading and trailing trivia of the first and last elements.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 118
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Text.TextSpan",
                "Content": "public TextSpan FullSpan",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.FullSpan\">\r\n    <summary>\r\n    The absolute span of the list elements in characters, including the leading and trailing trivia of the first and last elements.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 118
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.FullSpan",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.FullSpan\">\r\n    <summary>\r\n    The absolute span of the list elements in characters, including the leading and trailing trivia of the first and last elements.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Text.TextSpan",
                "Content": "public TextSpan Span",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Span\">\r\n    <summary>\r\n    The absolute span of the list elements in characters, not including the leading and trailing trivia of the first and last elements.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 136
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Text.TextSpan",
                "Content": "public TextSpan Span",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Span\">\r\n    <summary>\r\n    The absolute span of the list elements in characters, not including the leading and trailing trivia of the first and last elements.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 136
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Span",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList.Span\">\r\n    <summary>\r\n    The absolute span of the list elements in characters, not including the leading and trailing trivia of the first and last elements.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Syntax\\SyntaxNodeOrTokenList.cs",
          "InheritanceHierarchy": [
            "T:System.Object",
            "T:System.ValueType"
          ],
          "Syntax": {
            "Content": "public struct SyntaxNodeOrTokenList",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList\">\r\n    <summary>\r\n    A list of <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNodeOrToken\"/> structures.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.SyntaxNodeOrTokenList\">\r\n    <summary>\r\n    A list of <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNodeOrToken\"/> structures.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxToken : token": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxToken": ""
                },
                "Content": "public SyntaxToken CopyAnnotationsTo(SyntaxToken token)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.CopyAnnotationsTo(Microsoft.CodeAnalysis.SyntaxToken)\">\r\n    <summary>\r\n    Copies all SyntaxAnnotations, if any, from this SyntaxToken instance and attaches them to a new instance based on <paramref name=\"token\" />.\r\n    </summary>\r\n    <remarks>\r\n    If no annotations are copied, just returns <paramref name=\"token\" />.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 452
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxToken : token": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxToken": ""
                },
                "Content": "public SyntaxToken CopyAnnotationsTo(SyntaxToken token)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.CopyAnnotationsTo(Microsoft.CodeAnalysis.SyntaxToken)\">\r\n    <summary>\r\n    Copies all SyntaxAnnotations, if any, from this SyntaxToken instance and attaches them to a new instance based on <paramref name=\"token\" />.\r\n    </summary>\r\n    <remarks>\r\n    If no annotations are copied, just returns <paramref name=\"token\" />.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 452
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxToken.CopyAnnotationsTo(Microsoft.CodeAnalysis.SyntaxToken)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxToken",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.CopyAnnotationsTo(Microsoft.CodeAnalysis.SyntaxToken)\">\r\n    <summary>\r\n    Copies all SyntaxAnnotations, if any, from this SyntaxToken instance and attaches them to a new instance based on <paramref name=\"token\" />.\r\n    </summary>\r\n    <remarks>\r\n    If no annotations are copied, just returns <paramref name=\"token\" />.\r\n    </remarks>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxToken : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool Equals(SyntaxToken other)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.Equals(Microsoft.CodeAnalysis.SyntaxToken)\">\r\n    <summary>\r\n    Determines whether the supplied <see cref=\"T:Microsoft.CodeAnalysis.SyntaxToken\"/> is equal to this\r\n    <see cref=\"T:Microsoft.CodeAnalysis.SyntaxToken\"/>.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 633
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxToken : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool Equals(SyntaxToken other)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.Equals(Microsoft.CodeAnalysis.SyntaxToken)\">\r\n    <summary>\r\n    Determines whether the supplied <see cref=\"T:Microsoft.CodeAnalysis.SyntaxToken\"/> is equal to this\r\n    <see cref=\"T:Microsoft.CodeAnalysis.SyntaxToken\"/>.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 633
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxToken.Equals(Microsoft.CodeAnalysis.SyntaxToken)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxToken",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.Equals(Microsoft.CodeAnalysis.SyntaxToken)\">\r\n    <summary>\r\n    Determines whether the supplied <see cref=\"T:Microsoft.CodeAnalysis.SyntaxToken\"/> is equal to this\r\n    <see cref=\"T:Microsoft.CodeAnalysis.SyntaxToken\"/>.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Object : obj": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public override bool Equals(object obj)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.Equals(System.Object)\">\r\n    <summary>\r\n    Determines whether the supplied <see cref=\"T:Microsoft.CodeAnalysis.SyntaxToken\"/> is equal to this\r\n    <see cref=\"T:Microsoft.CodeAnalysis.SyntaxToken\"/>.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 645
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Object : obj": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public override bool Equals(object obj)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.Equals(System.Object)\">\r\n    <summary>\r\n    Determines whether the supplied <see cref=\"T:Microsoft.CodeAnalysis.SyntaxToken\"/> is equal to this\r\n    <see cref=\"T:Microsoft.CodeAnalysis.SyntaxToken\"/>.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 645
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxToken.Equals(System.Object)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxToken",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.Equals(System.Object)\">\r\n    <summary>\r\n    Determines whether the supplied <see cref=\"T:Microsoft.CodeAnalysis.SyntaxToken\"/> is equal to this\r\n    <see cref=\"T:Microsoft.CodeAnalysis.SyntaxToken\"/>.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia}": ""
                },
                "Content": "public IEnumerable<SyntaxTrivia> GetAllTrivia()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.GetAllTrivia\">\r\n    <summary>\r\n    Gets a list of all the trivia (both leading and trailing) for this token.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 592
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia}": ""
                },
                "Content": "public IEnumerable<SyntaxTrivia> GetAllTrivia()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.GetAllTrivia\">\r\n    <summary>\r\n    Gets a list of all the trivia (both leading and trailing) for this token.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 592
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxToken.GetAllTrivia",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxToken",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.GetAllTrivia\">\r\n    <summary>\r\n    Gets a list of all the trivia (both leading and trailing) for this token.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{System.String} : annotationKinds": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation}": ""
                },
                "Content": "public IEnumerable<SyntaxAnnotation> GetAnnotations(IEnumerable<string> annotationKinds)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.GetAnnotations(System.Collections.Generic.IEnumerable{System.String})\">\r\n    <summary>\r\n    Gets all the annotations of the specified annotation kind.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 358
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{System.String} : annotationKinds": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation}": ""
                },
                "Content": "public IEnumerable<SyntaxAnnotation> GetAnnotations(IEnumerable<string> annotationKinds)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.GetAnnotations(System.Collections.Generic.IEnumerable{System.String})\">\r\n    <summary>\r\n    Gets all the annotations of the specified annotation kind.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 358
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxToken.GetAnnotations(System.Collections.Generic.IEnumerable{System.String})",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxToken",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.GetAnnotations(System.Collections.Generic.IEnumerable{System.String})\">\r\n    <summary>\r\n    Gets all the annotations of the specified annotation kind.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.String : annotationKind": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation}": ""
                },
                "Content": "public IEnumerable<SyntaxAnnotation> GetAnnotations(string annotationKind)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.GetAnnotations(System.String)\">\r\n    <summary>\r\n    Gets all the annotations of the specified annotation kind.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 340
              },
              "Syntax": {
                "Parameters": {
                  "T:System.String : annotationKind": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation}": ""
                },
                "Content": "public IEnumerable<SyntaxAnnotation> GetAnnotations(string annotationKind)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.GetAnnotations(System.String)\">\r\n    <summary>\r\n    Gets all the annotations of the specified annotation kind.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 340
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxToken.GetAnnotations(System.String)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxToken",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.GetAnnotations(System.String)\">\r\n    <summary>\r\n    Gets all the annotations of the specified annotation kind.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Array : annotationKinds": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation}": ""
                },
                "Content": "public IEnumerable<SyntaxAnnotation> GetAnnotations(params string[] annotationKinds)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.GetAnnotations(System.String[])\">\r\n    <summary>\r\n    Gets all the annotations of the specified annotation kind.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 350
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Array : annotationKinds": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation}": ""
                },
                "Content": "public IEnumerable<SyntaxAnnotation> GetAnnotations(params string[] annotationKinds)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.GetAnnotations(System.String[])\">\r\n    <summary>\r\n    Gets all the annotations of the specified annotation kind.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 350
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxToken.GetAnnotations(System.String[])",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxToken",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.GetAnnotations(System.String[])\">\r\n    <summary>\r\n    Gets all the annotations of the specified annotation kind.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Diagnostic}": ""
                },
                "Content": "public IEnumerable<Diagnostic> GetDiagnostics()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.GetDiagnostics\">\r\n    <summary>\r\n    Gets a list of all the diagnostics associated with this token and any related trivia.\r\n    This method does not filter diagnostics based on #pragmas and compiler options\r\n    like nowarn, warnaserror etc.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 742
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Diagnostic}": ""
                },
                "Content": "public IEnumerable<Diagnostic> GetDiagnostics()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.GetDiagnostics\">\r\n    <summary>\r\n    Gets a list of all the diagnostics associated with this token and any related trivia.\r\n    This method does not filter diagnostics based on #pragmas and compiler options\r\n    like nowarn, warnaserror etc.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 742
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxToken.GetDiagnostics",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxToken",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.GetDiagnostics\">\r\n    <summary>\r\n    Gets a list of all the diagnostics associated with this token and any related trivia.\r\n    This method does not filter diagnostics based on #pragmas and compiler options\r\n    like nowarn, warnaserror etc.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public override int GetHashCode()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.GetHashCode\">\r\n    <summary>\r\n    Serves as hash function for <see cref=\"T:Microsoft.CodeAnalysis.SyntaxToken\"/>.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 653
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public override int GetHashCode()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.GetHashCode\">\r\n    <summary>\r\n    Serves as hash function for <see cref=\"T:Microsoft.CodeAnalysis.SyntaxToken\"/>.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 653
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxToken.GetHashCode",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxToken",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.GetHashCode\">\r\n    <summary>\r\n    Serves as hash function for <see cref=\"T:Microsoft.CodeAnalysis.SyntaxToken\"/>.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Location": ""
                },
                "Content": "public Location GetLocation()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.GetLocation\">\r\n    <summary>\r\n    Gets the location for this token.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 730
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Location": ""
                },
                "Content": "public Location GetLocation()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.GetLocation\">\r\n    <summary>\r\n    Gets the location for this token.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 730
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxToken.GetLocation",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxToken",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.GetLocation\">\r\n    <summary>\r\n    Gets the location for this token.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Boolean : includeDirectives": "",
                  "T:System.Boolean : includeDocumentationComments": "",
                  "T:System.Boolean : includeSkipped": "",
                  "T:System.Boolean : includeZeroWidth": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxToken": ""
                },
                "Content": "public SyntaxToken GetNextToken(bool includeZeroWidth = false, bool includeSkipped = false, bool includeDirectives = false, bool includeDocumentationComments = false)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.GetNextToken(System.Boolean,System.Boolean,System.Boolean,System.Boolean)\">\r\n    <summary>\r\n    Gets the token that follows this token in the syntax tree.\r\n    </summary>\r\n    <returns>The token that follows this token in the syntax tree.</returns>\r\n</member>\r\n",
                "StartLine": 662
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Boolean : includeDirectives": "",
                  "T:System.Boolean : includeDocumentationComments": "",
                  "T:System.Boolean : includeSkipped": "",
                  "T:System.Boolean : includeZeroWidth": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxToken": ""
                },
                "Content": "public SyntaxToken GetNextToken(bool includeZeroWidth = false, bool includeSkipped = false, bool includeDirectives = false, bool includeDocumentationComments = false)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.GetNextToken(System.Boolean,System.Boolean,System.Boolean,System.Boolean)\">\r\n    <summary>\r\n    Gets the token that follows this token in the syntax tree.\r\n    </summary>\r\n    <returns>The token that follows this token in the syntax tree.</returns>\r\n</member>\r\n",
                "StartLine": 662
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxToken.GetNextToken(System.Boolean,System.Boolean,System.Boolean,System.Boolean)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxToken",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.GetNextToken(System.Boolean,System.Boolean,System.Boolean,System.Boolean)\">\r\n    <summary>\r\n    Gets the token that follows this token in the syntax tree.\r\n    </summary>\r\n    <returns>The token that follows this token in the syntax tree.</returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Boolean : includeDirectives": "",
                  "T:System.Boolean : includeDocumentationComments": "",
                  "T:System.Boolean : includeSkipped": "",
                  "T:System.Boolean : includeZeroWidth": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxToken": ""
                },
                "Content": "public SyntaxToken GetPreviousToken(bool includeZeroWidth = false, bool includeSkipped = false, bool includeDirectives = false, bool includeDocumentationComments = false)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.GetPreviousToken(System.Boolean,System.Boolean,System.Boolean,System.Boolean)\">\r\n    <summary>\r\n    Gets the token that precedes this token in the syntax tree.\r\n    </summary>\r\n    <returns>The next token that follows this token in the syntax tree.</returns>\r\n</member>\r\n",
                "StartLine": 693
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Boolean : includeDirectives": "",
                  "T:System.Boolean : includeDocumentationComments": "",
                  "T:System.Boolean : includeSkipped": "",
                  "T:System.Boolean : includeZeroWidth": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxToken": ""
                },
                "Content": "public SyntaxToken GetPreviousToken(bool includeZeroWidth = false, bool includeSkipped = false, bool includeDirectives = false, bool includeDocumentationComments = false)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.GetPreviousToken(System.Boolean,System.Boolean,System.Boolean,System.Boolean)\">\r\n    <summary>\r\n    Gets the token that precedes this token in the syntax tree.\r\n    </summary>\r\n    <returns>The next token that follows this token in the syntax tree.</returns>\r\n</member>\r\n",
                "StartLine": 693
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxToken.GetPreviousToken(System.Boolean,System.Boolean,System.Boolean,System.Boolean)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxToken",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.GetPreviousToken(System.Boolean,System.Boolean,System.Boolean,System.Boolean)\">\r\n    <summary>\r\n    Gets the token that precedes this token in the syntax tree.\r\n    </summary>\r\n    <returns>The next token that follows this token in the syntax tree.</returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxAnnotation : annotation": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool HasAnnotation(SyntaxAnnotation annotation)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.HasAnnotation(Microsoft.CodeAnalysis.SyntaxAnnotation)\">\r\n    <summary>\r\n    True if this token has the specified annotation.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 332
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxAnnotation : annotation": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool HasAnnotation(SyntaxAnnotation annotation)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.HasAnnotation(Microsoft.CodeAnalysis.SyntaxAnnotation)\">\r\n    <summary>\r\n    True if this token has the specified annotation.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 332
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxToken.HasAnnotation(Microsoft.CodeAnalysis.SyntaxAnnotation)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxToken",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.HasAnnotation(Microsoft.CodeAnalysis.SyntaxAnnotation)\">\r\n    <summary>\r\n    True if this token has the specified annotation.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.String : annotationKind": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool HasAnnotations(string annotationKind)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.HasAnnotations(System.String)\">\r\n    <summary>\r\n    True if this token has annotations of the specified annotation kind.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 316
              },
              "Syntax": {
                "Parameters": {
                  "T:System.String : annotationKind": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool HasAnnotations(string annotationKind)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.HasAnnotations(System.String)\">\r\n    <summary>\r\n    True if this token has annotations of the specified annotation kind.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 316
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxToken.HasAnnotations(System.String)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxToken",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.HasAnnotations(System.String)\">\r\n    <summary>\r\n    True if this token has annotations of the specified annotation kind.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Array : annotationKinds": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool HasAnnotations(params string[] annotationKinds)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.HasAnnotations(System.String[])\">\r\n    <summary>\r\n    True if this token has annotations of the specified annotation kinds.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 324
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Array : annotationKinds": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool HasAnnotations(params string[] annotationKinds)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.HasAnnotations(System.String[])\">\r\n    <summary>\r\n    True if this token has annotations of the specified annotation kinds.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 324
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxToken.HasAnnotations(System.String[])",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxToken",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.HasAnnotations(System.String[])\">\r\n    <summary>\r\n    True if this token has annotations of the specified annotation kinds.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxToken : token": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool IsEquivalentTo(SyntaxToken token)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.IsEquivalentTo(Microsoft.CodeAnalysis.SyntaxToken)\">\r\n    <summary>\r\n    Determines if this token is equivalent to the specified token.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 752
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxToken : token": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool IsEquivalentTo(SyntaxToken token)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.IsEquivalentTo(Microsoft.CodeAnalysis.SyntaxToken)\">\r\n    <summary>\r\n    Determines if this token is equivalent to the specified token.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 752
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxToken.IsEquivalentTo(Microsoft.CodeAnalysis.SyntaxToken)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxToken",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.IsEquivalentTo(Microsoft.CodeAnalysis.SyntaxToken)\">\r\n    <summary>\r\n    Determines if this token is equivalent to the specified token.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool IsPartOfStructuredTrivia()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.IsPartOfStructuredTrivia\">\r\n    <summary>\r\n    Determines whether this token is a descendant of a structured trivia.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 291
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool IsPartOfStructuredTrivia()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.IsPartOfStructuredTrivia\">\r\n    <summary>\r\n    Determines whether this token is a descendant of a structured trivia.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 291
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxToken.IsPartOfStructuredTrivia",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxToken",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.IsPartOfStructuredTrivia\">\r\n    <summary>\r\n    Determines whether this token is a descendant of a structured trivia.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public string ToFullString()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.ToFullString\">\r\n    <summary>\r\n    Returns the full string representation of this token including its leading and trailing trivia.\r\n    </summary>\r\n    <returns>The full string representation of this token including its leading and trailing trivia.</returns>\r\n    <remarks>The length of the returned string is always the same as FullSpan.Length</remarks>\r\n</member>\r\n",
                "StartLine": 212
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public string ToFullString()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.ToFullString\">\r\n    <summary>\r\n    Returns the full string representation of this token including its leading and trailing trivia.\r\n    </summary>\r\n    <returns>The full string representation of this token including its leading and trailing trivia.</returns>\r\n    <remarks>The length of the returned string is always the same as FullSpan.Length</remarks>\r\n</member>\r\n",
                "StartLine": 212
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxToken.ToFullString",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxToken",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.ToFullString\">\r\n    <summary>\r\n    Returns the full string representation of this token including its leading and trailing trivia.\r\n    </summary>\r\n    <returns>The full string representation of this token including its leading and trailing trivia.</returns>\r\n    <remarks>The length of the returned string is always the same as FullSpan.Length</remarks>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public override string ToString()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.ToString\">\r\n    <summary>\r\n    Returns the string representation of this token, not including its leading and trailing trivia.\r\n    </summary>\r\n    <returns>The string representation of this token, not including its leading and trailing trivia.</returns>\r\n    <remarks>The length of the returned string is always the same as Span.Length</remarks>\r\n</member>\r\n",
                "StartLine": 202
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public override string ToString()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.ToString\">\r\n    <summary>\r\n    Returns the string representation of this token, not including its leading and trailing trivia.\r\n    </summary>\r\n    <returns>The string representation of this token, not including its leading and trailing trivia.</returns>\r\n    <remarks>The length of the returned string is always the same as Span.Length</remarks>\r\n</member>\r\n",
                "StartLine": 202
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxToken.ToString",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxToken",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.ToString\">\r\n    <summary>\r\n    Returns the string representation of this token, not including its leading and trailing trivia.\r\n    </summary>\r\n    <returns>The string representation of this token, not including its leading and trailing trivia.</returns>\r\n    <remarks>The length of the returned string is always the same as Span.Length</remarks>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Array : annotations": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxToken": ""
                },
                "Content": "public SyntaxToken WithAdditionalAnnotations(params SyntaxAnnotation[] annotations)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.WithAdditionalAnnotations(Microsoft.CodeAnalysis.SyntaxAnnotation[])\">\r\n    <summary>\r\n    Adds this annotation to a given syntax token, creating a new syntax token of the same type with the\r\n    annotation on it.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 369
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Array : annotations": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxToken": ""
                },
                "Content": "public SyntaxToken WithAdditionalAnnotations(params SyntaxAnnotation[] annotations)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.WithAdditionalAnnotations(Microsoft.CodeAnalysis.SyntaxAnnotation[])\">\r\n    <summary>\r\n    Adds this annotation to a given syntax token, creating a new syntax token of the same type with the\r\n    annotation on it.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 369
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxToken.WithAdditionalAnnotations(Microsoft.CodeAnalysis.SyntaxAnnotation[])",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxToken",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.WithAdditionalAnnotations(Microsoft.CodeAnalysis.SyntaxAnnotation[])\">\r\n    <summary>\r\n    Adds this annotation to a given syntax token, creating a new syntax token of the same type with the\r\n    annotation on it.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation} : annotations": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxToken": ""
                },
                "Content": "public SyntaxToken WithAdditionalAnnotations(IEnumerable<SyntaxAnnotation> annotations)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.WithAdditionalAnnotations(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation})\">\r\n    <summary>\r\n    Adds this annotation to a given syntax token, creating a new syntax token of the same type with the\r\n    annotation on it.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 378
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation} : annotations": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxToken": ""
                },
                "Content": "public SyntaxToken WithAdditionalAnnotations(IEnumerable<SyntaxAnnotation> annotations)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.WithAdditionalAnnotations(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation})\">\r\n    <summary>\r\n    Adds this annotation to a given syntax token, creating a new syntax token of the same type with the\r\n    annotation on it.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 378
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxToken.WithAdditionalAnnotations(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation})",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxToken",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.WithAdditionalAnnotations(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation})\">\r\n    <summary>\r\n    Adds this annotation to a given syntax token, creating a new syntax token of the same type with the\r\n    annotation on it.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Array : trivia": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxToken": ""
                },
                "Content": "public SyntaxToken WithLeadingTrivia(params SyntaxTrivia[] trivia)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.WithLeadingTrivia(Microsoft.CodeAnalysis.SyntaxTrivia[])\">\r\n    <summary>\r\n    Creates a new token from this token with the leading trivia specified..\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 544
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Array : trivia": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxToken": ""
                },
                "Content": "public SyntaxToken WithLeadingTrivia(params SyntaxTrivia[] trivia)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.WithLeadingTrivia(Microsoft.CodeAnalysis.SyntaxTrivia[])\">\r\n    <summary>\r\n    Creates a new token from this token with the leading trivia specified..\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 544
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxToken.WithLeadingTrivia(Microsoft.CodeAnalysis.SyntaxTrivia[])",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxToken",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.WithLeadingTrivia(Microsoft.CodeAnalysis.SyntaxTrivia[])\">\r\n    <summary>\r\n    Creates a new token from this token with the leading trivia specified..\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxTriviaList : trivia": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxToken": ""
                },
                "Content": "public SyntaxToken WithLeadingTrivia(SyntaxTriviaList trivia)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.WithLeadingTrivia(Microsoft.CodeAnalysis.SyntaxTriviaList)\">\r\n    <summary>\r\n    Creates a new token from this token with the leading trivia specified.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 536
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxTriviaList : trivia": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxToken": ""
                },
                "Content": "public SyntaxToken WithLeadingTrivia(SyntaxTriviaList trivia)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.WithLeadingTrivia(Microsoft.CodeAnalysis.SyntaxTriviaList)\">\r\n    <summary>\r\n    Creates a new token from this token with the leading trivia specified.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 536
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxToken.WithLeadingTrivia(Microsoft.CodeAnalysis.SyntaxTriviaList)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxToken",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.WithLeadingTrivia(Microsoft.CodeAnalysis.SyntaxTriviaList)\">\r\n    <summary>\r\n    Creates a new token from this token with the leading trivia specified.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia} : trivia": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxToken": ""
                },
                "Content": "public SyntaxToken WithLeadingTrivia(IEnumerable<SyntaxTrivia> trivia)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.WithLeadingTrivia(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})\">\r\n    <summary>\r\n    Creates a new token from this token with the leading trivia specified..\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 552
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia} : trivia": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxToken": ""
                },
                "Content": "public SyntaxToken WithLeadingTrivia(IEnumerable<SyntaxTrivia> trivia)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.WithLeadingTrivia(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})\">\r\n    <summary>\r\n    Creates a new token from this token with the leading trivia specified..\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 552
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxToken.WithLeadingTrivia(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxToken",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.WithLeadingTrivia(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})\">\r\n    <summary>\r\n    Creates a new token from this token with the leading trivia specified..\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Array : annotations": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxToken": ""
                },
                "Content": "public SyntaxToken WithoutAnnotations(params SyntaxAnnotation[] annotations)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.WithoutAnnotations(Microsoft.CodeAnalysis.SyntaxAnnotation[])\">\r\n    <summary>\r\n    Creates a new syntax token identical to this one without the specified annotations.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 399
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Array : annotations": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxToken": ""
                },
                "Content": "public SyntaxToken WithoutAnnotations(params SyntaxAnnotation[] annotations)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.WithoutAnnotations(Microsoft.CodeAnalysis.SyntaxAnnotation[])\">\r\n    <summary>\r\n    Creates a new syntax token identical to this one without the specified annotations.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 399
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxToken.WithoutAnnotations(Microsoft.CodeAnalysis.SyntaxAnnotation[])",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxToken",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.WithoutAnnotations(Microsoft.CodeAnalysis.SyntaxAnnotation[])\">\r\n    <summary>\r\n    Creates a new syntax token identical to this one without the specified annotations.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation} : annotations": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxToken": ""
                },
                "Content": "public SyntaxToken WithoutAnnotations(IEnumerable<SyntaxAnnotation> annotations)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.WithoutAnnotations(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation})\">\r\n    <summary>\r\n    Creates a new syntax token identical to this one without the specified annotations.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 407
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation} : annotations": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxToken": ""
                },
                "Content": "public SyntaxToken WithoutAnnotations(IEnumerable<SyntaxAnnotation> annotations)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.WithoutAnnotations(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation})\">\r\n    <summary>\r\n    Creates a new syntax token identical to this one without the specified annotations.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 407
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxToken.WithoutAnnotations(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation})",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxToken",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.WithoutAnnotations(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation})\">\r\n    <summary>\r\n    Creates a new syntax token identical to this one without the specified annotations.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.String : annotationKind": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxToken": ""
                },
                "Content": "public SyntaxToken WithoutAnnotations(string annotationKind)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.WithoutAnnotations(System.String)\">\r\n    <summary>\r\n    Creates a new syntax token identical to this one without annotations of the specified kind.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 429
              },
              "Syntax": {
                "Parameters": {
                  "T:System.String : annotationKind": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxToken": ""
                },
                "Content": "public SyntaxToken WithoutAnnotations(string annotationKind)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.WithoutAnnotations(System.String)\">\r\n    <summary>\r\n    Creates a new syntax token identical to this one without annotations of the specified kind.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 429
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxToken.WithoutAnnotations(System.String)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxToken",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.WithoutAnnotations(System.String)\">\r\n    <summary>\r\n    Creates a new syntax token identical to this one without annotations of the specified kind.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Array : trivia": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxToken": ""
                },
                "Content": "public SyntaxToken WithTrailingTrivia(params SyntaxTrivia[] trivia)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.WithTrailingTrivia(Microsoft.CodeAnalysis.SyntaxTrivia[])\">\r\n    <summary>\r\n    Creates a new token from this token with the trailing trivia specified.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 572
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Array : trivia": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxToken": ""
                },
                "Content": "public SyntaxToken WithTrailingTrivia(params SyntaxTrivia[] trivia)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.WithTrailingTrivia(Microsoft.CodeAnalysis.SyntaxTrivia[])\">\r\n    <summary>\r\n    Creates a new token from this token with the trailing trivia specified.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 572
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxToken.WithTrailingTrivia(Microsoft.CodeAnalysis.SyntaxTrivia[])",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxToken",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.WithTrailingTrivia(Microsoft.CodeAnalysis.SyntaxTrivia[])\">\r\n    <summary>\r\n    Creates a new token from this token with the trailing trivia specified.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxTriviaList : trivia": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxToken": ""
                },
                "Content": "public SyntaxToken WithTrailingTrivia(SyntaxTriviaList trivia)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.WithTrailingTrivia(Microsoft.CodeAnalysis.SyntaxTriviaList)\">\r\n    <summary>\r\n    Creates a new token from this token with the trailing trivia specified.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 564
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxTriviaList : trivia": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxToken": ""
                },
                "Content": "public SyntaxToken WithTrailingTrivia(SyntaxTriviaList trivia)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.WithTrailingTrivia(Microsoft.CodeAnalysis.SyntaxTriviaList)\">\r\n    <summary>\r\n    Creates a new token from this token with the trailing trivia specified.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 564
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxToken.WithTrailingTrivia(Microsoft.CodeAnalysis.SyntaxTriviaList)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxToken",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.WithTrailingTrivia(Microsoft.CodeAnalysis.SyntaxTriviaList)\">\r\n    <summary>\r\n    Creates a new token from this token with the trailing trivia specified.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia} : trivia": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxToken": ""
                },
                "Content": "public SyntaxToken WithTrailingTrivia(IEnumerable<SyntaxTrivia> trivia)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.WithTrailingTrivia(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})\">\r\n    <summary>\r\n    Creates a new token from this token with the trailing trivia specified.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 580
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia} : trivia": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxToken": ""
                },
                "Content": "public SyntaxToken WithTrailingTrivia(IEnumerable<SyntaxTrivia> trivia)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.WithTrailingTrivia(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})\">\r\n    <summary>\r\n    Creates a new token from this token with the trailing trivia specified.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 580
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxToken.WithTrailingTrivia(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxToken",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.WithTrailingTrivia(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})\">\r\n    <summary>\r\n    Creates a new token from this token with the trailing trivia specified.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxToken : token": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxToken": ""
                },
                "Content": "public SyntaxToken WithTriviaFrom(SyntaxToken token)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.WithTriviaFrom(Microsoft.CodeAnalysis.SyntaxToken)\">\r\n    <summary>\r\n    Creates a new tokne from this token with the leading and trailing trivia from the specified token.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 528
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxToken : token": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxToken": ""
                },
                "Content": "public SyntaxToken WithTriviaFrom(SyntaxToken token)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.WithTriviaFrom(Microsoft.CodeAnalysis.SyntaxToken)\">\r\n    <summary>\r\n    Creates a new tokne from this token with the leading and trailing trivia from the specified token.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 528
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxToken.WithTriviaFrom(Microsoft.CodeAnalysis.SyntaxToken)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxToken",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.WithTriviaFrom(Microsoft.CodeAnalysis.SyntaxToken)\">\r\n    <summary>\r\n    Creates a new tokne from this token with the leading and trailing trivia from the specified token.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.IO.TextWriter : writer": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public void WriteTo(System.IO.TextWriter writer)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.WriteTo(System.IO.TextWriter)\">\r\n    <summary>\r\n    Writes the full text of this token to the specified TextWriter\r\n    </summary>\r\n    <param name=\"writer\"></param>\r\n</member>\r\n",
                "StartLine": 221
              },
              "Syntax": {
                "Parameters": {
                  "T:System.IO.TextWriter : writer": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public void WriteTo(System.IO.TextWriter writer)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.WriteTo(System.IO.TextWriter)\">\r\n    <summary>\r\n    Writes the full text of this token to the specified TextWriter\r\n    </summary>\r\n    <param name=\"writer\"></param>\r\n</member>\r\n",
                "StartLine": 221
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxToken.WriteTo(System.IO.TextWriter)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxToken",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxToken.WriteTo(System.IO.TextWriter)\">\r\n    <summary>\r\n    Writes the full text of this token to the specified TextWriter\r\n    </summary>\r\n    <param name=\"writer\"></param>\r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool ContainsAnnotations",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxToken.ContainsAnnotations\">\r\n    <summary>\r\n    True if this token or its trivia has any annotations.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 308
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool ContainsAnnotations",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxToken.ContainsAnnotations\">\r\n    <summary>\r\n    True if this token or its trivia has any annotations.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 308
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxToken.ContainsAnnotations",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxToken",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxToken.ContainsAnnotations\">\r\n    <summary>\r\n    True if this token or its trivia has any annotations.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool ContainsDiagnostics",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxToken.ContainsDiagnostics\">\r\n    <summary>\r\n    Determines whether this token or any of its descendant trivia have any diagnostics on them. \r\n    </summary>>\r\n</member>\r\n",
                "StartLine": 275
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool ContainsDiagnostics",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxToken.ContainsDiagnostics\">\r\n    <summary>\r\n    Determines whether this token or any of its descendant trivia have any diagnostics on them. \r\n    </summary>>\r\n</member>\r\n",
                "StartLine": 275
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxToken.ContainsDiagnostics",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxToken",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxToken.ContainsDiagnostics\">\r\n    <summary>\r\n    Determines whether this token or any of its descendant trivia have any diagnostics on them. \r\n    </summary>>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool ContainsDirectives",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxToken.ContainsDirectives\">\r\n    <summary>\r\n    Determines whether this token has any descendant preprocessor directives.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 283
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool ContainsDirectives",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxToken.ContainsDirectives\">\r\n    <summary>\r\n    Determines whether this token has any descendant preprocessor directives.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 283
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxToken.ContainsDirectives",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxToken",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxToken.ContainsDirectives\">\r\n    <summary>\r\n    Determines whether this token has any descendant preprocessor directives.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Text.TextSpan",
                "Content": "public TextSpan FullSpan",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxToken.FullSpan\">\r\n    <summary>\r\n    The absolute span of this token in characters, including its leading and trailing trivia.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 159
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Text.TextSpan",
                "Content": "public TextSpan FullSpan",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxToken.FullSpan\">\r\n    <summary>\r\n    The absolute span of this token in characters, including its leading and trailing trivia.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 159
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxToken.FullSpan",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxToken",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxToken.FullSpan\">\r\n    <summary>\r\n    The absolute span of this token in characters, including its leading and trailing trivia.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool HasLeadingTrivia",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxToken.HasLeadingTrivia\">\r\n    <summary>\r\n    Determines whether this token has any leading trivia.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 243
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool HasLeadingTrivia",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxToken.HasLeadingTrivia\">\r\n    <summary>\r\n    Determines whether this token has any leading trivia.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 243
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxToken.HasLeadingTrivia",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxToken",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxToken.HasLeadingTrivia\">\r\n    <summary>\r\n    Determines whether this token has any leading trivia.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool HasStructuredTrivia",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxToken.HasStructuredTrivia\">\r\n    <summary>\r\n    Determines whether any of this token's trivia is structured.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 299
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool HasStructuredTrivia",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxToken.HasStructuredTrivia\">\r\n    <summary>\r\n    Determines whether any of this token's trivia is structured.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 299
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxToken.HasStructuredTrivia",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxToken",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxToken.HasStructuredTrivia\">\r\n    <summary>\r\n    Determines whether any of this token's trivia is structured.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool HasTrailingTrivia",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxToken.HasTrailingTrivia\">\r\n    <summary>\r\n    Determines whether this token has any trailing trivia.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 251
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool HasTrailingTrivia",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxToken.HasTrailingTrivia\">\r\n    <summary>\r\n    Determines whether this token has any trailing trivia.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 251
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxToken.HasTrailingTrivia",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxToken",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxToken.HasTrailingTrivia\">\r\n    <summary>\r\n    Determines whether this token has any trailing trivia.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool IsMissing",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxToken.IsMissing\">\r\n    <summary>\r\n    Determines whether this token represents a language construct that was actually parsed from source code.\r\n    Missing tokens are typically generated by the parser in error scenarios to represent constructs that should\r\n    have been present in the source code for the source code to compile successfully but were actually missing.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 169
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool IsMissing",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxToken.IsMissing\">\r\n    <summary>\r\n    Determines whether this token represents a language construct that was actually parsed from source code.\r\n    Missing tokens are typically generated by the parser in error scenarios to represent constructs that should\r\n    have been present in the source code for the source code to compile successfully but were actually missing.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 169
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxToken.IsMissing",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxToken",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxToken.IsMissing\">\r\n    <summary>\r\n    Determines whether this token represents a language construct that was actually parsed from source code.\r\n    Missing tokens are typically generated by the parser in error scenarios to represent constructs that should\r\n    have been present in the source code for the source code to compile successfully but were actually missing.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.String",
                "Content": "public string Language",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxToken.Language\">\r\n    <summary>\r\n    The language name that this token is syntax of.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 61
              },
              "Syntax": {
                "PropertyType": "T:System.String",
                "Content": "public string Language",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxToken.Language\">\r\n    <summary>\r\n    The language name that this token is syntax of.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 61
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxToken.Language",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxToken",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxToken.Language\">\r\n    <summary>\r\n    The language name that this token is syntax of.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SyntaxTriviaList",
                "Content": "public SyntaxTriviaList LeadingTrivia",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxToken.LeadingTrivia\">\r\n    <summary>\r\n    The list of trivia that appear before this token in the source code.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 481
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SyntaxTriviaList",
                "Content": "public SyntaxTriviaList LeadingTrivia",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxToken.LeadingTrivia\">\r\n    <summary>\r\n    The list of trivia that appear before this token in the source code.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 481
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxToken.LeadingTrivia",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxToken",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxToken.LeadingTrivia\">\r\n    <summary>\r\n    The list of trivia that appear before this token in the source code.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SyntaxNode",
                "Content": "public SyntaxNode Parent",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxToken.Parent\">\r\n    <summary>\r\n    The node that contains this token in its Children collection.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 90
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SyntaxNode",
                "Content": "public SyntaxNode Parent",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxToken.Parent\">\r\n    <summary>\r\n    The node that contains this token in its Children collection.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 90
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxToken.Parent",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxToken",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxToken.Parent\">\r\n    <summary>\r\n    The node that contains this token in its Children collection.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Int32",
                "Content": "public int RawKind",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxToken.RawKind\">\r\n    <summary>\r\n    An integer representing the language specific kind of this token.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 53
              },
              "Syntax": {
                "PropertyType": "T:System.Int32",
                "Content": "public int RawKind",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxToken.RawKind\">\r\n    <summary>\r\n    An integer representing the language specific kind of this token.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 53
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxToken.RawKind",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxToken",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxToken.RawKind\">\r\n    <summary>\r\n    An integer representing the language specific kind of this token.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Text.TextSpan",
                "Content": "public TextSpan Span",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxToken.Span\">\r\n    <summary>\r\n    The absolute span of this token in characters, not including its leading and trailing trivia.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 135
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Text.TextSpan",
                "Content": "public TextSpan Span",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxToken.Span\">\r\n    <summary>\r\n    The absolute span of this token in characters, not including its leading and trailing trivia.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 135
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxToken.Span",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxToken",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxToken.Span\">\r\n    <summary>\r\n    The absolute span of this token in characters, not including its leading and trailing trivia.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Int32",
                "Content": "public int SpanStart",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxToken.SpanStart\">\r\n    <summary>\r\n    Same as accessing <see cref=\"P:Microsoft.CodeAnalysis.Text.TextSpan.Start\"/> on <see cref=\"P:Microsoft.CodeAnalysis.SyntaxToken.Span\"/>.\r\n    </summary>\r\n    <remarks>\r\n    Slight performance improvement.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 151
              },
              "Syntax": {
                "PropertyType": "T:System.Int32",
                "Content": "public int SpanStart",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxToken.SpanStart\">\r\n    <summary>\r\n    Same as accessing <see cref=\"P:Microsoft.CodeAnalysis.Text.TextSpan.Start\"/> on <see cref=\"P:Microsoft.CodeAnalysis.SyntaxToken.Span\"/>.\r\n    </summary>\r\n    <remarks>\r\n    Slight performance improvement.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 151
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxToken.SpanStart",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxToken",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxToken.SpanStart\">\r\n    <summary>\r\n    Same as accessing <see cref=\"P:Microsoft.CodeAnalysis.Text.TextSpan.Start\"/> on <see cref=\"P:Microsoft.CodeAnalysis.SyntaxToken.Span\"/>.\r\n    </summary>\r\n    <remarks>\r\n    Slight performance improvement.\r\n    </remarks>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SyntaxTree",
                "Content": "public SyntaxTree SyntaxTree",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxToken.SyntaxTree\">\r\n    <summary>\r\n    The SyntaxTree that contains this token.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 718
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SyntaxTree",
                "Content": "public SyntaxTree SyntaxTree",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxToken.SyntaxTree\">\r\n    <summary>\r\n    The SyntaxTree that contains this token.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 718
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxToken.SyntaxTree",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxToken",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxToken.SyntaxTree\">\r\n    <summary>\r\n    The SyntaxTree that contains this token.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.String",
                "Content": "public string Text",
                "XmlDocumentation": "",
                "StartLine": 192
              },
              "Syntax": {
                "PropertyType": "T:System.String",
                "Content": "public string Text",
                "XmlDocumentation": "",
                "StartLine": 192
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxToken.Text",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxToken",
              "XmlDocumentation": ""
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SyntaxTriviaList",
                "Content": "public SyntaxTriviaList TrailingTrivia",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxToken.TrailingTrivia\">\r\n    <summary>\r\n    The list of trivia that appear after this token in the source code and are attached to this token or any of\r\n    its descendants.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 495
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SyntaxTriviaList",
                "Content": "public SyntaxTriviaList TrailingTrivia",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxToken.TrailingTrivia\">\r\n    <summary>\r\n    The list of trivia that appear after this token in the source code and are attached to this token or any of\r\n    its descendants.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 495
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxToken.TrailingTrivia",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxToken",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxToken.TrailingTrivia\">\r\n    <summary>\r\n    The list of trivia that appear after this token in the source code and are attached to this token or any of\r\n    its descendants.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Object",
                "Content": "public object Value",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxToken.Value\">\r\n    <summary>\r\n    Returns the value of the token. For example, if the token represents an integer literal, then this property\r\n    would return the actual integer.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 178
              },
              "Syntax": {
                "PropertyType": "T:System.Object",
                "Content": "public object Value",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxToken.Value\">\r\n    <summary>\r\n    Returns the value of the token. For example, if the token represents an integer literal, then this property\r\n    would return the actual integer.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 178
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxToken.Value",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxToken",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxToken.Value\">\r\n    <summary>\r\n    Returns the value of the token. For example, if the token represents an integer literal, then this property\r\n    would return the actual integer.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.String",
                "Content": "public string ValueText",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxToken.ValueText\">\r\n    <summary>\r\n    Returns the text representation of the value of the token. For example, if the token represents an integer\r\n    literal, then this property would return a string representing the integer.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 187
              },
              "Syntax": {
                "PropertyType": "T:System.String",
                "Content": "public string ValueText",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxToken.ValueText\">\r\n    <summary>\r\n    Returns the text representation of the value of the token. For example, if the token represents an integer\r\n    literal, then this property would return a string representing the integer.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 187
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxToken.ValueText",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxToken",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxToken.ValueText\">\r\n    <summary>\r\n    Returns the text representation of the value of the token. For example, if the token represents an integer\r\n    literal, then this property would return a string representing the integer.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Syntax\\SyntaxToken.cs",
          "InheritanceHierarchy": [
            "T:System.Object",
            "T:System.ValueType"
          ],
          "Syntax": {
            "Content": "public struct SyntaxToken",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.SyntaxToken\">\r\n    <summary>\r\n    Represents a token in the syntax tree. This is the language agnostic equivalent of <see\r\n    cref=\"T:Microsoft.CodeAnalysis.CSharp.SyntaxToken\"/> and <see cref=\"T:Microsoft.CodeAnalysis.VisualBasic.SyntaxToken\"/>.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.SyntaxToken",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.SyntaxToken\">\r\n    <summary>\r\n    Represents a token in the syntax tree. This is the language agnostic equivalent of <see\r\n    cref=\"T:Microsoft.CodeAnalysis.CSharp.SyntaxToken\"/> and <see cref=\"T:Microsoft.CodeAnalysis.VisualBasic.SyntaxToken\"/>.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxToken : token": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTokenList": ""
                },
                "Content": "public SyntaxTokenList Add(SyntaxToken token)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTokenList.Add(Microsoft.CodeAnalysis.SyntaxToken)\">\r\n    <summary>\r\n    Creates a new <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTokenList\"/> with the specified token added to the end.\r\n    </summary>\r\n    <param name=\"token\">The token to add.</param>\r\n</member>\r\n",
                "StartLine": 267
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxToken : token": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTokenList": ""
                },
                "Content": "public SyntaxTokenList Add(SyntaxToken token)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTokenList.Add(Microsoft.CodeAnalysis.SyntaxToken)\">\r\n    <summary>\r\n    Creates a new <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTokenList\"/> with the specified token added to the end.\r\n    </summary>\r\n    <param name=\"token\">The token to add.</param>\r\n</member>\r\n",
                "StartLine": 267
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTokenList.Add(Microsoft.CodeAnalysis.SyntaxToken)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTokenList",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTokenList.Add(Microsoft.CodeAnalysis.SyntaxToken)\">\r\n    <summary>\r\n    Creates a new <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTokenList\"/> with the specified token added to the end.\r\n    </summary>\r\n    <param name=\"token\">The token to add.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken} : tokens": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTokenList": ""
                },
                "Content": "public SyntaxTokenList AddRange(IEnumerable<SyntaxToken> tokens)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTokenList.AddRange(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken})\">\r\n    <summary>\r\n    Creates a new <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTokenList\"/> with the specified tokens added to the end.\r\n    </summary>\r\n    <param name=\"tokens\">The tokens to add.</param>\r\n</member>\r\n",
                "StartLine": 276
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken} : tokens": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTokenList": ""
                },
                "Content": "public SyntaxTokenList AddRange(IEnumerable<SyntaxToken> tokens)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTokenList.AddRange(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken})\">\r\n    <summary>\r\n    Creates a new <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTokenList\"/> with the specified tokens added to the end.\r\n    </summary>\r\n    <param name=\"tokens\">The tokens to add.</param>\r\n</member>\r\n",
                "StartLine": 276
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTokenList.AddRange(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken})",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTokenList",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTokenList.AddRange(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken})\">\r\n    <summary>\r\n    Creates a new <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTokenList\"/> with the specified tokens added to the end.\r\n    </summary>\r\n    <param name=\"tokens\">The tokens to add.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool Any()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTokenList.Any\">\r\n    <summary>\r\n    Tests whether the list is non-empty.\r\n    </summary>\r\n    <returns>True if the list contains any tokens.</returns>\r\n</member>\r\n",
                "StartLine": 195
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool Any()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTokenList.Any\">\r\n    <summary>\r\n    Tests whether the list is non-empty.\r\n    </summary>\r\n    <returns>True if the list contains any tokens.</returns>\r\n</member>\r\n",
                "StartLine": 195
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTokenList.Any",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTokenList",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTokenList.Any\">\r\n    <summary>\r\n    Tests whether the list is non-empty.\r\n    </summary>\r\n    <returns>True if the list contains any tokens.</returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxToken : token": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTokenList": ""
                },
                "Content": "public static SyntaxTokenList Create(SyntaxToken token)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTokenList.Create(Microsoft.CodeAnalysis.SyntaxToken)\">\r\n    <summary>\r\n    Create a new Token List\r\n    </summary>\r\n    <param name=\"token\">Element of the return Token List</param>\r\n    <returns></returns>\r\n</member>\r\n",
                "StartLine": 485
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxToken : token": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTokenList": ""
                },
                "Content": "public static SyntaxTokenList Create(SyntaxToken token)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTokenList.Create(Microsoft.CodeAnalysis.SyntaxToken)\">\r\n    <summary>\r\n    Create a new Token List\r\n    </summary>\r\n    <param name=\"token\">Element of the return Token List</param>\r\n    <returns></returns>\r\n</member>\r\n",
                "StartLine": 485
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTokenList.Create(Microsoft.CodeAnalysis.SyntaxToken)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTokenList",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTokenList.Create(Microsoft.CodeAnalysis.SyntaxToken)\">\r\n    <summary>\r\n    Create a new Token List\r\n    </summary>\r\n    <param name=\"token\">Element of the return Token List</param>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxTokenList : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool Equals(SyntaxTokenList other)",
                "XmlDocumentation": "",
                "StartLine": 457
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxTokenList : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool Equals(SyntaxTokenList other)",
                "XmlDocumentation": "",
                "StartLine": 457
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTokenList.Equals(Microsoft.CodeAnalysis.SyntaxTokenList)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTokenList",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Object : obj": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public override bool Equals(object obj)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTokenList.Equals(System.Object)\">\r\n    <summary>\r\n    Compares this <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTokenList\"/> with the <paramref name=\"obj\"/> for equality.\r\n    </summary>\r\n    <returns>True if the two objects are equal.</returns>\r\n</member>\r\n",
                "StartLine": 466
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Object : obj": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public override bool Equals(object obj)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTokenList.Equals(System.Object)\">\r\n    <summary>\r\n    Compares this <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTokenList\"/> with the <paramref name=\"obj\"/> for equality.\r\n    </summary>\r\n    <returns>True if the two objects are equal.</returns>\r\n</member>\r\n",
                "StartLine": 466
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTokenList.Equals(System.Object)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTokenList",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTokenList.Equals(System.Object)\">\r\n    <summary>\r\n    Compares this <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTokenList\"/> with the <paramref name=\"obj\"/> for equality.\r\n    </summary>\r\n    <returns>True if the two objects are equal.</returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxToken": ""
                },
                "Content": "public SyntaxToken First()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTokenList.First\">\r\n    <summary>\r\n    Returns the first token in the list.\r\n    </summary>\r\n    <returns>The first token in the list.</returns>\r\n    <exception cref=\"T:System.InvalidOperationException\">The list is empty.</exception>        \r\n</member>\r\n",
                "StartLine": 166
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxToken": ""
                },
                "Content": "public SyntaxToken First()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTokenList.First\">\r\n    <summary>\r\n    Returns the first token in the list.\r\n    </summary>\r\n    <returns>The first token in the list.</returns>\r\n    <exception cref=\"T:System.InvalidOperationException\">The list is empty.</exception>        \r\n</member>\r\n",
                "StartLine": 166
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTokenList.First",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTokenList",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTokenList.First\">\r\n    <summary>\r\n    Returns the first token in the list.\r\n    </summary>\r\n    <returns>The first token in the list.</returns>\r\n    <exception cref=\"T:System.InvalidOperationException\">The list is empty.</exception>        \r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTokenList.Enumerator": ""
                },
                "Content": "public Enumerator GetEnumerator()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTokenList.GetEnumerator\">\r\n    <summary>\r\n    Returns an enumerator for the tokens in the <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTokenList\"/>\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 410
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTokenList.Enumerator": ""
                },
                "Content": "public Enumerator GetEnumerator()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTokenList.GetEnumerator\">\r\n    <summary>\r\n    Returns an enumerator for the tokens in the <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTokenList\"/>\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 410
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTokenList.GetEnumerator",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTokenList",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTokenList.GetEnumerator\">\r\n    <summary>\r\n    Returns an enumerator for the tokens in the <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTokenList\"/>\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public override int GetHashCode()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTokenList.GetHashCode\">\r\n    <summary>\r\n    Serves as a hash function for the <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTokenList\"/>\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 474
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public override int GetHashCode()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTokenList.GetHashCode\">\r\n    <summary>\r\n    Serves as a hash function for the <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTokenList\"/>\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 474
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTokenList.GetHashCode",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTokenList",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTokenList.GetHashCode\">\r\n    <summary>\r\n    Serves as a hash function for the <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTokenList\"/>\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxToken : tokenInList": ""
                },
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public int IndexOf(SyntaxToken tokenInList)",
                "XmlDocumentation": "",
                "StartLine": 236
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxToken : tokenInList": ""
                },
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public int IndexOf(SyntaxToken tokenInList)",
                "XmlDocumentation": "",
                "StartLine": 236
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTokenList.IndexOf(Microsoft.CodeAnalysis.SyntaxToken)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTokenList",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxToken : token": "",
                  "T:System.Int32 : index": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTokenList": ""
                },
                "Content": "public SyntaxTokenList Insert(int index, SyntaxToken token)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTokenList.Insert(System.Int32,Microsoft.CodeAnalysis.SyntaxToken)\">\r\n    <summary>\r\n    Creates a new <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTokenList\"/> with the specified token insert at the index.\r\n    </summary>\r\n    <param name=\"index\">The index to insert the new token.</param>\r\n    <param name=\"token\">The token to insert.</param>\r\n</member>\r\n",
                "StartLine": 286
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxToken : token": "",
                  "T:System.Int32 : index": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTokenList": ""
                },
                "Content": "public SyntaxTokenList Insert(int index, SyntaxToken token)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTokenList.Insert(System.Int32,Microsoft.CodeAnalysis.SyntaxToken)\">\r\n    <summary>\r\n    Creates a new <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTokenList\"/> with the specified token insert at the index.\r\n    </summary>\r\n    <param name=\"index\">The index to insert the new token.</param>\r\n    <param name=\"token\">The token to insert.</param>\r\n</member>\r\n",
                "StartLine": 286
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTokenList.Insert(System.Int32,Microsoft.CodeAnalysis.SyntaxToken)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTokenList",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTokenList.Insert(System.Int32,Microsoft.CodeAnalysis.SyntaxToken)\">\r\n    <summary>\r\n    Creates a new <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTokenList\"/> with the specified token insert at the index.\r\n    </summary>\r\n    <param name=\"index\">The index to insert the new token.</param>\r\n    <param name=\"token\">The token to insert.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken} : tokens": "",
                  "T:System.Int32 : index": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTokenList": ""
                },
                "Content": "public SyntaxTokenList InsertRange(int index, IEnumerable<SyntaxToken> tokens)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTokenList.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken})\">\r\n    <summary>\r\n    Creates a new <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTokenList\"/> with the specified tokens insert at the index.\r\n    </summary>\r\n    <param name=\"index\">The index to insert the new tokens.</param>\r\n    <param name=\"tokens\">The tokens to insert.</param>\r\n</member>\r\n",
                "StartLine": 301
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken} : tokens": "",
                  "T:System.Int32 : index": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTokenList": ""
                },
                "Content": "public SyntaxTokenList InsertRange(int index, IEnumerable<SyntaxToken> tokens)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTokenList.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken})\">\r\n    <summary>\r\n    Creates a new <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTokenList\"/> with the specified tokens insert at the index.\r\n    </summary>\r\n    <param name=\"index\">The index to insert the new tokens.</param>\r\n    <param name=\"tokens\">The tokens to insert.</param>\r\n</member>\r\n",
                "StartLine": 301
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTokenList.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken})",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTokenList",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTokenList.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken})\">\r\n    <summary>\r\n    Creates a new <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTokenList\"/> with the specified tokens insert at the index.\r\n    </summary>\r\n    <param name=\"index\">The index to insert the new tokens.</param>\r\n    <param name=\"tokens\">The tokens to insert.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxToken": ""
                },
                "Content": "public SyntaxToken Last()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTokenList.Last\">\r\n    <summary>\r\n    Returns the last token in the list.\r\n    </summary>\r\n    <returns> The last token in the list.</returns>\r\n    <exception cref=\"T:System.InvalidOperationException\">The list is empty.</exception>        \r\n</member>\r\n",
                "StartLine": 181
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxToken": ""
                },
                "Content": "public SyntaxToken Last()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTokenList.Last\">\r\n    <summary>\r\n    Returns the last token in the list.\r\n    </summary>\r\n    <returns> The last token in the list.</returns>\r\n    <exception cref=\"T:System.InvalidOperationException\">The list is empty.</exception>        \r\n</member>\r\n",
                "StartLine": 181
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTokenList.Last",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTokenList",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTokenList.Last\">\r\n    <summary>\r\n    Returns the last token in the list.\r\n    </summary>\r\n    <returns> The last token in the list.</returns>\r\n    <exception cref=\"T:System.InvalidOperationException\">The list is empty.</exception>        \r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxToken : tokenInList": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTokenList": ""
                },
                "Content": "public SyntaxTokenList Remove(SyntaxToken tokenInList)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTokenList.Remove(Microsoft.CodeAnalysis.SyntaxToken)\">\r\n    <summary>\r\n    Creates a new <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTokenList\"/> with the specified token removed.\r\n    </summary>\r\n    <param name=\"tokenInList\">The token to remove.</param>\r\n</member>\r\n",
                "StartLine": 352
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxToken : tokenInList": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTokenList": ""
                },
                "Content": "public SyntaxTokenList Remove(SyntaxToken tokenInList)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTokenList.Remove(Microsoft.CodeAnalysis.SyntaxToken)\">\r\n    <summary>\r\n    Creates a new <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTokenList\"/> with the specified token removed.\r\n    </summary>\r\n    <param name=\"tokenInList\">The token to remove.</param>\r\n</member>\r\n",
                "StartLine": 352
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTokenList.Remove(Microsoft.CodeAnalysis.SyntaxToken)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTokenList",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTokenList.Remove(Microsoft.CodeAnalysis.SyntaxToken)\">\r\n    <summary>\r\n    Creates a new <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTokenList\"/> with the specified token removed.\r\n    </summary>\r\n    <param name=\"tokenInList\">The token to remove.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Int32 : index": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTokenList": ""
                },
                "Content": "public SyntaxTokenList RemoveAt(int index)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTokenList.RemoveAt(System.Int32)\">\r\n    <summary>\r\n    Creates a new <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTokenList\"/> with the token at the specified index removed.\r\n    </summary>\r\n    <param name=\"index\">The index of the token to remove.</param>\r\n</member>\r\n",
                "StartLine": 336
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Int32 : index": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTokenList": ""
                },
                "Content": "public SyntaxTokenList RemoveAt(int index)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTokenList.RemoveAt(System.Int32)\">\r\n    <summary>\r\n    Creates a new <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTokenList\"/> with the token at the specified index removed.\r\n    </summary>\r\n    <param name=\"index\">The index of the token to remove.</param>\r\n</member>\r\n",
                "StartLine": 336
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTokenList.RemoveAt(System.Int32)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTokenList",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTokenList.RemoveAt(System.Int32)\">\r\n    <summary>\r\n    Creates a new <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTokenList\"/> with the token at the specified index removed.\r\n    </summary>\r\n    <param name=\"index\">The index of the token to remove.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxToken : newToken": "",
                  "T:Microsoft.CodeAnalysis.SyntaxToken : tokenInList": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTokenList": ""
                },
                "Content": "public SyntaxTokenList Replace(SyntaxToken tokenInList, SyntaxToken newToken)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTokenList.Replace(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)\">\r\n    <summary>\r\n    Creates a new <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTokenList\"/> with the specified token replaced with a new token.\r\n    </summary>\r\n    <param name=\"tokenInList\">The token to replace.</param>\r\n    <param name=\"newToken\">The new token.</param>\r\n</member>\r\n",
                "StartLine": 370
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxToken : newToken": "",
                  "T:Microsoft.CodeAnalysis.SyntaxToken : tokenInList": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTokenList": ""
                },
                "Content": "public SyntaxTokenList Replace(SyntaxToken tokenInList, SyntaxToken newToken)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTokenList.Replace(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)\">\r\n    <summary>\r\n    Creates a new <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTokenList\"/> with the specified token replaced with a new token.\r\n    </summary>\r\n    <param name=\"tokenInList\">The token to replace.</param>\r\n    <param name=\"newToken\">The new token.</param>\r\n</member>\r\n",
                "StartLine": 370
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTokenList.Replace(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTokenList",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTokenList.Replace(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)\">\r\n    <summary>\r\n    Creates a new <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTokenList\"/> with the specified token replaced with a new token.\r\n    </summary>\r\n    <param name=\"tokenInList\">The token to replace.</param>\r\n    <param name=\"newToken\">The new token.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxToken : tokenInList": "",
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken} : newTokens": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTokenList": ""
                },
                "Content": "public SyntaxTokenList ReplaceRange(SyntaxToken tokenInList, IEnumerable<SyntaxToken> newTokens)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTokenList.ReplaceRange(Microsoft.CodeAnalysis.SyntaxToken,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken})\">\r\n    <summary>\r\n    Creates a new <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTokenList\"/> with the specified token replaced with new tokens.\r\n    </summary>\r\n    <param name=\"tokenInList\">The token to replace.</param>\r\n    <param name=\"newTokens\">The new tokens.</param>\r\n</member>\r\n",
                "StartLine": 385
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxToken : tokenInList": "",
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken} : newTokens": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTokenList": ""
                },
                "Content": "public SyntaxTokenList ReplaceRange(SyntaxToken tokenInList, IEnumerable<SyntaxToken> newTokens)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTokenList.ReplaceRange(Microsoft.CodeAnalysis.SyntaxToken,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken})\">\r\n    <summary>\r\n    Creates a new <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTokenList\"/> with the specified token replaced with new tokens.\r\n    </summary>\r\n    <param name=\"tokenInList\">The token to replace.</param>\r\n    <param name=\"newTokens\">The new tokens.</param>\r\n</member>\r\n",
                "StartLine": 385
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTokenList.ReplaceRange(Microsoft.CodeAnalysis.SyntaxToken,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken})",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTokenList",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTokenList.ReplaceRange(Microsoft.CodeAnalysis.SyntaxToken,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxToken})\">\r\n    <summary>\r\n    Creates a new <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTokenList\"/> with the specified token replaced with new tokens.\r\n    </summary>\r\n    <param name=\"tokenInList\">The token to replace.</param>\r\n    <param name=\"newTokens\">The new tokens.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTokenList.Reversed": ""
                },
                "Content": "public Reversed Reverse()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTokenList.Reverse\">\r\n    <summary>\r\n    Returns a list which contains all elements of <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTokenList\"/> in reversed order.\r\n    </summary>\r\n    <returns><see cref=\"T:Microsoft.CodeAnalysis.SyntaxTokenList.Reversed\"/> which contains all elements of <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTokenList\"/> in reversed order</returns>\r\n</member>\r\n",
                "StartLine": 204
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTokenList.Reversed": ""
                },
                "Content": "public Reversed Reverse()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTokenList.Reverse\">\r\n    <summary>\r\n    Returns a list which contains all elements of <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTokenList\"/> in reversed order.\r\n    </summary>\r\n    <returns><see cref=\"T:Microsoft.CodeAnalysis.SyntaxTokenList.Reversed\"/> which contains all elements of <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTokenList\"/> in reversed order</returns>\r\n</member>\r\n",
                "StartLine": 204
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTokenList.Reverse",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTokenList",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTokenList.Reverse\">\r\n    <summary>\r\n    Returns a list which contains all elements of <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTokenList\"/> in reversed order.\r\n    </summary>\r\n    <returns><see cref=\"T:Microsoft.CodeAnalysis.SyntaxTokenList.Reversed\"/> which contains all elements of <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTokenList\"/> in reversed order</returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public string ToFullString()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTokenList.ToFullString\">\r\n    <summary>\r\n    Returns the full string representation of the tokens in this list including \r\n    the first token's leading trivia and the last token's trailing trivia.\r\n    </summary>\r\n    <returns>\r\n    The full string representation of the tokens in this list including \r\n    the first token's leading trivia and the last token's trailing trivia.\r\n    </returns>\r\n</member>\r\n",
                "StartLine": 156
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public string ToFullString()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTokenList.ToFullString\">\r\n    <summary>\r\n    Returns the full string representation of the tokens in this list including \r\n    the first token's leading trivia and the last token's trailing trivia.\r\n    </summary>\r\n    <returns>\r\n    The full string representation of the tokens in this list including \r\n    the first token's leading trivia and the last token's trailing trivia.\r\n    </returns>\r\n</member>\r\n",
                "StartLine": 156
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTokenList.ToFullString",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTokenList",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTokenList.ToFullString\">\r\n    <summary>\r\n    Returns the full string representation of the tokens in this list including \r\n    the first token's leading trivia and the last token's trailing trivia.\r\n    </summary>\r\n    <returns>\r\n    The full string representation of the tokens in this list including \r\n    the first token's leading trivia and the last token's trailing trivia.\r\n    </returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public override string ToString()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTokenList.ToString\">\r\n    <summary>\r\n    Returns the string representation of the tokens in this list, not including \r\n    the first token's leading trivia and the last token's trailing trivia.\r\n    </summary>\r\n    <returns>\r\n    The string representation of the tokens in this list, not including \r\n    the first token's leading trivia and the last token's trailing trivia.\r\n    </returns>\r\n</member>\r\n",
                "StartLine": 143
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public override string ToString()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTokenList.ToString\">\r\n    <summary>\r\n    Returns the string representation of the tokens in this list, not including \r\n    the first token's leading trivia and the last token's trailing trivia.\r\n    </summary>\r\n    <returns>\r\n    The string representation of the tokens in this list, not including \r\n    the first token's leading trivia and the last token's trailing trivia.\r\n    </returns>\r\n</member>\r\n",
                "StartLine": 143
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTokenList.ToString",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTokenList",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTokenList.ToString\">\r\n    <summary>\r\n    Returns the string representation of the tokens in this list, not including \r\n    the first token's leading trivia and the last token's trailing trivia.\r\n    </summary>\r\n    <returns>\r\n    The string representation of the tokens in this list, not including \r\n    the first token's leading trivia and the last token's trailing trivia.\r\n    </returns>\r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Int32",
                "Content": "public int Count",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxTokenList.Count\">\r\n    <summary>\r\n    Returns the number of tokens in the list.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 60
              },
              "Syntax": {
                "PropertyType": "T:System.Int32",
                "Content": "public int Count",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxTokenList.Count\">\r\n    <summary>\r\n    Returns the number of tokens in the list.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 60
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxTokenList.Count",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTokenList",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxTokenList.Count\">\r\n    <summary>\r\n    Returns the number of tokens in the list.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Text.TextSpan",
                "Content": "public TextSpan FullSpan",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxTokenList.FullSpan\">\r\n    <summary>\r\n    The absolute span of the list elements in characters, including the leading and trailing trivia of the first and last elements.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 101
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Text.TextSpan",
                "Content": "public TextSpan FullSpan",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxTokenList.FullSpan\">\r\n    <summary>\r\n    The absolute span of the list elements in characters, including the leading and trailing trivia of the first and last elements.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 101
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxTokenList.FullSpan",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTokenList",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxTokenList.FullSpan\">\r\n    <summary>\r\n    The absolute span of the list elements in characters, including the leading and trailing trivia of the first and last elements.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Text.TextSpan",
                "Content": "public TextSpan Span",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxTokenList.Span\">\r\n    <summary>\r\n    The absolute span of the list elements in characters, not including the leading and trailing trivia of the first and last elements.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 119
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Text.TextSpan",
                "Content": "public TextSpan Span",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxTokenList.Span\">\r\n    <summary>\r\n    The absolute span of the list elements in characters, not including the leading and trailing trivia of the first and last elements.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 119
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxTokenList.Span",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTokenList",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxTokenList.Span\">\r\n    <summary>\r\n    The absolute span of the list elements in characters, not including the leading and trailing trivia of the first and last elements.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Syntax\\SyntaxTokenList.cs",
          "InheritanceHierarchy": [
            "T:System.Object",
            "T:System.ValueType"
          ],
          "Syntax": {
            "Content": "public partial struct SyntaxTokenList",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.SyntaxTokenList\">\r\n    <summary>\r\n     Represents a read-only list of <see cref=\"T:Microsoft.CodeAnalysis.SyntaxToken\"/>.\r\n    </summary>\r\n    <summary>\r\n     Represents a read-only list of <see cref=\"T:Microsoft.CodeAnalysis.SyntaxToken\"/>s.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.SyntaxTokenList",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.SyntaxTokenList\">\r\n    <summary>\r\n     Represents a read-only list of <see cref=\"T:Microsoft.CodeAnalysis.SyntaxToken\"/>.\r\n    </summary>\r\n    <summary>\r\n     Represents a read-only list of <see cref=\"T:Microsoft.CodeAnalysis.SyntaxToken\"/>s.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxTrivia : trivia": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTrivia": ""
                },
                "Content": "public SyntaxTrivia CopyAnnotationsTo(SyntaxTrivia trivia)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTrivia.CopyAnnotationsTo(Microsoft.CodeAnalysis.SyntaxTrivia)\">\r\n    <summary>\r\n    Copies all SyntaxAnnotations, if any, from this SyntaxTrivia instance and attaches them to a new instance based on <paramref name=\"trivia\" />.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 396
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxTrivia : trivia": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTrivia": ""
                },
                "Content": "public SyntaxTrivia CopyAnnotationsTo(SyntaxTrivia trivia)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTrivia.CopyAnnotationsTo(Microsoft.CodeAnalysis.SyntaxTrivia)\">\r\n    <summary>\r\n    Copies all SyntaxAnnotations, if any, from this SyntaxTrivia instance and attaches them to a new instance based on <paramref name=\"trivia\" />.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 396
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTrivia.CopyAnnotationsTo(Microsoft.CodeAnalysis.SyntaxTrivia)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTrivia",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTrivia.CopyAnnotationsTo(Microsoft.CodeAnalysis.SyntaxTrivia)\">\r\n    <summary>\r\n    Copies all SyntaxAnnotations, if any, from this SyntaxTrivia instance and attaches them to a new instance based on <paramref name=\"trivia\" />.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxTrivia : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool Equals(SyntaxTrivia other)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTrivia.Equals(Microsoft.CodeAnalysis.SyntaxTrivia)\">\r\n    <summary>\r\n    Determines whether the supplied <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTrivia\"/> is equal to this\r\n    <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTrivia\"/>.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 292
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxTrivia : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool Equals(SyntaxTrivia other)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTrivia.Equals(Microsoft.CodeAnalysis.SyntaxTrivia)\">\r\n    <summary>\r\n    Determines whether the supplied <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTrivia\"/> is equal to this\r\n    <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTrivia\"/>.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 292
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTrivia.Equals(Microsoft.CodeAnalysis.SyntaxTrivia)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTrivia",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTrivia.Equals(Microsoft.CodeAnalysis.SyntaxTrivia)\">\r\n    <summary>\r\n    Determines whether the supplied <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTrivia\"/> is equal to this\r\n    <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTrivia\"/>.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Object : obj": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public override bool Equals(object obj)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTrivia.Equals(System.Object)\">\r\n    <summary>\r\n    Determines whether the supplied <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTrivia\"/> is equal to this\r\n    <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTrivia\"/>.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 301
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Object : obj": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public override bool Equals(object obj)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTrivia.Equals(System.Object)\">\r\n    <summary>\r\n    Determines whether the supplied <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTrivia\"/> is equal to this\r\n    <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTrivia\"/>.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 301
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTrivia.Equals(System.Object)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTrivia",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTrivia.Equals(System.Object)\">\r\n    <summary>\r\n    Determines whether the supplied <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTrivia\"/> is equal to this\r\n    <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTrivia\"/>.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.String : annotationKind": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation}": ""
                },
                "Content": "public IEnumerable<SyntaxAnnotation> GetAnnotations(string annotationKind)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTrivia.GetAnnotations(System.String)\">\r\n    <summary>\r\n    Get all the annotations of the specified annotation kind.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 204
              },
              "Syntax": {
                "Parameters": {
                  "T:System.String : annotationKind": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation}": ""
                },
                "Content": "public IEnumerable<SyntaxAnnotation> GetAnnotations(string annotationKind)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTrivia.GetAnnotations(System.String)\">\r\n    <summary>\r\n    Get all the annotations of the specified annotation kind.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 204
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTrivia.GetAnnotations(System.String)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTrivia",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTrivia.GetAnnotations(System.String)\">\r\n    <summary>\r\n    Get all the annotations of the specified annotation kind.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Array : annotationKinds": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation}": ""
                },
                "Content": "public IEnumerable<SyntaxAnnotation> GetAnnotations(params string[] annotationKinds)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTrivia.GetAnnotations(System.String[])\">\r\n    <summary>\r\n    Get all the annotations of the specified annotation kinds.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 214
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Array : annotationKinds": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation}": ""
                },
                "Content": "public IEnumerable<SyntaxAnnotation> GetAnnotations(params string[] annotationKinds)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTrivia.GetAnnotations(System.String[])\">\r\n    <summary>\r\n    Get all the annotations of the specified annotation kinds.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 214
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTrivia.GetAnnotations(System.String[])",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTrivia",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTrivia.GetAnnotations(System.String[])\">\r\n    <summary>\r\n    Get all the annotations of the specified annotation kinds.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Diagnostic}": ""
                },
                "Content": "public IEnumerable<Diagnostic> GetDiagnostics()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTrivia.GetDiagnostics\">\r\n    <summary>\r\n    Gets a list of all the diagnostics associated with this trivia.\r\n    This method does not filter diagnostics based on #pragmas and compiler options\r\n    like nowarn, warnaserror etc.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 445
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Diagnostic}": ""
                },
                "Content": "public IEnumerable<Diagnostic> GetDiagnostics()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTrivia.GetDiagnostics\">\r\n    <summary>\r\n    Gets a list of all the diagnostics associated with this trivia.\r\n    This method does not filter diagnostics based on #pragmas and compiler options\r\n    like nowarn, warnaserror etc.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 445
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTrivia.GetDiagnostics",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTrivia",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTrivia.GetDiagnostics\">\r\n    <summary>\r\n    Gets a list of all the diagnostics associated with this trivia.\r\n    This method does not filter diagnostics based on #pragmas and compiler options\r\n    like nowarn, warnaserror etc.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public override int GetHashCode()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTrivia.GetHashCode\">\r\n    <summary>\r\n    Serves as hash function for <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTrivia\"/>.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 309
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public override int GetHashCode()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTrivia.GetHashCode\">\r\n    <summary>\r\n    Serves as hash function for <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTrivia\"/>.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 309
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTrivia.GetHashCode",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTrivia",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTrivia.GetHashCode\">\r\n    <summary>\r\n    Serves as hash function for <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTrivia\"/>.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Location": ""
                },
                "Content": "public Location GetLocation()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTrivia.GetLocation\">\r\n    <summary>\r\n    Get the location of this trivia.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 435
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Location": ""
                },
                "Content": "public Location GetLocation()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTrivia.GetLocation\">\r\n    <summary>\r\n    Get the location of this trivia.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 435
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTrivia.GetLocation",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTrivia",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTrivia.GetLocation\">\r\n    <summary>\r\n    Get the location of this trivia.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxNode": ""
                },
                "Content": "public SyntaxNode GetStructure()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTrivia.GetStructure\">\r\n    <summary>\r\n    Returns the child non-terminal node representing the syntax tree structure under this structured trivia.\r\n    </summary>\r\n    <returns>The child non-terminal node representing the syntax tree structure under this structured\r\n    trivia.</returns>\r\n</member>\r\n",
                "StartLine": 234
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxNode": ""
                },
                "Content": "public SyntaxNode GetStructure()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTrivia.GetStructure\">\r\n    <summary>\r\n    Returns the child non-terminal node representing the syntax tree structure under this structured trivia.\r\n    </summary>\r\n    <returns>The child non-terminal node representing the syntax tree structure under this structured\r\n    trivia.</returns>\r\n</member>\r\n",
                "StartLine": 234
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTrivia.GetStructure",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTrivia",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTrivia.GetStructure\">\r\n    <summary>\r\n    Returns the child non-terminal node representing the syntax tree structure under this structured trivia.\r\n    </summary>\r\n    <returns>The child non-terminal node representing the syntax tree structure under this structured\r\n    trivia.</returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxAnnotation : annotation": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool HasAnnotation(SyntaxAnnotation annotation)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTrivia.HasAnnotation(Microsoft.CodeAnalysis.SyntaxAnnotation)\">\r\n    <summary>\r\n    Determines whether this trivia has the specific annotation.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 196
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxAnnotation : annotation": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool HasAnnotation(SyntaxAnnotation annotation)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTrivia.HasAnnotation(Microsoft.CodeAnalysis.SyntaxAnnotation)\">\r\n    <summary>\r\n    Determines whether this trivia has the specific annotation.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 196
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTrivia.HasAnnotation(Microsoft.CodeAnalysis.SyntaxAnnotation)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTrivia",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTrivia.HasAnnotation(Microsoft.CodeAnalysis.SyntaxAnnotation)\">\r\n    <summary>\r\n    Determines whether this trivia has the specific annotation.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.String : annotationKind": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool HasAnnotations(string annotationKind)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTrivia.HasAnnotations(System.String)\">\r\n    <summary>\r\n    Determines where this trivia has annotations of the specified annotation kind.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 180
              },
              "Syntax": {
                "Parameters": {
                  "T:System.String : annotationKind": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool HasAnnotations(string annotationKind)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTrivia.HasAnnotations(System.String)\">\r\n    <summary>\r\n    Determines where this trivia has annotations of the specified annotation kind.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 180
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTrivia.HasAnnotations(System.String)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTrivia",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTrivia.HasAnnotations(System.String)\">\r\n    <summary>\r\n    Determines where this trivia has annotations of the specified annotation kind.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Array : annotationKinds": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool HasAnnotations(params string[] annotationKinds)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTrivia.HasAnnotations(System.String[])\">\r\n    <summary>\r\n    Determines where this trivia has any annotations of the specified annotation kinds.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 188
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Array : annotationKinds": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool HasAnnotations(params string[] annotationKinds)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTrivia.HasAnnotations(System.String[])\">\r\n    <summary>\r\n    Determines where this trivia has any annotations of the specified annotation kinds.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 188
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTrivia.HasAnnotations(System.String[])",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTrivia",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTrivia.HasAnnotations(System.String[])\">\r\n    <summary>\r\n    Determines where this trivia has any annotations of the specified annotation kinds.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxTrivia : trivia": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool IsEquivalentTo(SyntaxTrivia trivia)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTrivia.IsEquivalentTo(Microsoft.CodeAnalysis.SyntaxTrivia)\">\r\n    <summary>\r\n    Determines if this trivia is equivalent to the specified trivia.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 453
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxTrivia : trivia": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool IsEquivalentTo(SyntaxTrivia trivia)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTrivia.IsEquivalentTo(Microsoft.CodeAnalysis.SyntaxTrivia)\">\r\n    <summary>\r\n    Determines if this trivia is equivalent to the specified trivia.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 453
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTrivia.IsEquivalentTo(Microsoft.CodeAnalysis.SyntaxTrivia)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTrivia",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTrivia.IsEquivalentTo(Microsoft.CodeAnalysis.SyntaxTrivia)\">\r\n    <summary>\r\n    Determines if this trivia is equivalent to the specified trivia.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool IsPartOfStructuredTrivia()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTrivia.IsPartOfStructuredTrivia\">\r\n    <summary>\r\n    Determines whether this trivia is a descendant of a structured trivia.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 164
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool IsPartOfStructuredTrivia()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTrivia.IsPartOfStructuredTrivia\">\r\n    <summary>\r\n    Determines whether this trivia is a descendant of a structured trivia.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 164
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTrivia.IsPartOfStructuredTrivia",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTrivia",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTrivia.IsPartOfStructuredTrivia\">\r\n    <summary>\r\n    Determines whether this trivia is a descendant of a structured trivia.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public string ToFullString()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTrivia.ToFullString\">\r\n    <summary> \r\n    Returns the full string representation of this trivia. If this trivia is structured trivia then the returned string will\r\n    include any leading or trailing trivia present on the StructuredTriviaSyntax node of this trivia.\r\n    </summary>\r\n    <returns>The full string representation of this trivia.</returns>\r\n    <remarks>The length of the returned string is always the same as FullSpan.Length</remarks>\r\n</member>\r\n",
                "StartLine": 256
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public string ToFullString()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTrivia.ToFullString\">\r\n    <summary> \r\n    Returns the full string representation of this trivia. If this trivia is structured trivia then the returned string will\r\n    include any leading or trailing trivia present on the StructuredTriviaSyntax node of this trivia.\r\n    </summary>\r\n    <returns>The full string representation of this trivia.</returns>\r\n    <remarks>The length of the returned string is always the same as FullSpan.Length</remarks>\r\n</member>\r\n",
                "StartLine": 256
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTrivia.ToFullString",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTrivia",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTrivia.ToFullString\">\r\n    <summary> \r\n    Returns the full string representation of this trivia. If this trivia is structured trivia then the returned string will\r\n    include any leading or trailing trivia present on the StructuredTriviaSyntax node of this trivia.\r\n    </summary>\r\n    <returns>The full string representation of this trivia.</returns>\r\n    <remarks>The length of the returned string is always the same as FullSpan.Length</remarks>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public override string ToString()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTrivia.ToString\">\r\n    <summary> \r\n    Returns the string representation of this trivia. If this trivia is structured trivia then the returned string\r\n    will not include any leading or trailing trivia present on the StructuredTriviaSyntax node of this trivia.\r\n    </summary>\r\n    <returns>The string representation of this trivia.</returns>\r\n    <remarks>The length of the returned string is always the same as Span.Length</remarks>\r\n</member>\r\n",
                "StartLine": 245
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public override string ToString()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTrivia.ToString\">\r\n    <summary> \r\n    Returns the string representation of this trivia. If this trivia is structured trivia then the returned string\r\n    will not include any leading or trailing trivia present on the StructuredTriviaSyntax node of this trivia.\r\n    </summary>\r\n    <returns>The string representation of this trivia.</returns>\r\n    <remarks>The length of the returned string is always the same as Span.Length</remarks>\r\n</member>\r\n",
                "StartLine": 245
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTrivia.ToString",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTrivia",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTrivia.ToString\">\r\n    <summary> \r\n    Returns the string representation of this trivia. If this trivia is structured trivia then the returned string\r\n    will not include any leading or trailing trivia present on the StructuredTriviaSyntax node of this trivia.\r\n    </summary>\r\n    <returns>The string representation of this trivia.</returns>\r\n    <remarks>The length of the returned string is always the same as Span.Length</remarks>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Array : annotations": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTrivia": ""
                },
                "Content": "public SyntaxTrivia WithAdditionalAnnotations(params SyntaxAnnotation[] annotations)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTrivia.WithAdditionalAnnotations(Microsoft.CodeAnalysis.SyntaxAnnotation[])\">\r\n    <summary>\r\n    Creates a new SyntaxTrivia with the specified annotations.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 318
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Array : annotations": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTrivia": ""
                },
                "Content": "public SyntaxTrivia WithAdditionalAnnotations(params SyntaxAnnotation[] annotations)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTrivia.WithAdditionalAnnotations(Microsoft.CodeAnalysis.SyntaxAnnotation[])\">\r\n    <summary>\r\n    Creates a new SyntaxTrivia with the specified annotations.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 318
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTrivia.WithAdditionalAnnotations(Microsoft.CodeAnalysis.SyntaxAnnotation[])",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTrivia",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTrivia.WithAdditionalAnnotations(Microsoft.CodeAnalysis.SyntaxAnnotation[])\">\r\n    <summary>\r\n    Creates a new SyntaxTrivia with the specified annotations.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation} : annotations": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTrivia": ""
                },
                "Content": "public SyntaxTrivia WithAdditionalAnnotations(IEnumerable<SyntaxAnnotation> annotations)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTrivia.WithAdditionalAnnotations(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation})\">\r\n    <summary>\r\n    Creates a new SyntaxTrivia with the specified annotations.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 326
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation} : annotations": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTrivia": ""
                },
                "Content": "public SyntaxTrivia WithAdditionalAnnotations(IEnumerable<SyntaxAnnotation> annotations)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTrivia.WithAdditionalAnnotations(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation})\">\r\n    <summary>\r\n    Creates a new SyntaxTrivia with the specified annotations.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 326
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTrivia.WithAdditionalAnnotations(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation})",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTrivia",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTrivia.WithAdditionalAnnotations(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation})\">\r\n    <summary>\r\n    Creates a new SyntaxTrivia with the specified annotations.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Array : annotations": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTrivia": ""
                },
                "Content": "public SyntaxTrivia WithoutAnnotations(params SyntaxAnnotation[] annotations)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTrivia.WithoutAnnotations(Microsoft.CodeAnalysis.SyntaxAnnotation[])\">\r\n    <summary>\r\n    Creates a new SyntaxTrivia without the specified annotations.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 347
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Array : annotations": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTrivia": ""
                },
                "Content": "public SyntaxTrivia WithoutAnnotations(params SyntaxAnnotation[] annotations)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTrivia.WithoutAnnotations(Microsoft.CodeAnalysis.SyntaxAnnotation[])\">\r\n    <summary>\r\n    Creates a new SyntaxTrivia without the specified annotations.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 347
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTrivia.WithoutAnnotations(Microsoft.CodeAnalysis.SyntaxAnnotation[])",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTrivia",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTrivia.WithoutAnnotations(Microsoft.CodeAnalysis.SyntaxAnnotation[])\">\r\n    <summary>\r\n    Creates a new SyntaxTrivia without the specified annotations.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation} : annotations": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTrivia": ""
                },
                "Content": "public SyntaxTrivia WithoutAnnotations(IEnumerable<SyntaxAnnotation> annotations)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTrivia.WithoutAnnotations(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation})\">\r\n    <summary>\r\n    Creates a new SyntaxTrivia without the specified annotations.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 355
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation} : annotations": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTrivia": ""
                },
                "Content": "public SyntaxTrivia WithoutAnnotations(IEnumerable<SyntaxAnnotation> annotations)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTrivia.WithoutAnnotations(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation})\">\r\n    <summary>\r\n    Creates a new SyntaxTrivia without the specified annotations.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 355
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTrivia.WithoutAnnotations(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation})",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTrivia",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTrivia.WithoutAnnotations(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxAnnotation})\">\r\n    <summary>\r\n    Creates a new SyntaxTrivia without the specified annotations.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.String : annotationKind": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTrivia": ""
                },
                "Content": "public SyntaxTrivia WithoutAnnotations(string annotationKind)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTrivia.WithoutAnnotations(System.String)\">\r\n    <summary>\r\n    Creates a new SyntaxTrivia without annotations of the specified kind.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 376
              },
              "Syntax": {
                "Parameters": {
                  "T:System.String : annotationKind": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTrivia": ""
                },
                "Content": "public SyntaxTrivia WithoutAnnotations(string annotationKind)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTrivia.WithoutAnnotations(System.String)\">\r\n    <summary>\r\n    Creates a new SyntaxTrivia without annotations of the specified kind.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 376
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTrivia.WithoutAnnotations(System.String)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTrivia",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTrivia.WithoutAnnotations(System.String)\">\r\n    <summary>\r\n    Creates a new SyntaxTrivia without annotations of the specified kind.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.IO.TextWriter : writer": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public void WriteTo(System.IO.TextWriter writer)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTrivia.WriteTo(System.IO.TextWriter)\">\r\n    <summary>\r\n    Writes the full text of this trivia to the specified TextWriter.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 264
              },
              "Syntax": {
                "Parameters": {
                  "T:System.IO.TextWriter : writer": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public void WriteTo(System.IO.TextWriter writer)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTrivia.WriteTo(System.IO.TextWriter)\">\r\n    <summary>\r\n    Writes the full text of this trivia to the specified TextWriter.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 264
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTrivia.WriteTo(System.IO.TextWriter)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTrivia",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTrivia.WriteTo(System.IO.TextWriter)\">\r\n    <summary>\r\n    Writes the full text of this trivia to the specified TextWriter.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool ContainsDiagnostics",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxTrivia.ContainsDiagnostics\">\r\n    <summary>\r\n    Determines whether this trivia has any diagnostics on it. If this trivia is a structured trivia then the\r\n    returned value will indicate whether this trivia or any of its descendant nodes, tokens or trivia have any\r\n    diagnostics on them.\r\n    </summary>>\r\n</member>\r\n",
                "StartLine": 148
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool ContainsDiagnostics",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxTrivia.ContainsDiagnostics\">\r\n    <summary>\r\n    Determines whether this trivia has any diagnostics on it. If this trivia is a structured trivia then the\r\n    returned value will indicate whether this trivia or any of its descendant nodes, tokens or trivia have any\r\n    diagnostics on them.\r\n    </summary>>\r\n</member>\r\n",
                "StartLine": 148
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxTrivia.ContainsDiagnostics",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTrivia",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxTrivia.ContainsDiagnostics\">\r\n    <summary>\r\n    Determines whether this trivia has any diagnostics on it. If this trivia is a structured trivia then the\r\n    returned value will indicate whether this trivia or any of its descendant nodes, tokens or trivia have any\r\n    diagnostics on them.\r\n    </summary>>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Text.TextSpan",
                "Content": "public TextSpan FullSpan",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxTrivia.FullSpan\">\r\n    <summary>\r\n    The absolute span of this trivia in characters. If this trivia is a structured trivia then the returned span\r\n    will include spans of any leading or trailing trivia present on the child non-terminal node of this trivia.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 138
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Text.TextSpan",
                "Content": "public TextSpan FullSpan",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxTrivia.FullSpan\">\r\n    <summary>\r\n    The absolute span of this trivia in characters. If this trivia is a structured trivia then the returned span\r\n    will include spans of any leading or trailing trivia present on the child non-terminal node of this trivia.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 138
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxTrivia.FullSpan",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTrivia",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxTrivia.FullSpan\">\r\n    <summary>\r\n    The absolute span of this trivia in characters. If this trivia is a structured trivia then the returned span\r\n    will include spans of any leading or trailing trivia present on the child non-terminal node of this trivia.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool HasStructure",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxTrivia.HasStructure\">\r\n    <summary>\r\n    Determines whether this trivia is a structured trivia.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 156
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool HasStructure",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxTrivia.HasStructure\">\r\n    <summary>\r\n    Determines whether this trivia is a structured trivia.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 156
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxTrivia.HasStructure",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTrivia",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxTrivia.HasStructure\">\r\n    <summary>\r\n    Determines whether this trivia is a structured trivia.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool IsDirective",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxTrivia.IsDirective\">\r\n    <summary>\r\n    Determines whether this trivia represents a preprocessor directive.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 224
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool IsDirective",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxTrivia.IsDirective\">\r\n    <summary>\r\n    Determines whether this trivia represents a preprocessor directive.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 224
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxTrivia.IsDirective",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTrivia",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxTrivia.IsDirective\">\r\n    <summary>\r\n    Determines whether this trivia represents a preprocessor directive.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.String",
                "Content": "public string Language",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxTrivia.Language\">\r\n    <summary>\r\n    The language name that this trivia is syntax of.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 53
              },
              "Syntax": {
                "PropertyType": "T:System.String",
                "Content": "public string Language",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxTrivia.Language\">\r\n    <summary>\r\n    The language name that this trivia is syntax of.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 53
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxTrivia.Language",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTrivia",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxTrivia.Language\">\r\n    <summary>\r\n    The language name that this trivia is syntax of.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Int32",
                "Content": "public int RawKind",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxTrivia.RawKind\">\r\n    <summary>\r\n    An integer representing the language specific kind of this trivia.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 40
              },
              "Syntax": {
                "PropertyType": "T:System.Int32",
                "Content": "public int RawKind",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxTrivia.RawKind\">\r\n    <summary>\r\n    An integer representing the language specific kind of this trivia.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 40
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxTrivia.RawKind",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTrivia",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxTrivia.RawKind\">\r\n    <summary>\r\n    An integer representing the language specific kind of this trivia.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Text.TextSpan",
                "Content": "public TextSpan Span",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxTrivia.Span\">\r\n    <summary>\r\n    The absolute span of this trivia in characters. If this trivia is a structured trivia then the returned span\r\n    will not include spans of any leading or trailing trivia present on the child non-terminal node of this\r\n    trivia.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 108
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Text.TextSpan",
                "Content": "public TextSpan Span",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxTrivia.Span\">\r\n    <summary>\r\n    The absolute span of this trivia in characters. If this trivia is a structured trivia then the returned span\r\n    will not include spans of any leading or trailing trivia present on the child non-terminal node of this\r\n    trivia.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 108
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxTrivia.Span",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTrivia",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxTrivia.Span\">\r\n    <summary>\r\n    The absolute span of this trivia in characters. If this trivia is a structured trivia then the returned span\r\n    will not include spans of any leading or trailing trivia present on the child non-terminal node of this\r\n    trivia.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Int32",
                "Content": "public int SpanStart",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxTrivia.SpanStart\">\r\n    <summary>\r\n    Same as accessing <see cref=\"P:Microsoft.CodeAnalysis.Text.TextSpan.Start\"/> on <see cref=\"P:Microsoft.CodeAnalysis.SyntaxTrivia.Span\"/>.\r\n    </summary>\r\n    <remarks>\r\n    Slight performance improvement.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 124
              },
              "Syntax": {
                "PropertyType": "T:System.Int32",
                "Content": "public int SpanStart",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxTrivia.SpanStart\">\r\n    <summary>\r\n    Same as accessing <see cref=\"P:Microsoft.CodeAnalysis.Text.TextSpan.Start\"/> on <see cref=\"P:Microsoft.CodeAnalysis.SyntaxTrivia.Span\"/>.\r\n    </summary>\r\n    <remarks>\r\n    Slight performance improvement.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 124
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxTrivia.SpanStart",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTrivia",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxTrivia.SpanStart\">\r\n    <summary>\r\n    Same as accessing <see cref=\"P:Microsoft.CodeAnalysis.Text.TextSpan.Start\"/> on <see cref=\"P:Microsoft.CodeAnalysis.SyntaxTrivia.Span\"/>.\r\n    </summary>\r\n    <remarks>\r\n    Slight performance improvement.\r\n    </remarks>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SyntaxTree",
                "Content": "public SyntaxTree SyntaxTree",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxTrivia.SyntaxTree\">\r\n    <summary>\r\n    SyntaxTree which contains current SyntaxTrivia.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 424
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SyntaxTree",
                "Content": "public SyntaxTree SyntaxTree",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxTrivia.SyntaxTree\">\r\n    <summary>\r\n    SyntaxTree which contains current SyntaxTrivia.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 424
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxTrivia.SyntaxTree",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTrivia",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxTrivia.SyntaxTree\">\r\n    <summary>\r\n    SyntaxTree which contains current SyntaxTrivia.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SyntaxToken",
                "Content": "public SyntaxToken Token",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxTrivia.Token\">\r\n    <summary>\r\n    The parent token that contains this token in its LeadingTrivia or TrailingTrivia collection.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 64
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SyntaxToken",
                "Content": "public SyntaxToken Token",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxTrivia.Token\">\r\n    <summary>\r\n    The parent token that contains this token in its LeadingTrivia or TrailingTrivia collection.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 64
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxTrivia.Token",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTrivia",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxTrivia.Token\">\r\n    <summary>\r\n    The parent token that contains this token in its LeadingTrivia or TrailingTrivia collection.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Syntax\\SyntaxTrivia.cs",
          "InheritanceHierarchy": [
            "T:System.Object",
            "T:System.ValueType"
          ],
          "Syntax": {
            "Content": "public struct SyntaxTrivia",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.SyntaxTrivia\">\r\n    <summary>\r\n    Represents a trivia in the syntax tree. This is the language agnostic equivalent of <see\r\n    cref=\"T:Microsoft.CodeAnalysis.CSharp.SyntaxTrivia\"/> and <see cref=\"T:Microsoft.CodeAnalysis.VisualBasic.SyntaxTrivia\"/>.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.SyntaxTrivia",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.SyntaxTrivia\">\r\n    <summary>\r\n    Represents a trivia in the syntax tree. This is the language agnostic equivalent of <see\r\n    cref=\"T:Microsoft.CodeAnalysis.CSharp.SyntaxTrivia\"/> and <see cref=\"T:Microsoft.CodeAnalysis.VisualBasic.SyntaxTrivia\"/>.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxTrivia : trivia": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTriviaList": ""
                },
                "Content": "public SyntaxTriviaList Add(SyntaxTrivia trivia)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTriviaList.Add(Microsoft.CodeAnalysis.SyntaxTrivia)\">\r\n    <summary>\r\n    Creates a new <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTriviaList\"/> with the specified trivia added to the end.\r\n    </summary>\r\n    <param name=\"trivia\">The trivia to add.</param>\r\n</member>\r\n",
                "StartLine": 229
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxTrivia : trivia": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTriviaList": ""
                },
                "Content": "public SyntaxTriviaList Add(SyntaxTrivia trivia)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTriviaList.Add(Microsoft.CodeAnalysis.SyntaxTrivia)\">\r\n    <summary>\r\n    Creates a new <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTriviaList\"/> with the specified trivia added to the end.\r\n    </summary>\r\n    <param name=\"trivia\">The trivia to add.</param>\r\n</member>\r\n",
                "StartLine": 229
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTriviaList.Add(Microsoft.CodeAnalysis.SyntaxTrivia)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTriviaList",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTriviaList.Add(Microsoft.CodeAnalysis.SyntaxTrivia)\">\r\n    <summary>\r\n    Creates a new <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTriviaList\"/> with the specified trivia added to the end.\r\n    </summary>\r\n    <param name=\"trivia\">The trivia to add.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia} : trivia": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTriviaList": ""
                },
                "Content": "public SyntaxTriviaList AddRange(IEnumerable<SyntaxTrivia> trivia)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTriviaList.AddRange(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})\">\r\n    <summary>\r\n    Creates a new <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTriviaList\"/> with the specified trivia added to the end.\r\n    </summary>\r\n    <param name=\"trivia\">The trivia to add.</param>\r\n</member>\r\n",
                "StartLine": 238
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia} : trivia": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTriviaList": ""
                },
                "Content": "public SyntaxTriviaList AddRange(IEnumerable<SyntaxTrivia> trivia)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTriviaList.AddRange(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})\">\r\n    <summary>\r\n    Creates a new <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTriviaList\"/> with the specified trivia added to the end.\r\n    </summary>\r\n    <param name=\"trivia\">The trivia to add.</param>\r\n</member>\r\n",
                "StartLine": 238
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTriviaList.AddRange(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTriviaList",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTriviaList.AddRange(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})\">\r\n    <summary>\r\n    Creates a new <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTriviaList\"/> with the specified trivia added to the end.\r\n    </summary>\r\n    <param name=\"trivia\">The trivia to add.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool Any()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTriviaList.Any\">\r\n    <summary>\r\n    Does this list have any items.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n",
                "StartLine": 179
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool Any()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTriviaList.Any\">\r\n    <summary>\r\n    Does this list have any items.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n",
                "StartLine": 179
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTriviaList.Any",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTriviaList",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTriviaList.Any\">\r\n    <summary>\r\n    Does this list have any items.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxTrivia : trivia": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTriviaList": ""
                },
                "Content": "public static SyntaxTriviaList Create(SyntaxTrivia trivia)",
                "XmlDocumentation": "",
                "StartLine": 469
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxTrivia : trivia": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTriviaList": ""
                },
                "Content": "public static SyntaxTriviaList Create(SyntaxTrivia trivia)",
                "XmlDocumentation": "",
                "StartLine": 469
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTriviaList.Create(Microsoft.CodeAnalysis.SyntaxTrivia)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTriviaList",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Int32 : index": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTrivia": ""
                },
                "Content": "public SyntaxTrivia ElementAt(int index)",
                "XmlDocumentation": "",
                "StartLine": 73
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Int32 : index": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTrivia": ""
                },
                "Content": "public SyntaxTrivia ElementAt(int index)",
                "XmlDocumentation": "",
                "StartLine": 73
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTriviaList.ElementAt(System.Int32)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTriviaList",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxTriviaList : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool Equals(SyntaxTriviaList other)",
                "XmlDocumentation": "",
                "StartLine": 398
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxTriviaList : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool Equals(SyntaxTriviaList other)",
                "XmlDocumentation": "",
                "StartLine": 398
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTriviaList.Equals(Microsoft.CodeAnalysis.SyntaxTriviaList)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTriviaList",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Object : obj": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public override bool Equals(object obj)",
                "XmlDocumentation": "",
                "StartLine": 413
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Object : obj": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public override bool Equals(object obj)",
                "XmlDocumentation": "",
                "StartLine": 413
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTriviaList.Equals(System.Object)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTriviaList",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTrivia": ""
                },
                "Content": "public SyntaxTrivia First()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTriviaList.First\">\r\n    <summary>\r\n    Returns the first trivia in the list.\r\n    </summary>\r\n    <returns>The first trivia in the list.</returns>\r\n    <exception cref=\"T:System.InvalidOperationException\">The list is empty.</exception>        \r\n</member>\r\n",
                "StartLine": 150
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTrivia": ""
                },
                "Content": "public SyntaxTrivia First()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTriviaList.First\">\r\n    <summary>\r\n    Returns the first trivia in the list.\r\n    </summary>\r\n    <returns>The first trivia in the list.</returns>\r\n    <exception cref=\"T:System.InvalidOperationException\">The list is empty.</exception>        \r\n</member>\r\n",
                "StartLine": 150
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTriviaList.First",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTriviaList",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTriviaList.First\">\r\n    <summary>\r\n    Returns the first trivia in the list.\r\n    </summary>\r\n    <returns>The first trivia in the list.</returns>\r\n    <exception cref=\"T:System.InvalidOperationException\">The list is empty.</exception>        \r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTriviaList.Enumerator": ""
                },
                "Content": "public Enumerator GetEnumerator()",
                "XmlDocumentation": "",
                "StartLine": 193
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTriviaList.Enumerator": ""
                },
                "Content": "public Enumerator GetEnumerator()",
                "XmlDocumentation": "",
                "StartLine": 193
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTriviaList.GetEnumerator",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTriviaList",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public override int GetHashCode()",
                "XmlDocumentation": "",
                "StartLine": 418
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public override int GetHashCode()",
                "XmlDocumentation": "",
                "StartLine": 418
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTriviaList.GetHashCode",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTriviaList",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxTrivia : triviaInList": ""
                },
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public int IndexOf(SyntaxTrivia triviaInList)",
                "XmlDocumentation": "",
                "StartLine": 198
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxTrivia : triviaInList": ""
                },
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public int IndexOf(SyntaxTrivia triviaInList)",
                "XmlDocumentation": "",
                "StartLine": 198
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTriviaList.IndexOf(Microsoft.CodeAnalysis.SyntaxTrivia)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTriviaList",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxTrivia : trivia": "",
                  "T:System.Int32 : index": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTriviaList": ""
                },
                "Content": "public SyntaxTriviaList Insert(int index, SyntaxTrivia trivia)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTriviaList.Insert(System.Int32,Microsoft.CodeAnalysis.SyntaxTrivia)\">\r\n    <summary>\r\n    Creates a new <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTriviaList\"/> with the specified trivia inserted at the index.\r\n    </summary>\r\n    <param name=\"index\">The index in the list to insert the trivia at.</param>\r\n    <param name=\"trivia\">The trivia to insert.</param>\r\n</member>\r\n",
                "StartLine": 248
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxTrivia : trivia": "",
                  "T:System.Int32 : index": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTriviaList": ""
                },
                "Content": "public SyntaxTriviaList Insert(int index, SyntaxTrivia trivia)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTriviaList.Insert(System.Int32,Microsoft.CodeAnalysis.SyntaxTrivia)\">\r\n    <summary>\r\n    Creates a new <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTriviaList\"/> with the specified trivia inserted at the index.\r\n    </summary>\r\n    <param name=\"index\">The index in the list to insert the trivia at.</param>\r\n    <param name=\"trivia\">The trivia to insert.</param>\r\n</member>\r\n",
                "StartLine": 248
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTriviaList.Insert(System.Int32,Microsoft.CodeAnalysis.SyntaxTrivia)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTriviaList",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTriviaList.Insert(System.Int32,Microsoft.CodeAnalysis.SyntaxTrivia)\">\r\n    <summary>\r\n    Creates a new <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTriviaList\"/> with the specified trivia inserted at the index.\r\n    </summary>\r\n    <param name=\"index\">The index in the list to insert the trivia at.</param>\r\n    <param name=\"trivia\">The trivia to insert.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia} : trivia": "",
                  "T:System.Int32 : index": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTriviaList": ""
                },
                "Content": "public SyntaxTriviaList InsertRange(int index, IEnumerable<SyntaxTrivia> trivia)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTriviaList.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})\">\r\n    <summary>\r\n    Creates a new <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTriviaList\"/> with the specified trivia inserted at the index.\r\n    </summary>\r\n    <param name=\"index\">The index in the list to insert the trivia at.</param>\r\n    <param name=\"trivia\">The trivia to insert.</param>\r\n</member>\r\n",
                "StartLine": 263
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia} : trivia": "",
                  "T:System.Int32 : index": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTriviaList": ""
                },
                "Content": "public SyntaxTriviaList InsertRange(int index, IEnumerable<SyntaxTrivia> trivia)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTriviaList.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})\">\r\n    <summary>\r\n    Creates a new <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTriviaList\"/> with the specified trivia inserted at the index.\r\n    </summary>\r\n    <param name=\"index\">The index in the list to insert the trivia at.</param>\r\n    <param name=\"trivia\">The trivia to insert.</param>\r\n</member>\r\n",
                "StartLine": 263
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTriviaList.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTriviaList",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTriviaList.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})\">\r\n    <summary>\r\n    Creates a new <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTriviaList\"/> with the specified trivia inserted at the index.\r\n    </summary>\r\n    <param name=\"index\">The index in the list to insert the trivia at.</param>\r\n    <param name=\"trivia\">The trivia to insert.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTrivia": ""
                },
                "Content": "public SyntaxTrivia Last()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTriviaList.Last\">\r\n    <summary>\r\n    Returns the last trivia in the list.\r\n    </summary>\r\n    <returns>The last trivia in the list.</returns>\r\n    <exception cref=\"T:System.InvalidOperationException\">The list is empty.</exception>        \r\n</member>\r\n",
                "StartLine": 165
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTrivia": ""
                },
                "Content": "public SyntaxTrivia Last()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTriviaList.Last\">\r\n    <summary>\r\n    Returns the last trivia in the list.\r\n    </summary>\r\n    <returns>The last trivia in the list.</returns>\r\n    <exception cref=\"T:System.InvalidOperationException\">The list is empty.</exception>        \r\n</member>\r\n",
                "StartLine": 165
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTriviaList.Last",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTriviaList",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTriviaList.Last\">\r\n    <summary>\r\n    Returns the last trivia in the list.\r\n    </summary>\r\n    <returns>The last trivia in the list.</returns>\r\n    <exception cref=\"T:System.InvalidOperationException\">The list is empty.</exception>        \r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxTrivia : triviaInList": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTriviaList": ""
                },
                "Content": "public SyntaxTriviaList Remove(SyntaxTrivia triviaInList)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTriviaList.Remove(Microsoft.CodeAnalysis.SyntaxTrivia)\">\r\n    <summary>\r\n    Creates a new <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTriviaList\"/> with the specified element removed.\r\n    </summary>\r\n    <param name=\"triviaInList\">The trivia element to remove.</param>\r\n</member>\r\n",
                "StartLine": 309
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxTrivia : triviaInList": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTriviaList": ""
                },
                "Content": "public SyntaxTriviaList Remove(SyntaxTrivia triviaInList)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTriviaList.Remove(Microsoft.CodeAnalysis.SyntaxTrivia)\">\r\n    <summary>\r\n    Creates a new <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTriviaList\"/> with the specified element removed.\r\n    </summary>\r\n    <param name=\"triviaInList\">The trivia element to remove.</param>\r\n</member>\r\n",
                "StartLine": 309
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTriviaList.Remove(Microsoft.CodeAnalysis.SyntaxTrivia)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTriviaList",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTriviaList.Remove(Microsoft.CodeAnalysis.SyntaxTrivia)\">\r\n    <summary>\r\n    Creates a new <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTriviaList\"/> with the specified element removed.\r\n    </summary>\r\n    <param name=\"triviaInList\">The trivia element to remove.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Int32 : index": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTriviaList": ""
                },
                "Content": "public SyntaxTriviaList RemoveAt(int index)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTriviaList.RemoveAt(System.Int32)\">\r\n    <summary>\r\n    Creates a new <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTriviaList\"/> with the element at the specified index removed.\r\n    </summary>\r\n    <param name=\"index\">The index identifying the element to remove.</param>\r\n</member>\r\n",
                "StartLine": 293
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Int32 : index": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTriviaList": ""
                },
                "Content": "public SyntaxTriviaList RemoveAt(int index)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTriviaList.RemoveAt(System.Int32)\">\r\n    <summary>\r\n    Creates a new <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTriviaList\"/> with the element at the specified index removed.\r\n    </summary>\r\n    <param name=\"index\">The index identifying the element to remove.</param>\r\n</member>\r\n",
                "StartLine": 293
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTriviaList.RemoveAt(System.Int32)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTriviaList",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTriviaList.RemoveAt(System.Int32)\">\r\n    <summary>\r\n    Creates a new <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTriviaList\"/> with the element at the specified index removed.\r\n    </summary>\r\n    <param name=\"index\">The index identifying the element to remove.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxTrivia : newTrivia": "",
                  "T:Microsoft.CodeAnalysis.SyntaxTrivia : triviaInList": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTriviaList": ""
                },
                "Content": "public SyntaxTriviaList Replace(SyntaxTrivia triviaInList, SyntaxTrivia newTrivia)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTriviaList.Replace(Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia)\">\r\n    <summary>\r\n    Creates a new <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTriviaList\"/> with the specified element replaced with new trivia.\r\n    </summary>\r\n    <param name=\"triviaInList\">The trivia element to replace.</param>\r\n    <param name=\"newTrivia\">The trivia to replace the element with.</param>\r\n</member>\r\n",
                "StartLine": 327
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxTrivia : newTrivia": "",
                  "T:Microsoft.CodeAnalysis.SyntaxTrivia : triviaInList": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTriviaList": ""
                },
                "Content": "public SyntaxTriviaList Replace(SyntaxTrivia triviaInList, SyntaxTrivia newTrivia)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTriviaList.Replace(Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia)\">\r\n    <summary>\r\n    Creates a new <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTriviaList\"/> with the specified element replaced with new trivia.\r\n    </summary>\r\n    <param name=\"triviaInList\">The trivia element to replace.</param>\r\n    <param name=\"newTrivia\">The trivia to replace the element with.</param>\r\n</member>\r\n",
                "StartLine": 327
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTriviaList.Replace(Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia)",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTriviaList",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTriviaList.Replace(Microsoft.CodeAnalysis.SyntaxTrivia,Microsoft.CodeAnalysis.SyntaxTrivia)\">\r\n    <summary>\r\n    Creates a new <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTriviaList\"/> with the specified element replaced with new trivia.\r\n    </summary>\r\n    <param name=\"triviaInList\">The trivia element to replace.</param>\r\n    <param name=\"newTrivia\">The trivia to replace the element with.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxTrivia : triviaInList": "",
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia} : newTrivia": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTriviaList": ""
                },
                "Content": "public SyntaxTriviaList ReplaceRange(SyntaxTrivia triviaInList, IEnumerable<SyntaxTrivia> newTrivia)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTriviaList.ReplaceRange(Microsoft.CodeAnalysis.SyntaxTrivia,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})\">\r\n    <summary>\r\n    Creates a new <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTriviaList\"/> with the specified element replaced with new trivia.\r\n    </summary>\r\n    <param name=\"triviaInList\">The trivia element to replace.</param>\r\n    <param name=\"newTrivia\">The trivia to replace the element with.</param>\r\n</member>\r\n",
                "StartLine": 342
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SyntaxTrivia : triviaInList": "",
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia} : newTrivia": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTriviaList": ""
                },
                "Content": "public SyntaxTriviaList ReplaceRange(SyntaxTrivia triviaInList, IEnumerable<SyntaxTrivia> newTrivia)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTriviaList.ReplaceRange(Microsoft.CodeAnalysis.SyntaxTrivia,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})\">\r\n    <summary>\r\n    Creates a new <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTriviaList\"/> with the specified element replaced with new trivia.\r\n    </summary>\r\n    <param name=\"triviaInList\">The trivia element to replace.</param>\r\n    <param name=\"newTrivia\">The trivia to replace the element with.</param>\r\n</member>\r\n",
                "StartLine": 342
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTriviaList.ReplaceRange(Microsoft.CodeAnalysis.SyntaxTrivia,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTriviaList",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTriviaList.ReplaceRange(Microsoft.CodeAnalysis.SyntaxTrivia,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.SyntaxTrivia})\">\r\n    <summary>\r\n    Creates a new <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTriviaList\"/> with the specified element replaced with new trivia.\r\n    </summary>\r\n    <param name=\"triviaInList\">The trivia element to replace.</param>\r\n    <param name=\"newTrivia\">The trivia to replace the element with.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTriviaList.Reversed": ""
                },
                "Content": "public Reversed Reverse()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTriviaList.Reverse\">\r\n    <summary>\r\n    Returns a list which contains all elements of <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTriviaList\"/> in reversed order.\r\n    </summary>\r\n    <returns><see cref=\"T:Microsoft.CodeAnalysis.SyntaxTriviaList.Reversed\"/> which contains all elements of <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTriviaList\"/> in reversed order</returns>\r\n</member>\r\n",
                "StartLine": 188
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.SyntaxTriviaList.Reversed": ""
                },
                "Content": "public Reversed Reverse()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTriviaList.Reverse\">\r\n    <summary>\r\n    Returns a list which contains all elements of <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTriviaList\"/> in reversed order.\r\n    </summary>\r\n    <returns><see cref=\"T:Microsoft.CodeAnalysis.SyntaxTriviaList.Reversed\"/> which contains all elements of <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTriviaList\"/> in reversed order</returns>\r\n</member>\r\n",
                "StartLine": 188
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTriviaList.Reverse",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTriviaList",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.SyntaxTriviaList.Reverse\">\r\n    <summary>\r\n    Returns a list which contains all elements of <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTriviaList\"/> in reversed order.\r\n    </summary>\r\n    <returns><see cref=\"T:Microsoft.CodeAnalysis.SyntaxTriviaList.Reversed\"/> which contains all elements of <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTriviaList\"/> in reversed order</returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public string ToFullString()",
                "XmlDocumentation": "",
                "StartLine": 464
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public string ToFullString()",
                "XmlDocumentation": "",
                "StartLine": 464
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTriviaList.ToFullString",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTriviaList",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public override string ToString()",
                "XmlDocumentation": "",
                "StartLine": 459
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public override string ToString()",
                "XmlDocumentation": "",
                "StartLine": 459
              },
              "Id": "M:Microsoft.CodeAnalysis.SyntaxTriviaList.ToString",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTriviaList",
              "XmlDocumentation": ""
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "Empty",
                "XmlDocumentation": "",
                "StartLine": 22
              },
              "Id": "F:Microsoft.CodeAnalysis.SyntaxTriviaList.Empty",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTriviaList",
              "XmlDocumentation": ""
            }
          ],
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Int32",
                "Content": "public int Count",
                "XmlDocumentation": "",
                "StartLine": 68
              },
              "Syntax": {
                "PropertyType": "T:System.Int32",
                "Content": "public int Count",
                "XmlDocumentation": "",
                "StartLine": 68
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxTriviaList.Count",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTriviaList",
              "XmlDocumentation": ""
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Text.TextSpan",
                "Content": "public TextSpan FullSpan",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxTriviaList.FullSpan\">\r\n    <summary>\r\n    The absolute span of the list elements in characters, including the leading and trailing trivia of the first and last elements.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 111
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Text.TextSpan",
                "Content": "public TextSpan FullSpan",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxTriviaList.FullSpan\">\r\n    <summary>\r\n    The absolute span of the list elements in characters, including the leading and trailing trivia of the first and last elements.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 111
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxTriviaList.FullSpan",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTriviaList",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxTriviaList.FullSpan\">\r\n    <summary>\r\n    The absolute span of the list elements in characters, including the leading and trailing trivia of the first and last elements.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Text.TextSpan",
                "Content": "public TextSpan Span",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxTriviaList.Span\">\r\n    <summary>\r\n    The absolute span of the list elements in characters, not including the leading and trailing trivia of the first and last elements.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 129
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Text.TextSpan",
                "Content": "public TextSpan Span",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxTriviaList.Span\">\r\n    <summary>\r\n    The absolute span of the list elements in characters, not including the leading and trailing trivia of the first and last elements.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 129
              },
              "Id": "P:Microsoft.CodeAnalysis.SyntaxTriviaList.Span",
              "Parent": "T:Microsoft.CodeAnalysis.SyntaxTriviaList",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.SyntaxTriviaList.Span\">\r\n    <summary>\r\n    The absolute span of the list elements in characters, not including the leading and trailing trivia of the first and last elements.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Syntax\\SyntaxTriviaList.cs",
          "InheritanceHierarchy": [
            "T:System.Object",
            "T:System.ValueType"
          ],
          "Syntax": {
            "Content": "public partial struct SyntaxTriviaList",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.SyntaxTriviaList\">\r\n    <summary>\r\n     Represents a read-only list of <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTrivia\"/>.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.SyntaxTriviaList",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.SyntaxTriviaList\">\r\n    <summary>\r\n     Represents a read-only list of <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTrivia\"/>.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.TypedConstant : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool Equals(TypedConstant other)",
                "XmlDocumentation": "",
                "StartLine": 167
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.TypedConstant : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool Equals(TypedConstant other)",
                "XmlDocumentation": "",
                "StartLine": 167
              },
              "Id": "M:Microsoft.CodeAnalysis.TypedConstant.Equals(Microsoft.CodeAnalysis.TypedConstant)",
              "Parent": "T:Microsoft.CodeAnalysis.TypedConstant",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Object : obj": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public override bool Equals(object obj)",
                "XmlDocumentation": "",
                "StartLine": 162
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Object : obj": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public override bool Equals(object obj)",
                "XmlDocumentation": "",
                "StartLine": 162
              },
              "Id": "M:Microsoft.CodeAnalysis.TypedConstant.Equals(System.Object)",
              "Parent": "T:Microsoft.CodeAnalysis.TypedConstant",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public override int GetHashCode()",
                "XmlDocumentation": "",
                "StartLine": 174
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public override int GetHashCode()",
                "XmlDocumentation": "",
                "StartLine": 174
              },
              "Id": "M:Microsoft.CodeAnalysis.TypedConstant.GetHashCode",
              "Parent": "T:Microsoft.CodeAnalysis.TypedConstant",
              "XmlDocumentation": ""
            }
          ],
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool IsNull",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.TypedConstant.IsNull\">\r\n    <summary>\r\n    True if the constant represents a null reference.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 55
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool IsNull",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.TypedConstant.IsNull\">\r\n    <summary>\r\n    True if the constant represents a null reference.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 55
              },
              "Id": "P:Microsoft.CodeAnalysis.TypedConstant.IsNull",
              "Parent": "T:Microsoft.CodeAnalysis.TypedConstant",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.TypedConstant.IsNull\">\r\n    <summary>\r\n    True if the constant represents a null reference.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.TypedConstantKind",
                "Content": "public TypedConstantKind Kind",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.TypedConstant.Kind\">\r\n    <summary>\r\n    The kind of the constant.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 38
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.TypedConstantKind",
                "Content": "public TypedConstantKind Kind",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.TypedConstant.Kind\">\r\n    <summary>\r\n    The kind of the constant.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 38
              },
              "Id": "P:Microsoft.CodeAnalysis.TypedConstant.Kind",
              "Parent": "T:Microsoft.CodeAnalysis.TypedConstant",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.TypedConstant.Kind\">\r\n    <summary>\r\n    The kind of the constant.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.ITypeSymbol",
                "Content": "public ITypeSymbol Type",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.TypedConstant.Type\">\r\n    <summary>\r\n    Returns the <see cref=\"T:Microsoft.CodeAnalysis.ITypeSymbol\"/> of the constant, \r\n    or null if the type can't be determined (error).\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 47
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.ITypeSymbol",
                "Content": "public ITypeSymbol Type",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.TypedConstant.Type\">\r\n    <summary>\r\n    Returns the <see cref=\"T:Microsoft.CodeAnalysis.ITypeSymbol\"/> of the constant, \r\n    or null if the type can't be determined (error).\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 47
              },
              "Id": "P:Microsoft.CodeAnalysis.TypedConstant.Type",
              "Parent": "T:Microsoft.CodeAnalysis.TypedConstant",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.TypedConstant.Type\">\r\n    <summary>\r\n    Returns the <see cref=\"T:Microsoft.CodeAnalysis.ITypeSymbol\"/> of the constant, \r\n    or null if the type can't be determined (error).\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Object",
                "Content": "public object Value",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.TypedConstant.Value\">\r\n    <summary>\r\n    The value for a non-array constant.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 66
              },
              "Syntax": {
                "PropertyType": "T:System.Object",
                "Content": "public object Value",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.TypedConstant.Value\">\r\n    <summary>\r\n    The value for a non-array constant.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 66
              },
              "Id": "P:Microsoft.CodeAnalysis.TypedConstant.Value",
              "Parent": "T:Microsoft.CodeAnalysis.TypedConstant",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.TypedConstant.Value\">\r\n    <summary>\r\n    The value for a non-array constant.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.TypedConstant}",
                "Content": "public ImmutableArray<TypedConstant> Values",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.TypedConstant.Values\">\r\n    <summary>\r\n    The value for an <see cref=\"T:Microsoft.CodeAnalysis.TypedConstant\"/> array. \r\n    </summary>\r\n</member>\r\n",
                "StartLine": 82
              },
              "Syntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.TypedConstant}",
                "Content": "public ImmutableArray<TypedConstant> Values",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.TypedConstant.Values\">\r\n    <summary>\r\n    The value for an <see cref=\"T:Microsoft.CodeAnalysis.TypedConstant\"/> array. \r\n    </summary>\r\n</member>\r\n",
                "StartLine": 82
              },
              "Id": "P:Microsoft.CodeAnalysis.TypedConstant.Values",
              "Parent": "T:Microsoft.CodeAnalysis.TypedConstant",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.TypedConstant.Values\">\r\n    <summary>\r\n    The value for an <see cref=\"T:Microsoft.CodeAnalysis.TypedConstant\"/> array. \r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Symbols\\TypedConstant.cs",
          "InheritanceHierarchy": [
            "T:System.Object",
            "T:System.ValueType"
          ],
          "Syntax": {
            "Content": "public struct TypedConstant\r\n\r\n#region Testing & Debugging\r\n#if false\r\n        /// <summary>\r\n        /// Returns the System.String that represents the current TypedConstant.\r\n        /// </summary>\r\n        /// <returns>A System.String that represents the current TypedConstant.</returns>\r\n        public override string ToString()\r\n        \r\n            if (value.IsNull)\r\n            \r\n                return \"null\";\r\n            \r\n\r\n            if (kind == TypedConstantKind.Array)\r\n            \r\n                return \"\" + string.Join(\", \", Values.Select(v => new TypedConstant(v).ToString())) + \"\";\r\n            \r\n\r\n            if (kind == TypedConstantKind.Type || type.SpecialType == SpecialType.System_Object)\r\n            \r\n                return \"typeof(\" + value.Object.ToString() + \")\";\r\n            \r\n\r\n            if (kind == TypedConstantKind.Enum)\r\n            \r\n                // TODO (tomat): replace with SymbolDisplay\r\n                return DisplayEnumConstant();\r\n            \r\n\r\n            return SymbolDisplay.FormatPrimitive(value.Object, quoteStrings: true, useHexadecimalNumbers: false);\r\n        \r\n\r\n        // Decode the value of enum constant\r\n        private string DisplayEnumConstant()\r\n        \r\n            Debug.Assert(Kind == TypedConstantKind.Enum);\r\n\r\n            // Create a ConstantValue of enum underlying type\r\n            SpecialType splType = this.Type.GetEnumUnderlyingType().SpecialType;\r\n            ConstantValue valueConstant = ConstantValue.Create(this.Value, splType);\r\n\r\n            string typeName = this.Type.ToDisplayString(SymbolDisplayFormat.QualifiedNameOnlyFormat);\r\n            if (valueConstant.IsUnsigned)\r\n            \r\n                return DisplayUnsignedEnumConstant(splType, valueConstant.UInt64Value, typeName);\r\n            \r\n            else\r\n            \r\n                return DisplaySignedEnumConstant(splType, valueConstant.Int64Value, typeName);\r\n            \r\n        \r\n\r\n        private string DisplayUnsignedEnumConstant(SpecialType specialType, ulong constantToDecode, string typeName)\r\n        \r\n            // Specified valueConstant might have an exact matching enum field\r\n            // or it might be a bitwise Or of multiple enum fields.\r\n            // For the later case, we keep track of the current value of\r\n            // bitwise Or of possible enum fields.\r\n            ulong curValue = 0;\r\n\r\n            // Initialize the value string to empty\r\n            PooledStringBuilder pooledBuilder = null;\r\n            StringBuilder valueStringBuilder = null;\r\n\r\n            // Iterate through all the constant members in the enum type\r\n            ImmutableArray<Symbol> members = this.Type.GetMembers();\r\n            foreach (Symbol member in members)\r\n            \r\n                var field = member as FieldSymbol;\r\n\r\n                if ((object)field != null && field.HasConstantValue)\r\n                \r\n                    ConstantValue memberConstant = ConstantValue.Create(field.ConstantValue, specialType);\r\n                    ulong memberValue = memberConstant.UInt64Value;\r\n\r\n                    // Do we have an exact matching enum field\r\n                    if (memberValue == constantToDecode)\r\n                    \r\n                        if (pooledBuilder != null)\r\n                        \r\n                            pooledBuilder.Free();\r\n                        \r\n\r\n                        return typeName + \".\" + field.Name;\r\n                    \r\n\r\n                    // specifiedValue might be a bitwise Or of multiple enum fields\r\n                    // Is the current member included in the specified value?\r\n                    if ((memberValue & constantToDecode) == memberValue)\r\n                    \r\n                        // update the current value\r\n                        curValue = curValue | memberValue;\r\n\r\n                        if (valueStringBuilder == null)\r\n                        \r\n                            pooledBuilder = PooledStringBuilder.GetInstance();\r\n                            valueStringBuilder = pooledBuilder.Builder;\r\n                        \r\n                        else\r\n                        \r\n                            valueStringBuilder.Append(\" | \");\r\n                        \r\n\r\n                        valueStringBuilder.Append(typeName);\r\n                        valueStringBuilder.Append(\".\");\r\n                        valueStringBuilder.Append(field.Name);\r\n                    \r\n                \r\n            \r\n\r\n            if (pooledBuilder != null)\r\n            \r\n                if (curValue == constantToDecode)\r\n                \r\n                    // return decoded enum constant\r\n                    return pooledBuilder.ToStringAndFree();\r\n                \r\n\r\n                // Unable to decode the enum constant\r\n                pooledBuilder.Free();\r\n            \r\n\r\n            // Unable to decode the enum constant, just display the integral value\r\n            return this.Value.ToString();\r\n        \r\n\r\n        private string DisplaySignedEnumConstant(SpecialType specialType, long constantToDecode, string typeName)\r\n        \r\n            // Specified valueConstant might have an exact matching enum field\r\n            // or it might be a bitwise Or of multiple enum fields.\r\n            // For the later case, we keep track of the current value of\r\n            // bitwise Or of possible enum fields.\r\n            long curValue = 0;\r\n\r\n            // Initialize the value string to empty\r\n            PooledStringBuilder pooledBuilder = null;\r\n            StringBuilder valueStringBuilder = null;\r\n\r\n            // Iterate through all the constant members in the enum type\r\n            ImmutableArray<Symbol> members = this.Type.GetMembers();\r\n            foreach (Symbol member in members)\r\n            \r\n                var field = member as FieldSymbol;\r\n                if ((object)field != null && field.HasConstantValue)\r\n                \r\n                    ConstantValue memberConstant = ConstantValue.Create(field.ConstantValue, specialType);\r\n                    long memberValue = memberConstant.Int64Value;\r\n\r\n                    // Do we have an exact matching enum field\r\n                    if (memberValue == constantToDecode)\r\n                    \r\n                        if (pooledBuilder != null)\r\n                        \r\n                            pooledBuilder.Free();\r\n                        \r\n\r\n                        return typeName + \".\" + field.Name;\r\n                    \r\n\r\n                    // specifiedValue might be a bitwise Or of multiple enum fields\r\n                    // Is the current member included in the specified value?\r\n                    if ((memberValue & constantToDecode) == memberValue)\r\n                    \r\n                        // update the current value\r\n                        curValue = curValue | memberValue;\r\n\r\n                        if (valueStringBuilder == null)\r\n                        \r\n                            pooledBuilder = PooledStringBuilder.GetInstance();\r\n                            valueStringBuilder = pooledBuilder.Builder;\r\n                        \r\n                        else\r\n                        \r\n                            valueStringBuilder.Append(\" | \");\r\n                        \r\n\r\n                        valueStringBuilder.Append(typeName);\r\n                        valueStringBuilder.Append(\".\");\r\n                        valueStringBuilder.Append(field.Name);\r\n                    \r\n                \r\n            \r\n\r\n            if (pooledBuilder != null)\r\n            \r\n                if (curValue == constantToDecode)\r\n                \r\n                    // return decoded enum constant\r\n                    return pooledBuilder.ToStringAndFree();\r\n                \r\n\r\n                // Unable to decode the enum constant\r\n                pooledBuilder.Free();\r\n            \r\n\r\n            // Unable to decode the enum constant, just display the integral value\r\n            return this.Value.ToString();\r\n        \r\n #endif\r\n#endregion",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.TypedConstant\">\r\n    <summary>\r\n    Represents a constant value used as an argument to a custom attribute.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.TypedConstant",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.TypedConstant\">\r\n    <summary>\r\n    Represents a constant value used as an argument to a custom attribute.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.TypeInfo : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool Equals(TypeInfo other)",
                "XmlDocumentation": "",
                "StartLine": 32
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.TypeInfo : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool Equals(TypeInfo other)",
                "XmlDocumentation": "",
                "StartLine": 32
              },
              "Id": "M:Microsoft.CodeAnalysis.TypeInfo.Equals(Microsoft.CodeAnalysis.TypeInfo)",
              "Parent": "T:Microsoft.CodeAnalysis.TypeInfo",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Object : obj": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public override bool Equals(object obj)",
                "XmlDocumentation": "",
                "StartLine": 38
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Object : obj": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public override bool Equals(object obj)",
                "XmlDocumentation": "",
                "StartLine": 38
              },
              "Id": "M:Microsoft.CodeAnalysis.TypeInfo.Equals(System.Object)",
              "Parent": "T:Microsoft.CodeAnalysis.TypeInfo",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public override int GetHashCode()",
                "XmlDocumentation": "",
                "StartLine": 43
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public override int GetHashCode()",
                "XmlDocumentation": "",
                "StartLine": 43
              },
              "Id": "M:Microsoft.CodeAnalysis.TypeInfo.GetHashCode",
              "Parent": "T:Microsoft.CodeAnalysis.TypeInfo",
              "XmlDocumentation": ""
            }
          ],
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.ITypeSymbol",
                "Content": "public ITypeSymbol ConvertedType",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.TypeInfo.ConvertedType\">\r\n    <summary>\r\n    The type of the expression after it has undergone an implicit conversion. If the type\r\n    did not undergo an implicit conversion, returns the same as Type.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 23
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.ITypeSymbol",
                "Content": "public ITypeSymbol ConvertedType",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.TypeInfo.ConvertedType\">\r\n    <summary>\r\n    The type of the expression after it has undergone an implicit conversion. If the type\r\n    did not undergo an implicit conversion, returns the same as Type.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 23
              },
              "Id": "P:Microsoft.CodeAnalysis.TypeInfo.ConvertedType",
              "Parent": "T:Microsoft.CodeAnalysis.TypeInfo",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.TypeInfo.ConvertedType\">\r\n    <summary>\r\n    The type of the expression after it has undergone an implicit conversion. If the type\r\n    did not undergo an implicit conversion, returns the same as Type.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.ITypeSymbol",
                "Content": "public ITypeSymbol Type",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.TypeInfo.Type\">\r\n    <summary>\r\n    The type of the expression represented by the syntax node. For expressions that do not\r\n    have a type, null is returned. If the type could not be determined due to an error, than\r\n    an IErrorTypeSymbol is returned.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 17
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.ITypeSymbol",
                "Content": "public ITypeSymbol Type",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.TypeInfo.Type\">\r\n    <summary>\r\n    The type of the expression represented by the syntax node. For expressions that do not\r\n    have a type, null is returned. If the type could not be determined due to an error, than\r\n    an IErrorTypeSymbol is returned.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 17
              },
              "Id": "P:Microsoft.CodeAnalysis.TypeInfo.Type",
              "Parent": "T:Microsoft.CodeAnalysis.TypeInfo",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.TypeInfo.Type\">\r\n    <summary>\r\n    The type of the expression represented by the syntax node. For expressions that do not\r\n    have a type, null is returned. If the type could not be determined due to an error, than\r\n    an IErrorTypeSymbol is returned.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Compilation\\TypeInfo.cs",
          "InheritanceHierarchy": [
            "T:System.Object",
            "T:System.ValueType"
          ],
          "Syntax": {
            "Content": "public struct TypeInfo",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.CodeAnalysis.TypeInfo",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": ""
        }
      ],
      "Enums": [
        {
          "Syntax": {
            "Content": "public enum Accessibility",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.Accessibility\">\r\n    <summary>\r\n    Enumeration for common accessibility combinations.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.Accessibility",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.Accessibility\">\r\n    <summary>\r\n    Enumeration for common accessibility combinations.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Syntax": {
            "Content": "public enum AssemblyIdentityParts",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.CodeAnalysis.AssemblyIdentityParts",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": ""
        },
        {
          "Syntax": {
            "Content": "public enum CandidateReason",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.CandidateReason\">\r\n    <summary>\r\n    Indicates the reasons why a candidate (or set of candidate) symbols were not considered\r\n    correct in SemanticInfo. Higher values take precedence over lower values, so if, for\r\n    example, there a symbol with a given name that was inaccessible, and other with the wrong\r\n    arity, only the inaccessible one would be reported in the SemanticInfo.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.CandidateReason",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.CandidateReason\">\r\n    <summary>\r\n    Indicates the reasons why a candidate (or set of candidate) symbols were not considered\r\n    correct in SemanticInfo. Higher values take precedence over lower values, so if, for\r\n    example, there a symbol with a given name that was inaccessible, and other with the wrong\r\n    arity, only the inaccessible one would be reported in the SemanticInfo.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Syntax": {
            "Content": "public enum DiagnosticSeverity",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.DiagnosticSeverity\">\r\n    <summary>\r\n    Describes how severe a diagnostic is.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.DiagnosticSeverity",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.DiagnosticSeverity\">\r\n    <summary>\r\n    Describes how severe a diagnostic is.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Syntax": {
            "Content": "public enum DocumentationMode",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.DocumentationMode\">\r\n    <summary>\r\n    Specifies the different documentation comment processing modes.\r\n    </summary>\r\n    <remarks>\r\n    Order matters: least processing to most processing.\r\n    </remarks>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.DocumentationMode",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.DocumentationMode\">\r\n    <summary>\r\n    Specifies the different documentation comment processing modes.\r\n    </summary>\r\n    <remarks>\r\n    Order matters: least processing to most processing.\r\n    </remarks>\r\n</member>\r\n"
        },
        {
          "Syntax": {
            "Content": "public enum LineVisibility",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.LineVisibility\">\r\n    <summary>\r\n    The state of the visibility of a line.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.LineVisibility",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.LineVisibility\">\r\n    <summary>\r\n    The state of the visibility of a line.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Syntax": {
            "Content": "public enum LocationKind",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.LocationKind\">\r\n    <summary>\r\n    Specifies the kind of location (source vs. metadata).\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.LocationKind",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.LocationKind\">\r\n    <summary>\r\n    Specifies the kind of location (source vs. metadata).\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Syntax": {
            "Content": "public enum MetadataImageKind",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.MetadataImageKind\">\r\n    <summary>\r\n    The kind of metadata a PE file image contains.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.MetadataImageKind",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.MetadataImageKind\">\r\n    <summary>\r\n    The kind of metadata a PE file image contains.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Syntax": {
            "Content": "public enum MethodKind",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.MethodKind\">\r\n    <summary>\r\n    Enumeration for possible kinds of method symbols.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.MethodKind",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.MethodKind\">\r\n    <summary>\r\n    Enumeration for possible kinds of method symbols.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Syntax": {
            "Content": "public enum NamespaceKind",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.NamespaceKind\">\r\n    <summary>\r\n    Describes the kind of the namespace extent.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.NamespaceKind",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.NamespaceKind\">\r\n    <summary>\r\n    Describes the kind of the namespace extent.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Syntax": {
            "Content": "public enum OptimizationLevel",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.OptimizationLevel\">\r\n    <summary>\r\n    Determines the level of optimization of the generated code.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.OptimizationLevel",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.OptimizationLevel\">\r\n    <summary>\r\n    Determines the level of optimization of the generated code.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Syntax": {
            "Content": "public enum OutputKind",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.OutputKind\">\r\n    <summary>\r\n    Specifies output assembly knids generated by compiler.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.OutputKind",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.OutputKind\">\r\n    <summary>\r\n    Specifies output assembly knids generated by compiler.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Syntax": {
            "Content": "public enum Platform\r\n\r\n\r\n\r\n;",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.CodeAnalysis.Platform",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": ""
        },
        {
          "Syntax": {
            "Content": "public enum RefKind",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.RefKind\">\r\n    <summary>\r\n    Denotes the kind of reference parameter.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.RefKind",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.RefKind\">\r\n    <summary>\r\n    Denotes the kind of reference parameter.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Syntax": {
            "Content": "public enum ReportDiagnostic",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.ReportDiagnostic\">\r\n    <summary>\r\n    Describes how to report a warning diagnostic.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.ReportDiagnostic",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.ReportDiagnostic\">\r\n    <summary>\r\n    Describes how to report a warning diagnostic.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Syntax": {
            "Content": "public enum SourceCodeKind",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.SourceCodeKind\">\r\n    <summary>\r\n    Specifies the C# or VB source code kind.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.SourceCodeKind",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.SourceCodeKind\">\r\n    <summary>\r\n    Specifies the C# or VB source code kind.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Syntax": {
            "Content": "public enum SpecialType",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.SpecialType\">\r\n    <summary>\r\n    Specifies the Ids of special runtime types.\r\n    </summary>\r\n    <remarks>\r\n    Only types explicitly mentioned in \"Co-located core types\" spec \r\n    (http://devdiv/sites/docs/Dev11/CLR/Specs/CoreFx/Co-located%20core%20types.docx)\r\n    can be in this enum.\r\n    The following things should be in sync:\r\n        1) SpecialType enum\r\n        2) names in SpecialTypes.EmittedNames array.\r\n    </remarks>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.SpecialType",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.SpecialType\">\r\n    <summary>\r\n    Specifies the Ids of special runtime types.\r\n    </summary>\r\n    <remarks>\r\n    Only types explicitly mentioned in \"Co-located core types\" spec \r\n    (http://devdiv/sites/docs/Dev11/CLR/Specs/CoreFx/Co-located%20core%20types.docx)\r\n    can be in this enum.\r\n    The following things should be in sync:\r\n        1) SpecialType enum\r\n        2) names in SpecialTypes.EmittedNames array.\r\n    </remarks>\r\n</member>\r\n"
        },
        {
          "Syntax": {
            "Content": "public enum SpeculativeBindingOption",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.SpeculativeBindingOption\">\r\n    <summary>\r\n    Describes the kind of binding to be performed in one of the SemanticModel\r\n    speculative binding methods.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.SpeculativeBindingOption",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.SpeculativeBindingOption\">\r\n    <summary>\r\n    Describes the kind of binding to be performed in one of the SemanticModel\r\n    speculative binding methods.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Syntax": {
            "Content": "public enum SymbolDisplayDelegateStyle",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.SymbolDisplayDelegateStyle\">\r\n    <summary>\r\n    Specifies how to display delegates (just the name or the name with the signature).\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.SymbolDisplayDelegateStyle",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.SymbolDisplayDelegateStyle\">\r\n    <summary>\r\n    Specifies how to display delegates (just the name or the name with the signature).\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Syntax": {
            "Content": "public enum SymbolDisplayExtensionMethodStyle",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.SymbolDisplayExtensionMethodStyle\">\r\n    <summary>\r\n    Specifies how how to display extension methods.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.SymbolDisplayExtensionMethodStyle",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.SymbolDisplayExtensionMethodStyle\">\r\n    <summary>\r\n    Specifies how how to display extension methods.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Syntax": {
            "Content": "public enum SymbolDisplayGenericsOptions",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.SymbolDisplayGenericsOptions\">\r\n    <summary>\r\n    Specifies the options for how generics are displayed in the description of a symbol.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.SymbolDisplayGenericsOptions",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.SymbolDisplayGenericsOptions\">\r\n    <summary>\r\n    Specifies the options for how generics are displayed in the description of a symbol.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Syntax": {
            "Content": "public enum SymbolDisplayGlobalNamespaceStyle",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.SymbolDisplayGlobalNamespaceStyle\">\r\n    <summary>\r\n    Specifies the options for how to display the global namespace in the description of a symbol.\r\n    </summary>\r\n    <remarks>\r\n    Any of these styles may be overridden by <see cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayTypeQualificationStyle\"/>.\r\n    </remarks>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.SymbolDisplayGlobalNamespaceStyle",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.SymbolDisplayGlobalNamespaceStyle\">\r\n    <summary>\r\n    Specifies the options for how to display the global namespace in the description of a symbol.\r\n    </summary>\r\n    <remarks>\r\n    Any of these styles may be overridden by <see cref=\"T:Microsoft.CodeAnalysis.SymbolDisplayTypeQualificationStyle\"/>.\r\n    </remarks>\r\n</member>\r\n"
        },
        {
          "Syntax": {
            "Content": "public enum SymbolDisplayKindOptions",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.SymbolDisplayKindOptions\">\r\n    <summary>\r\n    Specifies which kind keywords should be included when displaying symbols.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.SymbolDisplayKindOptions",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.SymbolDisplayKindOptions\">\r\n    <summary>\r\n    Specifies which kind keywords should be included when displaying symbols.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Syntax": {
            "Content": "public enum SymbolDisplayLocalOptions",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.SymbolDisplayLocalOptions\">\r\n    <summary>\r\n    Specifies the options for how locals are displayed in the description of a symbol.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.SymbolDisplayLocalOptions",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.SymbolDisplayLocalOptions\">\r\n    <summary>\r\n    Specifies the options for how locals are displayed in the description of a symbol.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Syntax": {
            "Content": "public enum SymbolDisplayMemberOptions",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.SymbolDisplayMemberOptions\">\r\n    <summary>\r\n    Specifies the options for how members are displayed in the description of a symbol.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.SymbolDisplayMemberOptions",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.SymbolDisplayMemberOptions\">\r\n    <summary>\r\n    Specifies the options for how members are displayed in the description of a symbol.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Syntax": {
            "Content": "public enum SymbolDisplayMiscellaneousOptions",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.SymbolDisplayMiscellaneousOptions\">\r\n    <summary>\r\n    Specifies miscellaneous options about the format of symbol descriptions.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.SymbolDisplayMiscellaneousOptions",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.SymbolDisplayMiscellaneousOptions\">\r\n    <summary>\r\n    Specifies miscellaneous options about the format of symbol descriptions.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Syntax": {
            "Content": "public enum SymbolDisplayParameterOptions",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.SymbolDisplayParameterOptions\">\r\n    <summary>\r\n    Specifies how parameters are displayed in the description of a (member, property/indexer, or delegate) symbol.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.SymbolDisplayParameterOptions",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.SymbolDisplayParameterOptions\">\r\n    <summary>\r\n    Specifies how parameters are displayed in the description of a (member, property/indexer, or delegate) symbol.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Syntax": {
            "Content": "public enum SymbolDisplayPartKind",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.SymbolDisplayPartKind\">\r\n    <summary>\r\n    Specifies the kinds of a piece of classified text (SymbolDisplayPart).\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.SymbolDisplayPartKind",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.SymbolDisplayPartKind\">\r\n    <summary>\r\n    Specifies the kinds of a piece of classified text (SymbolDisplayPart).\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Syntax": {
            "Content": "public enum SymbolDisplayPropertyStyle",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.SymbolDisplayPropertyStyle\">\r\n    <summary>\r\n    Specifies the options for how properties are displayed in symbol descriptions.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.SymbolDisplayPropertyStyle",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.SymbolDisplayPropertyStyle\">\r\n    <summary>\r\n    Specifies the options for how properties are displayed in symbol descriptions.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Syntax": {
            "Content": "public enum SymbolDisplayTypeQualificationStyle",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.SymbolDisplayTypeQualificationStyle\">\r\n    <summary>\r\n    Specifies how much qualification is used in symbol descriptions.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.SymbolDisplayTypeQualificationStyle",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.SymbolDisplayTypeQualificationStyle\">\r\n    <summary>\r\n    Specifies how much qualification is used in symbol descriptions.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Syntax": {
            "Content": "public enum SymbolFilter",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.SymbolFilter\">\r\n    <summary>\r\n    Indicate what kinds of declaration symbols will be included\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.SymbolFilter",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.SymbolFilter\">\r\n    <summary>\r\n    Indicate what kinds of declaration symbols will be included\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Syntax": {
            "Content": "public enum SymbolKind",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.SymbolKind\">\r\n    <summary>\r\n    Specifies the possible kinds of symbols.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.SymbolKind",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.SymbolKind\">\r\n    <summary>\r\n    Specifies the possible kinds of symbols.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Syntax": {
            "Content": "public enum SyntaxRemoveOptions",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.CodeAnalysis.SyntaxRemoveOptions",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": ""
        },
        {
          "Syntax": {
            "Content": "public enum SyntaxWalkerDepth",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.SyntaxWalkerDepth\">\r\n    <summary>\r\n    enum to specify how deep walker should decent into\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.SyntaxWalkerDepth",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.SyntaxWalkerDepth\">\r\n    <summary>\r\n    enum to specify how deep walker should decent into\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Syntax": {
            "Content": "public enum TypedConstantKind",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.TypedConstantKind\">\r\n    <summary>\r\n    Represents the kind of a TypedConstant.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.TypedConstantKind",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.TypedConstantKind\">\r\n    <summary>\r\n    Represents the kind of a TypedConstant.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Syntax": {
            "Content": "public enum TypeKind",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.TypeKind\">\r\n    <summary>\r\n    Enumeration for possible kinds of type symbols.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.TypeKind",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.TypeKind\">\r\n    <summary>\r\n    Enumeration for possible kinds of type symbols.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Syntax": {
            "Content": "public enum TypeParameterKind",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.TypeParameterKind\">\r\n    <summary>\r\n    Represents the different kinds of type parameters.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.TypeParameterKind",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.TypeParameterKind\">\r\n    <summary>\r\n    Represents the different kinds of type parameters.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Syntax": {
            "Content": "public enum VarianceKind",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.VarianceKind\">\r\n    <summary>\r\n    An enumeration declaring the kinds of variance supported for generic type parameters.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.VarianceKind",
          "Parent": "N:Microsoft.CodeAnalysis",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.VarianceKind\">\r\n    <summary>\r\n    An enumeration declaring the kinds of variance supported for generic type parameters.\r\n    </summary>\r\n</member>\r\n"
        }
      ],
      "AllowedMemberTypes": [
        2,
        3,
        4,
        5,
        6
      ],
      "Id": "N:Microsoft.CodeAnalysis",
      "Parent": "Microsoft.CodeAnalysis",
      "XmlDocumentation": ""
    },
    {
      "AllowedMemberTypes": [
        2,
        3,
        4,
        5,
        6
      ],
      "Id": "N:Microsoft.CodeAnalysis.CodeGen",
      "Parent": "Microsoft.CodeAnalysis",
      "XmlDocumentation": ""
    },
    {
      "AllowedMemberTypes": [
        2,
        3,
        4,
        5,
        6
      ],
      "Id": "N:Microsoft.CodeAnalysis.Collections",
      "Parent": "Microsoft.CodeAnalysis",
      "XmlDocumentation": ""
    },
    {
      "Classes": [
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Action{Microsoft.CodeAnalysis.Diagnostics.CodeBlockEndAnalysisContext} : action": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public abstract void RegisterCodeBlockEndAction(Action<CodeBlockEndAnalysisContext> action);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.AnalysisContext.RegisterCodeBlockEndAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.CodeBlockEndAnalysisContext})\">\r\n    <summary>\r\n    Register an action to be executed at the end of semantic analysis of a method body or an expression appearing outside a method body.\r\n    A code block end action reports <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s about code blocks.\r\n    </summary>\r\n    <param name=\"action\">Action to be executed at the end of semantic analysis of a code block.</param>\r\n</member>\r\n",
                "StartLine": 96
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Action{Microsoft.CodeAnalysis.Diagnostics.CodeBlockEndAnalysisContext} : action": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public abstract void RegisterCodeBlockEndAction(Action<CodeBlockEndAnalysisContext> action);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.AnalysisContext.RegisterCodeBlockEndAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.CodeBlockEndAnalysisContext})\">\r\n    <summary>\r\n    Register an action to be executed at the end of semantic analysis of a method body or an expression appearing outside a method body.\r\n    A code block end action reports <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s about code blocks.\r\n    </summary>\r\n    <param name=\"action\">Action to be executed at the end of semantic analysis of a code block.</param>\r\n</member>\r\n",
                "StartLine": 96
              },
              "Id": "M:Microsoft.CodeAnalysis.Diagnostics.AnalysisContext.RegisterCodeBlockEndAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.CodeBlockEndAnalysisContext})",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.AnalysisContext",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.AnalysisContext.RegisterCodeBlockEndAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.CodeBlockEndAnalysisContext})\">\r\n    <summary>\r\n    Register an action to be executed at the end of semantic analysis of a method body or an expression appearing outside a method body.\r\n    A code block end action reports <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s about code blocks.\r\n    </summary>\r\n    <param name=\"action\">Action to be executed at the end of semantic analysis of a code block.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Action{Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext{``0}} : action": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public abstract void RegisterCodeBlockStartAction<TLanguageKindEnum>(Action<CodeBlockStartAnalysisContext<TLanguageKindEnum>> action)where TLanguageKindEnum : struct;",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.AnalysisContext.RegisterCodeBlockStartAction``1(System.Action{Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext{``0}})\">\r\n    <summary>\r\n    Register an action to be executed at the start of semantic analysis of a method body or an expression appearing outside a method body.\r\n    A code block start action can register other actions and/or collect state information to be used in diagnostic analysis,\r\n    but cannot itself report any <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s.\r\n    </summary>\r\n    <typeparam name=\"TLanguageKindEnum\">Enum type giving the syntax node kinds of the source language for which the action applies.</typeparam>\r\n    <param name=\"action\">Action to be executed at the start of semantic analysis of a code block.</param>\r\n</member>\r\n",
                "StartLine": 89
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Action{Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext{``0}} : action": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public abstract void RegisterCodeBlockStartAction<TLanguageKindEnum>(Action<CodeBlockStartAnalysisContext<TLanguageKindEnum>> action)where TLanguageKindEnum : struct;",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.AnalysisContext.RegisterCodeBlockStartAction``1(System.Action{Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext{``0}})\">\r\n    <summary>\r\n    Register an action to be executed at the start of semantic analysis of a method body or an expression appearing outside a method body.\r\n    A code block start action can register other actions and/or collect state information to be used in diagnostic analysis,\r\n    but cannot itself report any <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s.\r\n    </summary>\r\n    <typeparam name=\"TLanguageKindEnum\">Enum type giving the syntax node kinds of the source language for which the action applies.</typeparam>\r\n    <param name=\"action\">Action to be executed at the start of semantic analysis of a code block.</param>\r\n</member>\r\n",
                "StartLine": 89
              },
              "Id": "M:Microsoft.CodeAnalysis.Diagnostics.AnalysisContext.RegisterCodeBlockStartAction``1(System.Action{Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext{``0}})",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.AnalysisContext",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.AnalysisContext.RegisterCodeBlockStartAction``1(System.Action{Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext{``0}})\">\r\n    <summary>\r\n    Register an action to be executed at the start of semantic analysis of a method body or an expression appearing outside a method body.\r\n    A code block start action can register other actions and/or collect state information to be used in diagnostic analysis,\r\n    but cannot itself report any <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s.\r\n    </summary>\r\n    <typeparam name=\"TLanguageKindEnum\">Enum type giving the syntax node kinds of the source language for which the action applies.</typeparam>\r\n    <param name=\"action\">Action to be executed at the start of semantic analysis of a code block.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Action{Microsoft.CodeAnalysis.Diagnostics.CompilationEndAnalysisContext} : action": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public abstract void RegisterCompilationEndAction(Action<CompilationEndAnalysisContext> action);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.AnalysisContext.RegisterCompilationEndAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.CompilationEndAnalysisContext})\">\r\n    <summary>\r\n    Register an action to be executed at compilation end.\r\n    A compilation end action reports <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s about the <see cref=\"T:Microsoft.CodeAnalysis.Compilation\"/>.\r\n    </summary>\r\n    <param name=\"action\">Action to be executed at compilation end.</param>\r\n</member>\r\n",
                "StartLine": 53
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Action{Microsoft.CodeAnalysis.Diagnostics.CompilationEndAnalysisContext} : action": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public abstract void RegisterCompilationEndAction(Action<CompilationEndAnalysisContext> action);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.AnalysisContext.RegisterCompilationEndAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.CompilationEndAnalysisContext})\">\r\n    <summary>\r\n    Register an action to be executed at compilation end.\r\n    A compilation end action reports <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s about the <see cref=\"T:Microsoft.CodeAnalysis.Compilation\"/>.\r\n    </summary>\r\n    <param name=\"action\">Action to be executed at compilation end.</param>\r\n</member>\r\n",
                "StartLine": 53
              },
              "Id": "M:Microsoft.CodeAnalysis.Diagnostics.AnalysisContext.RegisterCompilationEndAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.CompilationEndAnalysisContext})",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.AnalysisContext",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.AnalysisContext.RegisterCompilationEndAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.CompilationEndAnalysisContext})\">\r\n    <summary>\r\n    Register an action to be executed at compilation end.\r\n    A compilation end action reports <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s about the <see cref=\"T:Microsoft.CodeAnalysis.Compilation\"/>.\r\n    </summary>\r\n    <param name=\"action\">Action to be executed at compilation end.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Action{Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext} : action": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public abstract void RegisterCompilationStartAction(Action<CompilationStartAnalysisContext> action);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.AnalysisContext.RegisterCompilationStartAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext})\">\r\n    <summary>\r\n    Register an action to be executed at compilation start.\r\n    A compilation start action can register other actions and/or collect state information to be used in diagnostic analysis,\r\n    but cannot itself report any <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s.\r\n    </summary>\r\n    <param name=\"action\">Action to be executed at compilation start.</param>\r\n</member>\r\n",
                "StartLine": 46
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Action{Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext} : action": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public abstract void RegisterCompilationStartAction(Action<CompilationStartAnalysisContext> action);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.AnalysisContext.RegisterCompilationStartAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext})\">\r\n    <summary>\r\n    Register an action to be executed at compilation start.\r\n    A compilation start action can register other actions and/or collect state information to be used in diagnostic analysis,\r\n    but cannot itself report any <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s.\r\n    </summary>\r\n    <param name=\"action\">Action to be executed at compilation start.</param>\r\n</member>\r\n",
                "StartLine": 46
              },
              "Id": "M:Microsoft.CodeAnalysis.Diagnostics.AnalysisContext.RegisterCompilationStartAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext})",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.AnalysisContext",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.AnalysisContext.RegisterCompilationStartAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext})\">\r\n    <summary>\r\n    Register an action to be executed at compilation start.\r\n    A compilation start action can register other actions and/or collect state information to be used in diagnostic analysis,\r\n    but cannot itself report any <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s.\r\n    </summary>\r\n    <param name=\"action\">Action to be executed at compilation start.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Action{Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext} : action": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public abstract void RegisterSemanticModelAction(Action<SemanticModelAnalysisContext> action);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.AnalysisContext.RegisterSemanticModelAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext})\">\r\n    <summary>\r\n    Register an action to be executed at completion of semantic analysis of a document,\r\n    which will operate on the <see cref=\"T:Microsoft.CodeAnalysis.SemanticModel\"/> of the document. A semantic model action\r\n    reports <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s about the model.\r\n    </summary>\r\n    <param name=\"action\">Action to be executed for a document's <see cref=\"T:Microsoft.CodeAnalysis.SemanticModel\"/>.</param>\r\n</member>\r\n",
                "StartLine": 61
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Action{Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext} : action": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public abstract void RegisterSemanticModelAction(Action<SemanticModelAnalysisContext> action);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.AnalysisContext.RegisterSemanticModelAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext})\">\r\n    <summary>\r\n    Register an action to be executed at completion of semantic analysis of a document,\r\n    which will operate on the <see cref=\"T:Microsoft.CodeAnalysis.SemanticModel\"/> of the document. A semantic model action\r\n    reports <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s about the model.\r\n    </summary>\r\n    <param name=\"action\">Action to be executed for a document's <see cref=\"T:Microsoft.CodeAnalysis.SemanticModel\"/>.</param>\r\n</member>\r\n",
                "StartLine": 61
              },
              "Id": "M:Microsoft.CodeAnalysis.Diagnostics.AnalysisContext.RegisterSemanticModelAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext})",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.AnalysisContext",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.AnalysisContext.RegisterSemanticModelAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext})\">\r\n    <summary>\r\n    Register an action to be executed at completion of semantic analysis of a document,\r\n    which will operate on the <see cref=\"T:Microsoft.CodeAnalysis.SemanticModel\"/> of the document. A semantic model action\r\n    reports <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s about the model.\r\n    </summary>\r\n    <param name=\"action\">Action to be executed for a document's <see cref=\"T:Microsoft.CodeAnalysis.SemanticModel\"/>.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Action{Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext} : action": "",
                  "T:System.Array : symbolKinds": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public void RegisterSymbolAction(Action<SymbolAnalysisContext> action, params SymbolKind[] symbolKinds)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.AnalysisContext.RegisterSymbolAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext},Microsoft.CodeAnalysis.SymbolKind[])\">\r\n    <summary>\r\n    Register an action to be executed at completion of semantic analysis of an <see cref=\"T:Microsoft.CodeAnalysis.ISymbol\"/> with an appropriate Kind.>\r\n    A symbol action reports <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s about <see cref=\"T:Microsoft.CodeAnalysis.ISymbol\"/>s.\r\n    </summary>\r\n    <param name=\"action\">Action to be executed for an <see cref=\"T:Microsoft.CodeAnalysis.ISymbol\"/>.</param>\r\n    <param name=\"symbolKinds\">Action will be executed only if an <see cref=\"T:Microsoft.CodeAnalysis.ISymbol\"/>'s Kind matches one of the <see cref=\"T:Microsoft.CodeAnalysis.SymbolKind\"/> values.</param>\r\n</member>\r\n",
                "StartLine": 69
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Action{Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext} : action": "",
                  "T:System.Array : symbolKinds": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public void RegisterSymbolAction(Action<SymbolAnalysisContext> action, params SymbolKind[] symbolKinds)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.AnalysisContext.RegisterSymbolAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext},Microsoft.CodeAnalysis.SymbolKind[])\">\r\n    <summary>\r\n    Register an action to be executed at completion of semantic analysis of an <see cref=\"T:Microsoft.CodeAnalysis.ISymbol\"/> with an appropriate Kind.>\r\n    A symbol action reports <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s about <see cref=\"T:Microsoft.CodeAnalysis.ISymbol\"/>s.\r\n    </summary>\r\n    <param name=\"action\">Action to be executed for an <see cref=\"T:Microsoft.CodeAnalysis.ISymbol\"/>.</param>\r\n    <param name=\"symbolKinds\">Action will be executed only if an <see cref=\"T:Microsoft.CodeAnalysis.ISymbol\"/>'s Kind matches one of the <see cref=\"T:Microsoft.CodeAnalysis.SymbolKind\"/> values.</param>\r\n</member>\r\n",
                "StartLine": 69
              },
              "Id": "M:Microsoft.CodeAnalysis.Diagnostics.AnalysisContext.RegisterSymbolAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext},Microsoft.CodeAnalysis.SymbolKind[])",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.AnalysisContext",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.AnalysisContext.RegisterSymbolAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext},Microsoft.CodeAnalysis.SymbolKind[])\">\r\n    <summary>\r\n    Register an action to be executed at completion of semantic analysis of an <see cref=\"T:Microsoft.CodeAnalysis.ISymbol\"/> with an appropriate Kind.>\r\n    A symbol action reports <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s about <see cref=\"T:Microsoft.CodeAnalysis.ISymbol\"/>s.\r\n    </summary>\r\n    <param name=\"action\">Action to be executed for an <see cref=\"T:Microsoft.CodeAnalysis.ISymbol\"/>.</param>\r\n    <param name=\"symbolKinds\">Action will be executed only if an <see cref=\"T:Microsoft.CodeAnalysis.ISymbol\"/>'s Kind matches one of the <see cref=\"T:Microsoft.CodeAnalysis.SymbolKind\"/> values.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Action{Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext} : action": "",
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.SymbolKind} : symbolKinds": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public abstract void RegisterSymbolAction(Action<SymbolAnalysisContext> action, ImmutableArray<SymbolKind> symbolKinds);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.AnalysisContext.RegisterSymbolAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext},System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.SymbolKind})\">\r\n    <summary>\r\n    Register an action to be executed at completion of semantic analysis of an <see cref=\"T:Microsoft.CodeAnalysis.ISymbol\"/> with an appropriate Kind.>\r\n    A symbol action reports <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s about <see cref=\"T:Microsoft.CodeAnalysis.ISymbol\"/>s.\r\n    </summary>\r\n    <param name=\"action\">Action to be executed for an <see cref=\"T:Microsoft.CodeAnalysis.ISymbol\"/>.</param>\r\n    <param name=\"symbolKinds\">Action will be executed only if an <see cref=\"T:Microsoft.CodeAnalysis.ISymbol\"/>'s Kind matches one of the <see cref=\"T:Microsoft.CodeAnalysis.SymbolKind\"/> values.</param>\r\n</member>\r\n",
                "StartLine": 80
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Action{Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext} : action": "",
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.SymbolKind} : symbolKinds": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public abstract void RegisterSymbolAction(Action<SymbolAnalysisContext> action, ImmutableArray<SymbolKind> symbolKinds);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.AnalysisContext.RegisterSymbolAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext},System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.SymbolKind})\">\r\n    <summary>\r\n    Register an action to be executed at completion of semantic analysis of an <see cref=\"T:Microsoft.CodeAnalysis.ISymbol\"/> with an appropriate Kind.>\r\n    A symbol action reports <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s about <see cref=\"T:Microsoft.CodeAnalysis.ISymbol\"/>s.\r\n    </summary>\r\n    <param name=\"action\">Action to be executed for an <see cref=\"T:Microsoft.CodeAnalysis.ISymbol\"/>.</param>\r\n    <param name=\"symbolKinds\">Action will be executed only if an <see cref=\"T:Microsoft.CodeAnalysis.ISymbol\"/>'s Kind matches one of the <see cref=\"T:Microsoft.CodeAnalysis.SymbolKind\"/> values.</param>\r\n</member>\r\n",
                "StartLine": 80
              },
              "Id": "M:Microsoft.CodeAnalysis.Diagnostics.AnalysisContext.RegisterSymbolAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext},System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.SymbolKind})",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.AnalysisContext",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.AnalysisContext.RegisterSymbolAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext},System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.SymbolKind})\">\r\n    <summary>\r\n    Register an action to be executed at completion of semantic analysis of an <see cref=\"T:Microsoft.CodeAnalysis.ISymbol\"/> with an appropriate Kind.>\r\n    A symbol action reports <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s about <see cref=\"T:Microsoft.CodeAnalysis.ISymbol\"/>s.\r\n    </summary>\r\n    <param name=\"action\">Action to be executed for an <see cref=\"T:Microsoft.CodeAnalysis.ISymbol\"/>.</param>\r\n    <param name=\"symbolKinds\">Action will be executed only if an <see cref=\"T:Microsoft.CodeAnalysis.ISymbol\"/>'s Kind matches one of the <see cref=\"T:Microsoft.CodeAnalysis.SymbolKind\"/> values.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Action{Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext} : action": "",
                  "T:System.Array : syntaxKinds": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public void RegisterSyntaxNodeAction<TLanguageKindEnum>(Action<SyntaxNodeAnalysisContext> action, params TLanguageKindEnum[] syntaxKinds)where TLanguageKindEnum : struct",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.AnalysisContext.RegisterSyntaxNodeAction``1(System.Action{Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext},``0[])\">\r\n    <summary>\r\n    Register an action to be executed at completion of semantic analysis of a <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/> with an appropriate Kind.\r\n    A syntax node action can report <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s about <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/>s, and can also collect\r\n    state information to be used by other syntax node actions or code block end actions.\r\n    </summary>\r\n    <typeparam name=\"TLanguageKindEnum\">Enum type giving the syntax node kinds of the source language for which the action applies.</typeparam>\r\n    <param name=\"action\">Action to be executed at completion of semantic analysis of a <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/>.</param>\r\n    <param name=\"syntaxKinds\">Action will be executed only if a <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/>'s Kind matches one of the syntax kind values.</param>\r\n</member>\r\n",
                "StartLine": 113
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Action{Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext} : action": "",
                  "T:System.Array : syntaxKinds": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public void RegisterSyntaxNodeAction<TLanguageKindEnum>(Action<SyntaxNodeAnalysisContext> action, params TLanguageKindEnum[] syntaxKinds)where TLanguageKindEnum : struct",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.AnalysisContext.RegisterSyntaxNodeAction``1(System.Action{Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext},``0[])\">\r\n    <summary>\r\n    Register an action to be executed at completion of semantic analysis of a <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/> with an appropriate Kind.\r\n    A syntax node action can report <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s about <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/>s, and can also collect\r\n    state information to be used by other syntax node actions or code block end actions.\r\n    </summary>\r\n    <typeparam name=\"TLanguageKindEnum\">Enum type giving the syntax node kinds of the source language for which the action applies.</typeparam>\r\n    <param name=\"action\">Action to be executed at completion of semantic analysis of a <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/>.</param>\r\n    <param name=\"syntaxKinds\">Action will be executed only if a <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/>'s Kind matches one of the syntax kind values.</param>\r\n</member>\r\n",
                "StartLine": 113
              },
              "Id": "M:Microsoft.CodeAnalysis.Diagnostics.AnalysisContext.RegisterSyntaxNodeAction``1(System.Action{Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext},``0[])",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.AnalysisContext",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.AnalysisContext.RegisterSyntaxNodeAction``1(System.Action{Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext},``0[])\">\r\n    <summary>\r\n    Register an action to be executed at completion of semantic analysis of a <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/> with an appropriate Kind.\r\n    A syntax node action can report <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s about <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/>s, and can also collect\r\n    state information to be used by other syntax node actions or code block end actions.\r\n    </summary>\r\n    <typeparam name=\"TLanguageKindEnum\">Enum type giving the syntax node kinds of the source language for which the action applies.</typeparam>\r\n    <param name=\"action\">Action to be executed at completion of semantic analysis of a <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/>.</param>\r\n    <param name=\"syntaxKinds\">Action will be executed only if a <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/>'s Kind matches one of the syntax kind values.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Action{Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext} : action": "",
                  "T:System.Collections.Immutable.ImmutableArray{``0} : syntaxKinds": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public abstract void RegisterSyntaxNodeAction<TLanguageKindEnum>(Action<SyntaxNodeAnalysisContext> action, ImmutableArray<TLanguageKindEnum> syntaxKinds)where TLanguageKindEnum : struct;",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.AnalysisContext.RegisterSyntaxNodeAction``1(System.Action{Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext},System.Collections.Immutable.ImmutableArray{``0})\">\r\n    <summary>\r\n    Register an action to be executed at completion of semantic analysis of a <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/> with an appropriate Kind.\r\n    A syntax node action can report <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s about <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/>s, and can also collect\r\n    state information to be used by other syntax node actions or code block end actions.\r\n    </summary>\r\n    <typeparam name=\"TLanguageKindEnum\">Enum type giving the syntax node kinds of the source language for which the action applies.</typeparam>\r\n    <param name=\"action\">Action to be executed at completion of semantic analysis of a <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/>.</param>\r\n    <param name=\"syntaxKinds\">Action will be executed only if a <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/>'s Kind matches one of the syntax kind values.</param>\r\n</member>\r\n",
                "StartLine": 126
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Action{Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext} : action": "",
                  "T:System.Collections.Immutable.ImmutableArray{``0} : syntaxKinds": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public abstract void RegisterSyntaxNodeAction<TLanguageKindEnum>(Action<SyntaxNodeAnalysisContext> action, ImmutableArray<TLanguageKindEnum> syntaxKinds)where TLanguageKindEnum : struct;",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.AnalysisContext.RegisterSyntaxNodeAction``1(System.Action{Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext},System.Collections.Immutable.ImmutableArray{``0})\">\r\n    <summary>\r\n    Register an action to be executed at completion of semantic analysis of a <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/> with an appropriate Kind.\r\n    A syntax node action can report <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s about <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/>s, and can also collect\r\n    state information to be used by other syntax node actions or code block end actions.\r\n    </summary>\r\n    <typeparam name=\"TLanguageKindEnum\">Enum type giving the syntax node kinds of the source language for which the action applies.</typeparam>\r\n    <param name=\"action\">Action to be executed at completion of semantic analysis of a <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/>.</param>\r\n    <param name=\"syntaxKinds\">Action will be executed only if a <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/>'s Kind matches one of the syntax kind values.</param>\r\n</member>\r\n",
                "StartLine": 126
              },
              "Id": "M:Microsoft.CodeAnalysis.Diagnostics.AnalysisContext.RegisterSyntaxNodeAction``1(System.Action{Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext},System.Collections.Immutable.ImmutableArray{``0})",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.AnalysisContext",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.AnalysisContext.RegisterSyntaxNodeAction``1(System.Action{Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext},System.Collections.Immutable.ImmutableArray{``0})\">\r\n    <summary>\r\n    Register an action to be executed at completion of semantic analysis of a <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/> with an appropriate Kind.\r\n    A syntax node action can report <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s about <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/>s, and can also collect\r\n    state information to be used by other syntax node actions or code block end actions.\r\n    </summary>\r\n    <typeparam name=\"TLanguageKindEnum\">Enum type giving the syntax node kinds of the source language for which the action applies.</typeparam>\r\n    <param name=\"action\">Action to be executed at completion of semantic analysis of a <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/>.</param>\r\n    <param name=\"syntaxKinds\">Action will be executed only if a <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/>'s Kind matches one of the syntax kind values.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Action{Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext} : action": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public abstract void RegisterSyntaxTreeAction(Action<SyntaxTreeAnalysisContext> action);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.AnalysisContext.RegisterSyntaxTreeAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext})\">\r\n    <summary>\r\n    Register an action to be executed at completion of parsing of a code document.\r\n    A syntax tree action reports <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s about the <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTree\"/> of a document.\r\n    </summary>\r\n    <param name=\"action\">Action to be executed at completion of parsing of a document.</param>\r\n</member>\r\n",
                "StartLine": 103
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Action{Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext} : action": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public abstract void RegisterSyntaxTreeAction(Action<SyntaxTreeAnalysisContext> action);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.AnalysisContext.RegisterSyntaxTreeAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext})\">\r\n    <summary>\r\n    Register an action to be executed at completion of parsing of a code document.\r\n    A syntax tree action reports <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s about the <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTree\"/> of a document.\r\n    </summary>\r\n    <param name=\"action\">Action to be executed at completion of parsing of a document.</param>\r\n</member>\r\n",
                "StartLine": 103
              },
              "Id": "M:Microsoft.CodeAnalysis.Diagnostics.AnalysisContext.RegisterSyntaxTreeAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext})",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.AnalysisContext",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.AnalysisContext.RegisterSyntaxTreeAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext})\">\r\n    <summary>\r\n    Register an action to be executed at completion of parsing of a code document.\r\n    A syntax tree action reports <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s about the <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTree\"/> of a document.\r\n    </summary>\r\n    <param name=\"action\">Action to be executed at completion of parsing of a document.</param>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\DiagnosticAnalyzer\\DiagnosticAnalysisContext.cs",
          "InheritanceHierarchy": [
            "T:System.Object"
          ],
          "Syntax": {
            "Content": "public abstract class AnalysisContext",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.Diagnostics.AnalysisContext\">\r\n    <summary>\r\n    Context for initializing an analyzer.\r\n    Analyzer initialization can use an <see cref=\"T:Microsoft.CodeAnalysis.Diagnostics.AnalysisContext\"/> to register actions to be executed at any of:\r\n    <list type=\"bullet\">\r\n    <item>\r\n    <description>compilation start,</description>\r\n    </item>\r\n    <item>\r\n    <description>compilation end,</description>\r\n    </item>\r\n    <item>\r\n    <description>completion of parsing a code document,</description>\r\n    </item>\r\n    <item>\r\n    <description>completion of semantic analysis of a code document,</description>\r\n    </item>\r\n    <item>\r\n    <description>completion of semantic analysis of a symbol,</description>\r\n    </item>\r\n    <item>\r\n    <description>start of semantic analysis of a method body or an expression appearing outside a method body,</description>\r\n    </item>\r\n    <item>\r\n    <description>completion of semantic analysis of a method body or an expression appearing outside a method body, or</description>\r\n    </item>\r\n    <item>\r\n    <description>completion of semantic analysis of a syntax node.</description>\r\n    </item>\r\n    </list>\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.Diagnostics.AnalysisContext",
          "Parent": "N:Microsoft.CodeAnalysis.Diagnostics",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.Diagnostics.AnalysisContext\">\r\n    <summary>\r\n    Context for initializing an analyzer.\r\n    Analyzer initialization can use an <see cref=\"T:Microsoft.CodeAnalysis.Diagnostics.AnalysisContext\"/> to register actions to be executed at any of:\r\n    <list type=\"bullet\">\r\n    <item>\r\n    <description>compilation start,</description>\r\n    </item>\r\n    <item>\r\n    <description>compilation end,</description>\r\n    </item>\r\n    <item>\r\n    <description>completion of parsing a code document,</description>\r\n    </item>\r\n    <item>\r\n    <description>completion of semantic analysis of a code document,</description>\r\n    </item>\r\n    <item>\r\n    <description>completion of semantic analysis of a symbol,</description>\r\n    </item>\r\n    <item>\r\n    <description>start of semantic analysis of a method body or an expression appearing outside a method body,</description>\r\n    </item>\r\n    <item>\r\n    <description>completion of semantic analysis of a method body or an expression appearing outside a method body, or</description>\r\n    </item>\r\n    <item>\r\n    <description>completion of semantic analysis of a syntax node.</description>\r\n    </item>\r\n    </list>\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.String : language": ""
                },
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer}": ""
                },
                "Content": "public override ImmutableArray<DiagnosticAnalyzer> GetAnalyzers(string language)",
                "XmlDocumentation": "",
                "StartLine": 37
              },
              "Syntax": {
                "Parameters": {
                  "T:System.String : language": ""
                },
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer}": ""
                },
                "Content": "public override ImmutableArray<DiagnosticAnalyzer> GetAnalyzers(string language)",
                "XmlDocumentation": "",
                "StartLine": 37
              },
              "Id": "M:Microsoft.CodeAnalysis.Diagnostics.AnalyzerImageReference.GetAnalyzers(System.String)",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerImageReference",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer}": ""
                },
                "Content": "public override ImmutableArray<DiagnosticAnalyzer> GetAnalyzersForAllLanguages()",
                "XmlDocumentation": "",
                "StartLine": 32
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer}": ""
                },
                "Content": "public override ImmutableArray<DiagnosticAnalyzer> GetAnalyzersForAllLanguages()",
                "XmlDocumentation": "",
                "StartLine": 32
              },
              "Id": "M:Microsoft.CodeAnalysis.Diagnostics.AnalyzerImageReference.GetAnalyzersForAllLanguages",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerImageReference",
              "XmlDocumentation": ""
            }
          ],
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:System.String",
                "Content": "public override string Display",
                "XmlDocumentation": "",
                "StartLine": 50
              },
              "Syntax": {
                "PropertyType": "T:System.String",
                "Content": "public override string Display",
                "XmlDocumentation": "",
                "StartLine": 50
              },
              "Id": "P:Microsoft.CodeAnalysis.Diagnostics.AnalyzerImageReference.Display",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerImageReference",
              "XmlDocumentation": ""
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.String",
                "Content": "public override string FullPath",
                "XmlDocumentation": "",
                "StartLine": 42
              },
              "Syntax": {
                "PropertyType": "T:System.String",
                "Content": "public override string FullPath",
                "XmlDocumentation": "",
                "StartLine": 42
              },
              "Id": "P:Microsoft.CodeAnalysis.Diagnostics.AnalyzerImageReference.FullPath",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerImageReference",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "ConstructorSyntax": {
                "Parameters": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer} : analyzers": "",
                  "T:System.String : display": "",
                  "T:System.String : fullPath": ""
                },
                "Content": "public AnalyzerImageReference(ImmutableArray<DiagnosticAnalyzer> analyzers, string fullPath = null, string display = null)",
                "XmlDocumentation": "",
                "StartLine": 20
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer} : analyzers": "",
                  "T:System.String : display": "",
                  "T:System.String : fullPath": ""
                },
                "Content": "public AnalyzerImageReference(ImmutableArray<DiagnosticAnalyzer> analyzers, string fullPath = null, string display = null)",
                "XmlDocumentation": "",
                "StartLine": 20
              },
              "Id": "M:Microsoft.CodeAnalysis.Diagnostics.AnalyzerImageReference.#ctor(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer},System.String,System.String)",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerImageReference",
              "XmlDocumentation": ""
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\DiagnosticAnalyzer\\AnalyzerImageReference.cs",
          "InheritanceHierarchy": [
            "T:System.Object",
            "T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference"
          ],
          "Syntax": {
            "Content": "public sealed class AnalyzerImageReference",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerImageReference\">\r\n    <summary>\r\n    Represents an in-memory analyzer reference image.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerImageReference",
          "Parent": "N:Microsoft.CodeAnalysis.Diagnostics",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerImageReference\">\r\n    <summary>\r\n    Represents an in-memory analyzer reference image.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.AdditionalText} : additionalFiles": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions": ""
                },
                "Content": "public AnalyzerOptions WithAdditionalFiles(ImmutableArray<AdditionalText> additionalFiles)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions.WithAdditionalFiles(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.AdditionalText})\">\r\n    <summary>\r\n    Returns analyzer options with the given <paramref name=\"additionalFiles\"/>.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 30
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.AdditionalText} : additionalFiles": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions": ""
                },
                "Content": "public AnalyzerOptions WithAdditionalFiles(ImmutableArray<AdditionalText> additionalFiles)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions.WithAdditionalFiles(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.AdditionalText})\">\r\n    <summary>\r\n    Returns analyzer options with the given <paramref name=\"additionalFiles\"/>.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 30
              },
              "Id": "M:Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions.WithAdditionalFiles(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.AdditionalText})",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions.WithAdditionalFiles(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.AdditionalText})\">\r\n    <summary>\r\n    Returns analyzer options with the given <paramref name=\"additionalFiles\"/>.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.AdditionalText}",
                "Content": "public ImmutableArray<AdditionalText> AdditionalFiles",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions.AdditionalFiles\">\r\n    <summary>\r\n    A set of additional non-code text files that can be used by analyzers.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 16
              },
              "Syntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.AdditionalText}",
                "Content": "public ImmutableArray<AdditionalText> AdditionalFiles",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions.AdditionalFiles\">\r\n    <summary>\r\n    A set of additional non-code text files that can be used by analyzers.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 16
              },
              "Id": "P:Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions.AdditionalFiles",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions.AdditionalFiles\">\r\n    <summary>\r\n    A set of additional non-code text files that can be used by analyzers.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Constructors": [
            {
              "ConstructorSyntax": {
                "Parameters": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.AdditionalText} : additionalFiles": ""
                },
                "Content": "public AnalyzerOptions(ImmutableArray<AdditionalText> additionalFiles)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions.#ctor(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.AdditionalText})\">\r\n    <summary>\r\n    Creates analyzer options to be passed to <see cref=\"T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer\"/>.\r\n    </summary>\r\n    <param name=\"additionalFiles\">A set of additional non-code text files that can be used by analyzers.</param>\r\n</member>\r\n",
                "StartLine": 22
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.AdditionalText} : additionalFiles": ""
                },
                "Content": "public AnalyzerOptions(ImmutableArray<AdditionalText> additionalFiles)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions.#ctor(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.AdditionalText})\">\r\n    <summary>\r\n    Creates analyzer options to be passed to <see cref=\"T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer\"/>.\r\n    </summary>\r\n    <param name=\"additionalFiles\">A set of additional non-code text files that can be used by analyzers.</param>\r\n</member>\r\n",
                "StartLine": 22
              },
              "Id": "M:Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions.#ctor(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.AdditionalText})",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions.#ctor(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.AdditionalText})\">\r\n    <summary>\r\n    Creates analyzer options to be passed to <see cref=\"T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer\"/>.\r\n    </summary>\r\n    <param name=\"additionalFiles\">A set of additional non-code text files that can be used by analyzers.</param>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\DiagnosticAnalyzer\\AnalyzerOptions.cs",
          "InheritanceHierarchy": [
            "T:System.Object"
          ],
          "Syntax": {
            "Content": "public class AnalyzerOptions",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions\">\r\n    <summary>\r\n    Options passed to <see cref=\"T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer\"/>.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions",
          "Parent": "N:Microsoft.CodeAnalysis.Diagnostics",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions\">\r\n    <summary>\r\n    Options passed to <see cref=\"T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer\"/>.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.String : language": ""
                },
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer}": ""
                },
                "Content": "public abstract ImmutableArray<DiagnosticAnalyzer> GetAnalyzers(string language);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference.GetAnalyzers(System.String)\">\r\n    <summary>\r\n    Gets all the diagnostic analyzers defined in this assembly reference for the given <paramref name=\"language\"/>.\r\n    </summary>\r\n    <param name=\"language\">Language name.</param>\r\n</member>\r\n",
                "StartLine": 52
              },
              "Syntax": {
                "Parameters": {
                  "T:System.String : language": ""
                },
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer}": ""
                },
                "Content": "public abstract ImmutableArray<DiagnosticAnalyzer> GetAnalyzers(string language);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference.GetAnalyzers(System.String)\">\r\n    <summary>\r\n    Gets all the diagnostic analyzers defined in this assembly reference for the given <paramref name=\"language\"/>.\r\n    </summary>\r\n    <param name=\"language\">Language name.</param>\r\n</member>\r\n",
                "StartLine": 52
              },
              "Id": "M:Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference.GetAnalyzers(System.String)",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference.GetAnalyzers(System.String)\">\r\n    <summary>\r\n    Gets all the diagnostic analyzers defined in this assembly reference for the given <paramref name=\"language\"/>.\r\n    </summary>\r\n    <param name=\"language\">Language name.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer}": ""
                },
                "Content": "public abstract ImmutableArray<DiagnosticAnalyzer> GetAnalyzersForAllLanguages();",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference.GetAnalyzersForAllLanguages\">\r\n    <summary>\r\n    Gets all the diagnostic analyzers defined in this assembly reference, irrespective of the language supported by the analyzer.\r\n    Use this method only if you need all the analyzers defined in the assembly, without a language context.\r\n    In most instances, either the analyzer reference is associated with a project or is being queried for analyzers in a particular language context.\r\n    If so, use <see cref=\"M:Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference.GetAnalyzers(System.String)\"/> method.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 46
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer}": ""
                },
                "Content": "public abstract ImmutableArray<DiagnosticAnalyzer> GetAnalyzersForAllLanguages();",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference.GetAnalyzersForAllLanguages\">\r\n    <summary>\r\n    Gets all the diagnostic analyzers defined in this assembly reference, irrespective of the language supported by the analyzer.\r\n    Use this method only if you need all the analyzers defined in the assembly, without a language context.\r\n    In most instances, either the analyzer reference is associated with a project or is being queried for analyzers in a particular language context.\r\n    If so, use <see cref=\"M:Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference.GetAnalyzers(System.String)\"/> method.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 46
              },
              "Id": "M:Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference.GetAnalyzersForAllLanguages",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference.GetAnalyzersForAllLanguages\">\r\n    <summary>\r\n    Gets all the diagnostic analyzers defined in this assembly reference, irrespective of the language supported by the analyzer.\r\n    Use this method only if you need all the analyzers defined in the assembly, without a language context.\r\n    In most instances, either the analyzer reference is associated with a project or is being queried for analyzers in a particular language context.\r\n    If so, use <see cref=\"M:Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference.GetAnalyzers(System.String)\"/> method.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:System.String",
                "Content": "public virtual string Display",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference.Display\">\r\n    <summary>\r\n    Path or name used in error messages to identity the reference.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 27
              },
              "Syntax": {
                "PropertyType": "T:System.String",
                "Content": "public virtual string Display",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference.Display\">\r\n    <summary>\r\n    Path or name used in error messages to identity the reference.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 27
              },
              "Id": "P:Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference.Display",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference.Display\">\r\n    <summary>\r\n    Path or name used in error messages to identity the reference.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.String",
                "Content": "public abstract string FullPath",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference.FullPath\">\r\n    <summary>\r\n    Full path describing the location of the analyzer reference, or null if the reference has no location.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 22
              },
              "Syntax": {
                "PropertyType": "T:System.String",
                "Content": "public abstract string FullPath",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference.FullPath\">\r\n    <summary>\r\n    Full path describing the location of the analyzer reference, or null if the reference has no location.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 22
              },
              "Id": "P:Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference.FullPath",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference.FullPath\">\r\n    <summary>\r\n    Full path describing the location of the analyzer reference, or null if the reference has no location.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public virtual bool IsUnresolved",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference.IsUnresolved\">\r\n    <summary>\r\n    Returns true if this reference is an unresolved reference.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 35
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public virtual bool IsUnresolved",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference.IsUnresolved\">\r\n    <summary>\r\n    Returns true if this reference is an unresolved reference.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 35
              },
              "Id": "P:Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference.IsUnresolved",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference.IsUnresolved\">\r\n    <summary>\r\n    Returns true if this reference is an unresolved reference.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Constructors": [
            {
              "ConstructorSyntax": {
                "Parameters": {},
                "Content": "protected AnalyzerReference()",
                "XmlDocumentation": "",
                "StartLine": 15
              },
              "Syntax": {
                "Parameters": {},
                "Content": "protected AnalyzerReference()",
                "XmlDocumentation": "",
                "StartLine": 15
              },
              "Id": "M:Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference.#ctor",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference",
              "XmlDocumentation": ""
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\DiagnosticAnalyzer\\AnalyzerReference.cs",
          "InheritanceHierarchy": [
            "T:System.Object"
          ],
          "Syntax": {
            "Content": "public abstract class AnalyzerReference",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference\">\r\n    <summary>\r\n    Represents an analyzer assembly reference that contains diagnostic analyzers.\r\n    </summary>\r\n    <remarks>\r\n    Represents a logical location of the analyzer reference, not the content of the reference. \r\n    The content might change in time. A snapshot is taken when the compiler queries the reference for its analyzers.\r\n    </remarks>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference",
          "Parent": "N:Microsoft.CodeAnalysis.Diagnostics",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference\">\r\n    <summary>\r\n    Represents an analyzer assembly reference that contains diagnostic analyzers.\r\n    </summary>\r\n    <remarks>\r\n    Represents a logical location of the analyzer reference, not the content of the reference. \r\n    The content might change in time. A snapshot is taken when the compiler queries the reference for its analyzers.\r\n    </remarks>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Action{Microsoft.CodeAnalysis.Diagnostics.CodeBlockEndAnalysisContext} : action": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public abstract void RegisterCodeBlockEndAction(Action<CodeBlockEndAnalysisContext> action);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1.RegisterCodeBlockEndAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.CodeBlockEndAnalysisContext})\">\r\n    <summary>\r\n    Register an action to be executed at the end of semantic analysis of a method body or an expression appearing outside a method body.\r\n    A code block end action reports <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s about code blocks.\r\n    </summary>\r\n    <param name=\"action\">Action to be executed at the end of semantic analysis of a code block.</param>\r\n</member>\r\n",
                "StartLine": 476
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Action{Microsoft.CodeAnalysis.Diagnostics.CodeBlockEndAnalysisContext} : action": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public abstract void RegisterCodeBlockEndAction(Action<CodeBlockEndAnalysisContext> action);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1.RegisterCodeBlockEndAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.CodeBlockEndAnalysisContext})\">\r\n    <summary>\r\n    Register an action to be executed at the end of semantic analysis of a method body or an expression appearing outside a method body.\r\n    A code block end action reports <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s about code blocks.\r\n    </summary>\r\n    <param name=\"action\">Action to be executed at the end of semantic analysis of a code block.</param>\r\n</member>\r\n",
                "StartLine": 476
              },
              "Id": "M:Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1.RegisterCodeBlockEndAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.CodeBlockEndAnalysisContext})",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1.RegisterCodeBlockEndAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.CodeBlockEndAnalysisContext})\">\r\n    <summary>\r\n    Register an action to be executed at the end of semantic analysis of a method body or an expression appearing outside a method body.\r\n    A code block end action reports <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s about code blocks.\r\n    </summary>\r\n    <param name=\"action\">Action to be executed at the end of semantic analysis of a code block.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Action{Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext} : action": "",
                  "T:System.Array : syntaxKinds": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public void RegisterSyntaxNodeAction(Action<SyntaxNodeAnalysisContext> action, params TLanguageKindEnum[] syntaxKinds)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1.RegisterSyntaxNodeAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext},`0[])\">\r\n    <summary>\r\n    Register an action to be executed at completion of semantic analysis of a <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/> with an appropriate Kind.\r\n    A syntax node action can report <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s about <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/>s, and can also collect\r\n    state information to be used by other syntax node actions or code block end actions.\r\n    </summary>\r\n    <param name=\"action\">Action to be executed at completion of semantic analysis of a <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/>.</param>\r\n    <param name=\"syntaxKinds\">Action will be executed only if a <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/>'s Kind matches one of the syntax kind values.</param>\r\n</member>\r\n",
                "StartLine": 485
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Action{Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext} : action": "",
                  "T:System.Array : syntaxKinds": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public void RegisterSyntaxNodeAction(Action<SyntaxNodeAnalysisContext> action, params TLanguageKindEnum[] syntaxKinds)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1.RegisterSyntaxNodeAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext},`0[])\">\r\n    <summary>\r\n    Register an action to be executed at completion of semantic analysis of a <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/> with an appropriate Kind.\r\n    A syntax node action can report <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s about <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/>s, and can also collect\r\n    state information to be used by other syntax node actions or code block end actions.\r\n    </summary>\r\n    <param name=\"action\">Action to be executed at completion of semantic analysis of a <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/>.</param>\r\n    <param name=\"syntaxKinds\">Action will be executed only if a <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/>'s Kind matches one of the syntax kind values.</param>\r\n</member>\r\n",
                "StartLine": 485
              },
              "Id": "M:Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1.RegisterSyntaxNodeAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext},`0[])",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1.RegisterSyntaxNodeAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext},`0[])\">\r\n    <summary>\r\n    Register an action to be executed at completion of semantic analysis of a <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/> with an appropriate Kind.\r\n    A syntax node action can report <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s about <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/>s, and can also collect\r\n    state information to be used by other syntax node actions or code block end actions.\r\n    </summary>\r\n    <param name=\"action\">Action to be executed at completion of semantic analysis of a <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/>.</param>\r\n    <param name=\"syntaxKinds\">Action will be executed only if a <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/>'s Kind matches one of the syntax kind values.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Action{Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext} : action": "",
                  "T:System.Collections.Immutable.ImmutableArray{`0} : syntaxKinds": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public abstract void RegisterSyntaxNodeAction(Action<SyntaxNodeAnalysisContext> action, ImmutableArray<TLanguageKindEnum> syntaxKinds);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1.RegisterSyntaxNodeAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext},System.Collections.Immutable.ImmutableArray{`0})\">\r\n    <summary>\r\n    Register an action to be executed at completion of semantic analysis of a <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/> with an appropriate Kind.\r\n    A syntax node action can report <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s about <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/>s, and can also collect\r\n    state information to be used by other syntax node actions or code block end actions.\r\n    </summary>\r\n    <param name=\"action\">Action to be executed at completion of semantic analysis of a <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/>.</param>\r\n    <param name=\"syntaxKinds\">Action will be executed only if a <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/>'s Kind matches one of the syntax kind values.</param>\r\n</member>\r\n",
                "StartLine": 497
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Action{Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext} : action": "",
                  "T:System.Collections.Immutable.ImmutableArray{`0} : syntaxKinds": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public abstract void RegisterSyntaxNodeAction(Action<SyntaxNodeAnalysisContext> action, ImmutableArray<TLanguageKindEnum> syntaxKinds);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1.RegisterSyntaxNodeAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext},System.Collections.Immutable.ImmutableArray{`0})\">\r\n    <summary>\r\n    Register an action to be executed at completion of semantic analysis of a <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/> with an appropriate Kind.\r\n    A syntax node action can report <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s about <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/>s, and can also collect\r\n    state information to be used by other syntax node actions or code block end actions.\r\n    </summary>\r\n    <param name=\"action\">Action to be executed at completion of semantic analysis of a <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/>.</param>\r\n    <param name=\"syntaxKinds\">Action will be executed only if a <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/>'s Kind matches one of the syntax kind values.</param>\r\n</member>\r\n",
                "StartLine": 497
              },
              "Id": "M:Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1.RegisterSyntaxNodeAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext},System.Collections.Immutable.ImmutableArray{`0})",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1.RegisterSyntaxNodeAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext},System.Collections.Immutable.ImmutableArray{`0})\">\r\n    <summary>\r\n    Register an action to be executed at completion of semantic analysis of a <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/> with an appropriate Kind.\r\n    A syntax node action can report <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s about <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/>s, and can also collect\r\n    state information to be used by other syntax node actions or code block end actions.\r\n    </summary>\r\n    <param name=\"action\">Action to be executed at completion of semantic analysis of a <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/>.</param>\r\n    <param name=\"syntaxKinds\">Action will be executed only if a <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/>'s Kind matches one of the syntax kind values.</param>\r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Threading.CancellationToken",
                "Content": "public CancellationToken CancellationToken",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1.CancellationToken\">\r\n    <summary>\r\n    Token to check for requested cancellation of the analysis.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 460
              },
              "Syntax": {
                "PropertyType": "T:System.Threading.CancellationToken",
                "Content": "public CancellationToken CancellationToken",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1.CancellationToken\">\r\n    <summary>\r\n    Token to check for requested cancellation of the analysis.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 460
              },
              "Id": "P:Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1.CancellationToken",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1.CancellationToken\">\r\n    <summary>\r\n    Token to check for requested cancellation of the analysis.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SyntaxNode",
                "Content": "public SyntaxNode CodeBlock",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1.CodeBlock\">\r\n    <summary>\r\n    Method body or expression subjext to analysis.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 440
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SyntaxNode",
                "Content": "public SyntaxNode CodeBlock",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1.CodeBlock\">\r\n    <summary>\r\n    Method body or expression subjext to analysis.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 440
              },
              "Id": "P:Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1.CodeBlock",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1.CodeBlock\">\r\n    <summary>\r\n    Method body or expression subjext to analysis.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions",
                "Content": "public AnalyzerOptions Options",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1.Options\">\r\n    <summary>\r\n    Options specified for the analysis.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 455
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions",
                "Content": "public AnalyzerOptions Options",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1.Options\">\r\n    <summary>\r\n    Options specified for the analysis.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 455
              },
              "Id": "P:Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1.Options",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1.Options\">\r\n    <summary>\r\n    Options specified for the analysis.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.ISymbol",
                "Content": "public ISymbol OwningSymbol",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1.OwningSymbol\">\r\n    <summary>\r\n    <see cref=\"T:Microsoft.CodeAnalysis.ISymbol\"/> for which the code block provides a definition or value.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 445
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.ISymbol",
                "Content": "public ISymbol OwningSymbol",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1.OwningSymbol\">\r\n    <summary>\r\n    <see cref=\"T:Microsoft.CodeAnalysis.ISymbol\"/> for which the code block provides a definition or value.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 445
              },
              "Id": "P:Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1.OwningSymbol",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1.OwningSymbol\">\r\n    <summary>\r\n    <see cref=\"T:Microsoft.CodeAnalysis.ISymbol\"/> for which the code block provides a definition or value.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SemanticModel",
                "Content": "public SemanticModel SemanticModel",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1.SemanticModel\">\r\n    <summary>\r\n    <see cref=\"T:Microsoft.CodeAnalysis.SemanticModel\"/> that can provide semantic information about the <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/>s in the code block.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 450
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SemanticModel",
                "Content": "public SemanticModel SemanticModel",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1.SemanticModel\">\r\n    <summary>\r\n    <see cref=\"T:Microsoft.CodeAnalysis.SemanticModel\"/> that can provide semantic information about the <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/>s in the code block.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 450
              },
              "Id": "P:Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1.SemanticModel",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1.SemanticModel\">\r\n    <summary>\r\n    <see cref=\"T:Microsoft.CodeAnalysis.SemanticModel\"/> that can provide semantic information about the <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/>s in the code block.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Constructors": [
            {
              "ConstructorSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions : options": "",
                  "T:Microsoft.CodeAnalysis.ISymbol : owningSymbol": "",
                  "T:Microsoft.CodeAnalysis.SemanticModel : semanticModel": "",
                  "T:Microsoft.CodeAnalysis.SyntaxNode : codeBlock": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Content": "protected CodeBlockStartAnalysisContext(SyntaxNode codeBlock, ISymbol owningSymbol, SemanticModel semanticModel, AnalyzerOptions options, CancellationToken cancellationToken)",
                "XmlDocumentation": "",
                "StartLine": 462
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions : options": "",
                  "T:Microsoft.CodeAnalysis.ISymbol : owningSymbol": "",
                  "T:Microsoft.CodeAnalysis.SemanticModel : semanticModel": "",
                  "T:Microsoft.CodeAnalysis.SyntaxNode : codeBlock": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Content": "protected CodeBlockStartAnalysisContext(SyntaxNode codeBlock, ISymbol owningSymbol, SemanticModel semanticModel, AnalyzerOptions options, CancellationToken cancellationToken)",
                "XmlDocumentation": "",
                "StartLine": 462
              },
              "Id": "M:Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1.#ctor(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions,System.Threading.CancellationToken)",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1",
              "XmlDocumentation": ""
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\DiagnosticAnalyzer\\DiagnosticAnalysisContext.cs",
          "InheritanceHierarchy": [
            "T:System.Object"
          ],
          "Syntax": {
            "Content": "public abstract class CodeBlockStartAnalysisContext<TLanguageKindEnum>\r\n    where TLanguageKindEnum : struct",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1\">\r\n    <summary>\r\n    Context for a code block start action.\r\n    A code block start action can use a <see cref=\"T:Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1\"/> to register actions to be executed\r\n    at any of:\r\n    <list type=\"bullet\">\r\n    <item>\r\n    <description>completion of semantic analysis of a method body or an expression appearing outside a method body, or</description>\r\n    </item>\r\n    <item>\r\n    <description>completion of semantic analysis of a syntax node.</description>\r\n    </item>\r\n    </list>\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1",
          "Parent": "N:Microsoft.CodeAnalysis.Diagnostics",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1\">\r\n    <summary>\r\n    Context for a code block start action.\r\n    A code block start action can use a <see cref=\"T:Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext`1\"/> to register actions to be executed\r\n    at any of:\r\n    <list type=\"bullet\">\r\n    <item>\r\n    <description>completion of semantic analysis of a method body or an expression appearing outside a method body, or</description>\r\n    </item>\r\n    <item>\r\n    <description>completion of semantic analysis of a syntax node.</description>\r\n    </item>\r\n    </list>\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Action{Microsoft.CodeAnalysis.Diagnostics.CodeBlockEndAnalysisContext} : action": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public abstract void RegisterCodeBlockEndAction(Action<CodeBlockEndAnalysisContext> action);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.RegisterCodeBlockEndAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.CodeBlockEndAnalysisContext})\">\r\n    <summary>\r\n    Register an action to be executed at the end of semantic analysis of a method body or an expression appearing outside a method body.\r\n    A code block end action reports <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s about code blocks.\r\n    </summary>\r\n    <param name=\"action\">Action to be executed at the end of semantic analysis of a code block.</param>\r\n</member>\r\n",
                "StartLine": 232
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Action{Microsoft.CodeAnalysis.Diagnostics.CodeBlockEndAnalysisContext} : action": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public abstract void RegisterCodeBlockEndAction(Action<CodeBlockEndAnalysisContext> action);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.RegisterCodeBlockEndAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.CodeBlockEndAnalysisContext})\">\r\n    <summary>\r\n    Register an action to be executed at the end of semantic analysis of a method body or an expression appearing outside a method body.\r\n    A code block end action reports <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s about code blocks.\r\n    </summary>\r\n    <param name=\"action\">Action to be executed at the end of semantic analysis of a code block.</param>\r\n</member>\r\n",
                "StartLine": 232
              },
              "Id": "M:Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.RegisterCodeBlockEndAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.CodeBlockEndAnalysisContext})",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.RegisterCodeBlockEndAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.CodeBlockEndAnalysisContext})\">\r\n    <summary>\r\n    Register an action to be executed at the end of semantic analysis of a method body or an expression appearing outside a method body.\r\n    A code block end action reports <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s about code blocks.\r\n    </summary>\r\n    <param name=\"action\">Action to be executed at the end of semantic analysis of a code block.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Action{Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext{``0}} : action": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public abstract void RegisterCodeBlockStartAction<TLanguageKindEnum>(Action<CodeBlockStartAnalysisContext<TLanguageKindEnum>> action)where TLanguageKindEnum : struct;",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.RegisterCodeBlockStartAction``1(System.Action{Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext{``0}})\">\r\n    <summary>\r\n    Register an action to be executed at the start of semantic analysis of a method body or an expression appearing outside a method body.\r\n    A code block start action can register other actions and/or collect state information to be used in diagnostic analysis,\r\n    but cannot itself report any <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s.\r\n    </summary>\r\n    <typeparam name=\"TLanguageKindEnum\">Enum type giving the syntax node kinds of the source language for which the action applies.</typeparam>\r\n    <param name=\"action\">Action to be executed at the start of semantic analysis of a code block.</param>\r\n</member>\r\n",
                "StartLine": 225
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Action{Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext{``0}} : action": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public abstract void RegisterCodeBlockStartAction<TLanguageKindEnum>(Action<CodeBlockStartAnalysisContext<TLanguageKindEnum>> action)where TLanguageKindEnum : struct;",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.RegisterCodeBlockStartAction``1(System.Action{Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext{``0}})\">\r\n    <summary>\r\n    Register an action to be executed at the start of semantic analysis of a method body or an expression appearing outside a method body.\r\n    A code block start action can register other actions and/or collect state information to be used in diagnostic analysis,\r\n    but cannot itself report any <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s.\r\n    </summary>\r\n    <typeparam name=\"TLanguageKindEnum\">Enum type giving the syntax node kinds of the source language for which the action applies.</typeparam>\r\n    <param name=\"action\">Action to be executed at the start of semantic analysis of a code block.</param>\r\n</member>\r\n",
                "StartLine": 225
              },
              "Id": "M:Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.RegisterCodeBlockStartAction``1(System.Action{Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext{``0}})",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.RegisterCodeBlockStartAction``1(System.Action{Microsoft.CodeAnalysis.Diagnostics.CodeBlockStartAnalysisContext{``0}})\">\r\n    <summary>\r\n    Register an action to be executed at the start of semantic analysis of a method body or an expression appearing outside a method body.\r\n    A code block start action can register other actions and/or collect state information to be used in diagnostic analysis,\r\n    but cannot itself report any <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s.\r\n    </summary>\r\n    <typeparam name=\"TLanguageKindEnum\">Enum type giving the syntax node kinds of the source language for which the action applies.</typeparam>\r\n    <param name=\"action\">Action to be executed at the start of semantic analysis of a code block.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Action{Microsoft.CodeAnalysis.Diagnostics.CompilationEndAnalysisContext} : action": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public abstract void RegisterCompilationEndAction(Action<CompilationEndAnalysisContext> action);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.RegisterCompilationEndAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.CompilationEndAnalysisContext})\">\r\n    <summary>\r\n    Register an action to be executed at compilation end.\r\n    A compilation end action reports <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s about the <see cref=\"T:Microsoft.CodeAnalysis.Compilation\"/>.\r\n    </summary>\r\n    <param name=\"action\">Action to be executed at compilation end.</param>\r\n</member>\r\n",
                "StartLine": 189
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Action{Microsoft.CodeAnalysis.Diagnostics.CompilationEndAnalysisContext} : action": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public abstract void RegisterCompilationEndAction(Action<CompilationEndAnalysisContext> action);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.RegisterCompilationEndAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.CompilationEndAnalysisContext})\">\r\n    <summary>\r\n    Register an action to be executed at compilation end.\r\n    A compilation end action reports <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s about the <see cref=\"T:Microsoft.CodeAnalysis.Compilation\"/>.\r\n    </summary>\r\n    <param name=\"action\">Action to be executed at compilation end.</param>\r\n</member>\r\n",
                "StartLine": 189
              },
              "Id": "M:Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.RegisterCompilationEndAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.CompilationEndAnalysisContext})",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.RegisterCompilationEndAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.CompilationEndAnalysisContext})\">\r\n    <summary>\r\n    Register an action to be executed at compilation end.\r\n    A compilation end action reports <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s about the <see cref=\"T:Microsoft.CodeAnalysis.Compilation\"/>.\r\n    </summary>\r\n    <param name=\"action\">Action to be executed at compilation end.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Action{Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext} : action": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public abstract void RegisterSemanticModelAction(Action<SemanticModelAnalysisContext> action);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.RegisterSemanticModelAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext})\">\r\n    <summary>\r\n    Register an action to be executed at completion of semantic analysis of a document,\r\n    which will operate on the <see cref=\"T:Microsoft.CodeAnalysis.SemanticModel\"/> of the document. A semantic model action\r\n    reports <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s about the model.\r\n    </summary>\r\n    <param name=\"action\">Action to be executed for a document's <see cref=\"T:Microsoft.CodeAnalysis.SemanticModel\"/>.</param>\r\n</member>\r\n",
                "StartLine": 197
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Action{Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext} : action": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public abstract void RegisterSemanticModelAction(Action<SemanticModelAnalysisContext> action);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.RegisterSemanticModelAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext})\">\r\n    <summary>\r\n    Register an action to be executed at completion of semantic analysis of a document,\r\n    which will operate on the <see cref=\"T:Microsoft.CodeAnalysis.SemanticModel\"/> of the document. A semantic model action\r\n    reports <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s about the model.\r\n    </summary>\r\n    <param name=\"action\">Action to be executed for a document's <see cref=\"T:Microsoft.CodeAnalysis.SemanticModel\"/>.</param>\r\n</member>\r\n",
                "StartLine": 197
              },
              "Id": "M:Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.RegisterSemanticModelAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext})",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.RegisterSemanticModelAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext})\">\r\n    <summary>\r\n    Register an action to be executed at completion of semantic analysis of a document,\r\n    which will operate on the <see cref=\"T:Microsoft.CodeAnalysis.SemanticModel\"/> of the document. A semantic model action\r\n    reports <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s about the model.\r\n    </summary>\r\n    <param name=\"action\">Action to be executed for a document's <see cref=\"T:Microsoft.CodeAnalysis.SemanticModel\"/>.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Action{Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext} : action": "",
                  "T:System.Array : symbolKinds": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public void RegisterSymbolAction(Action<SymbolAnalysisContext> action, params SymbolKind[] symbolKinds)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.RegisterSymbolAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext},Microsoft.CodeAnalysis.SymbolKind[])\">\r\n    <summary>\r\n    Register an action to be executed at completion of semantic analysis of an <see cref=\"T:Microsoft.CodeAnalysis.ISymbol\"/> with an appropriate Kind.>\r\n    A symbol action reports <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s about <see cref=\"T:Microsoft.CodeAnalysis.ISymbol\"/>s.\r\n    </summary>\r\n    <param name=\"action\">Action to be executed for an <see cref=\"T:Microsoft.CodeAnalysis.ISymbol\"/>.</param>\r\n    <param name=\"symbolKinds\">Action will be executed only if an <see cref=\"T:Microsoft.CodeAnalysis.ISymbol\"/>'s Kind matches one of the <see cref=\"T:Microsoft.CodeAnalysis.SymbolKind\"/> values.</param>\r\n</member>\r\n",
                "StartLine": 205
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Action{Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext} : action": "",
                  "T:System.Array : symbolKinds": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public void RegisterSymbolAction(Action<SymbolAnalysisContext> action, params SymbolKind[] symbolKinds)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.RegisterSymbolAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext},Microsoft.CodeAnalysis.SymbolKind[])\">\r\n    <summary>\r\n    Register an action to be executed at completion of semantic analysis of an <see cref=\"T:Microsoft.CodeAnalysis.ISymbol\"/> with an appropriate Kind.>\r\n    A symbol action reports <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s about <see cref=\"T:Microsoft.CodeAnalysis.ISymbol\"/>s.\r\n    </summary>\r\n    <param name=\"action\">Action to be executed for an <see cref=\"T:Microsoft.CodeAnalysis.ISymbol\"/>.</param>\r\n    <param name=\"symbolKinds\">Action will be executed only if an <see cref=\"T:Microsoft.CodeAnalysis.ISymbol\"/>'s Kind matches one of the <see cref=\"T:Microsoft.CodeAnalysis.SymbolKind\"/> values.</param>\r\n</member>\r\n",
                "StartLine": 205
              },
              "Id": "M:Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.RegisterSymbolAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext},Microsoft.CodeAnalysis.SymbolKind[])",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.RegisterSymbolAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext},Microsoft.CodeAnalysis.SymbolKind[])\">\r\n    <summary>\r\n    Register an action to be executed at completion of semantic analysis of an <see cref=\"T:Microsoft.CodeAnalysis.ISymbol\"/> with an appropriate Kind.>\r\n    A symbol action reports <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s about <see cref=\"T:Microsoft.CodeAnalysis.ISymbol\"/>s.\r\n    </summary>\r\n    <param name=\"action\">Action to be executed for an <see cref=\"T:Microsoft.CodeAnalysis.ISymbol\"/>.</param>\r\n    <param name=\"symbolKinds\">Action will be executed only if an <see cref=\"T:Microsoft.CodeAnalysis.ISymbol\"/>'s Kind matches one of the <see cref=\"T:Microsoft.CodeAnalysis.SymbolKind\"/> values.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Action{Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext} : action": "",
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.SymbolKind} : symbolKinds": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public abstract void RegisterSymbolAction(Action<SymbolAnalysisContext> action, ImmutableArray<SymbolKind> symbolKinds);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.RegisterSymbolAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext},System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.SymbolKind})\">\r\n    <summary>\r\n    Register an action to be executed at completion of semantic analysis of an <see cref=\"T:Microsoft.CodeAnalysis.ISymbol\"/> with an appropriate Kind.>\r\n    A symbol action reports <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s about <see cref=\"T:Microsoft.CodeAnalysis.ISymbol\"/>s.\r\n    </summary>\r\n    <param name=\"action\">Action to be executed for an <see cref=\"T:Microsoft.CodeAnalysis.ISymbol\"/>.</param>\r\n    <param name=\"symbolKinds\">Action will be executed only if an <see cref=\"T:Microsoft.CodeAnalysis.ISymbol\"/>'s Kind matches one of the <see cref=\"T:Microsoft.CodeAnalysis.SymbolKind\"/> values.</param>\r\n</member>\r\n",
                "StartLine": 216
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Action{Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext} : action": "",
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.SymbolKind} : symbolKinds": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public abstract void RegisterSymbolAction(Action<SymbolAnalysisContext> action, ImmutableArray<SymbolKind> symbolKinds);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.RegisterSymbolAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext},System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.SymbolKind})\">\r\n    <summary>\r\n    Register an action to be executed at completion of semantic analysis of an <see cref=\"T:Microsoft.CodeAnalysis.ISymbol\"/> with an appropriate Kind.>\r\n    A symbol action reports <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s about <see cref=\"T:Microsoft.CodeAnalysis.ISymbol\"/>s.\r\n    </summary>\r\n    <param name=\"action\">Action to be executed for an <see cref=\"T:Microsoft.CodeAnalysis.ISymbol\"/>.</param>\r\n    <param name=\"symbolKinds\">Action will be executed only if an <see cref=\"T:Microsoft.CodeAnalysis.ISymbol\"/>'s Kind matches one of the <see cref=\"T:Microsoft.CodeAnalysis.SymbolKind\"/> values.</param>\r\n</member>\r\n",
                "StartLine": 216
              },
              "Id": "M:Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.RegisterSymbolAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext},System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.SymbolKind})",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.RegisterSymbolAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext},System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.SymbolKind})\">\r\n    <summary>\r\n    Register an action to be executed at completion of semantic analysis of an <see cref=\"T:Microsoft.CodeAnalysis.ISymbol\"/> with an appropriate Kind.>\r\n    A symbol action reports <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s about <see cref=\"T:Microsoft.CodeAnalysis.ISymbol\"/>s.\r\n    </summary>\r\n    <param name=\"action\">Action to be executed for an <see cref=\"T:Microsoft.CodeAnalysis.ISymbol\"/>.</param>\r\n    <param name=\"symbolKinds\">Action will be executed only if an <see cref=\"T:Microsoft.CodeAnalysis.ISymbol\"/>'s Kind matches one of the <see cref=\"T:Microsoft.CodeAnalysis.SymbolKind\"/> values.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Action{Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext} : action": "",
                  "T:System.Array : syntaxKinds": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public void RegisterSyntaxNodeAction<TLanguageKindEnum>(Action<SyntaxNodeAnalysisContext> action, params TLanguageKindEnum[] syntaxKinds)where TLanguageKindEnum : struct",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.RegisterSyntaxNodeAction``1(System.Action{Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext},``0[])\">\r\n    <summary>\r\n    Register an action to be executed at completion of semantic analysis of a <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/> with an appropriate Kind.\r\n    A syntax node action can report <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s about <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/>s, and can also collect\r\n    state information to be used by other syntax node actions or code block end actions.\r\n    </summary>\r\n    <typeparam name=\"TLanguageKindEnum\">Enum type giving the syntax node kinds of the source language for which the action applies.</typeparam>\r\n    <param name=\"action\">Action to be executed at completion of semantic analysis of a <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/>.</param>\r\n    <param name=\"syntaxKinds\">Action will be executed only if a <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/>'s Kind matches one of the syntax kind values.</param>\r\n</member>\r\n",
                "StartLine": 249
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Action{Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext} : action": "",
                  "T:System.Array : syntaxKinds": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public void RegisterSyntaxNodeAction<TLanguageKindEnum>(Action<SyntaxNodeAnalysisContext> action, params TLanguageKindEnum[] syntaxKinds)where TLanguageKindEnum : struct",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.RegisterSyntaxNodeAction``1(System.Action{Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext},``0[])\">\r\n    <summary>\r\n    Register an action to be executed at completion of semantic analysis of a <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/> with an appropriate Kind.\r\n    A syntax node action can report <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s about <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/>s, and can also collect\r\n    state information to be used by other syntax node actions or code block end actions.\r\n    </summary>\r\n    <typeparam name=\"TLanguageKindEnum\">Enum type giving the syntax node kinds of the source language for which the action applies.</typeparam>\r\n    <param name=\"action\">Action to be executed at completion of semantic analysis of a <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/>.</param>\r\n    <param name=\"syntaxKinds\">Action will be executed only if a <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/>'s Kind matches one of the syntax kind values.</param>\r\n</member>\r\n",
                "StartLine": 249
              },
              "Id": "M:Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.RegisterSyntaxNodeAction``1(System.Action{Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext},``0[])",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.RegisterSyntaxNodeAction``1(System.Action{Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext},``0[])\">\r\n    <summary>\r\n    Register an action to be executed at completion of semantic analysis of a <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/> with an appropriate Kind.\r\n    A syntax node action can report <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s about <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/>s, and can also collect\r\n    state information to be used by other syntax node actions or code block end actions.\r\n    </summary>\r\n    <typeparam name=\"TLanguageKindEnum\">Enum type giving the syntax node kinds of the source language for which the action applies.</typeparam>\r\n    <param name=\"action\">Action to be executed at completion of semantic analysis of a <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/>.</param>\r\n    <param name=\"syntaxKinds\">Action will be executed only if a <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/>'s Kind matches one of the syntax kind values.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Action{Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext} : action": "",
                  "T:System.Collections.Immutable.ImmutableArray{``0} : syntaxKinds": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public abstract void RegisterSyntaxNodeAction<TLanguageKindEnum>(Action<SyntaxNodeAnalysisContext> action, ImmutableArray<TLanguageKindEnum> syntaxKinds)where TLanguageKindEnum : struct;",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.RegisterSyntaxNodeAction``1(System.Action{Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext},System.Collections.Immutable.ImmutableArray{``0})\">\r\n    <summary>\r\n    Register an action to be executed at completion of semantic analysis of a <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/> with an appropriate Kind.\r\n    A syntax node action can report <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s about <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/>s, and can also collect\r\n    state information to be used by other syntax node actions or code block end actions.\r\n    </summary>\r\n    <typeparam name=\"TLanguageKindEnum\">Enum type giving the syntax node kinds of the source language for which the action applies.</typeparam>\r\n    <param name=\"action\">Action to be executed at completion of semantic analysis of a <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/>.</param>\r\n    <param name=\"syntaxKinds\">Action will be executed only if a <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/>'s Kind matches one of the syntax kind values.</param>\r\n</member>\r\n",
                "StartLine": 262
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Action{Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext} : action": "",
                  "T:System.Collections.Immutable.ImmutableArray{``0} : syntaxKinds": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public abstract void RegisterSyntaxNodeAction<TLanguageKindEnum>(Action<SyntaxNodeAnalysisContext> action, ImmutableArray<TLanguageKindEnum> syntaxKinds)where TLanguageKindEnum : struct;",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.RegisterSyntaxNodeAction``1(System.Action{Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext},System.Collections.Immutable.ImmutableArray{``0})\">\r\n    <summary>\r\n    Register an action to be executed at completion of semantic analysis of a <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/> with an appropriate Kind.\r\n    A syntax node action can report <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s about <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/>s, and can also collect\r\n    state information to be used by other syntax node actions or code block end actions.\r\n    </summary>\r\n    <typeparam name=\"TLanguageKindEnum\">Enum type giving the syntax node kinds of the source language for which the action applies.</typeparam>\r\n    <param name=\"action\">Action to be executed at completion of semantic analysis of a <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/>.</param>\r\n    <param name=\"syntaxKinds\">Action will be executed only if a <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/>'s Kind matches one of the syntax kind values.</param>\r\n</member>\r\n",
                "StartLine": 262
              },
              "Id": "M:Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.RegisterSyntaxNodeAction``1(System.Action{Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext},System.Collections.Immutable.ImmutableArray{``0})",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.RegisterSyntaxNodeAction``1(System.Action{Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext},System.Collections.Immutable.ImmutableArray{``0})\">\r\n    <summary>\r\n    Register an action to be executed at completion of semantic analysis of a <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/> with an appropriate Kind.\r\n    A syntax node action can report <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s about <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/>s, and can also collect\r\n    state information to be used by other syntax node actions or code block end actions.\r\n    </summary>\r\n    <typeparam name=\"TLanguageKindEnum\">Enum type giving the syntax node kinds of the source language for which the action applies.</typeparam>\r\n    <param name=\"action\">Action to be executed at completion of semantic analysis of a <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/>.</param>\r\n    <param name=\"syntaxKinds\">Action will be executed only if a <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/>'s Kind matches one of the syntax kind values.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Action{Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext} : action": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public abstract void RegisterSyntaxTreeAction(Action<SyntaxTreeAnalysisContext> action);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.RegisterSyntaxTreeAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext})\">\r\n    <summary>\r\n    Register an action to be executed at completion of parsing of a code document.\r\n    A syntax tree action reports <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s about the <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTree\"/> of a document.\r\n    </summary>\r\n    <param name=\"action\">Action to be executed at completion of parsing of a document.</param>\r\n</member>\r\n",
                "StartLine": 239
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Action{Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext} : action": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public abstract void RegisterSyntaxTreeAction(Action<SyntaxTreeAnalysisContext> action);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.RegisterSyntaxTreeAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext})\">\r\n    <summary>\r\n    Register an action to be executed at completion of parsing of a code document.\r\n    A syntax tree action reports <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s about the <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTree\"/> of a document.\r\n    </summary>\r\n    <param name=\"action\">Action to be executed at completion of parsing of a document.</param>\r\n</member>\r\n",
                "StartLine": 239
              },
              "Id": "M:Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.RegisterSyntaxTreeAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext})",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.RegisterSyntaxTreeAction(System.Action{Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext})\">\r\n    <summary>\r\n    Register an action to be executed at completion of parsing of a code document.\r\n    A syntax tree action reports <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s about the <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTree\"/> of a document.\r\n    </summary>\r\n    <param name=\"action\">Action to be executed at completion of parsing of a document.</param>\r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Threading.CancellationToken",
                "Content": "public CancellationToken CancellationToken",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.CancellationToken\">\r\n    <summary>\r\n    Token to check for requested cancellation of the analysis.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 175
              },
              "Syntax": {
                "PropertyType": "T:System.Threading.CancellationToken",
                "Content": "public CancellationToken CancellationToken",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.CancellationToken\">\r\n    <summary>\r\n    Token to check for requested cancellation of the analysis.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 175
              },
              "Id": "P:Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.CancellationToken",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.CancellationToken\">\r\n    <summary>\r\n    Token to check for requested cancellation of the analysis.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Compilation",
                "Content": "public Compilation Compilation",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.Compilation\">\r\n    <summary>\r\n    <see cref=\"T:Microsoft.CodeAnalysis.Compilation\"/> that is the subject of the analysis.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 165
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Compilation",
                "Content": "public Compilation Compilation",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.Compilation\">\r\n    <summary>\r\n    <see cref=\"T:Microsoft.CodeAnalysis.Compilation\"/> that is the subject of the analysis.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 165
              },
              "Id": "P:Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.Compilation",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.Compilation\">\r\n    <summary>\r\n    <see cref=\"T:Microsoft.CodeAnalysis.Compilation\"/> that is the subject of the analysis.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions",
                "Content": "public AnalyzerOptions Options",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.Options\">\r\n    <summary>\r\n    Options specified for the analysis.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 170
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions",
                "Content": "public AnalyzerOptions Options",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.Options\">\r\n    <summary>\r\n    Options specified for the analysis.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 170
              },
              "Id": "P:Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.Options",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.Options\">\r\n    <summary>\r\n    Options specified for the analysis.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Constructors": [
            {
              "ConstructorSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Compilation : compilation": "",
                  "T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions : options": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Content": "protected CompilationStartAnalysisContext(Compilation compilation, AnalyzerOptions options, CancellationToken cancellationToken)",
                "XmlDocumentation": "",
                "StartLine": 177
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Compilation : compilation": "",
                  "T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions : options": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Content": "protected CompilationStartAnalysisContext(Compilation compilation, AnalyzerOptions options, CancellationToken cancellationToken)",
                "XmlDocumentation": "",
                "StartLine": 177
              },
              "Id": "M:Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext.#ctor(Microsoft.CodeAnalysis.Compilation,Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions,System.Threading.CancellationToken)",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext",
              "XmlDocumentation": ""
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\DiagnosticAnalyzer\\DiagnosticAnalysisContext.cs",
          "InheritanceHierarchy": [
            "T:System.Object"
          ],
          "Syntax": {
            "Content": "public abstract class CompilationStartAnalysisContext",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext\">\r\n    <summary>\r\n    Context for a compilation start action.\r\n    A compilation start action can use a <see cref=\"T:Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext\"/> to register actions to be executed at any of:\r\n    <list type=\"bullet\">\r\n    <item>\r\n    <description>compilation end,</description>\r\n    </item>\r\n    <item>\r\n    <description>completion of parsing a code document,</description>\r\n    </item>\r\n    <item>\r\n    <description>completion of semantic analysis of a code document,</description>\r\n    </item>\r\n    <item>\r\n    <description>completion of semantic analysis of a symbol,</description>\r\n    </item>\r\n    <item>\r\n    <description>start of semantic analysis of a method body or an expression appearing outside a method body,</description>\r\n    </item>\r\n    <item>\r\n    <description>completion of semantic analysis of a method body or an expression appearing outside a method body, or</description>\r\n    </item>\r\n    <item>\r\n    <description>completion of semantic analysis of a syntax node.</description>\r\n    </item>\r\n    </list>\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext",
          "Parent": "N:Microsoft.CodeAnalysis.Diagnostics",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext\">\r\n    <summary>\r\n    Context for a compilation start action.\r\n    A compilation start action can use a <see cref=\"T:Microsoft.CodeAnalysis.Diagnostics.CompilationStartAnalysisContext\"/> to register actions to be executed at any of:\r\n    <list type=\"bullet\">\r\n    <item>\r\n    <description>compilation end,</description>\r\n    </item>\r\n    <item>\r\n    <description>completion of parsing a code document,</description>\r\n    </item>\r\n    <item>\r\n    <description>completion of semantic analysis of a code document,</description>\r\n    </item>\r\n    <item>\r\n    <description>completion of semantic analysis of a symbol,</description>\r\n    </item>\r\n    <item>\r\n    <description>start of semantic analysis of a method body or an expression appearing outside a method body,</description>\r\n    </item>\r\n    <item>\r\n    <description>completion of semantic analysis of a method body or an expression appearing outside a method body, or</description>\r\n    </item>\r\n    <item>\r\n    <description>completion of semantic analysis of a syntax node.</description>\r\n    </item>\r\n    </list>\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Threading.Tasks.Task{System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostic}}": ""
                },
                "Content": "public async Task<ImmutableArray<Diagnostic>> GetAllDiagnosticsAsync()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.GetAllDiagnosticsAsync\">\r\n    <summary>\r\n    Returns diagnostics produced by compilation and by diagnostic analyzers.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 49
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Threading.Tasks.Task{System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostic}}": ""
                },
                "Content": "public async Task<ImmutableArray<Diagnostic>> GetAllDiagnosticsAsync()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.GetAllDiagnosticsAsync\">\r\n    <summary>\r\n    Returns diagnostics produced by compilation and by diagnostic analyzers.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 49
              },
              "Id": "M:Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.GetAllDiagnosticsAsync",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.GetAllDiagnosticsAsync\">\r\n    <summary>\r\n    Returns diagnostics produced by compilation and by diagnostic analyzers.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Threading.Tasks.Task{System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostic}}": ""
                },
                "Content": "public async Task<ImmutableArray<Diagnostic>> GetAnalyzerDiagnosticsAsync()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.GetAnalyzerDiagnosticsAsync\">\r\n    <summary>\r\n    Returns diagnostics produced by diagnostic analyzers.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 37
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Threading.Tasks.Task{System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostic}}": ""
                },
                "Content": "public async Task<ImmutableArray<Diagnostic>> GetAnalyzerDiagnosticsAsync()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.GetAnalyzerDiagnosticsAsync\">\r\n    <summary>\r\n    Returns diagnostics produced by diagnostic analyzers.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 37
              },
              "Id": "M:Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.GetAnalyzerDiagnosticsAsync",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.GetAnalyzerDiagnosticsAsync\">\r\n    <summary>\r\n    Returns diagnostics produced by diagnostic analyzers.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Compilation : compilation": "",
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Diagnostic} : diagnostics": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Diagnostic}": ""
                },
                "Content": "public static IEnumerable<Diagnostic> GetEffectiveDiagnostics(IEnumerable<Diagnostic> diagnostics, Compilation compilation)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.GetEffectiveDiagnostics(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Diagnostic},Microsoft.CodeAnalysis.Compilation)\">\r\n    <summary>\r\n    Given a set of compiler or <see cref=\"T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer\"/> generated <paramref name=\"diagnostics\"/>, returns the effective diagnostics after applying the below filters:\r\n    1) <see cref=\"P:Microsoft.CodeAnalysis.CompilationOptions.SpecificDiagnosticOptions\"/> specified for the given <paramref name=\"compilation\"/>.\r\n    2) <see cref=\"P:Microsoft.CodeAnalysis.CompilationOptions.GeneralDiagnosticOption\"/> specified for the given <paramref name=\"compilation\"/>.\r\n    3) Diagnostic suppression through applied <see cref=\"T:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute\"/>.\r\n    4) Pragma directives for the given <paramref name=\"compilation\"/>.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 65
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Compilation : compilation": "",
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Diagnostic} : diagnostics": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Diagnostic}": ""
                },
                "Content": "public static IEnumerable<Diagnostic> GetEffectiveDiagnostics(IEnumerable<Diagnostic> diagnostics, Compilation compilation)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.GetEffectiveDiagnostics(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Diagnostic},Microsoft.CodeAnalysis.Compilation)\">\r\n    <summary>\r\n    Given a set of compiler or <see cref=\"T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer\"/> generated <paramref name=\"diagnostics\"/>, returns the effective diagnostics after applying the below filters:\r\n    1) <see cref=\"P:Microsoft.CodeAnalysis.CompilationOptions.SpecificDiagnosticOptions\"/> specified for the given <paramref name=\"compilation\"/>.\r\n    2) <see cref=\"P:Microsoft.CodeAnalysis.CompilationOptions.GeneralDiagnosticOption\"/> specified for the given <paramref name=\"compilation\"/>.\r\n    3) Diagnostic suppression through applied <see cref=\"T:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute\"/>.\r\n    4) Pragma directives for the given <paramref name=\"compilation\"/>.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 65
              },
              "Id": "M:Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.GetEffectiveDiagnostics(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Diagnostic},Microsoft.CodeAnalysis.Compilation)",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.GetEffectiveDiagnostics(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Diagnostic},Microsoft.CodeAnalysis.Compilation)\">\r\n    <summary>\r\n    Given a set of compiler or <see cref=\"T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer\"/> generated <paramref name=\"diagnostics\"/>, returns the effective diagnostics after applying the below filters:\r\n    1) <see cref=\"P:Microsoft.CodeAnalysis.CompilationOptions.SpecificDiagnosticOptions\"/> specified for the given <paramref name=\"compilation\"/>.\r\n    2) <see cref=\"P:Microsoft.CodeAnalysis.CompilationOptions.GeneralDiagnosticOption\"/> specified for the given <paramref name=\"compilation\"/>.\r\n    3) Diagnostic suppression through applied <see cref=\"T:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute\"/>.\r\n    4) Pragma directives for the given <paramref name=\"compilation\"/>.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.CompilationOptions : options": "",
                  "T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer : analyzer": "",
                  "T:System.Func{System.Exception,Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer,System.Boolean} : continueOnAnalyzerException": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public static bool IsDiagnosticAnalyzerSuppressed(DiagnosticAnalyzer analyzer, CompilationOptions options, Func<Exception, DiagnosticAnalyzer, bool> continueOnAnalyzerException)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.IsDiagnosticAnalyzerSuppressed(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer,Microsoft.CodeAnalysis.CompilationOptions,System.Func{System.Exception,Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer,System.Boolean})\">\r\n    <summary>\r\n    Returns true if all the diagnostics that can be produced by this analyzer are suppressed through options.\r\n    <paramref name=\"continueOnAnalyzerException\"/> says whether the caller would like the exception thrown by the analyzers to be handled or not. If true - Handles ; False - Not handled.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 95
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.CompilationOptions : options": "",
                  "T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer : analyzer": "",
                  "T:System.Func{System.Exception,Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer,System.Boolean} : continueOnAnalyzerException": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public static bool IsDiagnosticAnalyzerSuppressed(DiagnosticAnalyzer analyzer, CompilationOptions options, Func<Exception, DiagnosticAnalyzer, bool> continueOnAnalyzerException)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.IsDiagnosticAnalyzerSuppressed(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer,Microsoft.CodeAnalysis.CompilationOptions,System.Func{System.Exception,Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer,System.Boolean})\">\r\n    <summary>\r\n    Returns true if all the diagnostics that can be produced by this analyzer are suppressed through options.\r\n    <paramref name=\"continueOnAnalyzerException\"/> says whether the caller would like the exception thrown by the analyzers to be handled or not. If true - Handles ; False - Not handled.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 95
              },
              "Id": "M:Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.IsDiagnosticAnalyzerSuppressed(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer,Microsoft.CodeAnalysis.CompilationOptions,System.Func{System.Exception,Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer,System.Boolean})",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.IsDiagnosticAnalyzerSuppressed(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer,Microsoft.CodeAnalysis.CompilationOptions,System.Func{System.Exception,Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer,System.Boolean})\">\r\n    <summary>\r\n    Returns true if all the diagnostics that can be produced by this analyzer are suppressed through options.\r\n    <paramref name=\"continueOnAnalyzerException\"/> says whether the caller would like the exception thrown by the analyzers to be handled or not. If true - Handles ; False - Not handled.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Compilation",
                "Content": "public Compilation Compilation",
                "XmlDocumentation": "",
                "StartLine": 16
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Compilation",
                "Content": "public Compilation Compilation",
                "XmlDocumentation": "",
                "StartLine": 16
              },
              "Id": "P:Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.Compilation",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "ConstructorSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Compilation : compilation": "",
                  "T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions : options": "",
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer} : analyzers": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Content": "public CompilationWithAnalyzers(Compilation compilation, ImmutableArray<DiagnosticAnalyzer> analyzers, AnalyzerOptions options, CancellationToken cancellationToken)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.#ctor(Microsoft.CodeAnalysis.Compilation,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer},Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Creates a new compilation by attaching diagnostic analyzers to an existing compilation.\r\n    </summary>\r\n    <param name=\"compilation\">The original compilation.</param>\r\n    <param name=\"analyzers\">The set of analyzers to include in future analyses.</param>\r\n    <param name=\"options\">Options that are passed to analyzers.</param>\r\n    <param name=\"cancellationToken\">A cancellation token that can be used to abort analysis.</param>\r\n</member>\r\n",
                "StartLine": 28
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Compilation : compilation": "",
                  "T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions : options": "",
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer} : analyzers": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Content": "public CompilationWithAnalyzers(Compilation compilation, ImmutableArray<DiagnosticAnalyzer> analyzers, AnalyzerOptions options, CancellationToken cancellationToken)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.#ctor(Microsoft.CodeAnalysis.Compilation,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer},Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Creates a new compilation by attaching diagnostic analyzers to an existing compilation.\r\n    </summary>\r\n    <param name=\"compilation\">The original compilation.</param>\r\n    <param name=\"analyzers\">The set of analyzers to include in future analyses.</param>\r\n    <param name=\"options\">Options that are passed to analyzers.</param>\r\n    <param name=\"cancellationToken\">A cancellation token that can be used to abort analysis.</param>\r\n</member>\r\n",
                "StartLine": 28
              },
              "Id": "M:Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.#ctor(Microsoft.CodeAnalysis.Compilation,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer},Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions,System.Threading.CancellationToken)",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.#ctor(Microsoft.CodeAnalysis.Compilation,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer},Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Creates a new compilation by attaching diagnostic analyzers to an existing compilation.\r\n    </summary>\r\n    <param name=\"compilation\">The original compilation.</param>\r\n    <param name=\"analyzers\">The set of analyzers to include in future analyses.</param>\r\n    <param name=\"options\">Options that are passed to analyzers.</param>\r\n    <param name=\"cancellationToken\">A cancellation token that can be used to abort analysis.</param>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\DiagnosticAnalyzer\\CompilationWithAnalyzers.cs",
          "InheritanceHierarchy": [
            "T:System.Object"
          ],
          "Syntax": {
            "Content": "public class CompilationWithAnalyzers",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers",
          "Parent": "N:Microsoft.CodeAnalysis.Diagnostics",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Diagnostics.AnalysisContext : context": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public abstract void Initialize(AnalysisContext context);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)\">\r\n    <summary>\r\n    Called once at session start to register actions in the analysis context.\r\n    </summary>\r\n    <param name=\"context\"></param>\r\n</member>\r\n",
                "StartLine": 20
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Diagnostics.AnalysisContext : context": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public abstract void Initialize(AnalysisContext context);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)\">\r\n    <summary>\r\n    Called once at session start to register actions in the analysis context.\r\n    </summary>\r\n    <param name=\"context\"></param>\r\n</member>\r\n",
                "StartLine": 20
              },
              "Id": "M:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)\">\r\n    <summary>\r\n    Called once at session start to register actions in the analysis context.\r\n    </summary>\r\n    <param name=\"context\"></param>\r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.DiagnosticDescriptor}",
                "Content": "public abstract ImmutableArray<DiagnosticDescriptor> SupportedDiagnostics",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer.SupportedDiagnostics\">\r\n    <summary>\r\n    Returns a set of descriptors for the diagnostics that this analyzer is capable of producing.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 14
              },
              "Syntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.DiagnosticDescriptor}",
                "Content": "public abstract ImmutableArray<DiagnosticDescriptor> SupportedDiagnostics",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer.SupportedDiagnostics\">\r\n    <summary>\r\n    Returns a set of descriptors for the diagnostics that this analyzer is capable of producing.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 14
              },
              "Id": "P:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer.SupportedDiagnostics",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer.SupportedDiagnostics\">\r\n    <summary>\r\n    Returns a set of descriptors for the diagnostics that this analyzer is capable of producing.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\DiagnosticAnalyzer\\DiagnosticAnalyzer.cs",
          "InheritanceHierarchy": [
            "T:System.Object"
          ],
          "Syntax": {
            "Content": "public abstract class DiagnosticAnalyzer",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer\">\r\n    <summary>\r\n    The base type for diagnostic analyzers.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer",
          "Parent": "N:Microsoft.CodeAnalysis.Diagnostics",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer\">\r\n    <summary>\r\n    The base type for diagnostic analyzers.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Array",
                "Content": "public string[] Languages",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerAttribute.Languages\">\r\n    <summary>\r\n    The source languages to which this analyzer applies.  See <see cref=\"T:Microsoft.CodeAnalysis.LanguageNames\"/>.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 16
              },
              "Syntax": {
                "PropertyType": "T:System.Array",
                "Content": "public string[] Languages",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerAttribute.Languages\">\r\n    <summary>\r\n    The source languages to which this analyzer applies.  See <see cref=\"T:Microsoft.CodeAnalysis.LanguageNames\"/>.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 16
              },
              "Id": "P:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerAttribute.Languages",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerAttribute",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerAttribute.Languages\">\r\n    <summary>\r\n    The source languages to which this analyzer applies.  See <see cref=\"T:Microsoft.CodeAnalysis.LanguageNames\"/>.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Constructors": [
            {
              "ConstructorSyntax": {
                "Parameters": {
                  "T:System.Array : additionalLanguages": "",
                  "T:System.String : firstLanguage": ""
                },
                "Content": "public DiagnosticAnalyzerAttribute(string firstLanguage, params string[] additionalLanguages)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerAttribute.#ctor(System.String,System.String[])\">\r\n    <summary>\r\n    Attribute constructor used to specify automatic application of a diagnostic analyzer.\r\n    </summary>\r\n    <param name=\"firstLanguage\">One language to which the analyzer applies.</param>\r\n    <param name=\"additionalLanguages\">Additional languages to which the analyzer applies. See <see cref=\"T:Microsoft.CodeAnalysis.LanguageNames\"/>.</param>\r\n</member>\r\n",
                "StartLine": 23
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Array : additionalLanguages": "",
                  "T:System.String : firstLanguage": ""
                },
                "Content": "public DiagnosticAnalyzerAttribute(string firstLanguage, params string[] additionalLanguages)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerAttribute.#ctor(System.String,System.String[])\">\r\n    <summary>\r\n    Attribute constructor used to specify automatic application of a diagnostic analyzer.\r\n    </summary>\r\n    <param name=\"firstLanguage\">One language to which the analyzer applies.</param>\r\n    <param name=\"additionalLanguages\">Additional languages to which the analyzer applies. See <see cref=\"T:Microsoft.CodeAnalysis.LanguageNames\"/>.</param>\r\n</member>\r\n",
                "StartLine": 23
              },
              "Id": "M:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerAttribute.#ctor(System.String,System.String[])",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerAttribute",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerAttribute.#ctor(System.String,System.String[])\">\r\n    <summary>\r\n    Attribute constructor used to specify automatic application of a diagnostic analyzer.\r\n    </summary>\r\n    <param name=\"firstLanguage\">One language to which the analyzer applies.</param>\r\n    <param name=\"additionalLanguages\">Additional languages to which the analyzer applies. See <see cref=\"T:Microsoft.CodeAnalysis.LanguageNames\"/>.</param>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\DiagnosticAnalyzer\\DiagnosticAnalyzerAttribute.cs",
          "InheritanceHierarchy": [
            "T:System.Object",
            "T:System.Attribute"
          ],
          "Syntax": {
            "Content": "public sealed class DiagnosticAnalyzerAttribute",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerAttribute\">\r\n    <summary>\r\n    Place this attribute onto a type to cause it to be considered a diagnostic analyzer.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerAttribute",
          "Parent": "N:Microsoft.CodeAnalysis.Diagnostics",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerAttribute\">\r\n    <summary>\r\n    Place this attribute onto a type to cause it to be considered a diagnostic analyzer.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Compilation : compilation": "",
                  "T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions : options": "",
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer} : analyzers": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers": ""
                },
                "Content": "public static CompilationWithAnalyzers WithAnalyzers(this Compilation compilation, ImmutableArray<DiagnosticAnalyzer> analyzers, AnalyzerOptions options = null, CancellationToken cancellationToken = default (CancellationToken))",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerExtensions.WithAnalyzers(Microsoft.CodeAnalysis.Compilation,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer},Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Returns a new compilation with attached diagnostic analyzers.\r\n    </summary>\r\n    <param name=\"compilation\">Compilation to which analyzers are to be added.</param>\r\n    <param name=\"analyzers\">The set of analyzers to include in future analyses.</param>\r\n    <param name=\"options\">Options that are passed to analyzers.</param>\r\n    <param name=\"cancellationToken\">A cancellation token that can be used to abort analysis.</param>\r\n</member>\r\n",
                "StartLine": 16
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Compilation : compilation": "",
                  "T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions : options": "",
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer} : analyzers": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers": ""
                },
                "Content": "public static CompilationWithAnalyzers WithAnalyzers(this Compilation compilation, ImmutableArray<DiagnosticAnalyzer> analyzers, AnalyzerOptions options = null, CancellationToken cancellationToken = default (CancellationToken))",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerExtensions.WithAnalyzers(Microsoft.CodeAnalysis.Compilation,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer},Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Returns a new compilation with attached diagnostic analyzers.\r\n    </summary>\r\n    <param name=\"compilation\">Compilation to which analyzers are to be added.</param>\r\n    <param name=\"analyzers\">The set of analyzers to include in future analyses.</param>\r\n    <param name=\"options\">Options that are passed to analyzers.</param>\r\n    <param name=\"cancellationToken\">A cancellation token that can be used to abort analysis.</param>\r\n</member>\r\n",
                "StartLine": 16
              },
              "Id": "M:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerExtensions.WithAnalyzers(Microsoft.CodeAnalysis.Compilation,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer},Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions,System.Threading.CancellationToken)",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerExtensions",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerExtensions.WithAnalyzers(Microsoft.CodeAnalysis.Compilation,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer},Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Returns a new compilation with attached diagnostic analyzers.\r\n    </summary>\r\n    <param name=\"compilation\">Compilation to which analyzers are to be added.</param>\r\n    <param name=\"analyzers\">The set of analyzers to include in future analyses.</param>\r\n    <param name=\"options\">Options that are passed to analyzers.</param>\r\n    <param name=\"cancellationToken\">A cancellation token that can be used to abort analysis.</param>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\DiagnosticAnalyzer\\DiagnosticAnalyzerExtensions.cs",
          "InheritanceHierarchy": [
            "T:System.Object"
          ],
          "Syntax": {
            "Content": "public static class DiagnosticAnalyzerExtensions",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzerExtensions",
          "Parent": "N:Microsoft.CodeAnalysis.Diagnostics",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.String : language": ""
                },
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer}": ""
                },
                "Content": "public override ImmutableArray<DiagnosticAnalyzer> GetAnalyzers(string language)",
                "XmlDocumentation": "",
                "StartLine": 48
              },
              "Syntax": {
                "Parameters": {
                  "T:System.String : language": ""
                },
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer}": ""
                },
                "Content": "public override ImmutableArray<DiagnosticAnalyzer> GetAnalyzers(string language)",
                "XmlDocumentation": "",
                "StartLine": 48
              },
              "Id": "M:Microsoft.CodeAnalysis.Diagnostics.UnresolvedAnalyzerReference.GetAnalyzers(System.String)",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.UnresolvedAnalyzerReference",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer}": ""
                },
                "Content": "public override ImmutableArray<DiagnosticAnalyzer> GetAnalyzersForAllLanguages()",
                "XmlDocumentation": "",
                "StartLine": 43
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer}": ""
                },
                "Content": "public override ImmutableArray<DiagnosticAnalyzer> GetAnalyzersForAllLanguages()",
                "XmlDocumentation": "",
                "StartLine": 43
              },
              "Id": "M:Microsoft.CodeAnalysis.Diagnostics.UnresolvedAnalyzerReference.GetAnalyzersForAllLanguages",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.UnresolvedAnalyzerReference",
              "XmlDocumentation": ""
            }
          ],
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:System.String",
                "Content": "public override string Display",
                "XmlDocumentation": "",
                "StartLine": 22
              },
              "Syntax": {
                "PropertyType": "T:System.String",
                "Content": "public override string Display",
                "XmlDocumentation": "",
                "StartLine": 22
              },
              "Id": "P:Microsoft.CodeAnalysis.Diagnostics.UnresolvedAnalyzerReference.Display",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.UnresolvedAnalyzerReference",
              "XmlDocumentation": ""
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.String",
                "Content": "public override string FullPath",
                "XmlDocumentation": "",
                "StartLine": 30
              },
              "Syntax": {
                "PropertyType": "T:System.String",
                "Content": "public override string FullPath",
                "XmlDocumentation": "",
                "StartLine": 30
              },
              "Id": "P:Microsoft.CodeAnalysis.Diagnostics.UnresolvedAnalyzerReference.FullPath",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.UnresolvedAnalyzerReference",
              "XmlDocumentation": ""
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public override bool IsUnresolved",
                "XmlDocumentation": "",
                "StartLine": 38
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public override bool IsUnresolved",
                "XmlDocumentation": "",
                "StartLine": 38
              },
              "Id": "P:Microsoft.CodeAnalysis.Diagnostics.UnresolvedAnalyzerReference.IsUnresolved",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.UnresolvedAnalyzerReference",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "ConstructorSyntax": {
                "Parameters": {
                  "T:System.String : unresolvedPath": ""
                },
                "Content": "public UnresolvedAnalyzerReference(string unresolvedPath)",
                "XmlDocumentation": "",
                "StartLine": 17
              },
              "Syntax": {
                "Parameters": {
                  "T:System.String : unresolvedPath": ""
                },
                "Content": "public UnresolvedAnalyzerReference(string unresolvedPath)",
                "XmlDocumentation": "",
                "StartLine": 17
              },
              "Id": "M:Microsoft.CodeAnalysis.Diagnostics.UnresolvedAnalyzerReference.#ctor(System.String)",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.UnresolvedAnalyzerReference",
              "XmlDocumentation": ""
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\DiagnosticAnalyzer\\UnresolvedAnalyzerReference.cs",
          "InheritanceHierarchy": [
            "T:System.Object",
            "T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference"
          ],
          "Syntax": {
            "Content": "public sealed class UnresolvedAnalyzerReference",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.Diagnostics.UnresolvedAnalyzerReference\">\r\n    <summary>\r\n    Represents an analyzer reference that can't be resolved.\r\n    </summary>\r\n    <remarks>\r\n    For error reporting only, can't be used to reference an analyzer assembly.\r\n    </remarks>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.Diagnostics.UnresolvedAnalyzerReference",
          "Parent": "N:Microsoft.CodeAnalysis.Diagnostics",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.Diagnostics.UnresolvedAnalyzerReference\">\r\n    <summary>\r\n    Represents an analyzer reference that can't be resolved.\r\n    </summary>\r\n    <remarks>\r\n    For error reporting only, can't be used to reference an analyzer assembly.\r\n    </remarks>\r\n</member>\r\n"
        }
      ],
      "Structs": [
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Diagnostic : diagnostic": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public void ReportDiagnostic(Diagnostic diagnostic)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.CodeBlockEndAnalysisContext.ReportDiagnostic(Microsoft.CodeAnalysis.Diagnostic)\">\r\n    <summary>\r\n    Report a <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/> about a code block.\r\n    </summary>\r\n    <param name=\"diagnostic\"><see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/> to be reported.</param>\r\n</member>\r\n",
                "StartLine": 552
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Diagnostic : diagnostic": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public void ReportDiagnostic(Diagnostic diagnostic)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.CodeBlockEndAnalysisContext.ReportDiagnostic(Microsoft.CodeAnalysis.Diagnostic)\">\r\n    <summary>\r\n    Report a <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/> about a code block.\r\n    </summary>\r\n    <param name=\"diagnostic\"><see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/> to be reported.</param>\r\n</member>\r\n",
                "StartLine": 552
              },
              "Id": "M:Microsoft.CodeAnalysis.Diagnostics.CodeBlockEndAnalysisContext.ReportDiagnostic(Microsoft.CodeAnalysis.Diagnostic)",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.CodeBlockEndAnalysisContext",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.CodeBlockEndAnalysisContext.ReportDiagnostic(Microsoft.CodeAnalysis.Diagnostic)\">\r\n    <summary>\r\n    Report a <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/> about a code block.\r\n    </summary>\r\n    <param name=\"diagnostic\"><see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/> to be reported.</param>\r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Threading.CancellationToken",
                "Content": "public CancellationToken CancellationToken",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.CodeBlockEndAnalysisContext.CancellationToken\">\r\n    <summary>\r\n    Token to check for requested cancellation of the analysis.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 536
              },
              "Syntax": {
                "PropertyType": "T:System.Threading.CancellationToken",
                "Content": "public CancellationToken CancellationToken",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.CodeBlockEndAnalysisContext.CancellationToken\">\r\n    <summary>\r\n    Token to check for requested cancellation of the analysis.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 536
              },
              "Id": "P:Microsoft.CodeAnalysis.Diagnostics.CodeBlockEndAnalysisContext.CancellationToken",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.CodeBlockEndAnalysisContext",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.CodeBlockEndAnalysisContext.CancellationToken\">\r\n    <summary>\r\n    Token to check for requested cancellation of the analysis.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SyntaxNode",
                "Content": "public SyntaxNode CodeBlock",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.CodeBlockEndAnalysisContext.CodeBlock\">\r\n    <summary>\r\n    Code block that is the subject of the analysis.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 516
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SyntaxNode",
                "Content": "public SyntaxNode CodeBlock",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.CodeBlockEndAnalysisContext.CodeBlock\">\r\n    <summary>\r\n    Code block that is the subject of the analysis.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 516
              },
              "Id": "P:Microsoft.CodeAnalysis.Diagnostics.CodeBlockEndAnalysisContext.CodeBlock",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.CodeBlockEndAnalysisContext",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.CodeBlockEndAnalysisContext.CodeBlock\">\r\n    <summary>\r\n    Code block that is the subject of the analysis.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions",
                "Content": "public AnalyzerOptions Options",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.CodeBlockEndAnalysisContext.Options\">\r\n    <summary>\r\n    Options specified for the analysis.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 531
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions",
                "Content": "public AnalyzerOptions Options",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.CodeBlockEndAnalysisContext.Options\">\r\n    <summary>\r\n    Options specified for the analysis.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 531
              },
              "Id": "P:Microsoft.CodeAnalysis.Diagnostics.CodeBlockEndAnalysisContext.Options",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.CodeBlockEndAnalysisContext",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.CodeBlockEndAnalysisContext.Options\">\r\n    <summary>\r\n    Options specified for the analysis.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.ISymbol",
                "Content": "public ISymbol OwningSymbol",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.CodeBlockEndAnalysisContext.OwningSymbol\">\r\n    <summary>\r\n    <see cref=\"T:Microsoft.CodeAnalysis.ISymbol\"/> for which the code block provides a definition or value.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 521
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.ISymbol",
                "Content": "public ISymbol OwningSymbol",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.CodeBlockEndAnalysisContext.OwningSymbol\">\r\n    <summary>\r\n    <see cref=\"T:Microsoft.CodeAnalysis.ISymbol\"/> for which the code block provides a definition or value.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 521
              },
              "Id": "P:Microsoft.CodeAnalysis.Diagnostics.CodeBlockEndAnalysisContext.OwningSymbol",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.CodeBlockEndAnalysisContext",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.CodeBlockEndAnalysisContext.OwningSymbol\">\r\n    <summary>\r\n    <see cref=\"T:Microsoft.CodeAnalysis.ISymbol\"/> for which the code block provides a definition or value.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SemanticModel",
                "Content": "public SemanticModel SemanticModel",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.CodeBlockEndAnalysisContext.SemanticModel\">\r\n    <summary>\r\n    <see cref=\"T:Microsoft.CodeAnalysis.SemanticModel\"/> that can provide semantic information about the <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/>s in the code block.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 526
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SemanticModel",
                "Content": "public SemanticModel SemanticModel",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.CodeBlockEndAnalysisContext.SemanticModel\">\r\n    <summary>\r\n    <see cref=\"T:Microsoft.CodeAnalysis.SemanticModel\"/> that can provide semantic information about the <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/>s in the code block.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 526
              },
              "Id": "P:Microsoft.CodeAnalysis.Diagnostics.CodeBlockEndAnalysisContext.SemanticModel",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.CodeBlockEndAnalysisContext",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.CodeBlockEndAnalysisContext.SemanticModel\">\r\n    <summary>\r\n    <see cref=\"T:Microsoft.CodeAnalysis.SemanticModel\"/> that can provide semantic information about the <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/>s in the code block.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Constructors": [
            {
              "ConstructorSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions : options": "",
                  "T:Microsoft.CodeAnalysis.ISymbol : owningSymbol": "",
                  "T:Microsoft.CodeAnalysis.SemanticModel : semanticModel": "",
                  "T:Microsoft.CodeAnalysis.SyntaxNode : codeBlock": "",
                  "T:System.Action{Microsoft.CodeAnalysis.Diagnostic} : reportDiagnostic": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Content": "public CodeBlockEndAnalysisContext(SyntaxNode codeBlock, ISymbol owningSymbol, SemanticModel semanticModel, AnalyzerOptions options, Action<Diagnostic> reportDiagnostic, CancellationToken cancellationToken)",
                "XmlDocumentation": "",
                "StartLine": 538
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions : options": "",
                  "T:Microsoft.CodeAnalysis.ISymbol : owningSymbol": "",
                  "T:Microsoft.CodeAnalysis.SemanticModel : semanticModel": "",
                  "T:Microsoft.CodeAnalysis.SyntaxNode : codeBlock": "",
                  "T:System.Action{Microsoft.CodeAnalysis.Diagnostic} : reportDiagnostic": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Content": "public CodeBlockEndAnalysisContext(SyntaxNode codeBlock, ISymbol owningSymbol, SemanticModel semanticModel, AnalyzerOptions options, Action<Diagnostic> reportDiagnostic, CancellationToken cancellationToken)",
                "XmlDocumentation": "",
                "StartLine": 538
              },
              "Id": "M:Microsoft.CodeAnalysis.Diagnostics.CodeBlockEndAnalysisContext.#ctor(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions,System.Action{Microsoft.CodeAnalysis.Diagnostic},System.Threading.CancellationToken)",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.CodeBlockEndAnalysisContext",
              "XmlDocumentation": ""
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\DiagnosticAnalyzer\\DiagnosticAnalysisContext.cs",
          "InheritanceHierarchy": [
            "T:System.Object",
            "T:System.ValueType"
          ],
          "Syntax": {
            "Content": "public struct CodeBlockEndAnalysisContext",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.Diagnostics.CodeBlockEndAnalysisContext\">\r\n    <summary>\r\n    Context for a code block end action.\r\n    A code block end action can use a <see cref=\"T:Microsoft.CodeAnalysis.Diagnostics.CodeBlockEndAnalysisContext\"/> to report <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s about a code block.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.Diagnostics.CodeBlockEndAnalysisContext",
          "Parent": "N:Microsoft.CodeAnalysis.Diagnostics",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.Diagnostics.CodeBlockEndAnalysisContext\">\r\n    <summary>\r\n    Context for a code block end action.\r\n    A code block end action can use a <see cref=\"T:Microsoft.CodeAnalysis.Diagnostics.CodeBlockEndAnalysisContext\"/> to report <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s about a code block.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Diagnostic : diagnostic": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public void ReportDiagnostic(Diagnostic diagnostic)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.CompilationEndAnalysisContext.ReportDiagnostic(Microsoft.CodeAnalysis.Diagnostic)\">\r\n    <summary>\r\n    Report a <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/> about a <see cref=\"T:Microsoft.CodeAnalysis.Compilation\"/>.\r\n    </summary>\r\n    <param name=\"diagnostic\"><see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/> to be reported.</param>\r\n</member>\r\n",
                "StartLine": 303
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Diagnostic : diagnostic": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public void ReportDiagnostic(Diagnostic diagnostic)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.CompilationEndAnalysisContext.ReportDiagnostic(Microsoft.CodeAnalysis.Diagnostic)\">\r\n    <summary>\r\n    Report a <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/> about a <see cref=\"T:Microsoft.CodeAnalysis.Compilation\"/>.\r\n    </summary>\r\n    <param name=\"diagnostic\"><see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/> to be reported.</param>\r\n</member>\r\n",
                "StartLine": 303
              },
              "Id": "M:Microsoft.CodeAnalysis.Diagnostics.CompilationEndAnalysisContext.ReportDiagnostic(Microsoft.CodeAnalysis.Diagnostic)",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.CompilationEndAnalysisContext",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.CompilationEndAnalysisContext.ReportDiagnostic(Microsoft.CodeAnalysis.Diagnostic)\">\r\n    <summary>\r\n    Report a <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/> about a <see cref=\"T:Microsoft.CodeAnalysis.Compilation\"/>.\r\n    </summary>\r\n    <param name=\"diagnostic\"><see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/> to be reported.</param>\r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Threading.CancellationToken",
                "Content": "public CancellationToken CancellationToken",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.CompilationEndAnalysisContext.CancellationToken\">\r\n    <summary>\r\n    Token to check for requested cancellation of the analysis.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 289
              },
              "Syntax": {
                "PropertyType": "T:System.Threading.CancellationToken",
                "Content": "public CancellationToken CancellationToken",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.CompilationEndAnalysisContext.CancellationToken\">\r\n    <summary>\r\n    Token to check for requested cancellation of the analysis.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 289
              },
              "Id": "P:Microsoft.CodeAnalysis.Diagnostics.CompilationEndAnalysisContext.CancellationToken",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.CompilationEndAnalysisContext",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.CompilationEndAnalysisContext.CancellationToken\">\r\n    <summary>\r\n    Token to check for requested cancellation of the analysis.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Compilation",
                "Content": "public Compilation Compilation",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.CompilationEndAnalysisContext.Compilation\">\r\n    <summary>\r\n    <see cref=\"T:Microsoft.CodeAnalysis.Compilation\"/> that is the subject of the analysis.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 279
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Compilation",
                "Content": "public Compilation Compilation",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.CompilationEndAnalysisContext.Compilation\">\r\n    <summary>\r\n    <see cref=\"T:Microsoft.CodeAnalysis.Compilation\"/> that is the subject of the analysis.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 279
              },
              "Id": "P:Microsoft.CodeAnalysis.Diagnostics.CompilationEndAnalysisContext.Compilation",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.CompilationEndAnalysisContext",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.CompilationEndAnalysisContext.Compilation\">\r\n    <summary>\r\n    <see cref=\"T:Microsoft.CodeAnalysis.Compilation\"/> that is the subject of the analysis.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions",
                "Content": "public AnalyzerOptions Options",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.CompilationEndAnalysisContext.Options\">\r\n    <summary>\r\n    Options specified for the analysis.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 284
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions",
                "Content": "public AnalyzerOptions Options",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.CompilationEndAnalysisContext.Options\">\r\n    <summary>\r\n    Options specified for the analysis.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 284
              },
              "Id": "P:Microsoft.CodeAnalysis.Diagnostics.CompilationEndAnalysisContext.Options",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.CompilationEndAnalysisContext",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.CompilationEndAnalysisContext.Options\">\r\n    <summary>\r\n    Options specified for the analysis.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Constructors": [
            {
              "ConstructorSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Compilation : compilation": "",
                  "T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions : options": "",
                  "T:System.Action{Microsoft.CodeAnalysis.Diagnostic} : reportDiagnostic": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Content": "public CompilationEndAnalysisContext(Compilation compilation, AnalyzerOptions options, Action<Diagnostic> reportDiagnostic, CancellationToken cancellationToken)",
                "XmlDocumentation": "",
                "StartLine": 291
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Compilation : compilation": "",
                  "T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions : options": "",
                  "T:System.Action{Microsoft.CodeAnalysis.Diagnostic} : reportDiagnostic": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Content": "public CompilationEndAnalysisContext(Compilation compilation, AnalyzerOptions options, Action<Diagnostic> reportDiagnostic, CancellationToken cancellationToken)",
                "XmlDocumentation": "",
                "StartLine": 291
              },
              "Id": "M:Microsoft.CodeAnalysis.Diagnostics.CompilationEndAnalysisContext.#ctor(Microsoft.CodeAnalysis.Compilation,Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions,System.Action{Microsoft.CodeAnalysis.Diagnostic},System.Threading.CancellationToken)",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.CompilationEndAnalysisContext",
              "XmlDocumentation": ""
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\DiagnosticAnalyzer\\DiagnosticAnalysisContext.cs",
          "InheritanceHierarchy": [
            "T:System.Object",
            "T:System.ValueType"
          ],
          "Syntax": {
            "Content": "public struct CompilationEndAnalysisContext",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.Diagnostics.CompilationEndAnalysisContext\">\r\n    <summary>\r\n    Context for a compilation end action.\r\n    A compilation end action can use a <see cref=\"T:Microsoft.CodeAnalysis.Diagnostics.CompilationEndAnalysisContext\"/> to report <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s about a <see cref=\"T:Microsoft.CodeAnalysis.Compilation\"/>.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.Diagnostics.CompilationEndAnalysisContext",
          "Parent": "N:Microsoft.CodeAnalysis.Diagnostics",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.Diagnostics.CompilationEndAnalysisContext\">\r\n    <summary>\r\n    Context for a compilation end action.\r\n    A compilation end action can use a <see cref=\"T:Microsoft.CodeAnalysis.Diagnostics.CompilationEndAnalysisContext\"/> to report <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s about a <see cref=\"T:Microsoft.CodeAnalysis.Compilation\"/>.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Diagnostic : diagnostic": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public void ReportDiagnostic(Diagnostic diagnostic)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext.ReportDiagnostic(Microsoft.CodeAnalysis.Diagnostic)\">\r\n    <summary>\r\n    Report a <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/> about a <see cref=\"T:Microsoft.CodeAnalysis.SemanticModel\"/>.\r\n    </summary>\r\n    <param name=\"diagnostic\"><see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/> to be reported.</param>\r\n</member>\r\n",
                "StartLine": 351
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Diagnostic : diagnostic": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public void ReportDiagnostic(Diagnostic diagnostic)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext.ReportDiagnostic(Microsoft.CodeAnalysis.Diagnostic)\">\r\n    <summary>\r\n    Report a <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/> about a <see cref=\"T:Microsoft.CodeAnalysis.SemanticModel\"/>.\r\n    </summary>\r\n    <param name=\"diagnostic\"><see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/> to be reported.</param>\r\n</member>\r\n",
                "StartLine": 351
              },
              "Id": "M:Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext.ReportDiagnostic(Microsoft.CodeAnalysis.Diagnostic)",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext.ReportDiagnostic(Microsoft.CodeAnalysis.Diagnostic)\">\r\n    <summary>\r\n    Report a <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/> about a <see cref=\"T:Microsoft.CodeAnalysis.SemanticModel\"/>.\r\n    </summary>\r\n    <param name=\"diagnostic\"><see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/> to be reported.</param>\r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Threading.CancellationToken",
                "Content": "public CancellationToken CancellationToken",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext.CancellationToken\">\r\n    <summary>\r\n    Token to check for requested cancellation of the analysis.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 337
              },
              "Syntax": {
                "PropertyType": "T:System.Threading.CancellationToken",
                "Content": "public CancellationToken CancellationToken",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext.CancellationToken\">\r\n    <summary>\r\n    Token to check for requested cancellation of the analysis.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 337
              },
              "Id": "P:Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext.CancellationToken",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext.CancellationToken\">\r\n    <summary>\r\n    Token to check for requested cancellation of the analysis.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions",
                "Content": "public AnalyzerOptions Options",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext.Options\">\r\n    <summary>\r\n    Options specified for the analysis.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 332
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions",
                "Content": "public AnalyzerOptions Options",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext.Options\">\r\n    <summary>\r\n    Options specified for the analysis.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 332
              },
              "Id": "P:Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext.Options",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext.Options\">\r\n    <summary>\r\n    Options specified for the analysis.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SemanticModel",
                "Content": "public SemanticModel SemanticModel",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext.SemanticModel\">\r\n    <summary>\r\n    <see cref=\"T:Microsoft.CodeAnalysis.SemanticModel\"/> that is the subject of the analysis.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 327
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SemanticModel",
                "Content": "public SemanticModel SemanticModel",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext.SemanticModel\">\r\n    <summary>\r\n    <see cref=\"T:Microsoft.CodeAnalysis.SemanticModel\"/> that is the subject of the analysis.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 327
              },
              "Id": "P:Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext.SemanticModel",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext.SemanticModel\">\r\n    <summary>\r\n    <see cref=\"T:Microsoft.CodeAnalysis.SemanticModel\"/> that is the subject of the analysis.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Constructors": [
            {
              "ConstructorSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions : options": "",
                  "T:Microsoft.CodeAnalysis.SemanticModel : semanticModel": "",
                  "T:System.Action{Microsoft.CodeAnalysis.Diagnostic} : reportDiagnostic": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Content": "public SemanticModelAnalysisContext(SemanticModel semanticModel, AnalyzerOptions options, Action<Diagnostic> reportDiagnostic, CancellationToken cancellationToken)",
                "XmlDocumentation": "",
                "StartLine": 339
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions : options": "",
                  "T:Microsoft.CodeAnalysis.SemanticModel : semanticModel": "",
                  "T:System.Action{Microsoft.CodeAnalysis.Diagnostic} : reportDiagnostic": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Content": "public SemanticModelAnalysisContext(SemanticModel semanticModel, AnalyzerOptions options, Action<Diagnostic> reportDiagnostic, CancellationToken cancellationToken)",
                "XmlDocumentation": "",
                "StartLine": 339
              },
              "Id": "M:Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext.#ctor(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions,System.Action{Microsoft.CodeAnalysis.Diagnostic},System.Threading.CancellationToken)",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext",
              "XmlDocumentation": ""
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\DiagnosticAnalyzer\\DiagnosticAnalysisContext.cs",
          "InheritanceHierarchy": [
            "T:System.Object",
            "T:System.ValueType"
          ],
          "Syntax": {
            "Content": "public struct SemanticModelAnalysisContext",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext\">\r\n    <summary>\r\n    Context for a semantic model action.\r\n    A semantic model action operates on the <see cref=\"T:Microsoft.CodeAnalysis.SemanticModel\"/> of a code document, and can use a <see cref=\"T:Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext\"/> to report <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s about the model.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext",
          "Parent": "N:Microsoft.CodeAnalysis.Diagnostics",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext\">\r\n    <summary>\r\n    Context for a semantic model action.\r\n    A semantic model action operates on the <see cref=\"T:Microsoft.CodeAnalysis.SemanticModel\"/> of a code document, and can use a <see cref=\"T:Microsoft.CodeAnalysis.Diagnostics.SemanticModelAnalysisContext\"/> to report <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s about the model.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Diagnostic : diagnostic": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public void ReportDiagnostic(Diagnostic diagnostic)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext.ReportDiagnostic(Microsoft.CodeAnalysis.Diagnostic)\">\r\n    <summary>\r\n    Report a <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/> about an <see cref=\"T:Microsoft.CodeAnalysis.ISymbol\"/>.\r\n    </summary>\r\n    <param name=\"diagnostic\"><see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/> to be reported.</param>\r\n</member>\r\n",
                "StartLine": 406
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Diagnostic : diagnostic": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public void ReportDiagnostic(Diagnostic diagnostic)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext.ReportDiagnostic(Microsoft.CodeAnalysis.Diagnostic)\">\r\n    <summary>\r\n    Report a <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/> about an <see cref=\"T:Microsoft.CodeAnalysis.ISymbol\"/>.\r\n    </summary>\r\n    <param name=\"diagnostic\"><see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/> to be reported.</param>\r\n</member>\r\n",
                "StartLine": 406
              },
              "Id": "M:Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext.ReportDiagnostic(Microsoft.CodeAnalysis.Diagnostic)",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext.ReportDiagnostic(Microsoft.CodeAnalysis.Diagnostic)\">\r\n    <summary>\r\n    Report a <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/> about an <see cref=\"T:Microsoft.CodeAnalysis.ISymbol\"/>.\r\n    </summary>\r\n    <param name=\"diagnostic\"><see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/> to be reported.</param>\r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Threading.CancellationToken",
                "Content": "public CancellationToken CancellationToken",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext.CancellationToken\">\r\n    <summary>\r\n    Token to check for requested cancellation of the analysis.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 391
              },
              "Syntax": {
                "PropertyType": "T:System.Threading.CancellationToken",
                "Content": "public CancellationToken CancellationToken",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext.CancellationToken\">\r\n    <summary>\r\n    Token to check for requested cancellation of the analysis.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 391
              },
              "Id": "P:Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext.CancellationToken",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext.CancellationToken\">\r\n    <summary>\r\n    Token to check for requested cancellation of the analysis.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Compilation",
                "Content": "public Compilation Compilation",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext.Compilation\">\r\n    <summary>\r\n    <see cref=\"T:Microsoft.CodeAnalysis.Compilation\"/> containing the <see cref=\"T:Microsoft.CodeAnalysis.ISymbol\"/>.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 381
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Compilation",
                "Content": "public Compilation Compilation",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext.Compilation\">\r\n    <summary>\r\n    <see cref=\"T:Microsoft.CodeAnalysis.Compilation\"/> containing the <see cref=\"T:Microsoft.CodeAnalysis.ISymbol\"/>.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 381
              },
              "Id": "P:Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext.Compilation",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext.Compilation\">\r\n    <summary>\r\n    <see cref=\"T:Microsoft.CodeAnalysis.Compilation\"/> containing the <see cref=\"T:Microsoft.CodeAnalysis.ISymbol\"/>.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions",
                "Content": "public AnalyzerOptions Options",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext.Options\">\r\n    <summary>\r\n    Options specified for the analysis.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 386
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions",
                "Content": "public AnalyzerOptions Options",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext.Options\">\r\n    <summary>\r\n    Options specified for the analysis.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 386
              },
              "Id": "P:Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext.Options",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext.Options\">\r\n    <summary>\r\n    Options specified for the analysis.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.ISymbol",
                "Content": "public ISymbol Symbol",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext.Symbol\">\r\n    <summary>\r\n    <see cref=\"T:Microsoft.CodeAnalysis.ISymbol\"/> that is the subject of the analysis.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 376
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.ISymbol",
                "Content": "public ISymbol Symbol",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext.Symbol\">\r\n    <summary>\r\n    <see cref=\"T:Microsoft.CodeAnalysis.ISymbol\"/> that is the subject of the analysis.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 376
              },
              "Id": "P:Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext.Symbol",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext.Symbol\">\r\n    <summary>\r\n    <see cref=\"T:Microsoft.CodeAnalysis.ISymbol\"/> that is the subject of the analysis.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Constructors": [
            {
              "ConstructorSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Compilation : compilation": "",
                  "T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions : options": "",
                  "T:Microsoft.CodeAnalysis.ISymbol : symbol": "",
                  "T:System.Action{Microsoft.CodeAnalysis.Diagnostic} : reportDiagnostic": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Content": "public SymbolAnalysisContext(ISymbol symbol, Compilation compilation, AnalyzerOptions options, Action<Diagnostic> reportDiagnostic, CancellationToken cancellationToken)",
                "XmlDocumentation": "",
                "StartLine": 393
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Compilation : compilation": "",
                  "T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions : options": "",
                  "T:Microsoft.CodeAnalysis.ISymbol : symbol": "",
                  "T:System.Action{Microsoft.CodeAnalysis.Diagnostic} : reportDiagnostic": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Content": "public SymbolAnalysisContext(ISymbol symbol, Compilation compilation, AnalyzerOptions options, Action<Diagnostic> reportDiagnostic, CancellationToken cancellationToken)",
                "XmlDocumentation": "",
                "StartLine": 393
              },
              "Id": "M:Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext.#ctor(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.Compilation,Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions,System.Action{Microsoft.CodeAnalysis.Diagnostic},System.Threading.CancellationToken)",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext",
              "XmlDocumentation": ""
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\DiagnosticAnalyzer\\DiagnosticAnalysisContext.cs",
          "InheritanceHierarchy": [
            "T:System.Object",
            "T:System.ValueType"
          ],
          "Syntax": {
            "Content": "public struct SymbolAnalysisContext",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext\">\r\n    <summary>\r\n    Context for a symbol action.\r\n    A symbol action can use a <see cref=\"T:Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext\"/> to report <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s about an <see cref=\"T:Microsoft.CodeAnalysis.ISymbol\"/>.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext",
          "Parent": "N:Microsoft.CodeAnalysis.Diagnostics",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext\">\r\n    <summary>\r\n    Context for a symbol action.\r\n    A symbol action can use a <see cref=\"T:Microsoft.CodeAnalysis.Diagnostics.SymbolAnalysisContext\"/> to report <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s about an <see cref=\"T:Microsoft.CodeAnalysis.ISymbol\"/>.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Diagnostic : diagnostic": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public void ReportDiagnostic(Diagnostic diagnostic)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext.ReportDiagnostic(Microsoft.CodeAnalysis.Diagnostic)\">\r\n    <summary>\r\n    Report a <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/> about a <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/>.\r\n    </summary>\r\n    <param name=\"diagnostic\"><see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/> to be reported.</param>\r\n</member>\r\n",
                "StartLine": 655
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Diagnostic : diagnostic": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public void ReportDiagnostic(Diagnostic diagnostic)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext.ReportDiagnostic(Microsoft.CodeAnalysis.Diagnostic)\">\r\n    <summary>\r\n    Report a <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/> about a <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/>.\r\n    </summary>\r\n    <param name=\"diagnostic\"><see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/> to be reported.</param>\r\n</member>\r\n",
                "StartLine": 655
              },
              "Id": "M:Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext.ReportDiagnostic(Microsoft.CodeAnalysis.Diagnostic)",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext.ReportDiagnostic(Microsoft.CodeAnalysis.Diagnostic)\">\r\n    <summary>\r\n    Report a <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/> about a <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/>.\r\n    </summary>\r\n    <param name=\"diagnostic\"><see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/> to be reported.</param>\r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Threading.CancellationToken",
                "Content": "public CancellationToken CancellationToken",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext.CancellationToken\">\r\n    <summary>\r\n    Token to check for requested cancellation of the analysis.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 640
              },
              "Syntax": {
                "PropertyType": "T:System.Threading.CancellationToken",
                "Content": "public CancellationToken CancellationToken",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext.CancellationToken\">\r\n    <summary>\r\n    Token to check for requested cancellation of the analysis.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 640
              },
              "Id": "P:Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext.CancellationToken",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext.CancellationToken\">\r\n    <summary>\r\n    Token to check for requested cancellation of the analysis.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SyntaxNode",
                "Content": "public SyntaxNode Node",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext.Node\">\r\n    <summary>\r\n    <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/> that is the subject of the analysis.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 625
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SyntaxNode",
                "Content": "public SyntaxNode Node",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext.Node\">\r\n    <summary>\r\n    <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/> that is the subject of the analysis.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 625
              },
              "Id": "P:Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext.Node",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext.Node\">\r\n    <summary>\r\n    <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/> that is the subject of the analysis.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions",
                "Content": "public AnalyzerOptions Options",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext.Options\">\r\n    <summary>\r\n    Options specified for the analysis.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 635
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions",
                "Content": "public AnalyzerOptions Options",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext.Options\">\r\n    <summary>\r\n    Options specified for the analysis.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 635
              },
              "Id": "P:Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext.Options",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext.Options\">\r\n    <summary>\r\n    Options specified for the analysis.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SemanticModel",
                "Content": "public SemanticModel SemanticModel",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext.SemanticModel\">\r\n    <summary>\r\n    <see cref=\"T:Microsoft.CodeAnalysis.SemanticModel\"/> that can provide semantic information about the <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/>.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 630
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SemanticModel",
                "Content": "public SemanticModel SemanticModel",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext.SemanticModel\">\r\n    <summary>\r\n    <see cref=\"T:Microsoft.CodeAnalysis.SemanticModel\"/> that can provide semantic information about the <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/>.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 630
              },
              "Id": "P:Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext.SemanticModel",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext.SemanticModel\">\r\n    <summary>\r\n    <see cref=\"T:Microsoft.CodeAnalysis.SemanticModel\"/> that can provide semantic information about the <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/>.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Constructors": [
            {
              "ConstructorSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions : options": "",
                  "T:Microsoft.CodeAnalysis.SemanticModel : semanticModel": "",
                  "T:Microsoft.CodeAnalysis.SyntaxNode : node": "",
                  "T:System.Action{Microsoft.CodeAnalysis.Diagnostic} : reportDiagnostic": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Content": "public SyntaxNodeAnalysisContext(SyntaxNode node, SemanticModel semanticModel, AnalyzerOptions options, Action<Diagnostic> reportDiagnostic, CancellationToken cancellationToken)",
                "XmlDocumentation": "",
                "StartLine": 642
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions : options": "",
                  "T:Microsoft.CodeAnalysis.SemanticModel : semanticModel": "",
                  "T:Microsoft.CodeAnalysis.SyntaxNode : node": "",
                  "T:System.Action{Microsoft.CodeAnalysis.Diagnostic} : reportDiagnostic": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Content": "public SyntaxNodeAnalysisContext(SyntaxNode node, SemanticModel semanticModel, AnalyzerOptions options, Action<Diagnostic> reportDiagnostic, CancellationToken cancellationToken)",
                "XmlDocumentation": "",
                "StartLine": 642
              },
              "Id": "M:Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext.#ctor(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions,System.Action{Microsoft.CodeAnalysis.Diagnostic},System.Threading.CancellationToken)",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext",
              "XmlDocumentation": ""
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\DiagnosticAnalyzer\\DiagnosticAnalysisContext.cs",
          "InheritanceHierarchy": [
            "T:System.Object",
            "T:System.ValueType"
          ],
          "Syntax": {
            "Content": "public struct SyntaxNodeAnalysisContext",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext\">\r\n    <summary>\r\n    Context for a syntax node action.\r\n    A syntax node action can use a <see cref=\"T:Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext\"/> to report <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s for a <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/>.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext",
          "Parent": "N:Microsoft.CodeAnalysis.Diagnostics",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext\">\r\n    <summary>\r\n    Context for a syntax node action.\r\n    A syntax node action can use a <see cref=\"T:Microsoft.CodeAnalysis.Diagnostics.SyntaxNodeAnalysisContext\"/> to report <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s for a <see cref=\"T:Microsoft.CodeAnalysis.SyntaxNode\"/>.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Diagnostic : diagnostic": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public void ReportDiagnostic(Diagnostic diagnostic)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext.ReportDiagnostic(Microsoft.CodeAnalysis.Diagnostic)\">\r\n    <summary>\r\n    Report a <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/> about a <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTree\"/>.\r\n    </summary>\r\n    <param name=\"diagnostic\"><see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/> to be reported.</param>\r\n</member>\r\n",
                "StartLine": 600
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Diagnostic : diagnostic": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public void ReportDiagnostic(Diagnostic diagnostic)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext.ReportDiagnostic(Microsoft.CodeAnalysis.Diagnostic)\">\r\n    <summary>\r\n    Report a <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/> about a <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTree\"/>.\r\n    </summary>\r\n    <param name=\"diagnostic\"><see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/> to be reported.</param>\r\n</member>\r\n",
                "StartLine": 600
              },
              "Id": "M:Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext.ReportDiagnostic(Microsoft.CodeAnalysis.Diagnostic)",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext.ReportDiagnostic(Microsoft.CodeAnalysis.Diagnostic)\">\r\n    <summary>\r\n    Report a <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/> about a <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTree\"/>.\r\n    </summary>\r\n    <param name=\"diagnostic\"><see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/> to be reported.</param>\r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Threading.CancellationToken",
                "Content": "public CancellationToken CancellationToken",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext.CancellationToken\">\r\n    <summary>\r\n    Token to check for requested cancellation of the analysis.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 586
              },
              "Syntax": {
                "PropertyType": "T:System.Threading.CancellationToken",
                "Content": "public CancellationToken CancellationToken",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext.CancellationToken\">\r\n    <summary>\r\n    Token to check for requested cancellation of the analysis.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 586
              },
              "Id": "P:Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext.CancellationToken",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext.CancellationToken\">\r\n    <summary>\r\n    Token to check for requested cancellation of the analysis.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions",
                "Content": "public AnalyzerOptions Options",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext.Options\">\r\n    <summary>\r\n    Options specified for the analysis.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 581
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions",
                "Content": "public AnalyzerOptions Options",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext.Options\">\r\n    <summary>\r\n    Options specified for the analysis.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 581
              },
              "Id": "P:Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext.Options",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext.Options\">\r\n    <summary>\r\n    Options specified for the analysis.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SyntaxTree",
                "Content": "public SyntaxTree Tree",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext.Tree\">\r\n    <summary>\r\n    <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTree\"/> that is the subject of the analysis.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 576
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SyntaxTree",
                "Content": "public SyntaxTree Tree",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext.Tree\">\r\n    <summary>\r\n    <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTree\"/> that is the subject of the analysis.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 576
              },
              "Id": "P:Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext.Tree",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext.Tree\">\r\n    <summary>\r\n    <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTree\"/> that is the subject of the analysis.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Constructors": [
            {
              "ConstructorSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions : options": "",
                  "T:Microsoft.CodeAnalysis.SyntaxTree : tree": "",
                  "T:System.Action{Microsoft.CodeAnalysis.Diagnostic} : reportDiagnostic": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Content": "public SyntaxTreeAnalysisContext(SyntaxTree tree, AnalyzerOptions options, Action<Diagnostic> reportDiagnostic, CancellationToken cancellationToken)",
                "XmlDocumentation": "",
                "StartLine": 588
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions : options": "",
                  "T:Microsoft.CodeAnalysis.SyntaxTree : tree": "",
                  "T:System.Action{Microsoft.CodeAnalysis.Diagnostic} : reportDiagnostic": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Content": "public SyntaxTreeAnalysisContext(SyntaxTree tree, AnalyzerOptions options, Action<Diagnostic> reportDiagnostic, CancellationToken cancellationToken)",
                "XmlDocumentation": "",
                "StartLine": 588
              },
              "Id": "M:Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext.#ctor(Microsoft.CodeAnalysis.SyntaxTree,Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions,System.Action{Microsoft.CodeAnalysis.Diagnostic},System.Threading.CancellationToken)",
              "Parent": "T:Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext",
              "XmlDocumentation": ""
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\DiagnosticAnalyzer\\DiagnosticAnalysisContext.cs",
          "InheritanceHierarchy": [
            "T:System.Object",
            "T:System.ValueType"
          ],
          "Syntax": {
            "Content": "public struct SyntaxTreeAnalysisContext",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext\">\r\n    <summary>\r\n    Context for a syntax tree action.\r\n    A syntax tree action can use a <see cref=\"T:Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext\"/> to report <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s about a <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTree\"/> for a code document.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext",
          "Parent": "N:Microsoft.CodeAnalysis.Diagnostics",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext\">\r\n    <summary>\r\n    Context for a syntax tree action.\r\n    A syntax tree action can use a <see cref=\"T:Microsoft.CodeAnalysis.Diagnostics.SyntaxTreeAnalysisContext\"/> to report <see cref=\"T:Microsoft.CodeAnalysis.Diagnostic\"/>s about a <see cref=\"T:Microsoft.CodeAnalysis.SyntaxTree\"/> for a code document.\r\n    </summary>\r\n</member>\r\n"
        }
      ],
      "AllowedMemberTypes": [
        2,
        3,
        4,
        5,
        6
      ],
      "Id": "N:Microsoft.CodeAnalysis.Diagnostics",
      "Parent": "Microsoft.CodeAnalysis",
      "XmlDocumentation": ""
    },
    {
      "Classes": [
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.ModuleMetadata : module": "",
                  "T:System.Func{System.Reflection.Metadata.MethodDefinitionHandle,Microsoft.CodeAnalysis.Emit.EditAndContinueMethodDebugInformation} : debugInformationProvider": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Emit.EmitBaseline": ""
                },
                "Content": "public static EmitBaseline CreateInitialBaseline(ModuleMetadata module, Func<MethodDefinitionHandle, EditAndContinueMethodDebugInformation> debugInformationProvider)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Emit.EmitBaseline.CreateInitialBaseline(Microsoft.CodeAnalysis.ModuleMetadata,System.Func{System.Reflection.Metadata.MethodDefinitionHandle,Microsoft.CodeAnalysis.Emit.EditAndContinueMethodDebugInformation})\">\r\n    <summary>\r\n    Creates an <see cref=\"T:Microsoft.CodeAnalysis.Emit.EmitBaseline\"/> from the metadata of the module before editing\r\n    and from a function that maps from a method to an array of local names. \r\n    </summary>\r\n    <param name=\"module\">The metadata of the module before editing.</param>\r\n    <param name=\"debugInformationProvider\">\r\n    A function that for a method handle returns Edit and Continue debug information emitted by the compiler into the PDB.\r\n    </param>\r\n    <returns>An <see cref=\"T:Microsoft.CodeAnalysis.Emit.EmitBaseline\"/> for the module.</returns>\r\n    <remarks>\r\n    Only the initial baseline is created using this method; subsequent baselines are created\r\n    automatically when emitting the differences in subsequent compilations.\r\n    \r\n    When an active method (one for which a frame is allocated on a stack) is updated the values of its local variables need to be preserved.\r\n    The mapping of local variable names to their slots in the frame is not included in the metadata and thus needs to be provided by \r\n    <paramref name=\"debugInformationProvider\"/>.\r\n    \r\n    The <paramref name=\"debugInformationProvider\"/> is only needed for the initial generation. The mapping for the subsequent generations\r\n    is carried over through <see cref=\"T:Microsoft.CodeAnalysis.Emit.EmitBaseline\"/>. The compiler assigns slots to named local variables (including named temporary variables)\r\n    it the order in which they appear in the source code. This property allows the compiler to reconstruct the local variable mapping \r\n    for the initial generation. A subsequent generation may add a new variable in between two variables of the previous generation. \r\n    Since the slots of the previous generation variables need to be preserved the only option is to add these new variables to the end.\r\n    The slot ordering thus no longer matches the syntax ordering. It is therefore necessary to pass <see cref=\"P:Microsoft.CodeAnalysis.Emit.EmitDifferenceResult.Baseline\"/>\r\n    to the next generation (rather than e.g. create new <see cref=\"T:Microsoft.CodeAnalysis.Emit.EmitBaseline\"/>s from scratch based on metadata produced by subsequent compilations).\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 83
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.ModuleMetadata : module": "",
                  "T:System.Func{System.Reflection.Metadata.MethodDefinitionHandle,Microsoft.CodeAnalysis.Emit.EditAndContinueMethodDebugInformation} : debugInformationProvider": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Emit.EmitBaseline": ""
                },
                "Content": "public static EmitBaseline CreateInitialBaseline(ModuleMetadata module, Func<MethodDefinitionHandle, EditAndContinueMethodDebugInformation> debugInformationProvider)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Emit.EmitBaseline.CreateInitialBaseline(Microsoft.CodeAnalysis.ModuleMetadata,System.Func{System.Reflection.Metadata.MethodDefinitionHandle,Microsoft.CodeAnalysis.Emit.EditAndContinueMethodDebugInformation})\">\r\n    <summary>\r\n    Creates an <see cref=\"T:Microsoft.CodeAnalysis.Emit.EmitBaseline\"/> from the metadata of the module before editing\r\n    and from a function that maps from a method to an array of local names. \r\n    </summary>\r\n    <param name=\"module\">The metadata of the module before editing.</param>\r\n    <param name=\"debugInformationProvider\">\r\n    A function that for a method handle returns Edit and Continue debug information emitted by the compiler into the PDB.\r\n    </param>\r\n    <returns>An <see cref=\"T:Microsoft.CodeAnalysis.Emit.EmitBaseline\"/> for the module.</returns>\r\n    <remarks>\r\n    Only the initial baseline is created using this method; subsequent baselines are created\r\n    automatically when emitting the differences in subsequent compilations.\r\n    \r\n    When an active method (one for which a frame is allocated on a stack) is updated the values of its local variables need to be preserved.\r\n    The mapping of local variable names to their slots in the frame is not included in the metadata and thus needs to be provided by \r\n    <paramref name=\"debugInformationProvider\"/>.\r\n    \r\n    The <paramref name=\"debugInformationProvider\"/> is only needed for the initial generation. The mapping for the subsequent generations\r\n    is carried over through <see cref=\"T:Microsoft.CodeAnalysis.Emit.EmitBaseline\"/>. The compiler assigns slots to named local variables (including named temporary variables)\r\n    it the order in which they appear in the source code. This property allows the compiler to reconstruct the local variable mapping \r\n    for the initial generation. A subsequent generation may add a new variable in between two variables of the previous generation. \r\n    Since the slots of the previous generation variables need to be preserved the only option is to add these new variables to the end.\r\n    The slot ordering thus no longer matches the syntax ordering. It is therefore necessary to pass <see cref=\"P:Microsoft.CodeAnalysis.Emit.EmitDifferenceResult.Baseline\"/>\r\n    to the next generation (rather than e.g. create new <see cref=\"T:Microsoft.CodeAnalysis.Emit.EmitBaseline\"/>s from scratch based on metadata produced by subsequent compilations).\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 83
              },
              "Id": "M:Microsoft.CodeAnalysis.Emit.EmitBaseline.CreateInitialBaseline(Microsoft.CodeAnalysis.ModuleMetadata,System.Func{System.Reflection.Metadata.MethodDefinitionHandle,Microsoft.CodeAnalysis.Emit.EditAndContinueMethodDebugInformation})",
              "Parent": "T:Microsoft.CodeAnalysis.Emit.EmitBaseline",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Emit.EmitBaseline.CreateInitialBaseline(Microsoft.CodeAnalysis.ModuleMetadata,System.Func{System.Reflection.Metadata.MethodDefinitionHandle,Microsoft.CodeAnalysis.Emit.EditAndContinueMethodDebugInformation})\">\r\n    <summary>\r\n    Creates an <see cref=\"T:Microsoft.CodeAnalysis.Emit.EmitBaseline\"/> from the metadata of the module before editing\r\n    and from a function that maps from a method to an array of local names. \r\n    </summary>\r\n    <param name=\"module\">The metadata of the module before editing.</param>\r\n    <param name=\"debugInformationProvider\">\r\n    A function that for a method handle returns Edit and Continue debug information emitted by the compiler into the PDB.\r\n    </param>\r\n    <returns>An <see cref=\"T:Microsoft.CodeAnalysis.Emit.EmitBaseline\"/> for the module.</returns>\r\n    <remarks>\r\n    Only the initial baseline is created using this method; subsequent baselines are created\r\n    automatically when emitting the differences in subsequent compilations.\r\n    \r\n    When an active method (one for which a frame is allocated on a stack) is updated the values of its local variables need to be preserved.\r\n    The mapping of local variable names to their slots in the frame is not included in the metadata and thus needs to be provided by \r\n    <paramref name=\"debugInformationProvider\"/>.\r\n    \r\n    The <paramref name=\"debugInformationProvider\"/> is only needed for the initial generation. The mapping for the subsequent generations\r\n    is carried over through <see cref=\"T:Microsoft.CodeAnalysis.Emit.EmitBaseline\"/>. The compiler assigns slots to named local variables (including named temporary variables)\r\n    it the order in which they appear in the source code. This property allows the compiler to reconstruct the local variable mapping \r\n    for the initial generation. A subsequent generation may add a new variable in between two variables of the previous generation. \r\n    Since the slots of the previous generation variables need to be preserved the only option is to add these new variables to the end.\r\n    The slot ordering thus no longer matches the syntax ordering. It is therefore necessary to pass <see cref=\"P:Microsoft.CodeAnalysis.Emit.EmitDifferenceResult.Baseline\"/>\r\n    to the next generation (rather than e.g. create new <see cref=\"T:Microsoft.CodeAnalysis.Emit.EmitBaseline\"/>s from scratch based on metadata produced by subsequent compilations).\r\n    </remarks>\r\n</member>\r\n"
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "OriginalMetadata",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.Emit.EmitBaseline.OriginalMetadata\">\r\n    <summary>\r\n    The original metadata of the module.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 135
              },
              "Id": "F:Microsoft.CodeAnalysis.Emit.EmitBaseline.OriginalMetadata",
              "Parent": "T:Microsoft.CodeAnalysis.Emit.EmitBaseline",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.Emit.EmitBaseline.OriginalMetadata\">\r\n    <summary>\r\n    The original metadata of the module.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Emit\\EditAndContinue\\EmitBaseline.cs",
          "InheritanceHierarchy": [
            "T:System.Object"
          ],
          "Syntax": {
            "Content": "public sealed class EmitBaseline",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.Emit.EmitBaseline\">\r\n    <summary>\r\n    Represents a module from a previous compilation. Used in Edit and Continue\r\n    to emit the differences in a subsequent compilation.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.Emit.EmitBaseline",
          "Parent": "N:Microsoft.CodeAnalysis.Emit",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.Emit.EmitBaseline\">\r\n    <summary>\r\n    Represents a module from a previous compilation. Used in Edit and Continue\r\n    to emit the differences in a subsequent compilation.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Emit.EmitBaseline",
                "Content": "public EmitBaseline Baseline",
                "XmlDocumentation": "",
                "StartLine": 16
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Emit.EmitBaseline",
                "Content": "public EmitBaseline Baseline",
                "XmlDocumentation": "",
                "StartLine": 16
              },
              "Id": "P:Microsoft.CodeAnalysis.Emit.EmitDifferenceResult.Baseline",
              "Parent": "T:Microsoft.CodeAnalysis.Emit.EmitDifferenceResult",
              "XmlDocumentation": ""
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Emit\\EditAndContinue\\EmitDifferenceResult.cs",
          "InheritanceHierarchy": [
            "T:System.Object",
            "T:Microsoft.CodeAnalysis.Emit.EmitResult"
          ],
          "Syntax": {
            "Content": "public sealed class EmitDifferenceResult",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.CodeAnalysis.Emit.EmitDifferenceResult",
          "Parent": "N:Microsoft.CodeAnalysis.Emit",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Emit.EmitOptions : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool Equals(EmitOptions other)",
                "XmlDocumentation": "",
                "StartLine": 134
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Emit.EmitOptions : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool Equals(EmitOptions other)",
                "XmlDocumentation": "",
                "StartLine": 134
              },
              "Id": "M:Microsoft.CodeAnalysis.Emit.EmitOptions.Equals(Microsoft.CodeAnalysis.Emit.EmitOptions)",
              "Parent": "T:Microsoft.CodeAnalysis.Emit.EmitOptions",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Object : obj": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public override bool Equals(object obj)",
                "XmlDocumentation": "",
                "StartLine": 129
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Object : obj": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public override bool Equals(object obj)",
                "XmlDocumentation": "",
                "StartLine": 129
              },
              "Id": "M:Microsoft.CodeAnalysis.Emit.EmitOptions.Equals(System.Object)",
              "Parent": "T:Microsoft.CodeAnalysis.Emit.EmitOptions",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public override int GetHashCode()",
                "XmlDocumentation": "",
                "StartLine": 155
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public override int GetHashCode()",
                "XmlDocumentation": "",
                "StartLine": 155
              },
              "Id": "M:Microsoft.CodeAnalysis.Emit.EmitOptions.GetHashCode",
              "Parent": "T:Microsoft.CodeAnalysis.Emit.EmitOptions",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.UInt64 : value": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Emit.EmitOptions": ""
                },
                "Content": "public EmitOptions WithBaseAddress(ulong value)",
                "XmlDocumentation": "",
                "StartLine": 277
              },
              "Syntax": {
                "Parameters": {
                  "T:System.UInt64 : value": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Emit.EmitOptions": ""
                },
                "Content": "public EmitOptions WithBaseAddress(ulong value)",
                "XmlDocumentation": "",
                "StartLine": 277
              },
              "Id": "M:Microsoft.CodeAnalysis.Emit.EmitOptions.WithBaseAddress(System.UInt64)",
              "Parent": "T:Microsoft.CodeAnalysis.Emit.EmitOptions",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Emit.DebugInformationFormat : format": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Emit.EmitOptions": ""
                },
                "Content": "public EmitOptions WithDebugInformationFormat(DebugInformationFormat format)",
                "XmlDocumentation": "",
                "StartLine": 253
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Emit.DebugInformationFormat : format": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Emit.EmitOptions": ""
                },
                "Content": "public EmitOptions WithDebugInformationFormat(DebugInformationFormat format)",
                "XmlDocumentation": "",
                "StartLine": 253
              },
              "Id": "M:Microsoft.CodeAnalysis.Emit.EmitOptions.WithDebugInformationFormat(Microsoft.CodeAnalysis.Emit.DebugInformationFormat)",
              "Parent": "T:Microsoft.CodeAnalysis.Emit.EmitOptions",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Boolean : value": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Emit.EmitOptions": ""
                },
                "Content": "public EmitOptions WithEmitMetadataOnly(bool value)",
                "XmlDocumentation": "",
                "StartLine": 223
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Boolean : value": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Emit.EmitOptions": ""
                },
                "Content": "public EmitOptions WithEmitMetadataOnly(bool value)",
                "XmlDocumentation": "",
                "StartLine": 223
              },
              "Id": "M:Microsoft.CodeAnalysis.Emit.EmitOptions.WithEmitMetadataOnly(System.Boolean)",
              "Parent": "T:Microsoft.CodeAnalysis.Emit.EmitOptions",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Int32 : value": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Emit.EmitOptions": ""
                },
                "Content": "public EmitOptions WithFileAlignment(int value)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Emit.EmitOptions.WithFileAlignment(System.Int32)\">\r\n    <summary>\r\n    Sets the byte alignment for portable executable file sections.\r\n    </summary>\r\n    <param name=\"value\">Can be one of the following values: 0, 512, 1024, 2048, 4096, 8192</param>\r\n</member>\r\n",
                "StartLine": 267
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Int32 : value": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Emit.EmitOptions": ""
                },
                "Content": "public EmitOptions WithFileAlignment(int value)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Emit.EmitOptions.WithFileAlignment(System.Int32)\">\r\n    <summary>\r\n    Sets the byte alignment for portable executable file sections.\r\n    </summary>\r\n    <param name=\"value\">Can be one of the following values: 0, 512, 1024, 2048, 4096, 8192</param>\r\n</member>\r\n",
                "StartLine": 267
              },
              "Id": "M:Microsoft.CodeAnalysis.Emit.EmitOptions.WithFileAlignment(System.Int32)",
              "Parent": "T:Microsoft.CodeAnalysis.Emit.EmitOptions",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Emit.EmitOptions.WithFileAlignment(System.Int32)\">\r\n    <summary>\r\n    Sets the byte alignment for portable executable file sections.\r\n    </summary>\r\n    <param name=\"value\">Can be one of the following values: 0, 512, 1024, 2048, 4096, 8192</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Boolean : value": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Emit.EmitOptions": ""
                },
                "Content": "public EmitOptions WithHighEntropyVirtualAddressSpace(bool value)",
                "XmlDocumentation": "",
                "StartLine": 287
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Boolean : value": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Emit.EmitOptions": ""
                },
                "Content": "public EmitOptions WithHighEntropyVirtualAddressSpace(bool value)",
                "XmlDocumentation": "",
                "StartLine": 287
              },
              "Id": "M:Microsoft.CodeAnalysis.Emit.EmitOptions.WithHighEntropyVirtualAddressSpace(System.Boolean)",
              "Parent": "T:Microsoft.CodeAnalysis.Emit.EmitOptions",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Boolean : value": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Emit.EmitOptions": ""
                },
                "Content": "public EmitOptions WithIncludePrivateMembers(bool value)",
                "XmlDocumentation": "",
                "StartLine": 327
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Boolean : value": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Emit.EmitOptions": ""
                },
                "Content": "public EmitOptions WithIncludePrivateMembers(bool value)",
                "XmlDocumentation": "",
                "StartLine": 327
              },
              "Id": "M:Microsoft.CodeAnalysis.Emit.EmitOptions.WithIncludePrivateMembers(System.Boolean)",
              "Parent": "T:Microsoft.CodeAnalysis.Emit.EmitOptions",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.String : outputName": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Emit.EmitOptions": ""
                },
                "Content": "public EmitOptions WithOutputNameOverride(string outputName)",
                "XmlDocumentation": "",
                "StartLine": 243
              },
              "Syntax": {
                "Parameters": {
                  "T:System.String : outputName": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Emit.EmitOptions": ""
                },
                "Content": "public EmitOptions WithOutputNameOverride(string outputName)",
                "XmlDocumentation": "",
                "StartLine": 243
              },
              "Id": "M:Microsoft.CodeAnalysis.Emit.EmitOptions.WithOutputNameOverride(System.String)",
              "Parent": "T:Microsoft.CodeAnalysis.Emit.EmitOptions",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.String : path": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Emit.EmitOptions": ""
                },
                "Content": "public EmitOptions WithPdbFilePath(string path)",
                "XmlDocumentation": "",
                "StartLine": 233
              },
              "Syntax": {
                "Parameters": {
                  "T:System.String : path": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Emit.EmitOptions": ""
                },
                "Content": "public EmitOptions WithPdbFilePath(string path)",
                "XmlDocumentation": "",
                "StartLine": 233
              },
              "Id": "M:Microsoft.CodeAnalysis.Emit.EmitOptions.WithPdbFilePath(System.String)",
              "Parent": "T:Microsoft.CodeAnalysis.Emit.EmitOptions",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.String : version": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Emit.EmitOptions": ""
                },
                "Content": "public EmitOptions WithRuntimeMetadataVersion(string version)",
                "XmlDocumentation": "",
                "StartLine": 307
              },
              "Syntax": {
                "Parameters": {
                  "T:System.String : version": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Emit.EmitOptions": ""
                },
                "Content": "public EmitOptions WithRuntimeMetadataVersion(string version)",
                "XmlDocumentation": "",
                "StartLine": 307
              },
              "Id": "M:Microsoft.CodeAnalysis.Emit.EmitOptions.WithRuntimeMetadataVersion(System.String)",
              "Parent": "T:Microsoft.CodeAnalysis.Emit.EmitOptions",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SubsystemVersion : subsystemVersion": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Emit.EmitOptions": ""
                },
                "Content": "public EmitOptions WithSubsystemVersion(SubsystemVersion subsystemVersion)",
                "XmlDocumentation": "",
                "StartLine": 297
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.SubsystemVersion : subsystemVersion": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Emit.EmitOptions": ""
                },
                "Content": "public EmitOptions WithSubsystemVersion(SubsystemVersion subsystemVersion)",
                "XmlDocumentation": "",
                "StartLine": 297
              },
              "Id": "M:Microsoft.CodeAnalysis.Emit.EmitOptions.WithSubsystemVersion(Microsoft.CodeAnalysis.SubsystemVersion)",
              "Parent": "T:Microsoft.CodeAnalysis.Emit.EmitOptions",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Boolean : value": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Emit.EmitOptions": ""
                },
                "Content": "public EmitOptions WithTolerateErrors(bool value)",
                "XmlDocumentation": "",
                "StartLine": 317
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Boolean : value": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Emit.EmitOptions": ""
                },
                "Content": "public EmitOptions WithTolerateErrors(bool value)",
                "XmlDocumentation": "",
                "StartLine": 317
              },
              "Id": "M:Microsoft.CodeAnalysis.Emit.EmitOptions.WithTolerateErrors(System.Boolean)",
              "Parent": "T:Microsoft.CodeAnalysis.Emit.EmitOptions",
              "XmlDocumentation": ""
            }
          ],
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:System.UInt64",
                "Content": "public ulong BaseAddress",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Emit.EmitOptions.BaseAddress\">\r\n    <summary>\r\n    Specifies the preferred base address at which to load the output DLL.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 55
              },
              "Syntax": {
                "PropertyType": "T:System.UInt64",
                "Content": "public ulong BaseAddress",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Emit.EmitOptions.BaseAddress\">\r\n    <summary>\r\n    Specifies the preferred base address at which to load the output DLL.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 55
              },
              "Id": "P:Microsoft.CodeAnalysis.Emit.EmitOptions.BaseAddress",
              "Parent": "T:Microsoft.CodeAnalysis.Emit.EmitOptions",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Emit.EmitOptions.BaseAddress\">\r\n    <summary>\r\n    Specifies the preferred base address at which to load the output DLL.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Emit.DebugInformationFormat",
                "Content": "public DebugInformationFormat DebugInformationFormat",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Emit.EmitOptions.DebugInformationFormat\">\r\n    <summary>\r\n    Debug information format.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 60
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Emit.DebugInformationFormat",
                "Content": "public DebugInformationFormat DebugInformationFormat",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Emit.EmitOptions.DebugInformationFormat\">\r\n    <summary>\r\n    Debug information format.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 60
              },
              "Id": "P:Microsoft.CodeAnalysis.Emit.EmitOptions.DebugInformationFormat",
              "Parent": "T:Microsoft.CodeAnalysis.Emit.EmitOptions",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Emit.EmitOptions.DebugInformationFormat\">\r\n    <summary>\r\n    Debug information format.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool EmitMetadataOnly",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Emit.EmitOptions.EmitMetadataOnly\">\r\n    <summary>\r\n    True to emit an assembly excluding executable code such as method bodies.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 17
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool EmitMetadataOnly",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Emit.EmitOptions.EmitMetadataOnly\">\r\n    <summary>\r\n    True to emit an assembly excluding executable code such as method bodies.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 17
              },
              "Id": "P:Microsoft.CodeAnalysis.Emit.EmitOptions.EmitMetadataOnly",
              "Parent": "T:Microsoft.CodeAnalysis.Emit.EmitOptions",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Emit.EmitOptions.EmitMetadataOnly\">\r\n    <summary>\r\n    True to emit an assembly excluding executable code such as method bodies.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Int32",
                "Content": "public int FileAlignment",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Emit.EmitOptions.FileAlignment\">\r\n    <summary>\r\n    Specifies the size of sections in the output file. \r\n    </summary>\r\n    <remarks>\r\n    Valid values are 0, 512, 1024, 2048, 4096 and 8192.\r\n    If the value is 0 the file alignment is determined based upon the value of <see cref=\"T:Microsoft.CodeAnalysis.Platform\"/>.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 45
              },
              "Syntax": {
                "PropertyType": "T:System.Int32",
                "Content": "public int FileAlignment",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Emit.EmitOptions.FileAlignment\">\r\n    <summary>\r\n    Specifies the size of sections in the output file. \r\n    </summary>\r\n    <remarks>\r\n    Valid values are 0, 512, 1024, 2048, 4096 and 8192.\r\n    If the value is 0 the file alignment is determined based upon the value of <see cref=\"T:Microsoft.CodeAnalysis.Platform\"/>.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 45
              },
              "Id": "P:Microsoft.CodeAnalysis.Emit.EmitOptions.FileAlignment",
              "Parent": "T:Microsoft.CodeAnalysis.Emit.EmitOptions",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Emit.EmitOptions.FileAlignment\">\r\n    <summary>\r\n    Specifies the size of sections in the output file. \r\n    </summary>\r\n    <remarks>\r\n    Valid values are 0, 512, 1024, 2048, 4096 and 8192.\r\n    If the value is 0 the file alignment is determined based upon the value of <see cref=\"T:Microsoft.CodeAnalysis.Platform\"/>.\r\n    </remarks>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool HighEntropyVirtualAddressSpace",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Emit.EmitOptions.HighEntropyVirtualAddressSpace\">\r\n    <summary>\r\n    True to enable high entropy virtual address space for the output binary.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 50
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool HighEntropyVirtualAddressSpace",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Emit.EmitOptions.HighEntropyVirtualAddressSpace\">\r\n    <summary>\r\n    True to enable high entropy virtual address space for the output binary.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 50
              },
              "Id": "P:Microsoft.CodeAnalysis.Emit.EmitOptions.HighEntropyVirtualAddressSpace",
              "Parent": "T:Microsoft.CodeAnalysis.Emit.EmitOptions",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Emit.EmitOptions.HighEntropyVirtualAddressSpace\">\r\n    <summary>\r\n    True to enable high entropy virtual address space for the output binary.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool IncludePrivateMembers",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Emit.EmitOptions.IncludePrivateMembers\">\r\n    <summary>\r\n    Unless set (private) members that don't affect the language semantics of the resulting assembly will be excluded\r\n    when emitting with <see cref=\"P:Microsoft.CodeAnalysis.Emit.EmitOptions.EmitMetadataOnly\"/> on. \r\n    </summary>\r\n    <remarks>\r\n    Has no effect when <see cref=\"P:Microsoft.CodeAnalysis.Emit.EmitOptions.EmitMetadataOnly\"/> is false.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 31
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool IncludePrivateMembers",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Emit.EmitOptions.IncludePrivateMembers\">\r\n    <summary>\r\n    Unless set (private) members that don't affect the language semantics of the resulting assembly will be excluded\r\n    when emitting with <see cref=\"P:Microsoft.CodeAnalysis.Emit.EmitOptions.EmitMetadataOnly\"/> on. \r\n    </summary>\r\n    <remarks>\r\n    Has no effect when <see cref=\"P:Microsoft.CodeAnalysis.Emit.EmitOptions.EmitMetadataOnly\"/> is false.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 31
              },
              "Id": "P:Microsoft.CodeAnalysis.Emit.EmitOptions.IncludePrivateMembers",
              "Parent": "T:Microsoft.CodeAnalysis.Emit.EmitOptions",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Emit.EmitOptions.IncludePrivateMembers\">\r\n    <summary>\r\n    Unless set (private) members that don't affect the language semantics of the resulting assembly will be excluded\r\n    when emitting with <see cref=\"P:Microsoft.CodeAnalysis.Emit.EmitOptions.EmitMetadataOnly\"/> on. \r\n    </summary>\r\n    <remarks>\r\n    Has no effect when <see cref=\"P:Microsoft.CodeAnalysis.Emit.EmitOptions.EmitMetadataOnly\"/> is false.\r\n    </remarks>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.String",
                "Content": "public string OutputNameOverride",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Emit.EmitOptions.OutputNameOverride\">\r\n    <summary>\r\n    Assembly name override - file name and extension. If not specified the the compilation name is used.\r\n    </summary>\r\n    <remarks>\r\n    By default the name of the output assembly is <see cref=\"P:Microsoft.CodeAnalysis.Compilation.AssemblyName\"/>. Only in rare cases it is necessary\r\n    to override the name.\r\n    \r\n    CAUTION: If this is set to a (non-null) value other than the existing compilation output name, then internals-visible-to\r\n    and assembly references may not work as expected.  In particular, things that were visible at bind time, based on the \r\n    name of the compilation, may not be visible at runtime and vice-versa.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 73
              },
              "Syntax": {
                "PropertyType": "T:System.String",
                "Content": "public string OutputNameOverride",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Emit.EmitOptions.OutputNameOverride\">\r\n    <summary>\r\n    Assembly name override - file name and extension. If not specified the the compilation name is used.\r\n    </summary>\r\n    <remarks>\r\n    By default the name of the output assembly is <see cref=\"P:Microsoft.CodeAnalysis.Compilation.AssemblyName\"/>. Only in rare cases it is necessary\r\n    to override the name.\r\n    \r\n    CAUTION: If this is set to a (non-null) value other than the existing compilation output name, then internals-visible-to\r\n    and assembly references may not work as expected.  In particular, things that were visible at bind time, based on the \r\n    name of the compilation, may not be visible at runtime and vice-versa.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 73
              },
              "Id": "P:Microsoft.CodeAnalysis.Emit.EmitOptions.OutputNameOverride",
              "Parent": "T:Microsoft.CodeAnalysis.Emit.EmitOptions",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Emit.EmitOptions.OutputNameOverride\">\r\n    <summary>\r\n    Assembly name override - file name and extension. If not specified the the compilation name is used.\r\n    </summary>\r\n    <remarks>\r\n    By default the name of the output assembly is <see cref=\"P:Microsoft.CodeAnalysis.Compilation.AssemblyName\"/>. Only in rare cases it is necessary\r\n    to override the name.\r\n    \r\n    CAUTION: If this is set to a (non-null) value other than the existing compilation output name, then internals-visible-to\r\n    and assembly references may not work as expected.  In particular, things that were visible at bind time, based on the \r\n    name of the compilation, may not be visible at runtime and vice-versa.\r\n    </remarks>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.String",
                "Content": "public string PdbFilePath",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Emit.EmitOptions.PdbFilePath\">\r\n    <summary>\r\n    The name of the PDB file to be embedded in the PE image, or null to use the default.\r\n    </summary>\r\n    <remarks>\r\n    If not specified the file name of the source module with an extension changed to \"pdb\" is used.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 81
              },
              "Syntax": {
                "PropertyType": "T:System.String",
                "Content": "public string PdbFilePath",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Emit.EmitOptions.PdbFilePath\">\r\n    <summary>\r\n    The name of the PDB file to be embedded in the PE image, or null to use the default.\r\n    </summary>\r\n    <remarks>\r\n    If not specified the file name of the source module with an extension changed to \"pdb\" is used.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 81
              },
              "Id": "P:Microsoft.CodeAnalysis.Emit.EmitOptions.PdbFilePath",
              "Parent": "T:Microsoft.CodeAnalysis.Emit.EmitOptions",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Emit.EmitOptions.PdbFilePath\">\r\n    <summary>\r\n    The name of the PDB file to be embedded in the PE image, or null to use the default.\r\n    </summary>\r\n    <remarks>\r\n    If not specified the file name of the source module with an extension changed to \"pdb\" is used.\r\n    </remarks>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.String",
                "Content": "public string RuntimeMetadataVersion",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Emit.EmitOptions.RuntimeMetadataVersion\">\r\n    <summary>\r\n    Runtime metadata version. \r\n    </summary>\r\n</member>\r\n",
                "StartLine": 86
              },
              "Syntax": {
                "PropertyType": "T:System.String",
                "Content": "public string RuntimeMetadataVersion",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Emit.EmitOptions.RuntimeMetadataVersion\">\r\n    <summary>\r\n    Runtime metadata version. \r\n    </summary>\r\n</member>\r\n",
                "StartLine": 86
              },
              "Id": "P:Microsoft.CodeAnalysis.Emit.EmitOptions.RuntimeMetadataVersion",
              "Parent": "T:Microsoft.CodeAnalysis.Emit.EmitOptions",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Emit.EmitOptions.RuntimeMetadataVersion\">\r\n    <summary>\r\n    Runtime metadata version. \r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SubsystemVersion",
                "Content": "public SubsystemVersion SubsystemVersion",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Emit.EmitOptions.SubsystemVersion\">\r\n    <summary>\r\n    Subsystem version\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 36
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.SubsystemVersion",
                "Content": "public SubsystemVersion SubsystemVersion",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Emit.EmitOptions.SubsystemVersion\">\r\n    <summary>\r\n    Subsystem version\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 36
              },
              "Id": "P:Microsoft.CodeAnalysis.Emit.EmitOptions.SubsystemVersion",
              "Parent": "T:Microsoft.CodeAnalysis.Emit.EmitOptions",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Emit.EmitOptions.SubsystemVersion\">\r\n    <summary>\r\n    Subsystem version\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool TolerateErrors",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Emit.EmitOptions.TolerateErrors\">\r\n    <summary>\r\n    Tolerate errors, producing a PE stream and a success result even in the presence of (some) errors. \r\n    </summary>\r\n</member>\r\n",
                "StartLine": 22
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool TolerateErrors",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Emit.EmitOptions.TolerateErrors\">\r\n    <summary>\r\n    Tolerate errors, producing a PE stream and a success result even in the presence of (some) errors. \r\n    </summary>\r\n</member>\r\n",
                "StartLine": 22
              },
              "Id": "P:Microsoft.CodeAnalysis.Emit.EmitOptions.TolerateErrors",
              "Parent": "T:Microsoft.CodeAnalysis.Emit.EmitOptions",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Emit.EmitOptions.TolerateErrors\">\r\n    <summary>\r\n    Tolerate errors, producing a PE stream and a success result even in the presence of (some) errors. \r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Constructors": [
            {
              "ConstructorSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Emit.DebugInformationFormat : debugInformationFormat": "",
                  "T:Microsoft.CodeAnalysis.SubsystemVersion : subsystemVersion": "",
                  "T:System.Boolean : highEntropyVirtualAddressSpace": "",
                  "T:System.Boolean : includePrivateMembers": "",
                  "T:System.Boolean : metadataOnly": "",
                  "T:System.Boolean : tolerateErrors": "",
                  "T:System.Int32 : fileAlignment": "",
                  "T:System.String : outputNameOverride": "",
                  "T:System.String : pdbFilePath": "",
                  "T:System.String : runtimeMetadataVersion": "",
                  "T:System.UInt64 : baseAddress": ""
                },
                "Content": "public EmitOptions(bool metadataOnly = false, DebugInformationFormat debugInformationFormat = 0, string pdbFilePath = null, string outputNameOverride = null, int fileAlignment = 0, ulong baseAddress = 0, bool highEntropyVirtualAddressSpace = false, SubsystemVersion subsystemVersion = default (SubsystemVersion), string runtimeMetadataVersion = null, bool tolerateErrors = false, bool includePrivateMembers = false)",
                "XmlDocumentation": "",
                "StartLine": 88
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Emit.DebugInformationFormat : debugInformationFormat": "",
                  "T:Microsoft.CodeAnalysis.SubsystemVersion : subsystemVersion": "",
                  "T:System.Boolean : highEntropyVirtualAddressSpace": "",
                  "T:System.Boolean : includePrivateMembers": "",
                  "T:System.Boolean : metadataOnly": "",
                  "T:System.Boolean : tolerateErrors": "",
                  "T:System.Int32 : fileAlignment": "",
                  "T:System.String : outputNameOverride": "",
                  "T:System.String : pdbFilePath": "",
                  "T:System.String : runtimeMetadataVersion": "",
                  "T:System.UInt64 : baseAddress": ""
                },
                "Content": "public EmitOptions(bool metadataOnly = false, DebugInformationFormat debugInformationFormat = 0, string pdbFilePath = null, string outputNameOverride = null, int fileAlignment = 0, ulong baseAddress = 0, bool highEntropyVirtualAddressSpace = false, SubsystemVersion subsystemVersion = default (SubsystemVersion), string runtimeMetadataVersion = null, bool tolerateErrors = false, bool includePrivateMembers = false)",
                "XmlDocumentation": "",
                "StartLine": 88
              },
              "Id": "M:Microsoft.CodeAnalysis.Emit.EmitOptions.#ctor(System.Boolean,Microsoft.CodeAnalysis.Emit.DebugInformationFormat,System.String,System.String,System.Int32,System.UInt64,System.Boolean,Microsoft.CodeAnalysis.SubsystemVersion,System.String,System.Boolean,System.Boolean)",
              "Parent": "T:Microsoft.CodeAnalysis.Emit.EmitOptions",
              "XmlDocumentation": ""
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Emit\\EmitOptions.cs",
          "InheritanceHierarchy": [
            "T:System.Object"
          ],
          "Syntax": {
            "Content": "public sealed class EmitOptions",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.Emit.EmitOptions\">\r\n    <summary>\r\n    Represents compilation emit options.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.Emit.EmitOptions",
          "Parent": "N:Microsoft.CodeAnalysis.Emit",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.Emit.EmitOptions\">\r\n    <summary>\r\n    Represents compilation emit options.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "protected virtual string GetDebuggerDisplay()",
                "XmlDocumentation": "",
                "StartLine": 41
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "protected virtual string GetDebuggerDisplay()",
                "XmlDocumentation": "",
                "StartLine": 41
              },
              "Id": "M:Microsoft.CodeAnalysis.Emit.EmitResult.GetDebuggerDisplay",
              "Parent": "T:Microsoft.CodeAnalysis.Emit.EmitResult",
              "XmlDocumentation": ""
            }
          ],
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostic}",
                "Content": "public ImmutableArray<Diagnostic> Diagnostics",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Emit.EmitResult.Diagnostics\">\r\n    <summary>\r\n    A list of all the diagnostics associated with compilations. This include parse errors, declaration errors,\r\n    compilation errors, and emitting errors.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 30
              },
              "Syntax": {
                "PropertyType": "T:System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostic}",
                "Content": "public ImmutableArray<Diagnostic> Diagnostics",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Emit.EmitResult.Diagnostics\">\r\n    <summary>\r\n    A list of all the diagnostics associated with compilations. This include parse errors, declaration errors,\r\n    compilation errors, and emitting errors.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 30
              },
              "Id": "P:Microsoft.CodeAnalysis.Emit.EmitResult.Diagnostics",
              "Parent": "T:Microsoft.CodeAnalysis.Emit.EmitResult",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Emit.EmitResult.Diagnostics\">\r\n    <summary>\r\n    A list of all the diagnostics associated with compilations. This include parse errors, declaration errors,\r\n    compilation errors, and emitting errors.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool Success",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Emit.EmitResult.Success\">\r\n    <summary>\r\n    True if the compilation successfully produced an executable.\r\n    If false then the diagnostics should include at least one error diagnostic\r\n    indicating the cause of the failure.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 21
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool Success",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Emit.EmitResult.Success\">\r\n    <summary>\r\n    True if the compilation successfully produced an executable.\r\n    If false then the diagnostics should include at least one error diagnostic\r\n    indicating the cause of the failure.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 21
              },
              "Id": "P:Microsoft.CodeAnalysis.Emit.EmitResult.Success",
              "Parent": "T:Microsoft.CodeAnalysis.Emit.EmitResult",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Emit.EmitResult.Success\">\r\n    <summary>\r\n    True if the compilation successfully produced an executable.\r\n    If false then the diagnostics should include at least one error diagnostic\r\n    indicating the cause of the failure.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Compilation\\EmitResult.cs",
          "InheritanceHierarchy": [
            "T:System.Object"
          ],
          "Syntax": {
            "Content": "public class EmitResult",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.Emit.EmitResult\">\r\n    <summary>\r\n    The result of the Compilation.Emit method.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.Emit.EmitResult",
          "Parent": "N:Microsoft.CodeAnalysis.Emit",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.Emit.EmitResult\">\r\n    <summary>\r\n    The result of the Compilation.Emit method.\r\n    </summary>\r\n</member>\r\n"
        }
      ],
      "Structs": [
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Collections.Immutable.ImmutableArray{System.Byte} : compressedLambdaMap": "",
                  "T:System.Collections.Immutable.ImmutableArray{System.Byte} : compressedSlotMap": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Emit.EditAndContinueMethodDebugInformation": ""
                },
                "Content": "public static EditAndContinueMethodDebugInformation Create(ImmutableArray<byte> compressedSlotMap, ImmutableArray<byte> compressedLambdaMap)",
                "XmlDocumentation": "",
                "StartLine": 31
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Collections.Immutable.ImmutableArray{System.Byte} : compressedLambdaMap": "",
                  "T:System.Collections.Immutable.ImmutableArray{System.Byte} : compressedSlotMap": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Emit.EditAndContinueMethodDebugInformation": ""
                },
                "Content": "public static EditAndContinueMethodDebugInformation Create(ImmutableArray<byte> compressedSlotMap, ImmutableArray<byte> compressedLambdaMap)",
                "XmlDocumentation": "",
                "StartLine": 31
              },
              "Id": "M:Microsoft.CodeAnalysis.Emit.EditAndContinueMethodDebugInformation.Create(System.Collections.Immutable.ImmutableArray{System.Byte},System.Collections.Immutable.ImmutableArray{System.Byte})",
              "Parent": "T:Microsoft.CodeAnalysis.Emit.EditAndContinueMethodDebugInformation",
              "XmlDocumentation": ""
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Emit\\EditAndContinueMethodDebugInformation.cs",
          "InheritanceHierarchy": [
            "T:System.Object",
            "T:System.ValueType"
          ],
          "Syntax": {
            "Content": "public struct EditAndContinueMethodDebugInformation\r\n\r\n#endregion",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.Emit.EditAndContinueMethodDebugInformation\">\r\n    <summary>\r\n    Debugging information associated with the specified method that is emitted by the compiler to support Edit and Continue.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.Emit.EditAndContinueMethodDebugInformation",
          "Parent": "N:Microsoft.CodeAnalysis.Emit",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.Emit.EditAndContinueMethodDebugInformation\">\r\n    <summary>\r\n    Debugging information associated with the specified method that is emitted by the compiler to support Edit and Continue.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Emit.SemanticEdit : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool Equals(SemanticEdit other)",
                "XmlDocumentation": "",
                "StartLine": 113
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Emit.SemanticEdit : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool Equals(SemanticEdit other)",
                "XmlDocumentation": "",
                "StartLine": 113
              },
              "Id": "M:Microsoft.CodeAnalysis.Emit.SemanticEdit.Equals(Microsoft.CodeAnalysis.Emit.SemanticEdit)",
              "Parent": "T:Microsoft.CodeAnalysis.Emit.SemanticEdit",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Object : obj": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public override bool Equals(object obj)",
                "XmlDocumentation": "",
                "StartLine": 108
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Object : obj": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public override bool Equals(object obj)",
                "XmlDocumentation": "",
                "StartLine": 108
              },
              "Id": "M:Microsoft.CodeAnalysis.Emit.SemanticEdit.Equals(System.Object)",
              "Parent": "T:Microsoft.CodeAnalysis.Emit.SemanticEdit",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public override int GetHashCode()",
                "XmlDocumentation": "",
                "StartLine": 101
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public override int GetHashCode()",
                "XmlDocumentation": "",
                "StartLine": 101
              },
              "Id": "M:Microsoft.CodeAnalysis.Emit.SemanticEdit.GetHashCode",
              "Parent": "T:Microsoft.CodeAnalysis.Emit.SemanticEdit",
              "XmlDocumentation": ""
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "Kind",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.Emit.SemanticEdit.Kind\">\r\n    <summary>\r\n    The type of edit.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 42
              },
              "Id": "F:Microsoft.CodeAnalysis.Emit.SemanticEdit.Kind",
              "Parent": "T:Microsoft.CodeAnalysis.Emit.SemanticEdit",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.Emit.SemanticEdit.Kind\">\r\n    <summary>\r\n    The type of edit.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "NewSymbol",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.Emit.SemanticEdit.NewSymbol\">\r\n    <summary>\r\n    The symbol from the later compilation,\r\n    or null if the edit represents a deletion.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 54
              },
              "Id": "F:Microsoft.CodeAnalysis.Emit.SemanticEdit.NewSymbol",
              "Parent": "T:Microsoft.CodeAnalysis.Emit.SemanticEdit",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.Emit.SemanticEdit.NewSymbol\">\r\n    <summary>\r\n    The symbol from the later compilation,\r\n    or null if the edit represents a deletion.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "OldSymbol",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.Emit.SemanticEdit.OldSymbol\">\r\n    <summary>\r\n    The symbol from the earlier compilation,\r\n    or null if the edit represents an addition.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 48
              },
              "Id": "F:Microsoft.CodeAnalysis.Emit.SemanticEdit.OldSymbol",
              "Parent": "T:Microsoft.CodeAnalysis.Emit.SemanticEdit",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.Emit.SemanticEdit.OldSymbol\">\r\n    <summary>\r\n    The symbol from the earlier compilation,\r\n    or null if the edit represents an addition.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "PreserveLocalVariables",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.Emit.SemanticEdit.PreserveLocalVariables\">\r\n    <summary>\r\n    True if the edit is an update of the active method and local values\r\n    should be preserved; false otherwise.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 71
              },
              "Id": "F:Microsoft.CodeAnalysis.Emit.SemanticEdit.PreserveLocalVariables",
              "Parent": "T:Microsoft.CodeAnalysis.Emit.SemanticEdit",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.Emit.SemanticEdit.PreserveLocalVariables\">\r\n    <summary>\r\n    True if the edit is an update of the active method and local values\r\n    should be preserved; false otherwise.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "SyntaxMap",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.Emit.SemanticEdit.SyntaxMap\">\r\n    <summary>\r\n    A map from syntax node in the later compilation to syntax node in the previous compilation, \r\n    or null if <see cref=\"F:Microsoft.CodeAnalysis.Emit.SemanticEdit.PreserveLocalVariables\"/> is false and the map is not needed or \r\n    the source of the current method is the same as the source of the previous method.\r\n    </summary>\r\n    <remarks>\r\n    The map does not need to map all syntax nodes in the active method, only those syntax nodes\r\n    that declare a local or generate a long lived local.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 65
              },
              "Id": "F:Microsoft.CodeAnalysis.Emit.SemanticEdit.SyntaxMap",
              "Parent": "T:Microsoft.CodeAnalysis.Emit.SemanticEdit",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.Emit.SemanticEdit.SyntaxMap\">\r\n    <summary>\r\n    A map from syntax node in the later compilation to syntax node in the previous compilation, \r\n    or null if <see cref=\"F:Microsoft.CodeAnalysis.Emit.SemanticEdit.PreserveLocalVariables\"/> is false and the map is not needed or \r\n    the source of the current method is the same as the source of the previous method.\r\n    </summary>\r\n    <remarks>\r\n    The map does not need to map all syntax nodes in the active method, only those syntax nodes\r\n    that declare a local or generate a long lived local.\r\n    </remarks>\r\n</member>\r\n"
            }
          ],
          "Constructors": [
            {
              "ConstructorSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Emit.SemanticEditKind : kind": "",
                  "T:Microsoft.CodeAnalysis.ISymbol : newSymbol": "",
                  "T:Microsoft.CodeAnalysis.ISymbol : oldSymbol": "",
                  "T:System.Boolean : preserveLocalVariables": "",
                  "T:System.Func{Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode} : syntaxMap": ""
                },
                "Content": "public SemanticEdit(SemanticEditKind kind, ISymbol oldSymbol, ISymbol newSymbol, Func<SyntaxNode, SyntaxNode> syntaxMap = null, bool preserveLocalVariables = false)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Emit.SemanticEdit.#ctor(Microsoft.CodeAnalysis.Emit.SemanticEditKind,Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.ISymbol,System.Func{Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode},System.Boolean)\">\r\n    <summary>\r\n    Initializes an instance of <see cref=\"T:Microsoft.CodeAnalysis.Emit.SemanticEdit\"/>.\r\n    </summary>\r\n    <param name=\"kind\">The type of edit.</param>\r\n    <param name=\"oldSymbol\">\r\n    The symbol from the earlier compilation, or null if the edit represents an addition.\r\n    </param>\r\n    <param name=\"newSymbol\">\r\n    The symbol from the later compilation, or null if the edit represents a deletion.\r\n    </param>\r\n    <param name=\"syntaxMap\">\r\n    A map from syntax node in the later compilation to syntax node in the previous compilation, \r\n    or null if <paramref name=\"preserveLocalVariables\"/> is false and the map is not needed or \r\n    the source of the current method is the same as the source of the previous method.\r\n    </param>\r\n    <param name=\"preserveLocalVariables\">\r\n    True if the edit is an update of an active method and local values should be preserved; false otherwise.\r\n    </param>\r\n</member>\r\n",
                "StartLine": 91
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Emit.SemanticEditKind : kind": "",
                  "T:Microsoft.CodeAnalysis.ISymbol : newSymbol": "",
                  "T:Microsoft.CodeAnalysis.ISymbol : oldSymbol": "",
                  "T:System.Boolean : preserveLocalVariables": "",
                  "T:System.Func{Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode} : syntaxMap": ""
                },
                "Content": "public SemanticEdit(SemanticEditKind kind, ISymbol oldSymbol, ISymbol newSymbol, Func<SyntaxNode, SyntaxNode> syntaxMap = null, bool preserveLocalVariables = false)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Emit.SemanticEdit.#ctor(Microsoft.CodeAnalysis.Emit.SemanticEditKind,Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.ISymbol,System.Func{Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode},System.Boolean)\">\r\n    <summary>\r\n    Initializes an instance of <see cref=\"T:Microsoft.CodeAnalysis.Emit.SemanticEdit\"/>.\r\n    </summary>\r\n    <param name=\"kind\">The type of edit.</param>\r\n    <param name=\"oldSymbol\">\r\n    The symbol from the earlier compilation, or null if the edit represents an addition.\r\n    </param>\r\n    <param name=\"newSymbol\">\r\n    The symbol from the later compilation, or null if the edit represents a deletion.\r\n    </param>\r\n    <param name=\"syntaxMap\">\r\n    A map from syntax node in the later compilation to syntax node in the previous compilation, \r\n    or null if <paramref name=\"preserveLocalVariables\"/> is false and the map is not needed or \r\n    the source of the current method is the same as the source of the previous method.\r\n    </param>\r\n    <param name=\"preserveLocalVariables\">\r\n    True if the edit is an update of an active method and local values should be preserved; false otherwise.\r\n    </param>\r\n</member>\r\n",
                "StartLine": 91
              },
              "Id": "M:Microsoft.CodeAnalysis.Emit.SemanticEdit.#ctor(Microsoft.CodeAnalysis.Emit.SemanticEditKind,Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.ISymbol,System.Func{Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode},System.Boolean)",
              "Parent": "T:Microsoft.CodeAnalysis.Emit.SemanticEdit",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Emit.SemanticEdit.#ctor(Microsoft.CodeAnalysis.Emit.SemanticEditKind,Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.ISymbol,System.Func{Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxNode},System.Boolean)\">\r\n    <summary>\r\n    Initializes an instance of <see cref=\"T:Microsoft.CodeAnalysis.Emit.SemanticEdit\"/>.\r\n    </summary>\r\n    <param name=\"kind\">The type of edit.</param>\r\n    <param name=\"oldSymbol\">\r\n    The symbol from the earlier compilation, or null if the edit represents an addition.\r\n    </param>\r\n    <param name=\"newSymbol\">\r\n    The symbol from the later compilation, or null if the edit represents a deletion.\r\n    </param>\r\n    <param name=\"syntaxMap\">\r\n    A map from syntax node in the later compilation to syntax node in the previous compilation, \r\n    or null if <paramref name=\"preserveLocalVariables\"/> is false and the map is not needed or \r\n    the source of the current method is the same as the source of the previous method.\r\n    </param>\r\n    <param name=\"preserveLocalVariables\">\r\n    True if the edit is an update of an active method and local values should be preserved; false otherwise.\r\n    </param>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Emit\\SemanticEdit.cs",
          "InheritanceHierarchy": [
            "T:System.Object",
            "T:System.ValueType"
          ],
          "Syntax": {
            "Content": "public struct SemanticEdit",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.Emit.SemanticEdit\">\r\n    <summary>\r\n    Describes a symbol edit between two compilations. \r\n    For example, an addition of a method, an update of a method, removal of a type, etc.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.Emit.SemanticEdit",
          "Parent": "N:Microsoft.CodeAnalysis.Emit",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.Emit.SemanticEdit\">\r\n    <summary>\r\n    Describes a symbol edit between two compilations. \r\n    For example, an addition of a method, an update of a method, removal of a type, etc.\r\n    </summary>\r\n</member>\r\n"
        }
      ],
      "Enums": [
        {
          "Syntax": {
            "Content": "public enum DebugInformationFormat",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.CodeAnalysis.Emit.DebugInformationFormat",
          "Parent": "N:Microsoft.CodeAnalysis.Emit",
          "XmlDocumentation": ""
        },
        {
          "Syntax": {
            "Content": "public enum SemanticEditKind",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.CodeAnalysis.Emit.SemanticEditKind",
          "Parent": "N:Microsoft.CodeAnalysis.Emit",
          "XmlDocumentation": ""
        }
      ],
      "AllowedMemberTypes": [
        2,
        3,
        4,
        5,
        6
      ],
      "Id": "N:Microsoft.CodeAnalysis.Emit",
      "Parent": "Microsoft.CodeAnalysis",
      "XmlDocumentation": ""
    },
    {
      "AllowedMemberTypes": [
        2,
        3,
        4,
        5,
        6
      ],
      "Id": "N:Microsoft.CodeAnalysis.Emit.NoPia",
      "Parent": "Microsoft.CodeAnalysis",
      "XmlDocumentation": ""
    },
    {
      "AllowedMemberTypes": [
        2,
        3,
        4,
        5,
        6
      ],
      "Id": "N:Microsoft.CodeAnalysis.Instrumentation",
      "Parent": "Microsoft.CodeAnalysis",
      "XmlDocumentation": ""
    },
    {
      "AllowedMemberTypes": [
        2,
        3,
        4,
        5,
        6
      ],
      "Id": "N:Microsoft.CodeAnalysis.InternalUtilities",
      "Parent": "Microsoft.CodeAnalysis",
      "XmlDocumentation": ""
    },
    {
      "AllowedMemberTypes": [
        2,
        3,
        4,
        5,
        6
      ],
      "Id": "N:Microsoft.CodeAnalysis.RuntimeMembers",
      "Parent": "Microsoft.CodeAnalysis",
      "XmlDocumentation": ""
    },
    {
      "AllowedMemberTypes": [
        2,
        3,
        4,
        5,
        6
      ],
      "Id": "N:Microsoft.CodeAnalysis.SymbolDisplay",
      "Parent": "Microsoft.CodeAnalysis",
      "XmlDocumentation": ""
    },
    {
      "AllowedMemberTypes": [
        2,
        3,
        4,
        5,
        6
      ],
      "Id": "N:Microsoft.CodeAnalysis.Symbols",
      "Parent": "Microsoft.CodeAnalysis",
      "XmlDocumentation": ""
    },
    {
      "AllowedMemberTypes": [
        2,
        3,
        4,
        5,
        6
      ],
      "Id": "N:Microsoft.CodeAnalysis.Syntax",
      "Parent": "Microsoft.CodeAnalysis",
      "XmlDocumentation": ""
    },
    {
      "Classes": [
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.SourceHashAlgorithm : algorithmId": "",
                  "T:System.Array : buffer": "",
                  "T:System.Int32 : count": "",
                  "T:System.Int32 : offset": ""
                },
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{System.Byte}": ""
                },
                "Content": "protected static ImmutableArray<byte> CalculateChecksum(byte[] buffer, int offset, int count, SourceHashAlgorithm algorithmId)",
                "XmlDocumentation": "",
                "StartLine": 292
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.SourceHashAlgorithm : algorithmId": "",
                  "T:System.Array : buffer": "",
                  "T:System.Int32 : count": "",
                  "T:System.Int32 : offset": ""
                },
                "Returns": {
                  "T:System.Collections.Immutable.ImmutableArray{System.Byte}": ""
                },
                "Content": "protected static ImmutableArray<byte> CalculateChecksum(byte[] buffer, int offset, int count, SourceHashAlgorithm algorithmId)",
                "XmlDocumentation": "",
                "StartLine": 292
              },
              "Id": "M:Microsoft.CodeAnalysis.Text.SourceText.CalculateChecksum(System.Byte[],System.Int32,System.Int32,Microsoft.CodeAnalysis.Text.SourceHashAlgorithm)",
              "Parent": "T:Microsoft.CodeAnalysis.Text.SourceText",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.SourceText : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool ContentEquals(SourceText other)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.SourceText.ContentEquals(Microsoft.CodeAnalysis.Text.SourceText)\">\r\n    <summary>\r\n    Compares the content with content of another <see cref=\"T:Microsoft.CodeAnalysis.Text.SourceText\"/>.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 632
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.SourceText : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool ContentEquals(SourceText other)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.SourceText.ContentEquals(Microsoft.CodeAnalysis.Text.SourceText)\">\r\n    <summary>\r\n    Compares the content with content of another <see cref=\"T:Microsoft.CodeAnalysis.Text.SourceText\"/>.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 632
              },
              "Id": "M:Microsoft.CodeAnalysis.Text.SourceText.ContentEquals(Microsoft.CodeAnalysis.Text.SourceText)",
              "Parent": "T:Microsoft.CodeAnalysis.Text.SourceText",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.SourceText.ContentEquals(Microsoft.CodeAnalysis.Text.SourceText)\">\r\n    <summary>\r\n    Compares the content with content of another <see cref=\"T:Microsoft.CodeAnalysis.Text.SourceText\"/>.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.SourceText : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "protected virtual bool ContentEqualsImpl(SourceText other)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.SourceText.ContentEqualsImpl(Microsoft.CodeAnalysis.Text.SourceText)\">\r\n    <summary>\r\n    Implements equality comparison of the content of two different instances of <see cref=\"T:Microsoft.CodeAnalysis.Text.SourceText\"/>.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 653
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.SourceText : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "protected virtual bool ContentEqualsImpl(SourceText other)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.SourceText.ContentEqualsImpl(Microsoft.CodeAnalysis.Text.SourceText)\">\r\n    <summary>\r\n    Implements equality comparison of the content of two different instances of <see cref=\"T:Microsoft.CodeAnalysis.Text.SourceText\"/>.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 653
              },
              "Id": "M:Microsoft.CodeAnalysis.Text.SourceText.ContentEqualsImpl(Microsoft.CodeAnalysis.Text.SourceText)",
              "Parent": "T:Microsoft.CodeAnalysis.Text.SourceText",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.SourceText.ContentEqualsImpl(Microsoft.CodeAnalysis.Text.SourceText)\">\r\n    <summary>\r\n    Implements equality comparison of the content of two different instances of <see cref=\"T:Microsoft.CodeAnalysis.Text.SourceText\"/>.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Array : destination": "",
                  "T:System.Int32 : count": "",
                  "T:System.Int32 : destinationIndex": "",
                  "T:System.Int32 : sourceIndex": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public abstract void CopyTo(int sourceIndex, char[] destination, int destinationIndex, int count);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.SourceText.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)\">\r\n    <summary>\r\n    Copy a range of characters from this SourceText to a destination array.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 159
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Array : destination": "",
                  "T:System.Int32 : count": "",
                  "T:System.Int32 : destinationIndex": "",
                  "T:System.Int32 : sourceIndex": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public abstract void CopyTo(int sourceIndex, char[] destination, int destinationIndex, int count);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.SourceText.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)\">\r\n    <summary>\r\n    Copy a range of characters from this SourceText to a destination array.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 159
              },
              "Id": "M:Microsoft.CodeAnalysis.Text.SourceText.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)",
              "Parent": "T:Microsoft.CodeAnalysis.Text.SourceText",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.SourceText.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)\">\r\n    <summary>\r\n    Copy a range of characters from this SourceText to a destination array.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.SourceHashAlgorithm : checksumAlgorithm": "",
                  "T:System.IO.Stream : stream": "",
                  "T:System.Text.Encoding : encoding": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Text.SourceText": ""
                },
                "Content": "public static SourceText From(Stream stream, Encoding encoding = null, SourceHashAlgorithm checksumAlgorithm = SourceHashAlgorithm.Sha1)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.SourceText.From(System.IO.Stream,System.Text.Encoding,Microsoft.CodeAnalysis.Text.SourceHashAlgorithm)\">\r\n    <summary>\r\n    Constructs a <see cref=\"T:Microsoft.CodeAnalysis.Text.SourceText\"/> from stream content.\r\n    </summary>\r\n    <param name=\"stream\">Stream.</param>\r\n    <param name=\"encoding\">\r\n    Data encoding to use if the stream doesn't start with Byte Order Mark specifying the encoding.\r\n    <see cref=\"P:System.Text.Encoding.UTF8\"/> if not specified.\r\n    </param>\r\n    <param name=\"checksumAlgorithm\">\r\n    Hash algorithm to use to calculate checksum of the text that's saved to PDB.\r\n    </param>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"stream\"/> is null.</exception>\r\n    <exception cref=\"T:System.ArgumentException\">\r\n    <paramref name=\"stream\"/> doesn't support reading or seeking.\r\n    <paramref name=\"checksumAlgorithm\"/> is not supported.\r\n    </exception>\r\n    <exception cref=\"T:System.IO.IOException\">An I/O error occurs.</exception>\r\n    <remarks>Reads from the beginning of the stream. Leaves the stream open.</remarks>\r\n</member>\r\n",
                "StartLine": 95
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.SourceHashAlgorithm : checksumAlgorithm": "",
                  "T:System.IO.Stream : stream": "",
                  "T:System.Text.Encoding : encoding": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Text.SourceText": ""
                },
                "Content": "public static SourceText From(Stream stream, Encoding encoding = null, SourceHashAlgorithm checksumAlgorithm = SourceHashAlgorithm.Sha1)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.SourceText.From(System.IO.Stream,System.Text.Encoding,Microsoft.CodeAnalysis.Text.SourceHashAlgorithm)\">\r\n    <summary>\r\n    Constructs a <see cref=\"T:Microsoft.CodeAnalysis.Text.SourceText\"/> from stream content.\r\n    </summary>\r\n    <param name=\"stream\">Stream.</param>\r\n    <param name=\"encoding\">\r\n    Data encoding to use if the stream doesn't start with Byte Order Mark specifying the encoding.\r\n    <see cref=\"P:System.Text.Encoding.UTF8\"/> if not specified.\r\n    </param>\r\n    <param name=\"checksumAlgorithm\">\r\n    Hash algorithm to use to calculate checksum of the text that's saved to PDB.\r\n    </param>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"stream\"/> is null.</exception>\r\n    <exception cref=\"T:System.ArgumentException\">\r\n    <paramref name=\"stream\"/> doesn't support reading or seeking.\r\n    <paramref name=\"checksumAlgorithm\"/> is not supported.\r\n    </exception>\r\n    <exception cref=\"T:System.IO.IOException\">An I/O error occurs.</exception>\r\n    <remarks>Reads from the beginning of the stream. Leaves the stream open.</remarks>\r\n</member>\r\n",
                "StartLine": 95
              },
              "Id": "M:Microsoft.CodeAnalysis.Text.SourceText.From(System.IO.Stream,System.Text.Encoding,Microsoft.CodeAnalysis.Text.SourceHashAlgorithm)",
              "Parent": "T:Microsoft.CodeAnalysis.Text.SourceText",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.SourceText.From(System.IO.Stream,System.Text.Encoding,Microsoft.CodeAnalysis.Text.SourceHashAlgorithm)\">\r\n    <summary>\r\n    Constructs a <see cref=\"T:Microsoft.CodeAnalysis.Text.SourceText\"/> from stream content.\r\n    </summary>\r\n    <param name=\"stream\">Stream.</param>\r\n    <param name=\"encoding\">\r\n    Data encoding to use if the stream doesn't start with Byte Order Mark specifying the encoding.\r\n    <see cref=\"P:System.Text.Encoding.UTF8\"/> if not specified.\r\n    </param>\r\n    <param name=\"checksumAlgorithm\">\r\n    Hash algorithm to use to calculate checksum of the text that's saved to PDB.\r\n    </param>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"stream\"/> is null.</exception>\r\n    <exception cref=\"T:System.ArgumentException\">\r\n    <paramref name=\"stream\"/> doesn't support reading or seeking.\r\n    <paramref name=\"checksumAlgorithm\"/> is not supported.\r\n    </exception>\r\n    <exception cref=\"T:System.IO.IOException\">An I/O error occurs.</exception>\r\n    <remarks>Reads from the beginning of the stream. Leaves the stream open.</remarks>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.SourceHashAlgorithm : checksumAlgorithm": "",
                  "T:System.String : text": "",
                  "T:System.Text.Encoding : encoding": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Text.SourceText": ""
                },
                "Content": "public static SourceText From(string text, Encoding encoding = null, SourceHashAlgorithm checksumAlgorithm = SourceHashAlgorithm.Sha1)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.SourceText.From(System.String,System.Text.Encoding,Microsoft.CodeAnalysis.Text.SourceHashAlgorithm)\">\r\n    <summary>\r\n    Constructs a <see cref=\"T:Microsoft.CodeAnalysis.Text.SourceText\"/> from text in a string.\r\n    </summary>\r\n    <param name=\"text\">Text.</param>\r\n    <param name=\"encoding\">\r\n    Encoding of the file that the <paramref name=\"text\"/> was read from or is going to be saved to.\r\n    <c>null</c> if the encoding is unspecified.\r\n    If the encoding is not specified the resulting <see cref=\"T:Microsoft.CodeAnalysis.Text.SourceText\"/> isn't debuggable.\r\n    If an encoding-less <see cref=\"T:Microsoft.CodeAnalysis.Text.SourceText\"/> is written to a file a <see cref=\"P:System.Text.Encoding.UTF8\"/> shall be used as a default.\r\n    </param>\r\n    <param name=\"checksumAlgorithm\">\r\n    Hash algorithm to use to calculate checksum of the text that's saved to PDB.\r\n    </param>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"text\"/> is null.</exception>\r\n    <exception cref=\"T:System.ArgumentException\"><paramref name=\"checksumAlgorithm\"/> is not supported.</exception>\r\n</member>\r\n",
                "StartLine": 67
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.SourceHashAlgorithm : checksumAlgorithm": "",
                  "T:System.String : text": "",
                  "T:System.Text.Encoding : encoding": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Text.SourceText": ""
                },
                "Content": "public static SourceText From(string text, Encoding encoding = null, SourceHashAlgorithm checksumAlgorithm = SourceHashAlgorithm.Sha1)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.SourceText.From(System.String,System.Text.Encoding,Microsoft.CodeAnalysis.Text.SourceHashAlgorithm)\">\r\n    <summary>\r\n    Constructs a <see cref=\"T:Microsoft.CodeAnalysis.Text.SourceText\"/> from text in a string.\r\n    </summary>\r\n    <param name=\"text\">Text.</param>\r\n    <param name=\"encoding\">\r\n    Encoding of the file that the <paramref name=\"text\"/> was read from or is going to be saved to.\r\n    <c>null</c> if the encoding is unspecified.\r\n    If the encoding is not specified the resulting <see cref=\"T:Microsoft.CodeAnalysis.Text.SourceText\"/> isn't debuggable.\r\n    If an encoding-less <see cref=\"T:Microsoft.CodeAnalysis.Text.SourceText\"/> is written to a file a <see cref=\"P:System.Text.Encoding.UTF8\"/> shall be used as a default.\r\n    </param>\r\n    <param name=\"checksumAlgorithm\">\r\n    Hash algorithm to use to calculate checksum of the text that's saved to PDB.\r\n    </param>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"text\"/> is null.</exception>\r\n    <exception cref=\"T:System.ArgumentException\"><paramref name=\"checksumAlgorithm\"/> is not supported.</exception>\r\n</member>\r\n",
                "StartLine": 67
              },
              "Id": "M:Microsoft.CodeAnalysis.Text.SourceText.From(System.String,System.Text.Encoding,Microsoft.CodeAnalysis.Text.SourceHashAlgorithm)",
              "Parent": "T:Microsoft.CodeAnalysis.Text.SourceText",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.SourceText.From(System.String,System.Text.Encoding,Microsoft.CodeAnalysis.Text.SourceHashAlgorithm)\">\r\n    <summary>\r\n    Constructs a <see cref=\"T:Microsoft.CodeAnalysis.Text.SourceText\"/> from text in a string.\r\n    </summary>\r\n    <param name=\"text\">Text.</param>\r\n    <param name=\"encoding\">\r\n    Encoding of the file that the <paramref name=\"text\"/> was read from or is going to be saved to.\r\n    <c>null</c> if the encoding is unspecified.\r\n    If the encoding is not specified the resulting <see cref=\"T:Microsoft.CodeAnalysis.Text.SourceText\"/> isn't debuggable.\r\n    If an encoding-less <see cref=\"T:Microsoft.CodeAnalysis.Text.SourceText\"/> is written to a file a <see cref=\"P:System.Text.Encoding.UTF8\"/> shall be used as a default.\r\n    </param>\r\n    <param name=\"checksumAlgorithm\">\r\n    Hash algorithm to use to calculate checksum of the text that's saved to PDB.\r\n    </param>\r\n    <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"text\"/> is null.</exception>\r\n    <exception cref=\"T:System.ArgumentException\"><paramref name=\"checksumAlgorithm\"/> is not supported.</exception>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.SourceText : oldText": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IReadOnlyList{Microsoft.CodeAnalysis.Text.TextChangeRange}": ""
                },
                "Content": "public virtual IReadOnlyList<TextChangeRange> GetChangeRanges(SourceText oldText)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.SourceText.GetChangeRanges(Microsoft.CodeAnalysis.Text.SourceText)\">\r\n    <summary>\r\n    Gets the set of <see cref=\"T:Microsoft.CodeAnalysis.Text.TextChangeRange\"/> that describe how the text changed\r\n    between this text an older version. This may be multiple detailed changes\r\n    or a single change encompassing the entire text.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 421
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.SourceText : oldText": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IReadOnlyList{Microsoft.CodeAnalysis.Text.TextChangeRange}": ""
                },
                "Content": "public virtual IReadOnlyList<TextChangeRange> GetChangeRanges(SourceText oldText)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.SourceText.GetChangeRanges(Microsoft.CodeAnalysis.Text.SourceText)\">\r\n    <summary>\r\n    Gets the set of <see cref=\"T:Microsoft.CodeAnalysis.Text.TextChangeRange\"/> that describe how the text changed\r\n    between this text an older version. This may be multiple detailed changes\r\n    or a single change encompassing the entire text.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 421
              },
              "Id": "M:Microsoft.CodeAnalysis.Text.SourceText.GetChangeRanges(Microsoft.CodeAnalysis.Text.SourceText)",
              "Parent": "T:Microsoft.CodeAnalysis.Text.SourceText",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.SourceText.GetChangeRanges(Microsoft.CodeAnalysis.Text.SourceText)\">\r\n    <summary>\r\n    Gets the set of <see cref=\"T:Microsoft.CodeAnalysis.Text.TextChangeRange\"/> that describe how the text changed\r\n    between this text an older version. This may be multiple detailed changes\r\n    or a single change encompassing the entire text.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.TextSpan : span": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Text.SourceText": ""
                },
                "Content": "public virtual SourceText GetSubText(TextSpan span)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.SourceText.GetSubText(Microsoft.CodeAnalysis.Text.TextSpan)\">\r\n    <summary>\r\n    Gets a <see cref=\"T:Microsoft.CodeAnalysis.Text.SourceText\"/> that contains the characters in the specified span of this text.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 188
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.TextSpan : span": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Text.SourceText": ""
                },
                "Content": "public virtual SourceText GetSubText(TextSpan span)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.SourceText.GetSubText(Microsoft.CodeAnalysis.Text.TextSpan)\">\r\n    <summary>\r\n    Gets a <see cref=\"T:Microsoft.CodeAnalysis.Text.SourceText\"/> that contains the characters in the specified span of this text.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 188
              },
              "Id": "M:Microsoft.CodeAnalysis.Text.SourceText.GetSubText(Microsoft.CodeAnalysis.Text.TextSpan)",
              "Parent": "T:Microsoft.CodeAnalysis.Text.SourceText",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.SourceText.GetSubText(Microsoft.CodeAnalysis.Text.TextSpan)\">\r\n    <summary>\r\n    Gets a <see cref=\"T:Microsoft.CodeAnalysis.Text.SourceText\"/> that contains the characters in the specified span of this text.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Int32 : start": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Text.SourceText": ""
                },
                "Content": "public SourceText GetSubText(int start)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.SourceText.GetSubText(System.Int32)\">\r\n    <summary>\r\n    Returns a <see cref=\"T:Microsoft.CodeAnalysis.Text.SourceText\"/> that has the contents of this text including and after the start position.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 210
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Int32 : start": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Text.SourceText": ""
                },
                "Content": "public SourceText GetSubText(int start)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.SourceText.GetSubText(System.Int32)\">\r\n    <summary>\r\n    Returns a <see cref=\"T:Microsoft.CodeAnalysis.Text.SourceText\"/> that has the contents of this text including and after the start position.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 210
              },
              "Id": "M:Microsoft.CodeAnalysis.Text.SourceText.GetSubText(System.Int32)",
              "Parent": "T:Microsoft.CodeAnalysis.Text.SourceText",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.SourceText.GetSubText(System.Int32)\">\r\n    <summary>\r\n    Returns a <see cref=\"T:Microsoft.CodeAnalysis.Text.SourceText\"/> that has the contents of this text including and after the start position.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.SourceText : oldText": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IReadOnlyList{Microsoft.CodeAnalysis.Text.TextChange}": ""
                },
                "Content": "public virtual IReadOnlyList<TextChange> GetTextChanges(SourceText oldText)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.SourceText.GetTextChanges(Microsoft.CodeAnalysis.Text.SourceText)\">\r\n    <summary>\r\n    Gets the set of <see cref=\"T:Microsoft.CodeAnalysis.Text.TextChange\"/> that describe how the text changed\r\n    between this text and an older version. This may be multiple detailed changes \r\n    or a single change encompassing the entire text.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 443
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.SourceText : oldText": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.IReadOnlyList{Microsoft.CodeAnalysis.Text.TextChange}": ""
                },
                "Content": "public virtual IReadOnlyList<TextChange> GetTextChanges(SourceText oldText)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.SourceText.GetTextChanges(Microsoft.CodeAnalysis.Text.SourceText)\">\r\n    <summary>\r\n    Gets the set of <see cref=\"T:Microsoft.CodeAnalysis.Text.TextChange\"/> that describe how the text changed\r\n    between this text and an older version. This may be multiple detailed changes \r\n    or a single change encompassing the entire text.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 443
              },
              "Id": "M:Microsoft.CodeAnalysis.Text.SourceText.GetTextChanges(Microsoft.CodeAnalysis.Text.SourceText)",
              "Parent": "T:Microsoft.CodeAnalysis.Text.SourceText",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.SourceText.GetTextChanges(Microsoft.CodeAnalysis.Text.SourceText)\">\r\n    <summary>\r\n    Gets the set of <see cref=\"T:Microsoft.CodeAnalysis.Text.TextChange\"/> that describe how the text changed\r\n    between this text and an older version. This may be multiple detailed changes \r\n    or a single change encompassing the entire text.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.TextSpan : span": "",
                  "T:System.String : newText": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Text.SourceText": ""
                },
                "Content": "public SourceText Replace(TextSpan span, string newText)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.SourceText.Replace(Microsoft.CodeAnalysis.Text.TextSpan,System.String)\">\r\n    <summary>\r\n    Returns a new SourceText with the specified span of characters replaced by the new text.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 403
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.TextSpan : span": "",
                  "T:System.String : newText": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Text.SourceText": ""
                },
                "Content": "public SourceText Replace(TextSpan span, string newText)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.SourceText.Replace(Microsoft.CodeAnalysis.Text.TextSpan,System.String)\">\r\n    <summary>\r\n    Returns a new SourceText with the specified span of characters replaced by the new text.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 403
              },
              "Id": "M:Microsoft.CodeAnalysis.Text.SourceText.Replace(Microsoft.CodeAnalysis.Text.TextSpan,System.String)",
              "Parent": "T:Microsoft.CodeAnalysis.Text.SourceText",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.SourceText.Replace(Microsoft.CodeAnalysis.Text.TextSpan,System.String)\">\r\n    <summary>\r\n    Returns a new SourceText with the specified span of characters replaced by the new text.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Int32 : length": "",
                  "T:System.Int32 : start": "",
                  "T:System.String : newText": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Text.SourceText": ""
                },
                "Content": "public SourceText Replace(int start, int length, string newText)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.SourceText.Replace(System.Int32,System.Int32,System.String)\">\r\n    <summary>\r\n    Returns a new SourceText with the specified range of characters replaced by the new text.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 411
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Int32 : length": "",
                  "T:System.Int32 : start": "",
                  "T:System.String : newText": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Text.SourceText": ""
                },
                "Content": "public SourceText Replace(int start, int length, string newText)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.SourceText.Replace(System.Int32,System.Int32,System.String)\">\r\n    <summary>\r\n    Returns a new SourceText with the specified range of characters replaced by the new text.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 411
              },
              "Id": "M:Microsoft.CodeAnalysis.Text.SourceText.Replace(System.Int32,System.Int32,System.String)",
              "Parent": "T:Microsoft.CodeAnalysis.Text.SourceText",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.SourceText.Replace(System.Int32,System.Int32,System.String)\">\r\n    <summary>\r\n    Returns a new SourceText with the specified range of characters replaced by the new text.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public override string ToString()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.SourceText.ToString\">\r\n    <summary>\r\n    Provides a string representation of the SourceText.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 304
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public override string ToString()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.SourceText.ToString\">\r\n    <summary>\r\n    Provides a string representation of the SourceText.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 304
              },
              "Id": "M:Microsoft.CodeAnalysis.Text.SourceText.ToString",
              "Parent": "T:Microsoft.CodeAnalysis.Text.SourceText",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.SourceText.ToString\">\r\n    <summary>\r\n    Provides a string representation of the SourceText.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.TextSpan : span": ""
                },
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public virtual string ToString(TextSpan span)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.SourceText.ToString(Microsoft.CodeAnalysis.Text.TextSpan)\">\r\n    <summary>\r\n    Gets a string containing the characters in specified span.\r\n    </summary>\r\n    <exception cref=\"T:System.ArgumentOutOfRangeException\">When given span is outside of the text range.</exception>\r\n</member>\r\n",
                "StartLine": 313
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.TextSpan : span": ""
                },
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public virtual string ToString(TextSpan span)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.SourceText.ToString(Microsoft.CodeAnalysis.Text.TextSpan)\">\r\n    <summary>\r\n    Gets a string containing the characters in specified span.\r\n    </summary>\r\n    <exception cref=\"T:System.ArgumentOutOfRangeException\">When given span is outside of the text range.</exception>\r\n</member>\r\n",
                "StartLine": 313
              },
              "Id": "M:Microsoft.CodeAnalysis.Text.SourceText.ToString(Microsoft.CodeAnalysis.Text.TextSpan)",
              "Parent": "T:Microsoft.CodeAnalysis.Text.SourceText",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.SourceText.ToString(Microsoft.CodeAnalysis.Text.TextSpan)\">\r\n    <summary>\r\n    Gets a string containing the characters in specified span.\r\n    </summary>\r\n    <exception cref=\"T:System.ArgumentOutOfRangeException\">When given span is outside of the text range.</exception>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Array : changes": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Text.SourceText": ""
                },
                "Content": "public SourceText WithChanges(params TextChange[] changes)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.SourceText.WithChanges(Microsoft.CodeAnalysis.Text.TextChange[])\">\r\n    <summary>\r\n    Constructs a new SourceText from this text with the specified changes.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 395
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Array : changes": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Text.SourceText": ""
                },
                "Content": "public SourceText WithChanges(params TextChange[] changes)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.SourceText.WithChanges(Microsoft.CodeAnalysis.Text.TextChange[])\">\r\n    <summary>\r\n    Constructs a new SourceText from this text with the specified changes.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 395
              },
              "Id": "M:Microsoft.CodeAnalysis.Text.SourceText.WithChanges(Microsoft.CodeAnalysis.Text.TextChange[])",
              "Parent": "T:Microsoft.CodeAnalysis.Text.SourceText",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.SourceText.WithChanges(Microsoft.CodeAnalysis.Text.TextChange[])\">\r\n    <summary>\r\n    Constructs a new SourceText from this text with the specified changes.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Text.TextChange} : changes": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Text.SourceText": ""
                },
                "Content": "public virtual SourceText WithChanges(IEnumerable<TextChange> changes)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.SourceText.WithChanges(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Text.TextChange})\">\r\n    <summary>\r\n    Constructs a new SourceText from this text with the specified changes.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 341
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Text.TextChange} : changes": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Text.SourceText": ""
                },
                "Content": "public virtual SourceText WithChanges(IEnumerable<TextChange> changes)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.SourceText.WithChanges(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Text.TextChange})\">\r\n    <summary>\r\n    Constructs a new SourceText from this text with the specified changes.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 341
              },
              "Id": "M:Microsoft.CodeAnalysis.Text.SourceText.WithChanges(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Text.TextChange})",
              "Parent": "T:Microsoft.CodeAnalysis.Text.SourceText",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.SourceText.WithChanges(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Text.TextChange})\">\r\n    <summary>\r\n    Constructs a new SourceText from this text with the specified changes.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.TextSpan : span": "",
                  "T:System.IO.TextWriter : writer": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public virtual void Write(TextWriter writer, TextSpan span, CancellationToken cancellationToken = default (CancellationToken))",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.SourceText.Write(System.IO.TextWriter,Microsoft.CodeAnalysis.Text.TextSpan,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Write a span of text to a text writer.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 238
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.TextSpan : span": "",
                  "T:System.IO.TextWriter : writer": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public virtual void Write(TextWriter writer, TextSpan span, CancellationToken cancellationToken = default (CancellationToken))",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.SourceText.Write(System.IO.TextWriter,Microsoft.CodeAnalysis.Text.TextSpan,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Write a span of text to a text writer.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 238
              },
              "Id": "M:Microsoft.CodeAnalysis.Text.SourceText.Write(System.IO.TextWriter,Microsoft.CodeAnalysis.Text.TextSpan,System.Threading.CancellationToken)",
              "Parent": "T:Microsoft.CodeAnalysis.Text.SourceText",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.SourceText.Write(System.IO.TextWriter,Microsoft.CodeAnalysis.Text.TextSpan,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Write a span of text to a text writer.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.IO.TextWriter : textWriter": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public void Write(TextWriter textWriter, CancellationToken cancellationToken = default (CancellationToken))",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.SourceText.Write(System.IO.TextWriter,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Write this <see cref=\"T:Microsoft.CodeAnalysis.Text.SourceText\"/> to a text writer.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 230
              },
              "Syntax": {
                "Parameters": {
                  "T:System.IO.TextWriter : textWriter": "",
                  "T:System.Threading.CancellationToken : cancellationToken": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public void Write(TextWriter textWriter, CancellationToken cancellationToken = default (CancellationToken))",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.SourceText.Write(System.IO.TextWriter,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Write this <see cref=\"T:Microsoft.CodeAnalysis.Text.SourceText\"/> to a text writer.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 230
              },
              "Id": "M:Microsoft.CodeAnalysis.Text.SourceText.Write(System.IO.TextWriter,System.Threading.CancellationToken)",
              "Parent": "T:Microsoft.CodeAnalysis.Text.SourceText",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.SourceText.Write(System.IO.TextWriter,System.Threading.CancellationToken)\">\r\n    <summary>\r\n    Write this <see cref=\"T:Microsoft.CodeAnalysis.Text.SourceText\"/> to a text writer.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Text.SourceHashAlgorithm",
                "Content": "public SourceHashAlgorithm ChecksumAlgorithm",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.SourceText.ChecksumAlgorithm\">\r\n    <summary>\r\n    Hash algorithm to use to calculate checksum of the text that's saved to PDB.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 127
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Text.SourceHashAlgorithm",
                "Content": "public SourceHashAlgorithm ChecksumAlgorithm",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.SourceText.ChecksumAlgorithm\">\r\n    <summary>\r\n    Hash algorithm to use to calculate checksum of the text that's saved to PDB.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 127
              },
              "Id": "P:Microsoft.CodeAnalysis.Text.SourceText.ChecksumAlgorithm",
              "Parent": "T:Microsoft.CodeAnalysis.Text.SourceText",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.SourceText.ChecksumAlgorithm\">\r\n    <summary>\r\n    Hash algorithm to use to calculate checksum of the text that's saved to PDB.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Text.SourceTextContainer",
                "Content": "public virtual SourceTextContainer Container",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.SourceText.Container\">\r\n    <summary>\r\n    The container of this <see cref=\"T:Microsoft.CodeAnalysis.Text.SourceText\"/>.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 164
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Text.SourceTextContainer",
                "Content": "public virtual SourceTextContainer Container",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.SourceText.Container\">\r\n    <summary>\r\n    The container of this <see cref=\"T:Microsoft.CodeAnalysis.Text.SourceText\"/>.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 164
              },
              "Id": "P:Microsoft.CodeAnalysis.Text.SourceText.Container",
              "Parent": "T:Microsoft.CodeAnalysis.Text.SourceText",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.SourceText.Container\">\r\n    <summary>\r\n    The container of this <see cref=\"T:Microsoft.CodeAnalysis.Text.SourceText\"/>.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Text.Encoding",
                "Content": "public abstract Encoding Encoding",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.SourceText.Encoding\">\r\n    <summary>\r\n    Encoding of the file that the text was read from or is going to be saved to.\r\n    <c>null</c> if the encoding is unspecified.\r\n    </summary>\r\n    <remarks>\r\n    If the encoding is not specified the source isn't debuggable.\r\n    If an encoding-less <see cref=\"T:Microsoft.CodeAnalysis.Text.SourceText\"/> is written to a file a <see cref=\"P:System.Text.Encoding.UTF8\"/> shall be used as a default.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 140
              },
              "Syntax": {
                "PropertyType": "T:System.Text.Encoding",
                "Content": "public abstract Encoding Encoding",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.SourceText.Encoding\">\r\n    <summary>\r\n    Encoding of the file that the text was read from or is going to be saved to.\r\n    <c>null</c> if the encoding is unspecified.\r\n    </summary>\r\n    <remarks>\r\n    If the encoding is not specified the source isn't debuggable.\r\n    If an encoding-less <see cref=\"T:Microsoft.CodeAnalysis.Text.SourceText\"/> is written to a file a <see cref=\"P:System.Text.Encoding.UTF8\"/> shall be used as a default.\r\n    </remarks>\r\n</member>\r\n",
                "StartLine": 140
              },
              "Id": "P:Microsoft.CodeAnalysis.Text.SourceText.Encoding",
              "Parent": "T:Microsoft.CodeAnalysis.Text.SourceText",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.SourceText.Encoding\">\r\n    <summary>\r\n    Encoding of the file that the text was read from or is going to be saved to.\r\n    <c>null</c> if the encoding is unspecified.\r\n    </summary>\r\n    <remarks>\r\n    If the encoding is not specified the source isn't debuggable.\r\n    If an encoding-less <see cref=\"T:Microsoft.CodeAnalysis.Text.SourceText\"/> is written to a file a <see cref=\"P:System.Text.Encoding.UTF8\"/> shall be used as a default.\r\n    </remarks>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Int32",
                "Content": "public abstract int Length",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.SourceText.Length\">\r\n    <summary>\r\n    The length of the text in characters.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 145
              },
              "Syntax": {
                "PropertyType": "T:System.Int32",
                "Content": "public abstract int Length",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.SourceText.Length\">\r\n    <summary>\r\n    The length of the text in characters.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 145
              },
              "Id": "P:Microsoft.CodeAnalysis.Text.SourceText.Length",
              "Parent": "T:Microsoft.CodeAnalysis.Text.SourceText",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.SourceText.Length\">\r\n    <summary>\r\n    The length of the text in characters.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Text.TextLineCollection",
                "Content": "public virtual TextLineCollection Lines",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.SourceText.Lines\">\r\n    <summary>\r\n    The collection of individual text lines.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 481
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Text.TextLineCollection",
                "Content": "public virtual TextLineCollection Lines",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.SourceText.Lines\">\r\n    <summary>\r\n    The collection of individual text lines.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 481
              },
              "Id": "P:Microsoft.CodeAnalysis.Text.SourceText.Lines",
              "Parent": "T:Microsoft.CodeAnalysis.Text.SourceText",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.SourceText.Lines\">\r\n    <summary>\r\n    The collection of individual text lines.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Constructors": [
            {
              "ConstructorSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.SourceHashAlgorithm : checksumAlgorithm": "",
                  "T:Microsoft.CodeAnalysis.Text.SourceTextContainer : container": "",
                  "T:System.Collections.Immutable.ImmutableArray{System.Byte} : checksum": ""
                },
                "Content": "protected SourceText(ImmutableArray<byte> checksum = default (ImmutableArray<byte>), SourceHashAlgorithm checksumAlgorithm = SourceHashAlgorithm.Sha1, SourceTextContainer container = null)",
                "XmlDocumentation": "",
                "StartLine": 30
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.SourceHashAlgorithm : checksumAlgorithm": "",
                  "T:Microsoft.CodeAnalysis.Text.SourceTextContainer : container": "",
                  "T:System.Collections.Immutable.ImmutableArray{System.Byte} : checksum": ""
                },
                "Content": "protected SourceText(ImmutableArray<byte> checksum = default (ImmutableArray<byte>), SourceHashAlgorithm checksumAlgorithm = SourceHashAlgorithm.Sha1, SourceTextContainer container = null)",
                "XmlDocumentation": "",
                "StartLine": 30
              },
              "Id": "M:Microsoft.CodeAnalysis.Text.SourceText.#ctor(System.Collections.Immutable.ImmutableArray{System.Byte},Microsoft.CodeAnalysis.Text.SourceHashAlgorithm,Microsoft.CodeAnalysis.Text.SourceTextContainer)",
              "Parent": "T:Microsoft.CodeAnalysis.Text.SourceText",
              "XmlDocumentation": ""
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Text\\SourceText.cs",
          "InheritanceHierarchy": [
            "T:System.Object"
          ],
          "Syntax": {
            "Content": "public abstract class SourceText",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.Text.SourceText\">\r\n    <summary>\r\n    An abstraction of source text.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.Text.SourceText",
          "Parent": "N:Microsoft.CodeAnalysis.Text",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.Text.SourceText\">\r\n    <summary>\r\n    An abstraction of source text.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Text.SourceText",
                "Content": "public abstract SourceText CurrentText",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.SourceTextContainer.CurrentText\">\r\n    <summary>\r\n    The current text instance.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 15
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Text.SourceText",
                "Content": "public abstract SourceText CurrentText",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.SourceTextContainer.CurrentText\">\r\n    <summary>\r\n    The current text instance.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 15
              },
              "Id": "P:Microsoft.CodeAnalysis.Text.SourceTextContainer.CurrentText",
              "Parent": "T:Microsoft.CodeAnalysis.Text.SourceTextContainer",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.SourceTextContainer.CurrentText\">\r\n    <summary>\r\n    The current text instance.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Events": [
            {
              "Syntax": {
                "Content": "TextChanged",
                "XmlDocumentation": "<member name=\"E:Microsoft.CodeAnalysis.Text.SourceTextContainer.TextChanged\">\r\n    <summary>\r\n    Raised when the current text instance changes.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 20
              },
              "Id": "E:Microsoft.CodeAnalysis.Text.SourceTextContainer.TextChanged",
              "Parent": "T:Microsoft.CodeAnalysis.Text.SourceTextContainer",
              "XmlDocumentation": "<member name=\"E:Microsoft.CodeAnalysis.Text.SourceTextContainer.TextChanged\">\r\n    <summary>\r\n    Raised when the current text instance changes.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Text\\SourceTextContainer.cs",
          "InheritanceHierarchy": [
            "T:System.Object"
          ],
          "Syntax": {
            "Content": "public abstract class SourceTextContainer",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.Text.SourceTextContainer\">\r\n    <summary>\r\n    An object that contains an instance of an SourceText and raises events when its current instance\r\n    changes.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.Text.SourceTextContainer",
          "Parent": "N:Microsoft.CodeAnalysis.Text",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.Text.SourceTextContainer\">\r\n    <summary>\r\n    An object that contains an instance of an SourceText and raises events when its current instance\r\n    changes.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Collections.Generic.IReadOnlyList{Microsoft.CodeAnalysis.Text.TextChangeRange}",
                "Content": "public IReadOnlyList<TextChangeRange> Changes",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.TextChangeEventArgs.Changes\">\r\n    <summary>\r\n    Gets the set of ranges for the change.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 57
              },
              "Syntax": {
                "PropertyType": "T:System.Collections.Generic.IReadOnlyList{Microsoft.CodeAnalysis.Text.TextChangeRange}",
                "Content": "public IReadOnlyList<TextChangeRange> Changes",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.TextChangeEventArgs.Changes\">\r\n    <summary>\r\n    Gets the set of ranges for the change.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 57
              },
              "Id": "P:Microsoft.CodeAnalysis.Text.TextChangeEventArgs.Changes",
              "Parent": "T:Microsoft.CodeAnalysis.Text.TextChangeEventArgs",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.TextChangeEventArgs.Changes\">\r\n    <summary>\r\n    Gets the set of ranges for the change.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Text.SourceText",
                "Content": "public SourceText NewText",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.TextChangeEventArgs.NewText\">\r\n    <summary>\r\n    Gets the text after the change.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 52
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Text.SourceText",
                "Content": "public SourceText NewText",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.TextChangeEventArgs.NewText\">\r\n    <summary>\r\n    Gets the text after the change.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 52
              },
              "Id": "P:Microsoft.CodeAnalysis.Text.TextChangeEventArgs.NewText",
              "Parent": "T:Microsoft.CodeAnalysis.Text.TextChangeEventArgs",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.TextChangeEventArgs.NewText\">\r\n    <summary>\r\n    Gets the text after the change.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Text.SourceText",
                "Content": "public SourceText OldText",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.TextChangeEventArgs.OldText\">\r\n    <summary>\r\n    Gets the text before the change.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 47
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Text.SourceText",
                "Content": "public SourceText OldText",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.TextChangeEventArgs.OldText\">\r\n    <summary>\r\n    Gets the text before the change.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 47
              },
              "Id": "P:Microsoft.CodeAnalysis.Text.TextChangeEventArgs.OldText",
              "Parent": "T:Microsoft.CodeAnalysis.Text.TextChangeEventArgs",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.TextChangeEventArgs.OldText\">\r\n    <summary>\r\n    Gets the text before the change.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Constructors": [
            {
              "ConstructorSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.SourceText : newText": "",
                  "T:Microsoft.CodeAnalysis.Text.SourceText : oldText": "",
                  "T:System.Array : changes": ""
                },
                "Content": "public TextChangeEventArgs(SourceText oldText, SourceText newText, params TextChangeRange[] changes): this (oldText, newText, (IEnumerable<TextChangeRange>)changes)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextChangeEventArgs.#ctor(Microsoft.CodeAnalysis.Text.SourceText,Microsoft.CodeAnalysis.Text.SourceText,Microsoft.CodeAnalysis.Text.TextChangeRange[])\">\r\n    <summary>\r\n    Initializes an instance of <see cref=\"T:Microsoft.CodeAnalysis.Text.TextChangeEventArgs\"/>.\r\n    </summary>\r\n    <param name=\"oldText\">The text before the change.</param>\r\n    <param name=\"newText\">The text after the change.</param>\r\n    <param name=\"changes\">A non-empty set of ranges for the change.</param>\r\n</member>\r\n",
                "StartLine": 39
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.SourceText : newText": "",
                  "T:Microsoft.CodeAnalysis.Text.SourceText : oldText": "",
                  "T:System.Array : changes": ""
                },
                "Content": "public TextChangeEventArgs(SourceText oldText, SourceText newText, params TextChangeRange[] changes): this (oldText, newText, (IEnumerable<TextChangeRange>)changes)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextChangeEventArgs.#ctor(Microsoft.CodeAnalysis.Text.SourceText,Microsoft.CodeAnalysis.Text.SourceText,Microsoft.CodeAnalysis.Text.TextChangeRange[])\">\r\n    <summary>\r\n    Initializes an instance of <see cref=\"T:Microsoft.CodeAnalysis.Text.TextChangeEventArgs\"/>.\r\n    </summary>\r\n    <param name=\"oldText\">The text before the change.</param>\r\n    <param name=\"newText\">The text after the change.</param>\r\n    <param name=\"changes\">A non-empty set of ranges for the change.</param>\r\n</member>\r\n",
                "StartLine": 39
              },
              "Id": "M:Microsoft.CodeAnalysis.Text.TextChangeEventArgs.#ctor(Microsoft.CodeAnalysis.Text.SourceText,Microsoft.CodeAnalysis.Text.SourceText,Microsoft.CodeAnalysis.Text.TextChangeRange[])",
              "Parent": "T:Microsoft.CodeAnalysis.Text.TextChangeEventArgs",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextChangeEventArgs.#ctor(Microsoft.CodeAnalysis.Text.SourceText,Microsoft.CodeAnalysis.Text.SourceText,Microsoft.CodeAnalysis.Text.TextChangeRange[])\">\r\n    <summary>\r\n    Initializes an instance of <see cref=\"T:Microsoft.CodeAnalysis.Text.TextChangeEventArgs\"/>.\r\n    </summary>\r\n    <param name=\"oldText\">The text before the change.</param>\r\n    <param name=\"newText\">The text after the change.</param>\r\n    <param name=\"changes\">A non-empty set of ranges for the change.</param>\r\n</member>\r\n"
            },
            {
              "ConstructorSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.SourceText : newText": "",
                  "T:Microsoft.CodeAnalysis.Text.SourceText : oldText": "",
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Text.TextChangeRange} : changes": ""
                },
                "Content": "public TextChangeEventArgs(SourceText oldText, SourceText newText, IEnumerable<TextChangeRange> changes)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextChangeEventArgs.#ctor(Microsoft.CodeAnalysis.Text.SourceText,Microsoft.CodeAnalysis.Text.SourceText,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Text.TextChangeRange})\">\r\n    <summary>\r\n    Initializes an instance of <see cref=\"T:Microsoft.CodeAnalysis.Text.TextChangeEventArgs\"/>.\r\n    </summary>\r\n    <param name=\"oldText\">The text before the change.</param>\r\n    <param name=\"newText\">The text after the change.</param>\r\n    <param name=\"changes\">A non-empty set of ranges for the change.</param>\r\n</member>\r\n",
                "StartLine": 21
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.SourceText : newText": "",
                  "T:Microsoft.CodeAnalysis.Text.SourceText : oldText": "",
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Text.TextChangeRange} : changes": ""
                },
                "Content": "public TextChangeEventArgs(SourceText oldText, SourceText newText, IEnumerable<TextChangeRange> changes)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextChangeEventArgs.#ctor(Microsoft.CodeAnalysis.Text.SourceText,Microsoft.CodeAnalysis.Text.SourceText,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Text.TextChangeRange})\">\r\n    <summary>\r\n    Initializes an instance of <see cref=\"T:Microsoft.CodeAnalysis.Text.TextChangeEventArgs\"/>.\r\n    </summary>\r\n    <param name=\"oldText\">The text before the change.</param>\r\n    <param name=\"newText\">The text after the change.</param>\r\n    <param name=\"changes\">A non-empty set of ranges for the change.</param>\r\n</member>\r\n",
                "StartLine": 21
              },
              "Id": "M:Microsoft.CodeAnalysis.Text.TextChangeEventArgs.#ctor(Microsoft.CodeAnalysis.Text.SourceText,Microsoft.CodeAnalysis.Text.SourceText,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Text.TextChangeRange})",
              "Parent": "T:Microsoft.CodeAnalysis.Text.TextChangeEventArgs",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextChangeEventArgs.#ctor(Microsoft.CodeAnalysis.Text.SourceText,Microsoft.CodeAnalysis.Text.SourceText,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Text.TextChangeRange})\">\r\n    <summary>\r\n    Initializes an instance of <see cref=\"T:Microsoft.CodeAnalysis.Text.TextChangeEventArgs\"/>.\r\n    </summary>\r\n    <param name=\"oldText\">The text before the change.</param>\r\n    <param name=\"newText\">The text after the change.</param>\r\n    <param name=\"changes\">A non-empty set of ranges for the change.</param>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Text\\TextChangeEventArgs.cs",
          "InheritanceHierarchy": [
            "T:System.Object",
            "T:System.EventArgs"
          ],
          "Syntax": {
            "Content": "public class TextChangeEventArgs",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.Text.TextChangeEventArgs\">\r\n    <summary>\r\n    Represents state for a TextChanged event.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.Text.TextChangeEventArgs",
          "Parent": "N:Microsoft.CodeAnalysis.Text",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.Text.TextChangeEventArgs\">\r\n    <summary>\r\n    Represents state for a TextChanged event.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Text.TextLineCollection.Enumerator": ""
                },
                "Content": "public Enumerator GetEnumerator()",
                "XmlDocumentation": "",
                "StartLine": 73
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Text.TextLineCollection.Enumerator": ""
                },
                "Content": "public Enumerator GetEnumerator()",
                "XmlDocumentation": "",
                "StartLine": 73
              },
              "Id": "M:Microsoft.CodeAnalysis.Text.TextLineCollection.GetEnumerator",
              "Parent": "T:Microsoft.CodeAnalysis.Text.TextLineCollection",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Int32 : position": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Text.TextLine": ""
                },
                "Content": "public virtual TextLine GetLineFromPosition(int position)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextLineCollection.GetLineFromPosition(System.Int32)\">\r\n    <summary>\r\n    Gets a <see cref=\"T:Microsoft.CodeAnalysis.Text.TextLine\"/> that encompasses the character position.\r\n    </summary>\r\n    <param name=\"position\"></param>\r\n    <returns></returns>\r\n</member>\r\n",
                "StartLine": 35
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Int32 : position": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Text.TextLine": ""
                },
                "Content": "public virtual TextLine GetLineFromPosition(int position)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextLineCollection.GetLineFromPosition(System.Int32)\">\r\n    <summary>\r\n    Gets a <see cref=\"T:Microsoft.CodeAnalysis.Text.TextLine\"/> that encompasses the character position.\r\n    </summary>\r\n    <param name=\"position\"></param>\r\n    <returns></returns>\r\n</member>\r\n",
                "StartLine": 35
              },
              "Id": "M:Microsoft.CodeAnalysis.Text.TextLineCollection.GetLineFromPosition(System.Int32)",
              "Parent": "T:Microsoft.CodeAnalysis.Text.TextLineCollection",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextLineCollection.GetLineFromPosition(System.Int32)\">\r\n    <summary>\r\n    Gets a <see cref=\"T:Microsoft.CodeAnalysis.Text.TextLine\"/> that encompasses the character position.\r\n    </summary>\r\n    <param name=\"position\"></param>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Int32 : position": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Text.LinePosition": ""
                },
                "Content": "public virtual LinePosition GetLinePosition(int position)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextLineCollection.GetLinePosition(System.Int32)\">\r\n    <summary>\r\n    Gets a <see cref=\"T:Microsoft.CodeAnalysis.Text.LinePosition\"/> corresponding to a character position.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 43
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Int32 : position": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Text.LinePosition": ""
                },
                "Content": "public virtual LinePosition GetLinePosition(int position)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextLineCollection.GetLinePosition(System.Int32)\">\r\n    <summary>\r\n    Gets a <see cref=\"T:Microsoft.CodeAnalysis.Text.LinePosition\"/> corresponding to a character position.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 43
              },
              "Id": "M:Microsoft.CodeAnalysis.Text.TextLineCollection.GetLinePosition(System.Int32)",
              "Parent": "T:Microsoft.CodeAnalysis.Text.TextLineCollection",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextLineCollection.GetLinePosition(System.Int32)\">\r\n    <summary>\r\n    Gets a <see cref=\"T:Microsoft.CodeAnalysis.Text.LinePosition\"/> corresponding to a character position.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.TextSpan : span": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Text.LinePositionSpan": ""
                },
                "Content": "public LinePositionSpan GetLinePositionSpan(TextSpan span)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextLineCollection.GetLinePositionSpan(Microsoft.CodeAnalysis.Text.TextSpan)\">\r\n    <summary>\r\n    Convert a <see cref=\"T:Microsoft.CodeAnalysis.Text.TextSpan\"/> to a <see cref=\"T:Microsoft.CodeAnalysis.Text.LinePositionSpan\"/>.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 52
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.TextSpan : span": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Text.LinePositionSpan": ""
                },
                "Content": "public LinePositionSpan GetLinePositionSpan(TextSpan span)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextLineCollection.GetLinePositionSpan(Microsoft.CodeAnalysis.Text.TextSpan)\">\r\n    <summary>\r\n    Convert a <see cref=\"T:Microsoft.CodeAnalysis.Text.TextSpan\"/> to a <see cref=\"T:Microsoft.CodeAnalysis.Text.LinePositionSpan\"/>.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 52
              },
              "Id": "M:Microsoft.CodeAnalysis.Text.TextLineCollection.GetLinePositionSpan(Microsoft.CodeAnalysis.Text.TextSpan)",
              "Parent": "T:Microsoft.CodeAnalysis.Text.TextLineCollection",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextLineCollection.GetLinePositionSpan(Microsoft.CodeAnalysis.Text.TextSpan)\">\r\n    <summary>\r\n    Convert a <see cref=\"T:Microsoft.CodeAnalysis.Text.TextSpan\"/> to a <see cref=\"T:Microsoft.CodeAnalysis.Text.LinePositionSpan\"/>.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.LinePosition : position": ""
                },
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public int GetPosition(LinePosition position)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextLineCollection.GetPosition(Microsoft.CodeAnalysis.Text.LinePosition)\">\r\n    <summary>\r\n    Convert a <see cref=\"T:Microsoft.CodeAnalysis.Text.LinePosition\"/> to a position.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 60
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.LinePosition : position": ""
                },
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public int GetPosition(LinePosition position)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextLineCollection.GetPosition(Microsoft.CodeAnalysis.Text.LinePosition)\">\r\n    <summary>\r\n    Convert a <see cref=\"T:Microsoft.CodeAnalysis.Text.LinePosition\"/> to a position.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 60
              },
              "Id": "M:Microsoft.CodeAnalysis.Text.TextLineCollection.GetPosition(Microsoft.CodeAnalysis.Text.LinePosition)",
              "Parent": "T:Microsoft.CodeAnalysis.Text.TextLineCollection",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextLineCollection.GetPosition(Microsoft.CodeAnalysis.Text.LinePosition)\">\r\n    <summary>\r\n    Convert a <see cref=\"T:Microsoft.CodeAnalysis.Text.LinePosition\"/> to a position.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.LinePositionSpan : span": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Text.TextSpan": ""
                },
                "Content": "public TextSpan GetTextSpan(LinePositionSpan span)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextLineCollection.GetTextSpan(Microsoft.CodeAnalysis.Text.LinePositionSpan)\">\r\n    <summary>\r\n    Convert a <see cref=\"T:Microsoft.CodeAnalysis.Text.LinePositionSpan\"/> to <see cref=\"T:Microsoft.CodeAnalysis.Text.TextSpan\"/>.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 68
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.LinePositionSpan : span": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Text.TextSpan": ""
                },
                "Content": "public TextSpan GetTextSpan(LinePositionSpan span)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextLineCollection.GetTextSpan(Microsoft.CodeAnalysis.Text.LinePositionSpan)\">\r\n    <summary>\r\n    Convert a <see cref=\"T:Microsoft.CodeAnalysis.Text.LinePositionSpan\"/> to <see cref=\"T:Microsoft.CodeAnalysis.Text.TextSpan\"/>.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 68
              },
              "Id": "M:Microsoft.CodeAnalysis.Text.TextLineCollection.GetTextSpan(Microsoft.CodeAnalysis.Text.LinePositionSpan)",
              "Parent": "T:Microsoft.CodeAnalysis.Text.TextLineCollection",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextLineCollection.GetTextSpan(Microsoft.CodeAnalysis.Text.LinePositionSpan)\">\r\n    <summary>\r\n    Convert a <see cref=\"T:Microsoft.CodeAnalysis.Text.LinePositionSpan\"/> to <see cref=\"T:Microsoft.CodeAnalysis.Text.TextSpan\"/>.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Int32 : position": ""
                },
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public abstract int IndexOf(int position);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextLineCollection.IndexOf(System.Int32)\">\r\n    <summary>\r\n    The index of the TextLine that encompasses the character position.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 28
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Int32 : position": ""
                },
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public abstract int IndexOf(int position);",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextLineCollection.IndexOf(System.Int32)\">\r\n    <summary>\r\n    The index of the TextLine that encompasses the character position.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 28
              },
              "Id": "M:Microsoft.CodeAnalysis.Text.TextLineCollection.IndexOf(System.Int32)",
              "Parent": "T:Microsoft.CodeAnalysis.Text.TextLineCollection",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextLineCollection.IndexOf(System.Int32)\">\r\n    <summary>\r\n    The index of the TextLine that encompasses the character position.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Int32",
                "Content": "public abstract int Count",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.TextLineCollection.Count\">\r\n    <summary>\r\n    The count of <see cref=\"T:Microsoft.CodeAnalysis.Text.TextLine\"/> items in the collection\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 18
              },
              "Syntax": {
                "PropertyType": "T:System.Int32",
                "Content": "public abstract int Count",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.TextLineCollection.Count\">\r\n    <summary>\r\n    The count of <see cref=\"T:Microsoft.CodeAnalysis.Text.TextLine\"/> items in the collection\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 18
              },
              "Id": "P:Microsoft.CodeAnalysis.Text.TextLineCollection.Count",
              "Parent": "T:Microsoft.CodeAnalysis.Text.TextLineCollection",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.TextLineCollection.Count\">\r\n    <summary>\r\n    The count of <see cref=\"T:Microsoft.CodeAnalysis.Text.TextLine\"/> items in the collection\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Text\\TextLineCollection.cs",
          "InheritanceHierarchy": [
            "T:System.Object"
          ],
          "Syntax": {
            "Content": "public abstract class TextLineCollection",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.Text.TextLineCollection\">\r\n    <summary>\r\n    Abstract base class for <see cref=\"T:Microsoft.CodeAnalysis.Text.TextLine\"/> collections.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.Text.TextLineCollection",
          "Parent": "N:Microsoft.CodeAnalysis.Text",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.Text.TextLineCollection\">\r\n    <summary>\r\n    Abstract base class for <see cref=\"T:Microsoft.CodeAnalysis.Text.TextLine\"/> collections.\r\n    </summary>\r\n</member>\r\n"
        }
      ],
      "Structs": [
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.LinePosition : other": ""
                },
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public int CompareTo(LinePosition other)",
                "XmlDocumentation": "",
                "StartLine": 128
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.LinePosition : other": ""
                },
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public int CompareTo(LinePosition other)",
                "XmlDocumentation": "",
                "StartLine": 128
              },
              "Id": "M:Microsoft.CodeAnalysis.Text.LinePosition.CompareTo(Microsoft.CodeAnalysis.Text.LinePosition)",
              "Parent": "T:Microsoft.CodeAnalysis.Text.LinePosition",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.LinePosition : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool Equals(LinePosition other)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.LinePosition.Equals(Microsoft.CodeAnalysis.Text.LinePosition)\">\r\n    <summary>\r\n    Determines whether two <see cref=\"T:Microsoft.CodeAnalysis.Text.LinePosition\"/> are the same.\r\n    </summary>\r\n    <param name=\"other\">The object to compare.</param>\r\n</member>\r\n",
                "StartLine": 97
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.LinePosition : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool Equals(LinePosition other)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.LinePosition.Equals(Microsoft.CodeAnalysis.Text.LinePosition)\">\r\n    <summary>\r\n    Determines whether two <see cref=\"T:Microsoft.CodeAnalysis.Text.LinePosition\"/> are the same.\r\n    </summary>\r\n    <param name=\"other\">The object to compare.</param>\r\n</member>\r\n",
                "StartLine": 97
              },
              "Id": "M:Microsoft.CodeAnalysis.Text.LinePosition.Equals(Microsoft.CodeAnalysis.Text.LinePosition)",
              "Parent": "T:Microsoft.CodeAnalysis.Text.LinePosition",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.LinePosition.Equals(Microsoft.CodeAnalysis.Text.LinePosition)\">\r\n    <summary>\r\n    Determines whether two <see cref=\"T:Microsoft.CodeAnalysis.Text.LinePosition\"/> are the same.\r\n    </summary>\r\n    <param name=\"other\">The object to compare.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Object : obj": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public override bool Equals(object obj)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.LinePosition.Equals(System.Object)\">\r\n    <summary>\r\n    Determines whether two <see cref=\"T:Microsoft.CodeAnalysis.Text.LinePosition\"/> are the same.\r\n    </summary>\r\n    <param name=\"obj\">The object to compare.</param>\r\n</member>\r\n",
                "StartLine": 106
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Object : obj": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public override bool Equals(object obj)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.LinePosition.Equals(System.Object)\">\r\n    <summary>\r\n    Determines whether two <see cref=\"T:Microsoft.CodeAnalysis.Text.LinePosition\"/> are the same.\r\n    </summary>\r\n    <param name=\"obj\">The object to compare.</param>\r\n</member>\r\n",
                "StartLine": 106
              },
              "Id": "M:Microsoft.CodeAnalysis.Text.LinePosition.Equals(System.Object)",
              "Parent": "T:Microsoft.CodeAnalysis.Text.LinePosition",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.LinePosition.Equals(System.Object)\">\r\n    <summary>\r\n    Determines whether two <see cref=\"T:Microsoft.CodeAnalysis.Text.LinePosition\"/> are the same.\r\n    </summary>\r\n    <param name=\"obj\">The object to compare.</param>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public override int GetHashCode()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.LinePosition.GetHashCode\">\r\n    <summary>\r\n    Provides a hash function for <see cref=\"T:Microsoft.CodeAnalysis.Text.LinePosition\"/>.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 114
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public override int GetHashCode()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.LinePosition.GetHashCode\">\r\n    <summary>\r\n    Provides a hash function for <see cref=\"T:Microsoft.CodeAnalysis.Text.LinePosition\"/>.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 114
              },
              "Id": "M:Microsoft.CodeAnalysis.Text.LinePosition.GetHashCode",
              "Parent": "T:Microsoft.CodeAnalysis.Text.LinePosition",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.LinePosition.GetHashCode\">\r\n    <summary>\r\n    Provides a hash function for <see cref=\"T:Microsoft.CodeAnalysis.Text.LinePosition\"/>.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public override string ToString()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.LinePosition.ToString\">\r\n    <summary>\r\n    Provides a string representation for <see cref=\"T:Microsoft.CodeAnalysis.Text.LinePosition\"/>.\r\n    </summary>\r\n    <example>0,10</example>\r\n</member>\r\n",
                "StartLine": 123
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public override string ToString()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.LinePosition.ToString\">\r\n    <summary>\r\n    Provides a string representation for <see cref=\"T:Microsoft.CodeAnalysis.Text.LinePosition\"/>.\r\n    </summary>\r\n    <example>0,10</example>\r\n</member>\r\n",
                "StartLine": 123
              },
              "Id": "M:Microsoft.CodeAnalysis.Text.LinePosition.ToString",
              "Parent": "T:Microsoft.CodeAnalysis.Text.LinePosition",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.LinePosition.ToString\">\r\n    <summary>\r\n    Provides a string representation for <see cref=\"T:Microsoft.CodeAnalysis.Text.LinePosition\"/>.\r\n    </summary>\r\n    <example>0,10</example>\r\n</member>\r\n"
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "Zero",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.Text.LinePosition.Zero\">\r\n    <summary>\r\n    A <see cref=\"T:Microsoft.CodeAnalysis.Text.LinePosition\"/> that represents position 0 at line 0.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 15
              },
              "Id": "F:Microsoft.CodeAnalysis.Text.LinePosition.Zero",
              "Parent": "T:Microsoft.CodeAnalysis.Text.LinePosition",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.Text.LinePosition.Zero\">\r\n    <summary>\r\n    A <see cref=\"T:Microsoft.CodeAnalysis.Text.LinePosition\"/> that represents position 0 at line 0.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Int32",
                "Content": "public int Character",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.LinePosition.Character\">\r\n    <summary>\r\n    The character position within the line.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 72
              },
              "Syntax": {
                "PropertyType": "T:System.Int32",
                "Content": "public int Character",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.LinePosition.Character\">\r\n    <summary>\r\n    The character position within the line.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 72
              },
              "Id": "P:Microsoft.CodeAnalysis.Text.LinePosition.Character",
              "Parent": "T:Microsoft.CodeAnalysis.Text.LinePosition",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.LinePosition.Character\">\r\n    <summary>\r\n    The character position within the line.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Int32",
                "Content": "public int Line",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.LinePosition.Line\">\r\n    <summary>\r\n    The line number. The first line in a file is defined as line 0 (zero based line numbering).\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 64
              },
              "Syntax": {
                "PropertyType": "T:System.Int32",
                "Content": "public int Line",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.LinePosition.Line\">\r\n    <summary>\r\n    The line number. The first line in a file is defined as line 0 (zero based line numbering).\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 64
              },
              "Id": "P:Microsoft.CodeAnalysis.Text.LinePosition.Line",
              "Parent": "T:Microsoft.CodeAnalysis.Text.LinePosition",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.LinePosition.Line\">\r\n    <summary>\r\n    The line number. The first line in a file is defined as line 0 (zero based line numbering).\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Constructors": [
            {
              "ConstructorSyntax": {
                "Parameters": {
                  "T:System.Int32 : character": "",
                  "T:System.Int32 : line": ""
                },
                "Content": "public LinePosition(int line, int character)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.LinePosition.#ctor(System.Int32,System.Int32)\">\r\n    <summary>\r\n    Initializes a new instance of a <see cref=\"T:Microsoft.CodeAnalysis.Text.LinePosition\"/> with the given line and character.\r\n    </summary>\r\n    <param name=\"line\">\r\n    The line of the line position. The first line in a file is defined as line 0 (zero based line numbering).\r\n    </param>\r\n    <param name=\"character\">\r\n    The character position in the line.\r\n    </param>\r\n    <exception cref=\"T:System.ArgumentOutOfRangeException\"><paramref name=\"line\"/> or <paramref name=\"character\"/> is less than zero. </exception>\r\n</member>\r\n",
                "StartLine": 30
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Int32 : character": "",
                  "T:System.Int32 : line": ""
                },
                "Content": "public LinePosition(int line, int character)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.LinePosition.#ctor(System.Int32,System.Int32)\">\r\n    <summary>\r\n    Initializes a new instance of a <see cref=\"T:Microsoft.CodeAnalysis.Text.LinePosition\"/> with the given line and character.\r\n    </summary>\r\n    <param name=\"line\">\r\n    The line of the line position. The first line in a file is defined as line 0 (zero based line numbering).\r\n    </param>\r\n    <param name=\"character\">\r\n    The character position in the line.\r\n    </param>\r\n    <exception cref=\"T:System.ArgumentOutOfRangeException\"><paramref name=\"line\"/> or <paramref name=\"character\"/> is less than zero. </exception>\r\n</member>\r\n",
                "StartLine": 30
              },
              "Id": "M:Microsoft.CodeAnalysis.Text.LinePosition.#ctor(System.Int32,System.Int32)",
              "Parent": "T:Microsoft.CodeAnalysis.Text.LinePosition",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.LinePosition.#ctor(System.Int32,System.Int32)\">\r\n    <summary>\r\n    Initializes a new instance of a <see cref=\"T:Microsoft.CodeAnalysis.Text.LinePosition\"/> with the given line and character.\r\n    </summary>\r\n    <param name=\"line\">\r\n    The line of the line position. The first line in a file is defined as line 0 (zero based line numbering).\r\n    </param>\r\n    <param name=\"character\">\r\n    The character position in the line.\r\n    </param>\r\n    <exception cref=\"T:System.ArgumentOutOfRangeException\"><paramref name=\"line\"/> or <paramref name=\"character\"/> is less than zero. </exception>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Text\\LinePosition.cs",
          "InheritanceHierarchy": [
            "T:System.Object",
            "T:System.ValueType"
          ],
          "Syntax": {
            "Content": "public struct LinePosition",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.Text.LinePosition\">\r\n    <summary>\r\n    Immutable representation of a line number and position within a SourceText instance.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.Text.LinePosition",
          "Parent": "N:Microsoft.CodeAnalysis.Text",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.Text.LinePosition\">\r\n    <summary>\r\n    Immutable representation of a line number and position within a SourceText instance.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.LinePositionSpan : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool Equals(LinePositionSpan other)",
                "XmlDocumentation": "",
                "StartLine": 53
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.LinePositionSpan : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool Equals(LinePositionSpan other)",
                "XmlDocumentation": "",
                "StartLine": 53
              },
              "Id": "M:Microsoft.CodeAnalysis.Text.LinePositionSpan.Equals(Microsoft.CodeAnalysis.Text.LinePositionSpan)",
              "Parent": "T:Microsoft.CodeAnalysis.Text.LinePositionSpan",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Object : obj": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public override bool Equals(object obj)",
                "XmlDocumentation": "",
                "StartLine": 48
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Object : obj": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public override bool Equals(object obj)",
                "XmlDocumentation": "",
                "StartLine": 48
              },
              "Id": "M:Microsoft.CodeAnalysis.Text.LinePositionSpan.Equals(System.Object)",
              "Parent": "T:Microsoft.CodeAnalysis.Text.LinePositionSpan",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public override int GetHashCode()",
                "XmlDocumentation": "",
                "StartLine": 59
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public override int GetHashCode()",
                "XmlDocumentation": "",
                "StartLine": 59
              },
              "Id": "M:Microsoft.CodeAnalysis.Text.LinePositionSpan.GetHashCode",
              "Parent": "T:Microsoft.CodeAnalysis.Text.LinePositionSpan",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public override string ToString()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.LinePositionSpan.ToString\">\r\n    <summary>\r\n    Provides a string representation for <see cref=\"T:Microsoft.CodeAnalysis.Text.LinePositionSpan\"/>.\r\n    </summary>\r\n    <example>(0,0)-(5,6)</example>\r\n</member>\r\n",
                "StartLine": 78
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public override string ToString()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.LinePositionSpan.ToString\">\r\n    <summary>\r\n    Provides a string representation for <see cref=\"T:Microsoft.CodeAnalysis.Text.LinePositionSpan\"/>.\r\n    </summary>\r\n    <example>(0,0)-(5,6)</example>\r\n</member>\r\n",
                "StartLine": 78
              },
              "Id": "M:Microsoft.CodeAnalysis.Text.LinePositionSpan.ToString",
              "Parent": "T:Microsoft.CodeAnalysis.Text.LinePositionSpan",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.LinePositionSpan.ToString\">\r\n    <summary>\r\n    Provides a string representation for <see cref=\"T:Microsoft.CodeAnalysis.Text.LinePositionSpan\"/>.\r\n    </summary>\r\n    <example>(0,0)-(5,6)</example>\r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Text.LinePosition",
                "Content": "public LinePosition End",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.LinePositionSpan.End\">\r\n    <summary>\r\n    Gets the end position of the span.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 43
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Text.LinePosition",
                "Content": "public LinePosition End",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.LinePositionSpan.End\">\r\n    <summary>\r\n    Gets the end position of the span.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 43
              },
              "Id": "P:Microsoft.CodeAnalysis.Text.LinePositionSpan.End",
              "Parent": "T:Microsoft.CodeAnalysis.Text.LinePositionSpan",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.LinePositionSpan.End\">\r\n    <summary>\r\n    Gets the end position of the span.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Text.LinePosition",
                "Content": "public LinePosition Start",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.LinePositionSpan.Start\">\r\n    <summary>\r\n    Gets the start position of the span.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 35
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Text.LinePosition",
                "Content": "public LinePosition Start",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.LinePositionSpan.Start\">\r\n    <summary>\r\n    Gets the start position of the span.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 35
              },
              "Id": "P:Microsoft.CodeAnalysis.Text.LinePositionSpan.Start",
              "Parent": "T:Microsoft.CodeAnalysis.Text.LinePositionSpan",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.LinePositionSpan.Start\">\r\n    <summary>\r\n    Gets the start position of the span.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Constructors": [
            {
              "ConstructorSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.LinePosition : end": "",
                  "T:Microsoft.CodeAnalysis.Text.LinePosition : start": ""
                },
                "Content": "public LinePositionSpan(LinePosition start, LinePosition end)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.LinePositionSpan.#ctor(Microsoft.CodeAnalysis.Text.LinePosition,Microsoft.CodeAnalysis.Text.LinePosition)\">\r\n    <summary>\r\n    Creates <see cref=\"T:Microsoft.CodeAnalysis.Text.LinePositionSpan\"/>.\r\n    </summary>\r\n    <param name=\"start\">Start position.</param>\r\n    <param name=\"end\">End position.</param>\r\n    <exception cref=\"T:System.ArgumentException\"><paramref name=\"end\"/> preceeds <paramref name=\"start\"/>.</exception>\r\n</member>\r\n",
                "StartLine": 21
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.LinePosition : end": "",
                  "T:Microsoft.CodeAnalysis.Text.LinePosition : start": ""
                },
                "Content": "public LinePositionSpan(LinePosition start, LinePosition end)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.LinePositionSpan.#ctor(Microsoft.CodeAnalysis.Text.LinePosition,Microsoft.CodeAnalysis.Text.LinePosition)\">\r\n    <summary>\r\n    Creates <see cref=\"T:Microsoft.CodeAnalysis.Text.LinePositionSpan\"/>.\r\n    </summary>\r\n    <param name=\"start\">Start position.</param>\r\n    <param name=\"end\">End position.</param>\r\n    <exception cref=\"T:System.ArgumentException\"><paramref name=\"end\"/> preceeds <paramref name=\"start\"/>.</exception>\r\n</member>\r\n",
                "StartLine": 21
              },
              "Id": "M:Microsoft.CodeAnalysis.Text.LinePositionSpan.#ctor(Microsoft.CodeAnalysis.Text.LinePosition,Microsoft.CodeAnalysis.Text.LinePosition)",
              "Parent": "T:Microsoft.CodeAnalysis.Text.LinePositionSpan",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.LinePositionSpan.#ctor(Microsoft.CodeAnalysis.Text.LinePosition,Microsoft.CodeAnalysis.Text.LinePosition)\">\r\n    <summary>\r\n    Creates <see cref=\"T:Microsoft.CodeAnalysis.Text.LinePositionSpan\"/>.\r\n    </summary>\r\n    <param name=\"start\">Start position.</param>\r\n    <param name=\"end\">End position.</param>\r\n    <exception cref=\"T:System.ArgumentException\"><paramref name=\"end\"/> preceeds <paramref name=\"start\"/>.</exception>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Text\\LinePositionSpan.cs",
          "InheritanceHierarchy": [
            "T:System.Object",
            "T:System.ValueType"
          ],
          "Syntax": {
            "Content": "public struct LinePositionSpan",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.Text.LinePositionSpan\">\r\n    <summary>\r\n    Immutable span represented by a pair of line number and index within the line.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.Text.LinePositionSpan",
          "Parent": "N:Microsoft.CodeAnalysis.Text",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.Text.LinePositionSpan\">\r\n    <summary>\r\n    Immutable span represented by a pair of line number and index within the line.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.TextChange : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool Equals(TextChange other)",
                "XmlDocumentation": "",
                "StartLine": 54
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.TextChange : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool Equals(TextChange other)",
                "XmlDocumentation": "",
                "StartLine": 54
              },
              "Id": "M:Microsoft.CodeAnalysis.Text.TextChange.Equals(Microsoft.CodeAnalysis.Text.TextChange)",
              "Parent": "T:Microsoft.CodeAnalysis.Text.TextChange",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Object : obj": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public override bool Equals(object obj)",
                "XmlDocumentation": "",
                "StartLine": 49
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Object : obj": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public override bool Equals(object obj)",
                "XmlDocumentation": "",
                "StartLine": 49
              },
              "Id": "M:Microsoft.CodeAnalysis.Text.TextChange.Equals(System.Object)",
              "Parent": "T:Microsoft.CodeAnalysis.Text.TextChange",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public override int GetHashCode()",
                "XmlDocumentation": "",
                "StartLine": 61
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public override int GetHashCode()",
                "XmlDocumentation": "",
                "StartLine": 61
              },
              "Id": "M:Microsoft.CodeAnalysis.Text.TextChange.GetHashCode",
              "Parent": "T:Microsoft.CodeAnalysis.Text.TextChange",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public override string ToString()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextChange.ToString\">\r\n    <summary>\r\n    Provides a string representation for <see cref=\"T:Microsoft.CodeAnalysis.Text.TextChange\"/>.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 44
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public override string ToString()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextChange.ToString\">\r\n    <summary>\r\n    Provides a string representation for <see cref=\"T:Microsoft.CodeAnalysis.Text.TextChange\"/>.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 44
              },
              "Id": "M:Microsoft.CodeAnalysis.Text.TextChange.ToString",
              "Parent": "T:Microsoft.CodeAnalysis.Text.TextChange",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextChange.ToString\">\r\n    <summary>\r\n    Provides a string representation for <see cref=\"T:Microsoft.CodeAnalysis.Text.TextChange\"/>.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "NoChanges",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.Text.TextChange.NoChanges\">\r\n    <summary>\r\n    An empty set of changes.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 88
              },
              "Id": "F:Microsoft.CodeAnalysis.Text.TextChange.NoChanges",
              "Parent": "T:Microsoft.CodeAnalysis.Text.TextChange",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.Text.TextChange.NoChanges\">\r\n    <summary>\r\n    An empty set of changes.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:System.String",
                "Content": "public string NewText",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.TextChange.NewText\">\r\n    <summary>\r\n    The new text.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 22
              },
              "Syntax": {
                "PropertyType": "T:System.String",
                "Content": "public string NewText",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.TextChange.NewText\">\r\n    <summary>\r\n    The new text.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 22
              },
              "Id": "P:Microsoft.CodeAnalysis.Text.TextChange.NewText",
              "Parent": "T:Microsoft.CodeAnalysis.Text.TextChange",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.TextChange.NewText\">\r\n    <summary>\r\n    The new text.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Text.TextSpan",
                "Content": "public TextSpan Span",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.TextChange.Span\">\r\n    <summary>\r\n    The original span of the changed text. \r\n    </summary>\r\n</member>\r\n",
                "StartLine": 17
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Text.TextSpan",
                "Content": "public TextSpan Span",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.TextChange.Span\">\r\n    <summary>\r\n    The original span of the changed text. \r\n    </summary>\r\n</member>\r\n",
                "StartLine": 17
              },
              "Id": "P:Microsoft.CodeAnalysis.Text.TextChange.Span",
              "Parent": "T:Microsoft.CodeAnalysis.Text.TextChange",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.TextChange.Span\">\r\n    <summary>\r\n    The original span of the changed text. \r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Constructors": [
            {
              "ConstructorSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.TextSpan : span": "",
                  "T:System.String : newText": ""
                },
                "Content": "public TextChange(TextSpan span, string newText): this ()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextChange.#ctor(Microsoft.CodeAnalysis.Text.TextSpan,System.String)\">\r\n    <summary>\r\n    Initializes a new instance of <see cref=\"T:Microsoft.CodeAnalysis.Text.TextChange\"/>\r\n    </summary>\r\n    <param name=\"span\">The original span of the changed text.</param>\r\n    <param name=\"newText\">The new text.</param>\r\n</member>\r\n",
                "StartLine": 29
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.TextSpan : span": "",
                  "T:System.String : newText": ""
                },
                "Content": "public TextChange(TextSpan span, string newText): this ()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextChange.#ctor(Microsoft.CodeAnalysis.Text.TextSpan,System.String)\">\r\n    <summary>\r\n    Initializes a new instance of <see cref=\"T:Microsoft.CodeAnalysis.Text.TextChange\"/>\r\n    </summary>\r\n    <param name=\"span\">The original span of the changed text.</param>\r\n    <param name=\"newText\">The new text.</param>\r\n</member>\r\n",
                "StartLine": 29
              },
              "Id": "M:Microsoft.CodeAnalysis.Text.TextChange.#ctor(Microsoft.CodeAnalysis.Text.TextSpan,System.String)",
              "Parent": "T:Microsoft.CodeAnalysis.Text.TextChange",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextChange.#ctor(Microsoft.CodeAnalysis.Text.TextSpan,System.String)\">\r\n    <summary>\r\n    Initializes a new instance of <see cref=\"T:Microsoft.CodeAnalysis.Text.TextChange\"/>\r\n    </summary>\r\n    <param name=\"span\">The original span of the changed text.</param>\r\n    <param name=\"newText\">The new text.</param>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Text\\TextChange.cs",
          "InheritanceHierarchy": [
            "T:System.Object",
            "T:System.ValueType"
          ],
          "Syntax": {
            "Content": "public struct TextChange",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.Text.TextChange\">\r\n    <summary>\r\n    Describes a single change when a particular span is replaced with a new text.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.Text.TextChange",
          "Parent": "N:Microsoft.CodeAnalysis.Text",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.Text.TextChange\">\r\n    <summary>\r\n    Describes a single change when a particular span is replaced with a new text.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Text.TextChangeRange} : changes": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Text.TextChangeRange": ""
                },
                "Content": "public static TextChangeRange Collapse(IEnumerable<TextChangeRange> changes)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextChangeRange.Collapse(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Text.TextChangeRange})\">\r\n    <summary>\r\n    Collapse a set of <see cref=\"T:Microsoft.CodeAnalysis.Text.TextChangeRange\"/>s into a single encompassing range.  If\r\n    the set of ranges provided is empty, an empty range is returned.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 93
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Text.TextChangeRange} : changes": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Text.TextChangeRange": ""
                },
                "Content": "public static TextChangeRange Collapse(IEnumerable<TextChangeRange> changes)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextChangeRange.Collapse(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Text.TextChangeRange})\">\r\n    <summary>\r\n    Collapse a set of <see cref=\"T:Microsoft.CodeAnalysis.Text.TextChangeRange\"/>s into a single encompassing range.  If\r\n    the set of ranges provided is empty, an empty range is returned.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 93
              },
              "Id": "M:Microsoft.CodeAnalysis.Text.TextChangeRange.Collapse(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Text.TextChangeRange})",
              "Parent": "T:Microsoft.CodeAnalysis.Text.TextChangeRange",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextChangeRange.Collapse(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Text.TextChangeRange})\">\r\n    <summary>\r\n    Collapse a set of <see cref=\"T:Microsoft.CodeAnalysis.Text.TextChangeRange\"/>s into a single encompassing range.  If\r\n    the set of ranges provided is empty, an empty range is returned.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.TextChangeRange : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool Equals(TextChangeRange other)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextChangeRange.Equals(Microsoft.CodeAnalysis.Text.TextChangeRange)\">\r\n    <summary>\r\n    Compares current instance of <see cref=\"T:Microsoft.CodeAnalysis.Text.TextChangeRange\"/> to another.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 44
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.TextChangeRange : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool Equals(TextChangeRange other)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextChangeRange.Equals(Microsoft.CodeAnalysis.Text.TextChangeRange)\">\r\n    <summary>\r\n    Compares current instance of <see cref=\"T:Microsoft.CodeAnalysis.Text.TextChangeRange\"/> to another.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 44
              },
              "Id": "M:Microsoft.CodeAnalysis.Text.TextChangeRange.Equals(Microsoft.CodeAnalysis.Text.TextChangeRange)",
              "Parent": "T:Microsoft.CodeAnalysis.Text.TextChangeRange",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextChangeRange.Equals(Microsoft.CodeAnalysis.Text.TextChangeRange)\">\r\n    <summary>\r\n    Compares current instance of <see cref=\"T:Microsoft.CodeAnalysis.Text.TextChangeRange\"/> to another.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Object : obj": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public override bool Equals(object obj)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextChangeRange.Equals(System.Object)\">\r\n    <summary>\r\n    Compares current instance of <see cref=\"T:Microsoft.CodeAnalysis.Text.TextChangeRange\"/> to another.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 54
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Object : obj": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public override bool Equals(object obj)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextChangeRange.Equals(System.Object)\">\r\n    <summary>\r\n    Compares current instance of <see cref=\"T:Microsoft.CodeAnalysis.Text.TextChangeRange\"/> to another.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 54
              },
              "Id": "M:Microsoft.CodeAnalysis.Text.TextChangeRange.Equals(System.Object)",
              "Parent": "T:Microsoft.CodeAnalysis.Text.TextChangeRange",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextChangeRange.Equals(System.Object)\">\r\n    <summary>\r\n    Compares current instance of <see cref=\"T:Microsoft.CodeAnalysis.Text.TextChangeRange\"/> to another.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public override int GetHashCode()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextChangeRange.GetHashCode\">\r\n    <summary>\r\n    Provides hash code for current instnce of <see cref=\"T:Microsoft.CodeAnalysis.Text.TextChangeRange\"/>.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n",
                "StartLine": 63
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public override int GetHashCode()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextChangeRange.GetHashCode\">\r\n    <summary>\r\n    Provides hash code for current instnce of <see cref=\"T:Microsoft.CodeAnalysis.Text.TextChangeRange\"/>.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n",
                "StartLine": 63
              },
              "Id": "M:Microsoft.CodeAnalysis.Text.TextChangeRange.GetHashCode",
              "Parent": "T:Microsoft.CodeAnalysis.Text.TextChangeRange",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextChangeRange.GetHashCode\">\r\n    <summary>\r\n    Provides hash code for current instnce of <see cref=\"T:Microsoft.CodeAnalysis.Text.TextChangeRange\"/>.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "NoChanges",
                "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.Text.TextChangeRange.NoChanges\">\r\n    <summary>\r\n    An empty set of changes.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 87
              },
              "Id": "F:Microsoft.CodeAnalysis.Text.TextChangeRange.NoChanges",
              "Parent": "T:Microsoft.CodeAnalysis.Text.TextChangeRange",
              "XmlDocumentation": "<member name=\"F:Microsoft.CodeAnalysis.Text.TextChangeRange.NoChanges\">\r\n    <summary>\r\n    An empty set of changes.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Int32",
                "Content": "public int NewLength",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.TextChangeRange.NewLength\">\r\n    <summary>\r\n    Width of the span after the edit.  A 0 here would represent a delete\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 22
              },
              "Syntax": {
                "PropertyType": "T:System.Int32",
                "Content": "public int NewLength",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.TextChangeRange.NewLength\">\r\n    <summary>\r\n    Width of the span after the edit.  A 0 here would represent a delete\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 22
              },
              "Id": "P:Microsoft.CodeAnalysis.Text.TextChangeRange.NewLength",
              "Parent": "T:Microsoft.CodeAnalysis.Text.TextChangeRange",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.TextChangeRange.NewLength\">\r\n    <summary>\r\n    Width of the span after the edit.  A 0 here would represent a delete\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Text.TextSpan",
                "Content": "public TextSpan Span",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.TextChangeRange.Span\">\r\n    <summary>\r\n    The span of text before the edit which is being changed\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 17
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Text.TextSpan",
                "Content": "public TextSpan Span",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.TextChangeRange.Span\">\r\n    <summary>\r\n    The span of text before the edit which is being changed\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 17
              },
              "Id": "P:Microsoft.CodeAnalysis.Text.TextChangeRange.Span",
              "Parent": "T:Microsoft.CodeAnalysis.Text.TextChangeRange",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.TextChangeRange.Span\">\r\n    <summary>\r\n    The span of text before the edit which is being changed\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Constructors": [
            {
              "ConstructorSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.TextSpan : span": "",
                  "T:System.Int32 : newLength": ""
                },
                "Content": "public TextChangeRange(TextSpan span, int newLength): this ()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextChangeRange.#ctor(Microsoft.CodeAnalysis.Text.TextSpan,System.Int32)\">\r\n    <summary>\r\n    Initializes a new instance of <see cref=\"T:Microsoft.CodeAnalysis.Text.TextChangeRange\"/>.\r\n    </summary>\r\n    <param name=\"span\"></param>\r\n    <param name=\"newLength\"></param>\r\n</member>\r\n",
                "StartLine": 29
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.TextSpan : span": "",
                  "T:System.Int32 : newLength": ""
                },
                "Content": "public TextChangeRange(TextSpan span, int newLength): this ()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextChangeRange.#ctor(Microsoft.CodeAnalysis.Text.TextSpan,System.Int32)\">\r\n    <summary>\r\n    Initializes a new instance of <see cref=\"T:Microsoft.CodeAnalysis.Text.TextChangeRange\"/>.\r\n    </summary>\r\n    <param name=\"span\"></param>\r\n    <param name=\"newLength\"></param>\r\n</member>\r\n",
                "StartLine": 29
              },
              "Id": "M:Microsoft.CodeAnalysis.Text.TextChangeRange.#ctor(Microsoft.CodeAnalysis.Text.TextSpan,System.Int32)",
              "Parent": "T:Microsoft.CodeAnalysis.Text.TextChangeRange",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextChangeRange.#ctor(Microsoft.CodeAnalysis.Text.TextSpan,System.Int32)\">\r\n    <summary>\r\n    Initializes a new instance of <see cref=\"T:Microsoft.CodeAnalysis.Text.TextChangeRange\"/>.\r\n    </summary>\r\n    <param name=\"span\"></param>\r\n    <param name=\"newLength\"></param>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Text\\TextChangeRange.cs",
          "InheritanceHierarchy": [
            "T:System.Object",
            "T:System.ValueType"
          ],
          "Syntax": {
            "Content": "public struct TextChangeRange",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.Text.TextChangeRange\">\r\n    <summary>\r\n    Represents the change to a span of text.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.Text.TextChangeRange",
          "Parent": "N:Microsoft.CodeAnalysis.Text",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.Text.TextChangeRange\">\r\n    <summary>\r\n    Represents the change to a span of text.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.TextLine : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool Equals(TextLine other)",
                "XmlDocumentation": "",
                "StartLine": 188
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.TextLine : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool Equals(TextLine other)",
                "XmlDocumentation": "",
                "StartLine": 188
              },
              "Id": "M:Microsoft.CodeAnalysis.Text.TextLine.Equals(Microsoft.CodeAnalysis.Text.TextLine)",
              "Parent": "T:Microsoft.CodeAnalysis.Text.TextLine",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Object : obj": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public override bool Equals(object obj)",
                "XmlDocumentation": "",
                "StartLine": 195
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Object : obj": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public override bool Equals(object obj)",
                "XmlDocumentation": "",
                "StartLine": 195
              },
              "Id": "M:Microsoft.CodeAnalysis.Text.TextLine.Equals(System.Object)",
              "Parent": "T:Microsoft.CodeAnalysis.Text.TextLine",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.SourceText : text": "",
                  "T:Microsoft.CodeAnalysis.Text.TextSpan : span": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Text.TextLine": ""
                },
                "Content": "public static TextLine FromSpan(SourceText text, TextSpan span)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextLine.FromSpan(Microsoft.CodeAnalysis.Text.SourceText,Microsoft.CodeAnalysis.Text.TextSpan)\">\r\n    <summary>\r\n    Creates a <see cref=\"T:Microsoft.CodeAnalysis.Text.TextLine\"/> instance.\r\n    </summary>\r\n    <param name=\"text\">The source text.</param>\r\n    <param name=\"span\">The span of the line.</param>\r\n    <returns>An instance of <see cref=\"T:Microsoft.CodeAnalysis.Text.TextLine\"/>.</returns>\r\n    <exception cref=\"T:System.ArgumentOutOfRangeException\">The span does not represent a text line.</exception>\r\n</member>\r\n",
                "StartLine": 31
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.SourceText : text": "",
                  "T:Microsoft.CodeAnalysis.Text.TextSpan : span": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Text.TextLine": ""
                },
                "Content": "public static TextLine FromSpan(SourceText text, TextSpan span)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextLine.FromSpan(Microsoft.CodeAnalysis.Text.SourceText,Microsoft.CodeAnalysis.Text.TextSpan)\">\r\n    <summary>\r\n    Creates a <see cref=\"T:Microsoft.CodeAnalysis.Text.TextLine\"/> instance.\r\n    </summary>\r\n    <param name=\"text\">The source text.</param>\r\n    <param name=\"span\">The span of the line.</param>\r\n    <returns>An instance of <see cref=\"T:Microsoft.CodeAnalysis.Text.TextLine\"/>.</returns>\r\n    <exception cref=\"T:System.ArgumentOutOfRangeException\">The span does not represent a text line.</exception>\r\n</member>\r\n",
                "StartLine": 31
              },
              "Id": "M:Microsoft.CodeAnalysis.Text.TextLine.FromSpan(Microsoft.CodeAnalysis.Text.SourceText,Microsoft.CodeAnalysis.Text.TextSpan)",
              "Parent": "T:Microsoft.CodeAnalysis.Text.TextLine",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextLine.FromSpan(Microsoft.CodeAnalysis.Text.SourceText,Microsoft.CodeAnalysis.Text.TextSpan)\">\r\n    <summary>\r\n    Creates a <see cref=\"T:Microsoft.CodeAnalysis.Text.TextLine\"/> instance.\r\n    </summary>\r\n    <param name=\"text\">The source text.</param>\r\n    <param name=\"span\">The span of the line.</param>\r\n    <returns>An instance of <see cref=\"T:Microsoft.CodeAnalysis.Text.TextLine\"/>.</returns>\r\n    <exception cref=\"T:System.ArgumentOutOfRangeException\">The span does not represent a text line.</exception>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public override int GetHashCode()",
                "XmlDocumentation": "",
                "StartLine": 205
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public override int GetHashCode()",
                "XmlDocumentation": "",
                "StartLine": 205
              },
              "Id": "M:Microsoft.CodeAnalysis.Text.TextLine.GetHashCode",
              "Parent": "T:Microsoft.CodeAnalysis.Text.TextLine",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public override string ToString()",
                "XmlDocumentation": "",
                "StartLine": 166
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public override string ToString()",
                "XmlDocumentation": "",
                "StartLine": 166
              },
              "Id": "M:Microsoft.CodeAnalysis.Text.TextLine.ToString",
              "Parent": "T:Microsoft.CodeAnalysis.Text.TextLine",
              "XmlDocumentation": ""
            }
          ],
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Int32",
                "Content": "public int End",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.TextLine.End\">\r\n    <summary>\r\n    Gets the end position of the line not including the line break.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 119
              },
              "Syntax": {
                "PropertyType": "T:System.Int32",
                "Content": "public int End",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.TextLine.End\">\r\n    <summary>\r\n    Gets the end position of the line not including the line break.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 119
              },
              "Id": "P:Microsoft.CodeAnalysis.Text.TextLine.End",
              "Parent": "T:Microsoft.CodeAnalysis.Text.TextLine",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.TextLine.End\">\r\n    <summary>\r\n    Gets the end position of the line not including the line break.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Int32",
                "Content": "public int EndIncludingLineBreak",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.TextLine.EndIncludingLineBreak\">\r\n    <summary>\r\n    Gets the end position of the line including the line break.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 145
              },
              "Syntax": {
                "PropertyType": "T:System.Int32",
                "Content": "public int EndIncludingLineBreak",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.TextLine.EndIncludingLineBreak\">\r\n    <summary>\r\n    Gets the end position of the line including the line break.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 145
              },
              "Id": "P:Microsoft.CodeAnalysis.Text.TextLine.EndIncludingLineBreak",
              "Parent": "T:Microsoft.CodeAnalysis.Text.TextLine",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.TextLine.EndIncludingLineBreak\">\r\n    <summary>\r\n    Gets the end position of the line including the line break.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Int32",
                "Content": "public int LineNumber",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.TextLine.LineNumber\">\r\n    <summary>\r\n    Gets the zero-based line number.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 93
              },
              "Syntax": {
                "PropertyType": "T:System.Int32",
                "Content": "public int LineNumber",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.TextLine.LineNumber\">\r\n    <summary>\r\n    Gets the zero-based line number.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 93
              },
              "Id": "P:Microsoft.CodeAnalysis.Text.TextLine.LineNumber",
              "Parent": "T:Microsoft.CodeAnalysis.Text.TextLine",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.TextLine.LineNumber\">\r\n    <summary>\r\n    Gets the zero-based line number.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Text.TextSpan",
                "Content": "public TextSpan Span",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.TextLine.Span\">\r\n    <summary>\r\n    Gets the line span not including the line break.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 153
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Text.TextSpan",
                "Content": "public TextSpan Span",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.TextLine.Span\">\r\n    <summary>\r\n    Gets the line span not including the line break.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 153
              },
              "Id": "P:Microsoft.CodeAnalysis.Text.TextLine.Span",
              "Parent": "T:Microsoft.CodeAnalysis.Text.TextLine",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.TextLine.Span\">\r\n    <summary>\r\n    Gets the line span not including the line break.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Text.TextSpan",
                "Content": "public TextSpan SpanIncludingLineBreak",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.TextLine.SpanIncludingLineBreak\">\r\n    <summary>\r\n    Gets the line span including the line break.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 161
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Text.TextSpan",
                "Content": "public TextSpan SpanIncludingLineBreak",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.TextLine.SpanIncludingLineBreak\">\r\n    <summary>\r\n    Gets the line span including the line break.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 161
              },
              "Id": "P:Microsoft.CodeAnalysis.Text.TextLine.SpanIncludingLineBreak",
              "Parent": "T:Microsoft.CodeAnalysis.Text.TextLine",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.TextLine.SpanIncludingLineBreak\">\r\n    <summary>\r\n    Gets the line span including the line break.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Int32",
                "Content": "public int Start",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.TextLine.Start\">\r\n    <summary>\r\n    Gets the start position of the line.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 111
              },
              "Syntax": {
                "PropertyType": "T:System.Int32",
                "Content": "public int Start",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.TextLine.Start\">\r\n    <summary>\r\n    Gets the start position of the line.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 111
              },
              "Id": "P:Microsoft.CodeAnalysis.Text.TextLine.Start",
              "Parent": "T:Microsoft.CodeAnalysis.Text.TextLine",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.TextLine.Start\">\r\n    <summary>\r\n    Gets the start position of the line.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Text.SourceText",
                "Content": "public SourceText Text",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.TextLine.Text\">\r\n    <summary>\r\n    Gets the source text.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 85
              },
              "Syntax": {
                "PropertyType": "T:Microsoft.CodeAnalysis.Text.SourceText",
                "Content": "public SourceText Text",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.TextLine.Text\">\r\n    <summary>\r\n    Gets the source text.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 85
              },
              "Id": "P:Microsoft.CodeAnalysis.Text.TextLine.Text",
              "Parent": "T:Microsoft.CodeAnalysis.Text.TextLine",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.TextLine.Text\">\r\n    <summary>\r\n    Gets the source text.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Text\\TextLine.cs",
          "InheritanceHierarchy": [
            "T:System.Object",
            "T:System.ValueType"
          ],
          "Syntax": {
            "Content": "public struct TextLine",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.Text.TextLine\">\r\n    <summary>\r\n    Information about the character boundaries of a single line of text.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.Text.TextLine",
          "Parent": "N:Microsoft.CodeAnalysis.Text",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.Text.TextLine\">\r\n    <summary>\r\n    Information about the character boundaries of a single line of text.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.TextSpan : other": ""
                },
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public int CompareTo(TextSpan other)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextSpan.CompareTo(Microsoft.CodeAnalysis.Text.TextSpan)\">\r\n    <summary>\r\n    Compares current instance of <see cref=\"T:Microsoft.CodeAnalysis.Text.TextSpan\"/> with another.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 268
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.TextSpan : other": ""
                },
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public int CompareTo(TextSpan other)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextSpan.CompareTo(Microsoft.CodeAnalysis.Text.TextSpan)\">\r\n    <summary>\r\n    Compares current instance of <see cref=\"T:Microsoft.CodeAnalysis.Text.TextSpan\"/> with another.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 268
              },
              "Id": "M:Microsoft.CodeAnalysis.Text.TextSpan.CompareTo(Microsoft.CodeAnalysis.Text.TextSpan)",
              "Parent": "T:Microsoft.CodeAnalysis.Text.TextSpan",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextSpan.CompareTo(Microsoft.CodeAnalysis.Text.TextSpan)\">\r\n    <summary>\r\n    Compares current instance of <see cref=\"T:Microsoft.CodeAnalysis.Text.TextSpan\"/> with another.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.TextSpan : span": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool Contains(TextSpan span)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextSpan.Contains(Microsoft.CodeAnalysis.Text.TextSpan)\">\r\n    <summary>\r\n    Determines whether <paramref name=\"span\"/> falls completely within this span.\r\n    </summary>\r\n    <param name=\"span\">\r\n    The span to check.\r\n    </param>\r\n    <returns>\r\n    <c>true</c> if the specified span falls completely within this span, otherwise <c>false</c>.\r\n    </returns>\r\n</member>\r\n",
                "StartLine": 104
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.TextSpan : span": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool Contains(TextSpan span)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextSpan.Contains(Microsoft.CodeAnalysis.Text.TextSpan)\">\r\n    <summary>\r\n    Determines whether <paramref name=\"span\"/> falls completely within this span.\r\n    </summary>\r\n    <param name=\"span\">\r\n    The span to check.\r\n    </param>\r\n    <returns>\r\n    <c>true</c> if the specified span falls completely within this span, otherwise <c>false</c>.\r\n    </returns>\r\n</member>\r\n",
                "StartLine": 104
              },
              "Id": "M:Microsoft.CodeAnalysis.Text.TextSpan.Contains(Microsoft.CodeAnalysis.Text.TextSpan)",
              "Parent": "T:Microsoft.CodeAnalysis.Text.TextSpan",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextSpan.Contains(Microsoft.CodeAnalysis.Text.TextSpan)\">\r\n    <summary>\r\n    Determines whether <paramref name=\"span\"/> falls completely within this span.\r\n    </summary>\r\n    <param name=\"span\">\r\n    The span to check.\r\n    </param>\r\n    <returns>\r\n    <c>true</c> if the specified span falls completely within this span, otherwise <c>false</c>.\r\n    </returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Int32 : position": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool Contains(int position)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextSpan.Contains(System.Int32)\">\r\n    <summary>\r\n    Determines whether the position lies within the span.\r\n    </summary>\r\n    <param name=\"position\">\r\n    The position to check.\r\n    </param>\r\n    <returns>\r\n    <c>true</c> if the position is greater than or equal to Start and strictly less \r\n    than End, otherwise <c>false</c>.\r\n    </returns>\r\n</member>\r\n",
                "StartLine": 90
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Int32 : position": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool Contains(int position)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextSpan.Contains(System.Int32)\">\r\n    <summary>\r\n    Determines whether the position lies within the span.\r\n    </summary>\r\n    <param name=\"position\">\r\n    The position to check.\r\n    </param>\r\n    <returns>\r\n    <c>true</c> if the position is greater than or equal to Start and strictly less \r\n    than End, otherwise <c>false</c>.\r\n    </returns>\r\n</member>\r\n",
                "StartLine": 90
              },
              "Id": "M:Microsoft.CodeAnalysis.Text.TextSpan.Contains(System.Int32)",
              "Parent": "T:Microsoft.CodeAnalysis.Text.TextSpan",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextSpan.Contains(System.Int32)\">\r\n    <summary>\r\n    Determines whether the position lies within the span.\r\n    </summary>\r\n    <param name=\"position\">\r\n    The position to check.\r\n    </param>\r\n    <returns>\r\n    <c>true</c> if the position is greater than or equal to Start and strictly less \r\n    than End, otherwise <c>false</c>.\r\n    </returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.TextSpan : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool Equals(TextSpan other)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextSpan.Equals(Microsoft.CodeAnalysis.Text.TextSpan)\">\r\n    <summary>\r\n    Determines if current instance of <see cref=\"T:Microsoft.CodeAnalysis.Text.TextSpan\"/> is equal to another.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 236
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.TextSpan : other": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool Equals(TextSpan other)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextSpan.Equals(Microsoft.CodeAnalysis.Text.TextSpan)\">\r\n    <summary>\r\n    Determines if current instance of <see cref=\"T:Microsoft.CodeAnalysis.Text.TextSpan\"/> is equal to another.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 236
              },
              "Id": "M:Microsoft.CodeAnalysis.Text.TextSpan.Equals(Microsoft.CodeAnalysis.Text.TextSpan)",
              "Parent": "T:Microsoft.CodeAnalysis.Text.TextSpan",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextSpan.Equals(Microsoft.CodeAnalysis.Text.TextSpan)\">\r\n    <summary>\r\n    Determines if current instance of <see cref=\"T:Microsoft.CodeAnalysis.Text.TextSpan\"/> is equal to another.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Object : obj": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public override bool Equals(object obj)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextSpan.Equals(System.Object)\">\r\n    <summary>\r\n    Determines if current instance of <see cref=\"T:Microsoft.CodeAnalysis.Text.TextSpan\"/> is equal to another.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 244
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Object : obj": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public override bool Equals(object obj)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextSpan.Equals(System.Object)\">\r\n    <summary>\r\n    Determines if current instance of <see cref=\"T:Microsoft.CodeAnalysis.Text.TextSpan\"/> is equal to another.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 244
              },
              "Id": "M:Microsoft.CodeAnalysis.Text.TextSpan.Equals(System.Object)",
              "Parent": "T:Microsoft.CodeAnalysis.Text.TextSpan",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextSpan.Equals(System.Object)\">\r\n    <summary>\r\n    Determines if current instance of <see cref=\"T:Microsoft.CodeAnalysis.Text.TextSpan\"/> is equal to another.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Int32 : end": "",
                  "T:System.Int32 : start": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Text.TextSpan": ""
                },
                "Content": "public static TextSpan FromBounds(int start, int end)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextSpan.FromBounds(System.Int32,System.Int32)\">\r\n    <summary>\r\n    Creates a new <see cref=\"T:Microsoft.CodeAnalysis.Text.TextSpan\"/> from <paramref name=\"start\" /> and <paramref\r\n    name=\"end\"/> positions as opposed to a position and length.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 202
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Int32 : end": "",
                  "T:System.Int32 : start": ""
                },
                "Returns": {
                  "T:Microsoft.CodeAnalysis.Text.TextSpan": ""
                },
                "Content": "public static TextSpan FromBounds(int start, int end)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextSpan.FromBounds(System.Int32,System.Int32)\">\r\n    <summary>\r\n    Creates a new <see cref=\"T:Microsoft.CodeAnalysis.Text.TextSpan\"/> from <paramref name=\"start\" /> and <paramref\r\n    name=\"end\"/> positions as opposed to a position and length.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 202
              },
              "Id": "M:Microsoft.CodeAnalysis.Text.TextSpan.FromBounds(System.Int32,System.Int32)",
              "Parent": "T:Microsoft.CodeAnalysis.Text.TextSpan",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextSpan.FromBounds(System.Int32,System.Int32)\">\r\n    <summary>\r\n    Creates a new <see cref=\"T:Microsoft.CodeAnalysis.Text.TextSpan\"/> from <paramref name=\"start\" /> and <paramref\r\n    name=\"end\"/> positions as opposed to a position and length.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public override int GetHashCode()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextSpan.GetHashCode\">\r\n    <summary>\r\n    Produces a hash code for <see cref=\"T:Microsoft.CodeAnalysis.Text.TextSpan\"/>.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 252
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.Int32": ""
                },
                "Content": "public override int GetHashCode()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextSpan.GetHashCode\">\r\n    <summary>\r\n    Produces a hash code for <see cref=\"T:Microsoft.CodeAnalysis.Text.TextSpan\"/>.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 252
              },
              "Id": "M:Microsoft.CodeAnalysis.Text.TextSpan.GetHashCode",
              "Parent": "T:Microsoft.CodeAnalysis.Text.TextSpan",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextSpan.GetHashCode\">\r\n    <summary>\r\n    Produces a hash code for <see cref=\"T:Microsoft.CodeAnalysis.Text.TextSpan\"/>.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.TextSpan : span": ""
                },
                "Returns": {
                  "T:System.Nullable{Microsoft.CodeAnalysis.Text.TextSpan}": ""
                },
                "Content": "public TextSpan? Intersection(TextSpan span)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextSpan.Intersection(Microsoft.CodeAnalysis.Text.TextSpan)\">\r\n    <summary>\r\n    Returns the intersection with the given span, or null if there is no intersection.\r\n    </summary>\r\n    <param name=\"span\">\r\n    The span to check.\r\n    </param>\r\n    <returns>\r\n    The intersection of the spans, or null if the intersection is empty.\r\n    </returns>\r\n</member>\r\n",
                "StartLine": 188
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.TextSpan : span": ""
                },
                "Returns": {
                  "T:System.Nullable{Microsoft.CodeAnalysis.Text.TextSpan}": ""
                },
                "Content": "public TextSpan? Intersection(TextSpan span)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextSpan.Intersection(Microsoft.CodeAnalysis.Text.TextSpan)\">\r\n    <summary>\r\n    Returns the intersection with the given span, or null if there is no intersection.\r\n    </summary>\r\n    <param name=\"span\">\r\n    The span to check.\r\n    </param>\r\n    <returns>\r\n    The intersection of the spans, or null if the intersection is empty.\r\n    </returns>\r\n</member>\r\n",
                "StartLine": 188
              },
              "Id": "M:Microsoft.CodeAnalysis.Text.TextSpan.Intersection(Microsoft.CodeAnalysis.Text.TextSpan)",
              "Parent": "T:Microsoft.CodeAnalysis.Text.TextSpan",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextSpan.Intersection(Microsoft.CodeAnalysis.Text.TextSpan)\">\r\n    <summary>\r\n    Returns the intersection with the given span, or null if there is no intersection.\r\n    </summary>\r\n    <param name=\"span\">\r\n    The span to check.\r\n    </param>\r\n    <returns>\r\n    The intersection of the spans, or null if the intersection is empty.\r\n    </returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.TextSpan : span": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool IntersectsWith(TextSpan span)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextSpan.IntersectsWith(Microsoft.CodeAnalysis.Text.TextSpan)\">\r\n    <summary>\r\n    Determines whether <paramref name=\"span\"/> intersects this span. Two spans are considered to \r\n    intersect if they have positions in common or the end of one span \r\n    coincides with the start of the other span.\r\n    </summary>\r\n    <param name=\"span\">\r\n    The span to check.\r\n    </param>\r\n    <returns>\r\n    <c>true</c> if the spans intersect, otherwise <c>false</c>.\r\n    </returns>\r\n</member>\r\n",
                "StartLine": 158
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.TextSpan : span": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool IntersectsWith(TextSpan span)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextSpan.IntersectsWith(Microsoft.CodeAnalysis.Text.TextSpan)\">\r\n    <summary>\r\n    Determines whether <paramref name=\"span\"/> intersects this span. Two spans are considered to \r\n    intersect if they have positions in common or the end of one span \r\n    coincides with the start of the other span.\r\n    </summary>\r\n    <param name=\"span\">\r\n    The span to check.\r\n    </param>\r\n    <returns>\r\n    <c>true</c> if the spans intersect, otherwise <c>false</c>.\r\n    </returns>\r\n</member>\r\n",
                "StartLine": 158
              },
              "Id": "M:Microsoft.CodeAnalysis.Text.TextSpan.IntersectsWith(Microsoft.CodeAnalysis.Text.TextSpan)",
              "Parent": "T:Microsoft.CodeAnalysis.Text.TextSpan",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextSpan.IntersectsWith(Microsoft.CodeAnalysis.Text.TextSpan)\">\r\n    <summary>\r\n    Determines whether <paramref name=\"span\"/> intersects this span. Two spans are considered to \r\n    intersect if they have positions in common or the end of one span \r\n    coincides with the start of the other span.\r\n    </summary>\r\n    <param name=\"span\">\r\n    The span to check.\r\n    </param>\r\n    <returns>\r\n    <c>true</c> if the spans intersect, otherwise <c>false</c>.\r\n    </returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Int32 : position": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool IntersectsWith(int position)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextSpan.IntersectsWith(System.Int32)\">\r\n    <summary>\r\n    Determines whether <paramref name=\"position\"/> intersects this span. \r\n    A position is considered to intersect if it is between the start and\r\n    end positions (inclusive) of this span.\r\n    </summary>\r\n    <param name=\"position\">\r\n    The position to check.\r\n    </param>\r\n    <returns>\r\n    <c>true</c> if the position intersects, otherwise <c>false</c>.\r\n    </returns>\r\n</member>\r\n",
                "StartLine": 174
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Int32 : position": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool IntersectsWith(int position)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextSpan.IntersectsWith(System.Int32)\">\r\n    <summary>\r\n    Determines whether <paramref name=\"position\"/> intersects this span. \r\n    A position is considered to intersect if it is between the start and\r\n    end positions (inclusive) of this span.\r\n    </summary>\r\n    <param name=\"position\">\r\n    The position to check.\r\n    </param>\r\n    <returns>\r\n    <c>true</c> if the position intersects, otherwise <c>false</c>.\r\n    </returns>\r\n</member>\r\n",
                "StartLine": 174
              },
              "Id": "M:Microsoft.CodeAnalysis.Text.TextSpan.IntersectsWith(System.Int32)",
              "Parent": "T:Microsoft.CodeAnalysis.Text.TextSpan",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextSpan.IntersectsWith(System.Int32)\">\r\n    <summary>\r\n    Determines whether <paramref name=\"position\"/> intersects this span. \r\n    A position is considered to intersect if it is between the start and\r\n    end positions (inclusive) of this span.\r\n    </summary>\r\n    <param name=\"position\">\r\n    The position to check.\r\n    </param>\r\n    <returns>\r\n    <c>true</c> if the position intersects, otherwise <c>false</c>.\r\n    </returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.TextSpan : span": ""
                },
                "Returns": {
                  "T:System.Nullable{Microsoft.CodeAnalysis.Text.TextSpan}": ""
                },
                "Content": "public TextSpan? Overlap(TextSpan span)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextSpan.Overlap(Microsoft.CodeAnalysis.Text.TextSpan)\">\r\n    <summary>\r\n    Returns the overlap with the given span, or null if there is no overlap.\r\n    </summary>\r\n    <param name=\"span\">\r\n    The span to check.\r\n    </param>\r\n    <returns>\r\n    The overlap of the spans, or null if the overlap is empty.\r\n    </returns>\r\n</member>\r\n",
                "StartLine": 137
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.TextSpan : span": ""
                },
                "Returns": {
                  "T:System.Nullable{Microsoft.CodeAnalysis.Text.TextSpan}": ""
                },
                "Content": "public TextSpan? Overlap(TextSpan span)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextSpan.Overlap(Microsoft.CodeAnalysis.Text.TextSpan)\">\r\n    <summary>\r\n    Returns the overlap with the given span, or null if there is no overlap.\r\n    </summary>\r\n    <param name=\"span\">\r\n    The span to check.\r\n    </param>\r\n    <returns>\r\n    The overlap of the spans, or null if the overlap is empty.\r\n    </returns>\r\n</member>\r\n",
                "StartLine": 137
              },
              "Id": "M:Microsoft.CodeAnalysis.Text.TextSpan.Overlap(Microsoft.CodeAnalysis.Text.TextSpan)",
              "Parent": "T:Microsoft.CodeAnalysis.Text.TextSpan",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextSpan.Overlap(Microsoft.CodeAnalysis.Text.TextSpan)\">\r\n    <summary>\r\n    Returns the overlap with the given span, or null if there is no overlap.\r\n    </summary>\r\n    <param name=\"span\">\r\n    The span to check.\r\n    </param>\r\n    <returns>\r\n    The overlap of the spans, or null if the overlap is empty.\r\n    </returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.TextSpan : span": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool OverlapsWith(TextSpan span)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextSpan.OverlapsWith(Microsoft.CodeAnalysis.Text.TextSpan)\">\r\n    <summary>\r\n    Determines whether <paramref name=\"span\"/> overlaps this span. Two spans are considered to overlap \r\n    if they have positions in common and neither is empty. Empty spans do not overlap with any \r\n    other span.\r\n    </summary>\r\n    <param name=\"span\">\r\n    The span to check.\r\n    </param>\r\n    <returns>\r\n    <c>true</c> if the spans overlap, otherwise <c>false</c>.\r\n    </returns>\r\n</member>\r\n",
                "StartLine": 120
              },
              "Syntax": {
                "Parameters": {
                  "T:Microsoft.CodeAnalysis.Text.TextSpan : span": ""
                },
                "Returns": {
                  "T:System.Boolean": ""
                },
                "Content": "public bool OverlapsWith(TextSpan span)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextSpan.OverlapsWith(Microsoft.CodeAnalysis.Text.TextSpan)\">\r\n    <summary>\r\n    Determines whether <paramref name=\"span\"/> overlaps this span. Two spans are considered to overlap \r\n    if they have positions in common and neither is empty. Empty spans do not overlap with any \r\n    other span.\r\n    </summary>\r\n    <param name=\"span\">\r\n    The span to check.\r\n    </param>\r\n    <returns>\r\n    <c>true</c> if the spans overlap, otherwise <c>false</c>.\r\n    </returns>\r\n</member>\r\n",
                "StartLine": 120
              },
              "Id": "M:Microsoft.CodeAnalysis.Text.TextSpan.OverlapsWith(Microsoft.CodeAnalysis.Text.TextSpan)",
              "Parent": "T:Microsoft.CodeAnalysis.Text.TextSpan",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextSpan.OverlapsWith(Microsoft.CodeAnalysis.Text.TextSpan)\">\r\n    <summary>\r\n    Determines whether <paramref name=\"span\"/> overlaps this span. Two spans are considered to overlap \r\n    if they have positions in common and neither is empty. Empty spans do not overlap with any \r\n    other span.\r\n    </summary>\r\n    <param name=\"span\">\r\n    The span to check.\r\n    </param>\r\n    <returns>\r\n    <c>true</c> if the spans overlap, otherwise <c>false</c>.\r\n    </returns>\r\n</member>\r\n"
            },
            {
              "MethodSyntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public override string ToString()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextSpan.ToString\">\r\n    <summary>\r\n    Provides a string representation for <see cref=\"T:Microsoft.CodeAnalysis.Text.TextSpan\"/>.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 260
              },
              "Syntax": {
                "Parameters": {},
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public override string ToString()",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextSpan.ToString\">\r\n    <summary>\r\n    Provides a string representation for <see cref=\"T:Microsoft.CodeAnalysis.Text.TextSpan\"/>.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 260
              },
              "Id": "M:Microsoft.CodeAnalysis.Text.TextSpan.ToString",
              "Parent": "T:Microsoft.CodeAnalysis.Text.TextSpan",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextSpan.ToString\">\r\n    <summary>\r\n    Provides a string representation for <see cref=\"T:Microsoft.CodeAnalysis.Text.TextSpan\"/>.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Int32",
                "Content": "public int End",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.TextSpan.End\">\r\n    <summary>\r\n    End of the span.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 50
              },
              "Syntax": {
                "PropertyType": "T:System.Int32",
                "Content": "public int End",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.TextSpan.End\">\r\n    <summary>\r\n    End of the span.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 50
              },
              "Id": "P:Microsoft.CodeAnalysis.Text.TextSpan.End",
              "Parent": "T:Microsoft.CodeAnalysis.Text.TextSpan",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.TextSpan.End\">\r\n    <summary>\r\n    End of the span.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool IsEmpty",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.TextSpan.IsEmpty\">\r\n    <summary>\r\n    Determines whether or not the span is empty.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 72
              },
              "Syntax": {
                "PropertyType": "T:System.Boolean",
                "Content": "public bool IsEmpty",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.TextSpan.IsEmpty\">\r\n    <summary>\r\n    Determines whether or not the span is empty.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 72
              },
              "Id": "P:Microsoft.CodeAnalysis.Text.TextSpan.IsEmpty",
              "Parent": "T:Microsoft.CodeAnalysis.Text.TextSpan",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.TextSpan.IsEmpty\">\r\n    <summary>\r\n    Determines whether or not the span is empty.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Int32",
                "Content": "public int Length",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.TextSpan.Length\">\r\n    <summary>\r\n    Length of the span.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 61
              },
              "Syntax": {
                "PropertyType": "T:System.Int32",
                "Content": "public int Length",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.TextSpan.Length\">\r\n    <summary>\r\n    Length of the span.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 61
              },
              "Id": "P:Microsoft.CodeAnalysis.Text.TextSpan.Length",
              "Parent": "T:Microsoft.CodeAnalysis.Text.TextSpan",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.TextSpan.Length\">\r\n    <summary>\r\n    Length of the span.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "PropertySyntax": {
                "PropertyType": "T:System.Int32",
                "Content": "public int Start",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.TextSpan.Start\">\r\n    <summary>\r\n    Start point of the Span.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 39
              },
              "Syntax": {
                "PropertyType": "T:System.Int32",
                "Content": "public int Start",
                "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.TextSpan.Start\">\r\n    <summary>\r\n    Start point of the Span.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 39
              },
              "Id": "P:Microsoft.CodeAnalysis.Text.TextSpan.Start",
              "Parent": "T:Microsoft.CodeAnalysis.Text.TextSpan",
              "XmlDocumentation": "<member name=\"P:Microsoft.CodeAnalysis.Text.TextSpan.Start\">\r\n    <summary>\r\n    Start point of the Span.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Constructors": [
            {
              "ConstructorSyntax": {
                "Parameters": {
                  "T:System.Int32 : length": "",
                  "T:System.Int32 : start": ""
                },
                "Content": "public TextSpan(int start, int length)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextSpan.#ctor(System.Int32,System.Int32)\">\r\n    <summary>\r\n    Creates a TextSpan instance beginning with the position Start and having the Length\r\n    specified with <paramref name=\"length\" />.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 20
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Int32 : length": "",
                  "T:System.Int32 : start": ""
                },
                "Content": "public TextSpan(int start, int length)",
                "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextSpan.#ctor(System.Int32,System.Int32)\">\r\n    <summary>\r\n    Creates a TextSpan instance beginning with the position Start and having the Length\r\n    specified with <paramref name=\"length\" />.\r\n    </summary>\r\n</member>\r\n",
                "StartLine": 20
              },
              "Id": "M:Microsoft.CodeAnalysis.Text.TextSpan.#ctor(System.Int32,System.Int32)",
              "Parent": "T:Microsoft.CodeAnalysis.Text.TextSpan",
              "XmlDocumentation": "<member name=\"M:Microsoft.CodeAnalysis.Text.TextSpan.#ctor(System.Int32,System.Int32)\">\r\n    <summary>\r\n    Creates a TextSpan instance beginning with the position Start and having the Length\r\n    specified with <paramref name=\"length\" />.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "AllowedMemberTypes": [
            7,
            8,
            9,
            10,
            11
          ],
          "FilePath": "D:\\roslyn\\src\\Compilers\\Core\\Portable\\Text\\TextSpan.cs",
          "InheritanceHierarchy": [
            "T:System.Object",
            "T:System.ValueType"
          ],
          "Syntax": {
            "Content": "public struct TextSpan",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.Text.TextSpan\">\r\n    <summary>\r\n    Immutable abstract representation of a span of text.  For example, in an error diagnostic that reports a\r\n    location, it could come from a parsed string, text from a tool editor buffer, etc.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.Text.TextSpan",
          "Parent": "N:Microsoft.CodeAnalysis.Text",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.Text.TextSpan\">\r\n    <summary>\r\n    Immutable abstract representation of a span of text.  For example, in an error diagnostic that reports a\r\n    location, it could come from a parsed string, text from a tool editor buffer, etc.\r\n    </summary>\r\n</member>\r\n"
        }
      ],
      "Enums": [
        {
          "Syntax": {
            "Content": "public enum SourceHashAlgorithm",
            "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.Text.SourceHashAlgorithm\">\r\n    <summary>\r\n    Specifies a hash algorithms used for hashing source files.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.CodeAnalysis.Text.SourceHashAlgorithm",
          "Parent": "N:Microsoft.CodeAnalysis.Text",
          "XmlDocumentation": "<member name=\"T:Microsoft.CodeAnalysis.Text.SourceHashAlgorithm\">\r\n    <summary>\r\n    Specifies a hash algorithms used for hashing source files.\r\n    </summary>\r\n</member>\r\n"
        }
      ],
      "AllowedMemberTypes": [
        2,
        3,
        4,
        5,
        6
      ],
      "Id": "N:Microsoft.CodeAnalysis.Text",
      "Parent": "Microsoft.CodeAnalysis",
      "XmlDocumentation": ""
    },
    {
      "AllowedMemberTypes": [
        2,
        3,
        4,
        5,
        6
      ],
      "Id": "N:Roslyn.Utilities",
      "Parent": "Microsoft.CodeAnalysis",
      "XmlDocumentation": ""
    },
    {
      "AllowedMemberTypes": [
        2,
        3,
        4,
        5,
        6
      ],
      "Id": "N:System.Runtime.CompilerServices",
      "Parent": "Microsoft.CodeAnalysis",
      "XmlDocumentation": ""
    },
    {
      "AllowedMemberTypes": [
        2,
        3,
        4,
        5,
        6
      ],
      "Id": "N:System.Security",
      "Parent": "Microsoft.CodeAnalysis",
      "XmlDocumentation": ""
    }
  ],
  "Id": "Microsoft.CodeAnalysis",
  "MscorlibVersion": {
    "Major": 4
  }
}